{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Foliant! \u00b6 Foliant is a all-in-one documentation authoring tool. It lets you produce standalone documents in pdf and docx, as well as websites, from single Markdown source. Foliant is a higher order tool, which means it uses other programs to do its job. For pdf and docx, it uses Pandoc , for websites it uses MkDocs . Foliant preprocessors let you include parts of documents in other documents, show and hide content with flags, render diagrams from text, and much more. Logo made by Hand Drawn Goods from www.flaticon.com. Who Is It for? \u00b6 You\u2019ll love Foliant if you: need to ship documentation as pdf, docx, and website forms want to use Markdown with consistent extension system instead of custome syntax for every new bit of functionality like reStructuredText\u2019s extensibility and Asciidoc\u2019s flexibility, but actually would rather use Markdown want a tool that you can actually write custom extensions for without dealing with something as overengineered as Sphinx have documentation spread across many repos and want to reuse parts between documents Changelog \u00b6 1.0.11 \u00b6 Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. Pass the quiet flag to BaseParser() as an optional argument for using in config extensions. 1.0.10 \u00b6 Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed. 1.0.9 \u00b6 Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags. 1.0.8 \u00b6 Restore quiet mode. Add the output() method for using in preprocessors. 1.0.7 \u00b6 Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs. 1.0.6 \u00b6 CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor. 1.0.5 \u00b6 Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style. 1.0.4 \u00b6 Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions. 1.0.3 \u00b6 Fix critical issue when config parsing would fail if any config value contained non-latin characters. 1.0.2 \u00b6 Use README.md as package description. 1.0.1 \u00b6 Fix critical bug with CLI module caused by missing version definition in the root __init__.py file. 1.0.0 \u00b6 Complete rewrite.","title":"Welcome to Foliant!"},{"location":"#welcome-to-foliant","text":"Foliant is a all-in-one documentation authoring tool. It lets you produce standalone documents in pdf and docx, as well as websites, from single Markdown source. Foliant is a higher order tool, which means it uses other programs to do its job. For pdf and docx, it uses Pandoc , for websites it uses MkDocs . Foliant preprocessors let you include parts of documents in other documents, show and hide content with flags, render diagrams from text, and much more. Logo made by Hand Drawn Goods from www.flaticon.com.","title":"Welcome to Foliant!"},{"location":"#who-is-it-for","text":"You\u2019ll love Foliant if you: need to ship documentation as pdf, docx, and website forms want to use Markdown with consistent extension system instead of custome syntax for every new bit of functionality like reStructuredText\u2019s extensibility and Asciidoc\u2019s flexibility, but actually would rather use Markdown want a tool that you can actually write custom extensions for without dealing with something as overengineered as Sphinx have documentation spread across many repos and want to reuse parts between documents","title":"Who Is It for?"},{"location":"#changelog","text":"","title":"Changelog"},{"location":"#1011","text":"Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. Pass the quiet flag to BaseParser() as an optional argument for using in config extensions.","title":"1.0.11"},{"location":"#1010","text":"Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed.","title":"1.0.10"},{"location":"#109","text":"Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags.","title":"1.0.9"},{"location":"#108","text":"Restore quiet mode. Add the output() method for using in preprocessors.","title":"1.0.8"},{"location":"#107","text":"Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs.","title":"1.0.7"},{"location":"#106","text":"CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor.","title":"1.0.6"},{"location":"#105","text":"Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style.","title":"1.0.5"},{"location":"#104","text":"Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions.","title":"1.0.4"},{"location":"#103","text":"Fix critical issue when config parsing would fail if any config value contained non-latin characters.","title":"1.0.3"},{"location":"#102","text":"Use README.md as package description.","title":"1.0.2"},{"location":"#101","text":"Fix critical bug with CLI module caused by missing version definition in the root __init__.py file.","title":"1.0.1"},{"location":"#100","text":"Complete rewrite.","title":"1.0.0"},{"location":"installation/","text":"Installation \u00b6 Installing Foliant to your system can be split into three stages: installing Python with your system\u2019s package manager, installing Foliant with pip, and optionally installing Pandoc and TeXLive bundle. Below you\u2019ll find the instructions for three popular platforms: macOS, Windows, and Ubuntu. Alternatively, you can avoid installing Foliant and its dependencies on your system by using Docker and Docker Compose . macOS \u00b6 Install Python 3 with Homebrew: $ brew install python3 Install Foliant with pip: $ python3 -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and MacTeX with Homebrew: $ brew install pandoc mactex librsvg Windows \u00b6 Install Scoop package manager in PowerShell: $ iex ( new-object net.webclient ) .downloadstring ( 'https://get.scoop.sh' ) Install Python 3 with Scoop: $ scoop install python Install Foliant with pip: $ python -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and MikTeX with Scoop: $ scoop install pandoc latex Ubuntu \u00b6 Install Python 3 with apt. On 14.04 and 16.04: $ apt update && apt install -y python3 python3-pip On 14.04 and 16.04: $ add-apt-repository ppa:jonathonf/python-3.6 $ apt update && apt install -y python3 python3-pip Install Foliant with pip: $ python3.6 -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and TeXLive with apt and wget: $ apt update && apt install -y wget texlive-full librsvg2-bin $ wget https://github.com/jgm/pandoc/releases/download/2.0.5/pandoc-2.0.5-1-amd64.deb && dpkg -i pandoc-2.0.5-1-amd64.deb Docker \u00b6 $ docker pull foliant/foliant","title":"Installation"},{"location":"installation/#installation","text":"Installing Foliant to your system can be split into three stages: installing Python with your system\u2019s package manager, installing Foliant with pip, and optionally installing Pandoc and TeXLive bundle. Below you\u2019ll find the instructions for three popular platforms: macOS, Windows, and Ubuntu. Alternatively, you can avoid installing Foliant and its dependencies on your system by using Docker and Docker Compose .","title":"Installation"},{"location":"installation/#macos","text":"Install Python 3 with Homebrew: $ brew install python3 Install Foliant with pip: $ python3 -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and MacTeX with Homebrew: $ brew install pandoc mactex librsvg","title":"macOS"},{"location":"installation/#windows","text":"Install Scoop package manager in PowerShell: $ iex ( new-object net.webclient ) .downloadstring ( 'https://get.scoop.sh' ) Install Python 3 with Scoop: $ scoop install python Install Foliant with pip: $ python -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and MikTeX with Scoop: $ scoop install pandoc latex","title":"Windows"},{"location":"installation/#ubuntu","text":"Install Python 3 with apt. On 14.04 and 16.04: $ apt update && apt install -y python3 python3-pip On 14.04 and 16.04: $ add-apt-repository ppa:jonathonf/python-3.6 $ apt update && apt install -y python3 python3-pip Install Foliant with pip: $ python3.6 -m pip install foliant foliantcontrib.init If you plan to bake pdf or docx, install Pandoc and TeXLive with apt and wget: $ apt update && apt install -y wget texlive-full librsvg2-bin $ wget https://github.com/jgm/pandoc/releases/download/2.0.5/pandoc-2.0.5-1-amd64.deb && dpkg -i pandoc-2.0.5-1-amd64.deb","title":"Ubuntu"},{"location":"installation/#docker","text":"$ docker pull foliant/foliant","title":"Docker"},{"location":"quickstart/","text":"Quickstart \u00b6 In this tutorial, you\u2019ll learn how to use Foliant to build websites and pdf documents from a single Markdown source. You\u2019ll also learn how to use Foliant preprocessors. Create New Project \u00b6 All Foliant projects must adhere to a certain structure. Luckily, you don\u2019t have to memorize it thanks to Init extension. You should have installed it during Foliant installation and it\u2019s included in Foliant\u2019s default Docker image. To use it, run foliant init command: $ foliant init Enter the project name: Hello Foliant \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant To do the same with Docker, run: $ docker run --rm -it -v ` pwd ` :/usr/src/app -w /usr/src/app foliant/foliant init Enter the project name: Hello Foliant \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant Here\u2019s what this command created: $ cd hello-foliant $ tree . \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md 1 directory, 6 files foliant.yml is your project\u2019s config file. src directory is where the content of the project lives. Currently, there\u2019s just one file index.md . requirements.txt lists the Python packages required for the project: Foliant backends and preprocessors, MkDocs themes, and what not. The the Docker image for the project is built, these requirements are installed in it. Dockerfile and docker-compose.yml are necessary to build the project in a Docker container. Build Site \u00b6 In the project directory, run: $ foliant make site \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.mkdocs Or, with Docker Compose: $ docker-compose run --rm hello-foliant make site \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.mkdocs That\u2019s it! Your static, MkDocs-powered website is ready. To view it, use any web server, for example, Python\u2019s built-in one: $ cd Hello_Foliant-2018-01-23.mkdocs $ python -m http.server Serving HTTP on 0 .0.0.0 port 8000 ( http://0.0.0.0:8000/ ) ... Open localhost:8000 in your web browser. You should see something like this: Build Pdf \u00b6 Note To build pdfs with Pandoc, make sure you have it and TeXLive installed (see Installation ). In the project directory, run: $ foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.pdf To build pdf in Docker container, first uncomment foliant/foliant:pandoc in your project\u2019s Dockerfile : - FROM foliant/foliant + # FROM foliant/foliant # If you plan to bake PDFs, uncomment this line and comment the line above: - # FROM foliant/foliant:pandoc + FROM foliant/foliant:pandoc COPY requirements.txt . RUN pip3 install -r requirements.txt Note Run docker-compose build to rebuild the image from the new base image if you have previously run docker-compose run with the old one. Also, run it whenever you need to update the versions of the required packages from requirements.txt . Then, run this command in the project directory: $ docker-compose run --rm hello-foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.pdf Your standalone pdf documentation is ready! It should look something like this: Edit Content \u00b6 Your project\u2019s content lives in *.md files in src folder. You can split it between multiple files and subfolders. Foliant encourages pure Markdown syntax as described by John Gruber. Pandoc, MkDocs, and other backend-specific additions are allowed, but we strongly recommend to put them in <if></if> blocks . Create a file hello.md in src with the following content: # Hello Again This is regular text generated from regular Markdown . Foliant doesn \u2019 t force any * special * Markdown flavor . Open foliant.yml and add hello.md to chapters : title: Hello Foliant chapters: - index.md + - hello.md Rebuild the project to see the new page: $ docker-compose run --rm hello-foliant make site && docker-compose run --rm hello-foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-02-08.mkdocs \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-02-08.pdf And see the new page appear on the site and in the pdf document: Use Preprocessors \u00b6 Preprocessors is what makes Foliant special and extremely useful. Preprocessors are additional packages that, well, preprocess the source code of your project. You can do all kinds of stuff with preprocessors: include remote Markdown files or their parts in the source files render diagrams from textual description on build restructure the project source or compile it into a single file for a particular backend In fact, you have already used two preprocessors! Check the output of the foliant make commands and note the lines Applying preprocessor mkdocs and Applying preprocessor flatten . The first one informs you that the project source has been preprocessed with mkdocs preprocessor in order to make it compatible with MkDocs\u2019 requirements, and the second one tells you that flatten preprocessor was used to squash the project source into one a single file (because Pandoc only works with single files). These preprocessors where called by MkDocs and Pandoc backends respectively. You didn\u2019t have to install or activate them explicitly. Now, let\u2019s try to use a different kind of preprocessors, the ones that register new tags: Blockdiag . Embed Diagrams with Blockdiag \u00b6 Blockdiag is a Python app for generating diagrams. Blockdiag preprocessor extracts diagram descriptions from the project source and replaces them with the generated images. In hello.md , add the following lines: Foliant doesn\u2019t force any *special* Markdown flavor. + <seqdiag caption=\"This diagram is generated on the fly\"> + seqdiag { + \"foliant make site\" -> \"mkdocs preprocessor\" -> \"blockdiag preprocessor\" -> \"mkdocs backend\" -> site; + } + </seqdiag> Blockdiag preprocessor adds several tags to Foliant, each corresponding to a certain diagram type. Sequence diagrams are defined with <seqdiag></seqdiag> tag. This is what we used in the sample above. The diagram definition sits in the tag body and the diagram properties such as caption or format are defined as tag parameters. Rebuild the site with foliant make site and open it in the browser: Rebuild the pdf as well and see that the diagram there: Let\u2019s customize the look of the diagrams in our project by setting their properties in the config file. For example, let\u2019s use a custom font for labels. I\u2019m using the ever popular Comic Sans font, but you can pick any font that\u2019s available in .ttf format. Put the font file in the project directory and add the following lines to foliant.yml : preprocessors: - - blockdiag + - blockdiag: + params: + font: !path comic.ttf After a rebuild, the diagram on the site and in the pdf should look like this: There are many more params you can define for your diagrams. You can override global params for particluar diagrams in their tags. And by combining this preprocessor with Flags you can even set different params for different backends, for example build vector diagrams for pdf output and bitmap for site: This is a diagram that is rendered to `.png` in html and to `.pdf` in pdf: < <blockdiag format= \"<if targets=\" html\" > png </if> < <if targets= \"pdf\" > pdf < /if\"> ... </blockdiag> The possibilities acquired by combining different preprocessors are endless! Why Foliant Uses XML syntax for Preprocessor Tags It\u2019s common for Markdown-based tools to extend Markdown with custom syntax for additional functions. There\u2019s no standard for custom syntax in the Markdown spec, so every developer uses whatever syntax is available for them, different one for every new extension. In Foliant, we tried our best not to dive into this mess. Foliant aims to be an extensible platform, with many available preprocessors. So we needed one syntax for all preprocessors, but the one that was flexible enough to support them all. After trying many options, we settled with XML. Yes, normally you\u2019d have a nervous tick when you hear XML, and so would we, but this is one rare case where XML syntax belongs just right: it allows to provide tag body and named parameters it\u2019s familiar to every techwriter out there it\u2019s close enough to HTML, and HTML tags are actually allowed by the Markdown spec, so we\u2019re not even breaking the vanilla Markdown spec (almost) it\u2019s nicely highlighted in IDEs and text editors","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"In this tutorial, you\u2019ll learn how to use Foliant to build websites and pdf documents from a single Markdown source. You\u2019ll also learn how to use Foliant preprocessors.","title":"Quickstart"},{"location":"quickstart/#create-new-project","text":"All Foliant projects must adhere to a certain structure. Luckily, you don\u2019t have to memorize it thanks to Init extension. You should have installed it during Foliant installation and it\u2019s included in Foliant\u2019s default Docker image. To use it, run foliant init command: $ foliant init Enter the project name: Hello Foliant \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant To do the same with Docker, run: $ docker run --rm -it -v ` pwd ` :/usr/src/app -w /usr/src/app foliant/foliant init Enter the project name: Hello Foliant \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant Here\u2019s what this command created: $ cd hello-foliant $ tree . \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md 1 directory, 6 files foliant.yml is your project\u2019s config file. src directory is where the content of the project lives. Currently, there\u2019s just one file index.md . requirements.txt lists the Python packages required for the project: Foliant backends and preprocessors, MkDocs themes, and what not. The the Docker image for the project is built, these requirements are installed in it. Dockerfile and docker-compose.yml are necessary to build the project in a Docker container.","title":"Create New Project"},{"location":"quickstart/#build-site","text":"In the project directory, run: $ foliant make site \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.mkdocs Or, with Docker Compose: $ docker-compose run --rm hello-foliant make site \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.mkdocs That\u2019s it! Your static, MkDocs-powered website is ready. To view it, use any web server, for example, Python\u2019s built-in one: $ cd Hello_Foliant-2018-01-23.mkdocs $ python -m http.server Serving HTTP on 0 .0.0.0 port 8000 ( http://0.0.0.0:8000/ ) ... Open localhost:8000 in your web browser. You should see something like this:","title":"Build Site"},{"location":"quickstart/#build-pdf","text":"Note To build pdfs with Pandoc, make sure you have it and TeXLive installed (see Installation ). In the project directory, run: $ foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.pdf To build pdf in Docker container, first uncomment foliant/foliant:pandoc in your project\u2019s Dockerfile : - FROM foliant/foliant + # FROM foliant/foliant # If you plan to bake PDFs, uncomment this line and comment the line above: - # FROM foliant/foliant:pandoc + FROM foliant/foliant:pandoc COPY requirements.txt . RUN pip3 install -r requirements.txt Note Run docker-compose build to rebuild the image from the new base image if you have previously run docker-compose run with the old one. Also, run it whenever you need to update the versions of the required packages from requirements.txt . Then, run this command in the project directory: $ docker-compose run --rm hello-foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-01-23.pdf Your standalone pdf documentation is ready! It should look something like this:","title":"Build Pdf"},{"location":"quickstart/#edit-content","text":"Your project\u2019s content lives in *.md files in src folder. You can split it between multiple files and subfolders. Foliant encourages pure Markdown syntax as described by John Gruber. Pandoc, MkDocs, and other backend-specific additions are allowed, but we strongly recommend to put them in <if></if> blocks . Create a file hello.md in src with the following content: # Hello Again This is regular text generated from regular Markdown . Foliant doesn \u2019 t force any * special * Markdown flavor . Open foliant.yml and add hello.md to chapters : title: Hello Foliant chapters: - index.md + - hello.md Rebuild the project to see the new page: $ docker-compose run --rm hello-foliant make site && docker-compose run --rm hello-foliant make pdf \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-02-08.mkdocs \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2018-02-08.pdf And see the new page appear on the site and in the pdf document:","title":"Edit Content"},{"location":"quickstart/#use-preprocessors","text":"Preprocessors is what makes Foliant special and extremely useful. Preprocessors are additional packages that, well, preprocess the source code of your project. You can do all kinds of stuff with preprocessors: include remote Markdown files or their parts in the source files render diagrams from textual description on build restructure the project source or compile it into a single file for a particular backend In fact, you have already used two preprocessors! Check the output of the foliant make commands and note the lines Applying preprocessor mkdocs and Applying preprocessor flatten . The first one informs you that the project source has been preprocessed with mkdocs preprocessor in order to make it compatible with MkDocs\u2019 requirements, and the second one tells you that flatten preprocessor was used to squash the project source into one a single file (because Pandoc only works with single files). These preprocessors where called by MkDocs and Pandoc backends respectively. You didn\u2019t have to install or activate them explicitly. Now, let\u2019s try to use a different kind of preprocessors, the ones that register new tags: Blockdiag .","title":"Use Preprocessors"},{"location":"quickstart/#embed-diagrams-with-blockdiag","text":"Blockdiag is a Python app for generating diagrams. Blockdiag preprocessor extracts diagram descriptions from the project source and replaces them with the generated images. In hello.md , add the following lines: Foliant doesn\u2019t force any *special* Markdown flavor. + <seqdiag caption=\"This diagram is generated on the fly\"> + seqdiag { + \"foliant make site\" -> \"mkdocs preprocessor\" -> \"blockdiag preprocessor\" -> \"mkdocs backend\" -> site; + } + </seqdiag> Blockdiag preprocessor adds several tags to Foliant, each corresponding to a certain diagram type. Sequence diagrams are defined with <seqdiag></seqdiag> tag. This is what we used in the sample above. The diagram definition sits in the tag body and the diagram properties such as caption or format are defined as tag parameters. Rebuild the site with foliant make site and open it in the browser: Rebuild the pdf as well and see that the diagram there: Let\u2019s customize the look of the diagrams in our project by setting their properties in the config file. For example, let\u2019s use a custom font for labels. I\u2019m using the ever popular Comic Sans font, but you can pick any font that\u2019s available in .ttf format. Put the font file in the project directory and add the following lines to foliant.yml : preprocessors: - - blockdiag + - blockdiag: + params: + font: !path comic.ttf After a rebuild, the diagram on the site and in the pdf should look like this: There are many more params you can define for your diagrams. You can override global params for particluar diagrams in their tags. And by combining this preprocessor with Flags you can even set different params for different backends, for example build vector diagrams for pdf output and bitmap for site: This is a diagram that is rendered to `.png` in html and to `.pdf` in pdf: < <blockdiag format= \"<if targets=\" html\" > png </if> < <if targets= \"pdf\" > pdf < /if\"> ... </blockdiag> The possibilities acquired by combining different preprocessors are endless! Why Foliant Uses XML syntax for Preprocessor Tags It\u2019s common for Markdown-based tools to extend Markdown with custom syntax for additional functions. There\u2019s no standard for custom syntax in the Markdown spec, so every developer uses whatever syntax is available for them, different one for every new extension. In Foliant, we tried our best not to dive into this mess. Foliant aims to be an extensible platform, with many available preprocessors. So we needed one syntax for all preprocessors, but the one that was flexible enough to support them all. After trying many options, we settled with XML. Yes, normally you\u2019d have a nervous tick when you hear XML, and so would we, but this is one rare case where XML syntax belongs just right: it allows to provide tag body and named parameters it\u2019s familiar to every techwriter out there it\u2019s close enough to HTML, and HTML tags are actually allowed by the Markdown spec, so we\u2019re not even breaking the vanilla Markdown spec (almost) it\u2019s nicely highlighted in IDEs and text editors","title":"Embed Diagrams with Blockdiag"},{"location":"releases/","text":"History of Releases \u00b6 Here is the single linear history of releases of Foliant and its extensions. It\u2019s also available as an RSS feed . [2020-04-02] foliantcontrib.confluence 0.6.10 \u00b6 Disabled tabbed code blocks conversion because of conflicts. [2020-04-02] foliantcontrib.utils.preprocessor_ext 1.0.3 \u00b6 Add _process_all_files method for preprocessors without tags. [2020-04-01] foliantcontrib.testcoverage 0.1.1 \u00b6 Support meta 1.3.0 [2020-04-01] foliantcontrib.testcoverage 0.1.0 \u00b6 Initial release. [2020-04-01] foliantcontrib.metagraph 0.1.2 \u00b6 Metadata is now taken from src_dir to minimize possible conflicts with other preprocessors. [2020-03-27] foliantcontrib.metagraph 0.1.1 \u00b6 New parameter: draw_all , which controls which sections are included. [2020-03-26] foliantcontrib.metagraph 0.1.0 \u00b6 Initial release [2020-03-26] foliantcontrib.templateparser 1.0.3 \u00b6 Now meta dictionary is available inside templates under meta variable. Project's meta object is available inside templates under meta_object variable. [2020-03-26] foliantcontrib.meta 1.3.1 \u00b6 remove_meta now also trims whitespaces in the beginning of the file after removing YFM Main section's title is now set to first heading, if: the first heading is a 1-level heading (#), the first heading doesn't have meta. Fix: YFM was not included in meta in some cases [2020-03-25] foliantcontrib.confluence 0.6.8 \u00b6 Now foliant-anchors are always added even for new pages [2020-03-25] foliantcontrib.confluence 0.6.9 \u00b6 Introducing import from confluence into Foliant with confluence tag Fix: solved conflicts between inline comments and macros (including anchors) Fix: backend crashed if new page content was empty Markdown code blocks are now converted into code-block macros Markdown task lists are now converted into task-list macros New test_run option [2020-03-23] foliantcontrib.utils.combined_options 1.0.10 \u00b6 Fix: default dict was overriden after the first use. Allow to supply the list of priorities instead of just one priority. Priority for those option dictionaries, which are not mentioned in the priority param, are now defined by the order dictionaries are defined. [2020-03-12] foliantcontrib.testrail 1.1.11 \u00b6 Misprint fixed. [2020-03-12] foliantcontrib.testrail 1.1.10 \u00b6 Bug with template handling fixed. [2020-03-11] foliantcontrib.confluence 0.6.7 \u00b6 Fix another conflict with escapecode [2020-03-05] foliantcontrib.graphviz 1.1.3 \u00b6 Fix: as_image takes effect only with svg format. [2020-02-28] foliantcontrib.bindfigma 1.0.1 \u00b6 Add hyperlinks and multi_delimeter options. Output error messages to STDOUT. Minor improvements. [2020-02-12] foliantcontrib.alt_structure 0.1.2 \u00b6 Fix: Remove config check from init [2020-02-10] foliantcontrib.alt_structure 0.1.1 \u00b6 Initial release [2020-02-07] foliantcontrib.utils.combined_options 1.0.9 \u00b6 defaults now actually supply default value (before they were only used for validation) add None to possible type validation in val_type . [2020-02-06] foliantcontrib.mkdocs 1.0.11 \u00b6 Get captions for pages from workingdir instead of src_dir [2020-02-04] foliantcontrib.slate 1.0.8 \u00b6 Support meta 1.3 [2020-02-04] foliantcontrib.superlinks 1.0.3 \u00b6 Support meta 1.3 [2020-02-04] foliantcontrib.includes 1.1.9 \u00b6 Support meta 1.3. [2020-02-04] foliantcontrib.meta 1.3.0 \u00b6 Restructure modules to aid import errors. Meta-related functions and classes are now available independantly from foliant.meta package. [2020-02-04] foliantcontrib.confluence 0.6.6 \u00b6 Support meta 1.3 Now foliant-anchors are always added around uploaded content Anchors are now case insensitive [2020-02-03] foliantcontrib.meta 1.2.3 \u00b6 Add get_chapter method to Meta class. Add Developer's guide to readme. [2020-01-31] foliantcontrib.elasticsearch 1.0.2 \u00b6 Add format option. Use escape_html only for format: plaintext . [2020-01-31] foliantcontrib.elasticsearch 1.0.1 \u00b6 Add escape_html option. Perform actions delete , create by default. Fix HTML markup in Web application example. [2020-01-22] foliantcontrib.confluence 0.6.5 \u00b6 Fix: build crashed when several resolved inline comments referred to same string [2019-12-24] foliantcontrib.superlinks 1.0.2 \u00b6 add dependencies order check rename anchor parameter to id. add anchor parameter for possibly global anchor search. link to anchors in Confluence are now partly supported. [2019-12-24] foliantcontrib.utils.header_anchors 1.0.1 \u00b6 Add is_flat function to determine flat backends. [2019-12-24] foliantcontrib.anchors 1.0.4 \u00b6 Applied anchors are now checked from all chapters for flat backends. [2019-12-24] foliantcontrib.testrail 1.1.9 \u00b6 Function to get case data by id added. [2019-12-23] foliantcontrib.superlinks 1.0.1 \u00b6 Initial release [2019-12-20] foliantcontrib.utils.header_anchors 1.0.0 \u00b6 Initial release. [2019-12-20] foliantcontrib.anchors 1.0.3 \u00b6 Better regex patterns. Conflicts are now determined for each backend separately. Add confluence anchors. [2019-12-20] foliantcontrib.meta 1.2.2 \u00b6 Don't require empty line between heading and meta tag. Allow comments in YFM. Better patterns for sections detection. [2019-12-12] foliantcontrib.showcommits 1.0.1 \u00b6 Fix template processing. Log repo path. [2019-12-12] foliantcontrib.flatten 1.0.6 \u00b6 Rewrite local links (e.g. some_file.md#some_id \u2192 #some_id ). [2019-12-04] foliantcontrib.slate 1.0.7 \u00b6 Fix: images are preserved in the output, even from subfolders. YAML Front Matter from the sources is now ignored. [2019-12-02] foliantcontrib.init 1.0.8 \u00b6 Add comment to Dockerfile with option to use Foliant full image. Remove slugs from docker-compose. Now the service is always named foliant . [2019-11-22] foliantcontrib.meta 1.2.1 \u00b6 Fix bug with imports. [2019-11-21] foliantcontrib.meta 1.2.0 \u00b6 Support sections meta.yml format restructure [2019-11-21] foliantcontrib.confluence 0.6.4 \u00b6 Support meta 1.2. Now you can publish sections to confluence. [2019-11-21] foliantcontrib.includes 1.1.8 \u00b6 Support meta 1.2. [2019-11-20] foliantcontrib.imgcaptions 1.0.2 \u00b6 Fix: stylesheet_path only worked with the !project_path modifier. Add the template parameter to customize the caption HTML tag. [2019-11-09] foliantcontrib.mdtopdf 1.0.0 \u00b6 Initial release. [2019-11-06] foliantcontrib.ramldoc 1.0.1 \u00b6 Initial release [2019-10-28] foliantcontrib.aglio 1.0.0 \u00b6 Initial release [2019-10-25] foliantcontrib.slate 1.0.6 \u00b6 Fix bug with error catching introduced in 1.0.5 [2019-10-25] foliantcontrib.slate 1.0.5 \u00b6 Better error reporting. Fixes for working with includes. [2019-10-16] foliantcontrib.escapecode 1.0.2 \u00b6 Improve flexibility: add new actions, allow to override defaults. [2019-10-16] foliantcontrib.multiproject 1.0.12 \u00b6 Take into account the quiet flag. Require Foliant 1.0.11 for this reason. [2019-10-16] foliantcontrib.includes 1.1.7 \u00b6 Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. [2019-10-16] foliant 1.0.11 \u00b6 Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. Pass the quiet flag to BaseParser() as an optional argument for using in config extensions. [2019-10-15] foliantcontrib.subset 1.0.9 \u00b6 Fix incompatibilities with newer versions of modules: Cliar, PyYAML. [2019-10-10] foliantcontrib.multiproject 1.0.11 \u00b6 Allow recursive processing of nested subprojects. Allow to specify type (HTML/Markdown) and location for repo links. Fix incompatibility with new Cliar: key names should not contain hyphens. [2019-10-07] foliantcontrib.confluence 0.6.3 \u00b6 Remove resolved inline comments as they mix up with unresolved. [2019-10-04] foliantcontrib.mermaid 1.0.1 \u00b6 Better error reporting [2019-10-02] foliantcontrib.utils.combined_options 1.0.8 \u00b6 Fix validate_exists validator. [2019-10-01] foliantcontrib.confluence 0.6.2 \u00b6 Added parent_title parameter. Fix: images were not uploaded for new pages. [2019-10-01] foliantcontrib.multiproject 1.0.10 \u00b6 Allow the first heading to be located not in the beginning of a document. [2019-09-26] foliantcontrib.flatten 1.0.5 \u00b6 Add the keep_sources option to keep original files in the temporary working directory after flattening. [2019-09-25] foliantcontrib.confluence 0.6.0 \u00b6 Now content is put in place of foliant anchor or instead of foliant_start ... foliant_end anchors on the target page. If no anchors on page \u2014 content replaces the whole body. New modes (backwards compatibility is broken!). Now following files are available for debug in cache dir: 1. markdown before conversion to html. 2. Converted to HTML. 3. Final XHTML source which is uploaded to confluence. Working (but far from perfect) detection if file was changed. Only upload changed attachments. Updating attachments instead of deleting and uploading again. [2019-09-19] foliantcontrib.confluence 0.5.2 \u00b6 Completely rewrite restoring inline comments feature. Add restore_comments and resolve_if_changed emergency options. Allow insert raw confluence code (macros, etc) inside <raw_confluence> tag. [2019-09-19] foliantcontrib.history 1.0.8 \u00b6 Allow to ignore merge commits in from: commits mode. [2019-09-18] foliantcontrib.history 1.0.7 \u00b6 Allow to get repo names from README files. [2019-09-16] foliantcontrib.history 1.0.6 \u00b6 Fix some regex patterns. [2019-09-16] foliantcontrib.history 1.0.5 \u00b6 Allow to generate history based on tags and commits. [2019-09-13] foliantcontrib.history 1.0.4 \u00b6 Add templates for target Markdown headings and RSS items titles. [2019-09-13] foliantcontrib.history 1.0.3 \u00b6 Escape regex metacharacters in headings. [2019-09-10] foliantcontrib.epsconvert 1.0.7 \u00b6 Fix image reference detection pattern, other minor fixes. [2019-09-09] foliantcontrib.history 1.0.2 \u00b6 Do not generate common top-level heading of target Markdown content. [2019-09-06] foliantcontrib.history 1.0.1 \u00b6 Add RSS feed generation. [2019-08-28] foliantcontrib.includes 1.1.6 \u00b6 Escape regular expression metacharacters in starting and ending headings, IDs, modifiers. [2019-08-27] foliantcontrib.includes 1.1.5 \u00b6 Remove meta blocks from the included content. [2019-08-26] foliantcontrib.mkdocs 1.0.10 \u00b6 Fix pattern for heading detection. [2019-08-26] foliantcontrib.swaggerdoc 1.2.0 \u00b6 Add spec_path and spec_url parameters. All path tag parameters are now loaded relative to current file. Better logging and error reporting [2019-08-26] foliantcontrib.utils.combined_options 1.0.7 \u00b6 Add validate_exists validator. Add rel_path_convertor . [2019-08-26] foliantcontrib.customids 1.0.6 \u00b6 Allow to define custom styles for headings of each level. [2019-08-26] foliantcontrib.confluence 0.4.1 \u00b6 Fix: conflict with escape_code [2019-08-23] foliantcontrib.includes 1.1.4 \u00b6 Allow for the starting and ending headings to be 1-character long. [2019-08-23] foliantcontrib.confluence 0.4.0 \u00b6 Fix: attachments were not uploaded for nonexistent pages Change confluence api wrapper to atlassian-python-api Rename backend to confluence Better error reporting [2019-08-23] foliantcontrib.mkdocs 1.0.9 \u00b6 Allow the first heading to be located not in the beginning of a document. [2019-08-23] foliantcontrib.epsconvert 1.0.6 \u00b6 Bug fix: update current directory path before processing of Markdown file content, not after. [2019-08-22] foliantcontrib.imagemagick 1.0.2 \u00b6 Bug fix: update current directory path before processing of Markdown file content, not after. [2019-08-22] foliantcontrib.meta 1.1.0 \u00b6 Remove the sections entity. Restructure code. [2019-08-22] foliantcontrib.confluence 0.3.0 \u00b6 Fix bug with images. Add multiple modes and mode parameter. Add toc parameter to automatically insert toc. Fix: upload attachments before text update (this caused images to disappear after manually editing). [2019-08-20] foliantcontrib.meta 1.0.3 \u00b6 Add span to meta [2019-08-16] foliantcontrib.confluence 0.2.0 \u00b6 Allow to input login and/or password during build Added pandoc_path option Better logging and error catching [2019-08-16] foliantcontrib.utils.combined_options 1.0.6 \u00b6 Add check for required params. Add val_type validator to check for param types. Allow to set values in Options objects [2019-08-15] foliantcontrib.confluence 0.1.0 \u00b6 Initial release. [2019-08-14] foliantcontrib.includes 1.1.3 \u00b6 Allow to specify IDs of anchors in the from_id and to_id attributes. Support the to_end attribute. [2019-08-02] foliantcontrib.escapecode 1.0.1 \u00b6 Do not ignore diagram definitions. It should be possible to escape the tags used by diagram drawing preprocessors. If some preprocessors need to work with the content that is recognized as code, call UnescapeCode explicitly before them. [2019-08-01] foliantcontrib.replace 1.0.3 \u00b6 Fixed issue with PyYAML deprecated loader. [2019-08-01] foliantcontrib.mermaid 1.0.0 \u00b6 Initial release [2019-07-30] foliantcontrib.includes 1.1.2 \u00b6 Fix include statement regex pattern. Tags joined with | must be in non-capturing parentheses. [2019-07-30] foliant 1.0.10 \u00b6 Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed. [2019-07-30] foliantcontrib.includes 1.1.1 \u00b6 Support escape_code config option. Require Foliant 1.0.10 and escapecode preprocessor 1.0.0. Process sethead recursively. [2019-07-29] foliantcontrib.utils.preprocessor_ext 1.0.2 \u00b6 Fix output Remove get_options overriding, it's now implemented similarly in core [2019-07-16] foliantcontrib.bindsympli 1.0.14 \u00b6 Add width attribute to <sympli> tag. Refactor a little. [2019-07-15] foliantcontrib.slugs 1.0.1 \u00b6 Add !version and !commit_count YAML tags. [2019-07-09] foliantcontrib.docus 0.2.0 \u00b6 More flexible chapters parsing. Lists are now not mandatory. [2019-07-09] foliantcontrib.docus 0.1.0 \u00b6 Initial release. [2019-07-05] foliantcontrib.runcommands 1.0.1 \u00b6 Capture the output of an external command and write it to STDOUT. [2019-07-01] foliantcontrib.meta 1.0.2 \u00b6 Fix: subsections title may be specified in YFM; Fix: in subsections title was being cropped out [2019-07-01] foliantcontrib.project_graph 1.0.1 \u00b6 Rename rel attributes: rel_path to path , rel_id to id Relation types now don't implicitly go to edge labels. Add label explicitly from now on. Fixed: relations to !project_path and !rel_path didn't work. [2019-07-01] foliantcontrib.meta 1.0.1 \u00b6 Fix: seeds for main sections were not processed. Add debug messages for seeds processing. [2019-06-28] foliantcontrib.project_graph 1.0.0 \u00b6 Initial release. [2019-06-28] foliantcontrib.meta 1.0.0 \u00b6 Initial release. [2019-06-28] foliantcontrib.includes 1.1.0 \u00b6 Support Foliant 1.0.9. Add processing of !path , !project_path , and !rel_path modifiers (i.e. YAML tags) in attribute values of pseudo-XML tags inside the included content. Replace the values that preceded by these modifiers with absolute paths resolved depending on current context. Allow to specify the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to, with optional project_root attribute of the <include> tag. This can be necessary to resolve the !path and the !project_path modifiers in the included content correctly. Allow to specify all necessary parameters of each include statement as attribute values of pseudo-XML tags. Keep legacy syntax for backward compatibility. Update README. [2019-06-17] foliant 1.0.9 \u00b6 Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags. [2019-06-14] foliantcontrib.utils.preprocessor_ext 1.0.1 \u00b6 Support PyYAML 5.1 [2019-06-14] foliantcontrib.utils.combined_options 1.0.5 \u00b6 support PyYAML 5.1 [2019-06-14] foliantcontrib.templateparser 1.0.2 \u00b6 support PyYAML 5.1 [2019-06-14] foliantcontrib.bindsympli 1.0.13 \u00b6 Set 2-minutes timeout instead of default 30-seconds when launching Chromium. Use page.waitForSelector() instead of page.waitForNavigation() . Use custom sleep() function for intentional delays. [2019-06-13] foliantcontrib.badges 1.0.2 \u00b6 support params which alter badge look to be supplied in tag params [2019-06-11] foliantcontrib.badges 1.0.1 \u00b6 force img mode on pdf and docx add target parameter [2019-06-11] foliantcontrib.badges 1.0.0 \u00b6 Initial release [2019-06-10] foliantcontrib.admonitions 1.0.0 \u00b6 Initial release. [2019-05-20] foliantcontrib.graphviz 1.1.1 \u00b6 Remove src param. (Use includes instead) Allow separate tags fail. Preprocessor would issue warning and continue work. [2019-05-20] foliantcontrib.templateparser 1.0.1 \u00b6 add ext_context param for external file with context allow separate templates to fail, the preprocessor would issue warning and skip them [2019-05-20] foliantcontrib.utils.combined_options 1.0.4 \u00b6 Add path_convertor which converts string options to pathlib.PosixPath [2019-05-17] foliantcontrib.blockdiag 1.0.5 \u00b6 Attributes of pseudo-XML tags have higher priority than config file options. [2019-05-17] foliantcontrib.plantuml 1.0.6 \u00b6 Attributes of <plantuml> tag have higher priority than config file options. [2019-05-17] foliantcontrib.utils.preprocessor_ext 1.0.0 \u00b6 Initial release. [2019-05-15] foliantcontrib.utils.combined_options 1.0.3 \u00b6 add iter method to allow for param in options [2019-05-15] foliantcontrib.utils.combined_options 1.0.2 \u00b6 add '0'\\'1' to bool_convertor [2019-05-14] foliantcontrib.templateparser 1.0.0 \u00b6 Initial release [2019-04-30] foliantcontrib.bindsympli 1.0.12 \u00b6 Capture the output of the Puppeter-based script and write it to STDOUT. [2019-04-15] foliantcontrib.swaggerdoc 1.1.3 \u00b6 Fix issues with json and yaml. All spec files are now loaded with yaml loader. Change PyYAML to ruamel.yaml jinja mode is deprecated, widdershins is the default mode [2019-04-10] foliantcontrib.mkdocs 1.0.8 \u00b6 Escape control characters (double quotation marks, dollar signs, backticks) that may be used in system shell commands. [2019-04-10] foliantcontrib.pandoc 1.0.10 \u00b6 Add backticks to the set of characters that should be escaped. [2019-04-10] foliantcontrib.pandoc 1.0.9 \u00b6 Escape double quotation marks ( \" ) and dollar signs ( $ ) which may be used in PDF, docx, and TeX generation commands as parts of filenames, variable values, etc. Enclose filenames that may be used in commands into double quotes. [2019-04-05] foliantcontrib.includes 1.0.11 \u00b6 Take into account the results of work of preprocessors that may be applied before includes within a single Foliant project. Rewrite the currently processed Markdown file path with the path of corresponding file that is located inside the project source directory only if the currently processed Markdown file is located inside the temporary working directory and the included file is located outside the temporary working directory. Keep all paths unchanged in all other cases. [2019-03-27] foliantcontrib.graphviz 1.0.6 \u00b6 Added as_image option. [2019-03-21] foliantcontrib.anchors 1.0.2 \u00b6 Added preprocessor_ext for better warnings (and better code) [2019-03-21] foliantcontrib.anchors 1.0.1 \u00b6 Added 'element' option to customize anchor span element. [2019-03-21] foliantcontrib.anchors 1.0.0 \u00b6 Initial release [2019-03-21] foliantcontrib.utils.combined_options 1.0.1 \u00b6 Add boolean convertor [2019-03-14] foliantcontrib.notifier 1.0.0 \u00b6 Initial release. [2019-02-21] foliantcontrib.testrail 1.1.8 \u00b6 Hardcoded section headers processing removed. [2019-02-18] foliantcontrib.replace 1.0.2 \u00b6 Now it's possible to pass the lambda function from dictionary file. with_confirmation parameter added. [2019-02-15] foliantcontrib.csvtables 1.0.1 \u00b6 setup.py fixed. [2019-02-14] foliantcontrib.graphviz 1.0.4 \u00b6 Moved combined_options out [2019-02-14] foliantcontrib.apilinks 1.1.3 \u00b6 Moved combined_options into a submodule [2019-02-14] foliantcontrib.pgsqldoc 1.1.5 \u00b6 Move combined_options into another module [2019-02-14] foliantcontrib.utils.combined_options 1.0.0 \u00b6 Initial release. [2019-02-12] foliantcontrib.testrail 1.1.7 \u00b6 Sections exclusion fixed. [2019-02-08] foliantcontrib.testrail 1.1.6 \u00b6 Case structure output fixed if any problem occurs. [2019-02-01] foliantcontrib.testrail 1.1.5 \u00b6 Bug with test case table numbering when deleting empty objects fixed. Readme updated. [2019-01-21] foliantcontrib.apilinks 1.1.1 \u00b6 Added filename to warnings. [2019-01-10] foliantcontrib.bindsympli 1.0.11 \u00b6 Disable images downloading from design pages only, but not from login page. [2018-12-24] foliantcontrib.graphviz 1.0.2 \u00b6 Fixed external diagrams not reloading on change. Fixed external diagrams are not crashing preprocessor if the file is missing. [2018-12-20] foliantcontrib.bindsympli 1.0.10 \u00b6 Check if the design page exists and the image URL is valid. [2018-12-17] foliantcontrib.graphviz 1.0.1 \u00b6 Added 'src' tag option to load diagram source from external file. [2018-12-17] foliantcontrib.graphviz 1.0.0 \u00b6 Initial release [2018-12-13] foliantcontrib.apilinks 1.1.0 \u00b6 Prefixes are now case insensitive. Only prefixes which are defined are trimmed. New option only-defined-prefixes to ignore all prefixes which are not listed in config. Options renamed and regrouped. Breaks backward compatibility. Support of several reference pattern and properties (to catch models). Now search on API page for headers h1, h2, h3 and h4. [2018-12-06] foliantcontrib.subset 1.0.8 \u00b6 Remove forgotten unnecessary import. [2018-12-06] foliantcontrib.subset 1.0.7 \u00b6 Move the imports of the oyaml module directly into the methods that use it. [2018-12-06] foliantcontrib.bindsympli 1.0.9 \u00b6 Move the while loop from JavaScript code to Python code. Add the max_attempts config option. Require Foliant 1.0.8 because of using the utils.output() method. [2018-12-04] foliantcontrib.subset 1.0.6 \u00b6 Fix a bug: check if subset partial config contains chapters section correctly. Inherit the class Cli from BaseCli , not from Cliar . [2018-12-04] foliantcontrib.multiproject 1.0.9 \u00b6 Inherit the class Cli from BaseCli , not from Cliar . [2018-12-04] foliantcontrib.apilinks 1.0.5 \u00b6 Now both command and endpoint prefix are ensured to start from root (/). [2018-12-03] foliantcontrib.apilinks 1.0.4 \u00b6 Fix not catching errors from urllib. Added 'ignoring-prefix' option. Added 'endpoint-prefix' option into API->Name section. [2018-11-29] foliantcontrib.apilinks 1.0.3 \u00b6 Add require-prefix option. [2018-11-29] foliantcontrib.apilinks 1.0.2 \u00b6 Trim prefixes function. [2018-11-29] foliantcontrib.apilinks 1.0.1 \u00b6 Update docs, fix anchor error. Add all HTTP verbs to regular expression. [2018-11-27] foliantcontrib.apilinks 1.0.0 \u00b6 Initial release. [2018-11-23] foliantcontrib.templates.preprocessor 1.0.3 \u00b6 Fix packages value in setup.py of the template: use foliant.preprocessors instead of foliantcontrib.preprocessors . Require Foliant 1.0.8 in setup.py of the template. [2018-11-20] foliantcontrib.testrail 1.1.4 \u00b6 Another bug with multi-select parameter processing fixed. [2018-11-20] foliantcontrib.testrail 1.1.3 \u00b6 Jinja templates updated. Bug with multi-select parameter processing fixed. [2018-11-19] foliantcontrib.testrail 1.1.2 \u00b6 Now it's possible to use dropdown type parameters for test cases samplings. [2018-11-19] foliantcontrib.testrail 1.1.1 \u00b6 Readme updated. [2018-11-19] foliantcontrib.testrail 1.1.0 \u00b6 Removed parameters: platforms, platform_id, add_cases_without_platform, add_unpublished_cases. Added parameters: exclude_suite_ids \u2014 to exclude suites from final document by ID, exclude_section_ids \u2014 to exclude sections from final document by ID, exclude_case_ids \u2014 to exclude cases from final document by ID, add_case_id_to_std_table - to add column with case ID to the testing table, multi_param_name - name of custom TestRail multi-select parameter for cases sampling, multi_param_select - values of multi-select parameter for cases sampling, multi_param_select_type \u2014 sampling method, add_cases_without_multi_param - to add cases without any value of multi-select parameter, add_multi_param_to_case_header \u2014 to add values of multi-select parameter to the case headers, add_multi_param_to_std_table \u2014 to add column with values of multi-select parameter to the testing table, checkbox_param_name - name of custom TestRail checkbox parameter for cases sampling, checkbox_param_select_type \u2014 state of custom TestRail checkbox parameter for cases sampling, choose_priorities \u2014 selection of case priorities for cases sampling, add_priority_to_case_header - to add priority to the case header, add_priority_to_std_table \u2014 to add column with priority to the testing table. Renamed parameters: add_case_id_to_case_name -> add_case_id_to_case_header. Fixed config parsing. [2018-11-19] foliantcontrib.pgsqldoc 1.1.3 \u00b6 Add tests; refactor code Fix triggers and functions; add description to functions Fix template [2018-11-16] foliantcontrib.templates.preprocessor 1.0.2 \u00b6 Require foliantcontrib.init 1.0.7, import the output() method. Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.multiproject 1.0.8 \u00b6 Do not rewrite source Markdown file if an error occurs in RepoLink preprocessor. [2018-11-16] foliantcontrib.macros 1.0.4 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.includes 1.0.10 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.imgcaptions 1.0.1 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.imagemagick 1.0.1 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.flags 1.0.2 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.epsconvert 1.0.5 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.customids 1.0.5 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.bindsympli 1.0.8 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.gupload 1.1.5 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-16] foliantcontrib.slate 1.0.4 \u00b6 Provide compatibility with Foliant 1.0.8. Fix preprocessor: if error source won't be cleared. [2018-11-14] foliantcontrib.plantuml 1.0.5 \u00b6 Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8. [2018-11-14] foliantcontrib.blockdiag 1.0.4 \u00b6 Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8. [2018-11-14] foliantcontrib.mkdocs 1.0.7 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-14] foliantcontrib.pandoc 1.0.8 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-14] foliantcontrib.init 1.0.7 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-14] foliant 1.0.8 \u00b6 Restore quiet mode. Add the output() method for using in preprocessors. [2018-11-14] foliantcontrib.pandoc 1.0.7 \u00b6 Provide compatibility with Foliant 1.0.7. [2018-11-14] foliantcontrib.mkdocs 1.0.6 \u00b6 Provide compatibility with Foliant 1.0.7. [2018-11-14] foliant 1.0.7 \u00b6 Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs. [2018-11-13] foliantcontrib.init 1.0.6 \u00b6 Provide compatibility with Foliant 1.0.7. [2018-11-12] foliantcontrib.multilinetables 1.2.2 \u00b6 Problem with deletion of table strings containing only spaces fixed (critical for lists in grid tables). [2018-11-09] foliantcontrib.subset 1.0.5 \u00b6 Do not use yaml alias for oyaml module to prevent possible influence of this overriding on other parts of code. [2018-11-09] foliantcontrib.plantuml 1.0.4 \u00b6 Additionally \u0441heck if diagram image is not saved. [2018-11-09] foliantcontrib.blockdiag 1.0.3 \u00b6 Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log. [2018-11-08] foliantcontrib.slate 1.0.3 \u00b6 Add slate preprocessor which copies the images outside src into the slate project. [2018-11-08] foliantcontrib.testrail 1.0.7 \u00b6 Minor fixes. [2018-11-08] foliantcontrib.plantuml 1.0.3 \u00b6 Add parse_raw option. Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log. [2018-11-08] foliantcontrib.testrail 1.0.6 \u00b6 Added: parameters to exclude suite and section headers from the final document. [2018-11-07] foliantcontrib.testrail 1.0.5 \u00b6 Minor fixes. [2018-11-07] foliantcontrib.testrail 1.0.4 \u00b6 Fixed: if there is only one suite in project, it's header not added to the contents. [2018-11-02] foliantcontrib.gupload 1.1.4 \u00b6 Code refactored. [2018-11-01] foliantcontrib.templates.preprocessor 1.0.1 \u00b6 Add package_data to setup.py . [2018-11-01] foliantcontrib.gupload 1.1.3 \u00b6 Logger bug fixed. [2018-10-31] foliantcontrib.swaggerdoc 1.1.2 \u00b6 Bug fixes All path parameters in config now accept either strings or !path strings [2018-10-31] foliantcontrib.swaggerdoc 1.1.1 \u00b6 Add 'additional_json_path' param for jinja mode Add support for several json_urls [2018-10-30] foliantcontrib.multilinetables 1.2.1 \u00b6 Possibility to rewrite source files added. [2018-10-30] foliantcontrib.testrail 1.0.3 \u00b6 Possibility to rewrite source file added. [2018-10-29] foliantcontrib.bindsympli 1.0.7 \u00b6 Use 60-seconds timeout instead of 30-seconds. Provide multiple attempts to open pages. [2018-10-29] foliantcontrib.testrail 1.0.2 \u00b6 Suites collecting fixed. [2018-10-29] foliantcontrib.multilinetables 1.2.0 \u00b6 Convertation th the grid format added for arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.). [2018-10-24] foliantcontrib.multiproject 1.0.7 \u00b6 Allow to override the edit_uri config option of RepoLink preprocessor with the FOLIANT_REPOLINK_EDIT_URI system environment variable. [2018-10-23] foliantcontrib.multiproject 1.0.6 \u00b6 Tidy up CLI arguments. [2018-10-23] foliantcontrib.subset 1.0.4 \u00b6 Tidy up command line arguments one more time. [2018-10-23] foliantcontrib.subset 1.0.3 \u00b6 Tidy up command line arguments. [2018-10-23] foliantcontrib.subset 1.0.2 \u00b6 Fix a bug with object names. [2018-10-22] foliantcontrib.subset 1.0.1 \u00b6 Parse YAML fairly. Merge config files recursively. [2018-10-19] foliantcontrib.swaggerdoc 1.1.0 \u00b6 Change parameter names and behavior uncompatible with 1.0.0 Add conversion to md with widdershins [2018-10-11] foliantcontrib.includes 1.0.9 \u00b6 Don\u2019t crash on failed repo sync (i.e. when you\u2019re offline). [2018-10-11] foliantcontrib.mkdocs 1.0.5 \u00b6 Require MkDocs 1.0.4. [2018-10-02] foliantcontrib.replace 1.0.1 \u00b6 Strings with image links are ignored. [2018-10-01] foliantcontrib.gupload 1.1.2 \u00b6 Convert to google docs format setting added. [2018-09-25] foliantcontrib.gupload 1.1.1 \u00b6 Unification of repository name, settings section name, and command. [2018-09-25] foliantcontrib.gupload 1.1.0 \u00b6 Backend was converted to CLI extension. [2018-09-25] foliantcontrib.multilinetables 1.1.3 \u00b6 'targets' option added to the preprocessor settings. [2018-09-21] foliantcontrib.slate 1.0.2 \u00b6 Rename shards_path param to shards. It now accepts string or list. Fix no header param. [2018-09-20] foliantcontrib.slate 1.0.1 \u00b6 Remove flatten. First chapter goes to index.html.md; all the rest go into the includes. [2018-09-18] foliantcontrib.gupload 1.0.1 \u00b6 Command line authentication was added, for example for Docker use. [2018-09-14] foliantcontrib.testrail 1.0.1 \u00b6 Preprocessor folder structure fixed. [2018-09-12] foliantcontrib.bindsympli 1.0.6 \u00b6 Do not disable images downloading. Use delays when filling email and password fields. Wait for idle network connections when loading pages. [2018-08-31] foliant 1.0.6 \u00b6 CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor. [2018-08-29] foliantcontrib.pgsqldoc 1.1.2 \u00b6 Queries are now ordered (not adjustable right now) Flexable filters instead of strict filtering by schema [2018-08-27] foliantcontrib.pgsqldoc 1.1.1 \u00b6 Fix scheme template (blank lines issue) Refactor queries code [2018-08-24] foliantcontrib.multilinetables 1.1.2 \u00b6 Now it's possible to break the text anywhere in multiline tables with custom tag. Fixed determination of columns number in tables with and without side lines. [2018-08-24] foliantcontrib.pgsqldoc 1.1.0 \u00b6 Docs and scheme structure is now defined by Jinja2 templates. [2018-08-22] foliantcontrib.multilinetables 1.1.1 \u00b6 Bug with regular expression fixed. 3+ code strings with || operator in a row are not perceived as a tables now. [2018-08-22] foliantcontrib.multilinetables 1.1.0 \u00b6 Code strings with || operator are not perceived as a tables now. [2018-07-31] foliantcontrib.bump 1.0.2 \u00b6 Declare semver as dependency. [2018-07-29] foliantcontrib.bump 1.0.1 \u00b6 Fix packaging with setup.py. Poetry doesn't quite do the trick \ud83d\ude14 [2018-07-28] foliantcontrib.bump 1.0.0 \u00b6 Initial release. [2018-07-24] foliantcontrib.mkdocs 1.0.4 \u00b6 Provide customizable default names for untitled nested groups of chapters. [2018-07-24] foliantcontrib.flatten 1.0.4 \u00b6 Skip empty headings of nested subsections. [2018-07-23] foliantcontrib.includes 1.0.8 \u00b6 Require at least one space after hashes in the beginning of each heading. Add inline option to the <include> tag. Fix the bug: do not ignore empty lines after headings when using sethead . Fix the bug: allow to use less than 3 characters in the heading content. Do not mark as headings the strings that contain more than 6 leading hashes. If shifted heading level is more than 6, mark the heading content as bold paragraph text, not as heading. [2018-06-08] foliantcontrib.multiproject 1.0.5 \u00b6 Provide Git submodules support. [2018-06-07] foliantcontrib.flatten 1.0.3 \u00b6 Use flattened file path in includes preprocessor call. Require includes preprocessor 1.0.7. [2018-06-06] foliantcontrib.includes 1.0.7 \u00b6 Fix paths resolving in case of recursive processing of include statements. Allow revision markers in repo aliases. [2018-06-04] foliantcontrib.includes 1.0.6 \u00b6 Fix logging in file search method. Fix top heading level calculation. [2018-06-04] foliantcontrib.multiproject 1.0.4 \u00b6 Provide compatibility with Foliant 1.0.5. Allow to use multiple config files. [2018-06-04] foliantcontrib.pandoc 1.0.6 \u00b6 Apply flatten after all preprocessors, not before them. This fixes incompatibility with foliantcontrib.includes 1.0.5. [2018-06-04] foliantcontrib.flatten 1.0.2 \u00b6 Fix incorrect includes preprocessor call. Require Foliant 1.0.5. [2018-06-04] foliantcontrib.init 1.0.5 \u00b6 Require Foliant 1.0.5 with prompt_toolkit^2.0.0. [2018-05-30] foliantcontrib.customids 1.0.4 \u00b6 Provide separate block-level HTML elements for the anchors. Allow to define custom stylesheets for these elements. [2018-05-25] foliantcontrib.includes 1.0.5 \u00b6 Use paths that are relative to the current processed Markdown file. Fix sethead behavior for headings that contains hashes ( # ). [2018-05-14] foliant 1.0.5 \u00b6 Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style. [2018-05-10] foliantcontrib.pandoc 1.0.5 \u00b6 Add slug config option. [2018-05-08] foliantcontrib.multiproject 1.0.3 \u00b6 Fix config loading. Other small fixes. [2018-04-25] foliantcontrib.multiproject 1.0.2 \u00b6 Fix bugs with the project directory path and Git repos syncronizing. [2018-04-23] foliantcontrib.multiproject 1.0.1 \u00b6 Fix logging. [2018-04-20] foliantcontrib.bindsympli 1.0.5 \u00b6 Add logging. [2018-04-20] foliantcontrib.plantuml 1.0.2 \u00b6 Fix logging in __init__ . [2018-04-20] foliantcontrib.plantuml 1.0.1 \u00b6 Add logging. [2018-04-20] foliantcontrib.flatten 1.0.1 \u00b6 Fix incorrect includes preprocessor call. Add logging. Require Foliant 1.0.4. [2018-04-19] foliantcontrib.epsconvert 1.0.4 \u00b6 Do not use image path when computing MD5 hash. Add targets config option. Add logging. [2018-04-19] foliantcontrib.templates.preprocessor 1.0.0 \u00b6 Initial release. [2018-04-18] foliantcontrib.customids 1.0.3 \u00b6 Add targets config option. Add logging. [2018-04-14] foliantcontrib.blockdiag 1.0.2 \u00b6 Add logging. Require Foliant 1.0.4. [2018-04-14] foliantcontrib.pandoc 1.0.4 \u00b6 Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4. [2018-04-14] foliantcontrib.mkdocs 1.0.3 \u00b6 Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4. [2018-04-14] foliantcontrib.init 1.0.4 \u00b6 Replace placeholders in file and directory names. Process *.py files. User Template strings instead of format strings for safer substitutions. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4. [2018-04-11] foliant 1.0.4 \u00b6 Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions. [2018-04-10] foliantcontrib.bindsympli 1.0.4 \u00b6 Describe the preprocessor usage in README.md . [2018-04-10] foliantcontrib.bindsympli 1.0.3 \u00b6 Eliminate external Perl scripts, rewrite the preprocessor code in Python. [2018-04-02] foliant 1.0.3 \u00b6 Fix critical issue when config parsing would fail if any config value contained non-latin characters. [2018-04-01] foliantcontrib.includes 1.0.4 \u00b6 Fix the pattern for headings detection. [2018-03-31] foliantcontrib.includes 1.0.3 \u00b6 Allow hashes ( # characters) in the content of headings. [2018-03-29] foliantcontrib.epsconvert 1.0.3 \u00b6 Take into account the content of image file when computing MD5 hash. [2018-03-29] foliantcontrib.epsconvert 1.0.2 \u00b6 Add support of any local paths. Add image cache. Remove mogrify_path and diagrams_cache_dir options, add convert_path and cache_dir instead. [2018-03-28] foliantcontrib.customids 1.0.2 \u00b6 Process first heading and all other headings separately. [2018-03-27] foliantcontrib.customids 1.0.1 \u00b6 Update README.md and docstrings. Update long description content type in setup.py [2018-03-27] foliantcontrib.bindsympli 1.0.2 \u00b6 Change the path for non-Python scripts once more. [2018-03-27] foliantcontrib.bindsympli 1.0.1 \u00b6 Change the path for non-Python scripts. [2018-03-21] foliantcontrib.includes 1.0.2 \u00b6 Fix inappropriate translation of image URLs into local paths. [2018-03-21] foliantcontrib.mkdocs 1.0.2 \u00b6 Add use_headings and slug options for MkDocs backend. Fix inappropriate translation of image URLs into local paths in MkDocs preprocessor. [2018-03-17] foliant 1.0.2 \u00b6 Use README.md as package description. [2018-03-13] foliantcontrib.epsconvert 1.0.1 \u00b6 Add diagrams_cache_dir option support. [2018-02-28] foliantcontrib.pandoc 1.0.3 \u00b6 Change Pandoc command line parameter --reference-docx to --reference-doc . [2018-02-25] foliant 1.0.1 \u00b6 Fix critical bug with CLI module caused by missing version definition in the root __init__.py file. [2018-02-23] foliant 1.0.0 \u00b6 Complete rewrite. [2018-02-16] foliantcontrib.blockdiag 1.0.1 \u00b6 Add pdf output format support. [2018-02-07] foliantcontrib.init 1.0.3 \u00b6 Upon creation, relative path to the created project directory is returned instead of an absolute one. Templates: basic: Foliant docs related content removed from README.md. Templates: basic: foliantcontrib.mkdocs added to requirements.txt. [2018-02-07] foliantcontrib.init 1.0.2 \u00b6 Add slug placeholder. Process placeholders in .yml , .txt , and .md files, not just foliant.yml . Templates: basic: Add Dockerfile , docker-compose.yml , requirements.txt , and README.md . [2018-02-07] foliantcontrib.init 1.0.1 \u00b6 Fix issue with init command missing after installation. Fix issue with missing templates after installation. [2018-02-01] foliantcontrib.macros 1.0.3 \u00b6 Add tag <m>...</m> . [2018-01-17] foliantcontrib.macros 1.0.2 \u00b6 Switch from unnamed to named parameters. Macro name is now defined in the tag body instead of \"name\" option. [2018-01-15] foliantcontrib.macros 1.0.1 \u00b6 Preserve param case. [2018-01-06] foliantcontrib.flags 1.0.1 \u00b6 Add targets and backends options to <if> tag. [2018-01-05] foliantcontrib.pandoc 1.0.2 \u00b6 Change default Markdown flavor from markdown_strict to markdown . [2017-12-17] foliantcontrib.pandoc 1.0.1 \u00b6 Add tex target. [2017-12-16] foliantcontrib.mkdocs 1.0.1 \u00b6 Add ghp target for GitHub Pages deploy with mkdocs gh-deploy . [2017-12-15] foliantcontrib.includes 1.0.1 \u00b6 Fix git repo name detection when the repo part contains full stops.","title":"History of Releases"},{"location":"releases/#history-of-releases","text":"Here is the single linear history of releases of Foliant and its extensions. It\u2019s also available as an RSS feed .","title":"History of Releases"},{"location":"releases/#2020-04-02-foliantcontribconfluence-0610","text":"Disabled tabbed code blocks conversion because of conflicts.","title":"[2020-04-02] foliantcontrib.confluence 0.6.10"},{"location":"releases/#2020-04-02-foliantcontributilspreprocessor_ext-103","text":"Add _process_all_files method for preprocessors without tags.","title":"[2020-04-02] foliantcontrib.utils.preprocessor_ext 1.0.3"},{"location":"releases/#2020-04-01-foliantcontribtestcoverage-011","text":"Support meta 1.3.0","title":"[2020-04-01] foliantcontrib.testcoverage 0.1.1"},{"location":"releases/#2020-04-01-foliantcontribtestcoverage-010","text":"Initial release.","title":"[2020-04-01] foliantcontrib.testcoverage 0.1.0"},{"location":"releases/#2020-04-01-foliantcontribmetagraph-012","text":"Metadata is now taken from src_dir to minimize possible conflicts with other preprocessors.","title":"[2020-04-01] foliantcontrib.metagraph 0.1.2"},{"location":"releases/#2020-03-27-foliantcontribmetagraph-011","text":"New parameter: draw_all , which controls which sections are included.","title":"[2020-03-27] foliantcontrib.metagraph 0.1.1"},{"location":"releases/#2020-03-26-foliantcontribmetagraph-010","text":"Initial release","title":"[2020-03-26] foliantcontrib.metagraph 0.1.0"},{"location":"releases/#2020-03-26-foliantcontribtemplateparser-103","text":"Now meta dictionary is available inside templates under meta variable. Project's meta object is available inside templates under meta_object variable.","title":"[2020-03-26] foliantcontrib.templateparser 1.0.3"},{"location":"releases/#2020-03-26-foliantcontribmeta-131","text":"remove_meta now also trims whitespaces in the beginning of the file after removing YFM Main section's title is now set to first heading, if: the first heading is a 1-level heading (#), the first heading doesn't have meta. Fix: YFM was not included in meta in some cases","title":"[2020-03-26] foliantcontrib.meta 1.3.1"},{"location":"releases/#2020-03-25-foliantcontribconfluence-068","text":"Now foliant-anchors are always added even for new pages","title":"[2020-03-25] foliantcontrib.confluence 0.6.8"},{"location":"releases/#2020-03-25-foliantcontribconfluence-069","text":"Introducing import from confluence into Foliant with confluence tag Fix: solved conflicts between inline comments and macros (including anchors) Fix: backend crashed if new page content was empty Markdown code blocks are now converted into code-block macros Markdown task lists are now converted into task-list macros New test_run option","title":"[2020-03-25] foliantcontrib.confluence 0.6.9"},{"location":"releases/#2020-03-23-foliantcontributilscombined_options-1010","text":"Fix: default dict was overriden after the first use. Allow to supply the list of priorities instead of just one priority. Priority for those option dictionaries, which are not mentioned in the priority param, are now defined by the order dictionaries are defined.","title":"[2020-03-23] foliantcontrib.utils.combined_options 1.0.10"},{"location":"releases/#2020-03-12-foliantcontribtestrail-1111","text":"Misprint fixed.","title":"[2020-03-12] foliantcontrib.testrail 1.1.11"},{"location":"releases/#2020-03-12-foliantcontribtestrail-1110","text":"Bug with template handling fixed.","title":"[2020-03-12] foliantcontrib.testrail 1.1.10"},{"location":"releases/#2020-03-11-foliantcontribconfluence-067","text":"Fix another conflict with escapecode","title":"[2020-03-11] foliantcontrib.confluence 0.6.7"},{"location":"releases/#2020-03-05-foliantcontribgraphviz-113","text":"Fix: as_image takes effect only with svg format.","title":"[2020-03-05] foliantcontrib.graphviz 1.1.3"},{"location":"releases/#2020-02-28-foliantcontribbindfigma-101","text":"Add hyperlinks and multi_delimeter options. Output error messages to STDOUT. Minor improvements.","title":"[2020-02-28] foliantcontrib.bindfigma 1.0.1"},{"location":"releases/#2020-02-12-foliantcontribalt_structure-012","text":"Fix: Remove config check from init","title":"[2020-02-12] foliantcontrib.alt_structure 0.1.2"},{"location":"releases/#2020-02-10-foliantcontribalt_structure-011","text":"Initial release","title":"[2020-02-10] foliantcontrib.alt_structure 0.1.1"},{"location":"releases/#2020-02-07-foliantcontributilscombined_options-109","text":"defaults now actually supply default value (before they were only used for validation) add None to possible type validation in val_type .","title":"[2020-02-07] foliantcontrib.utils.combined_options 1.0.9"},{"location":"releases/#2020-02-06-foliantcontribmkdocs-1011","text":"Get captions for pages from workingdir instead of src_dir","title":"[2020-02-06] foliantcontrib.mkdocs 1.0.11"},{"location":"releases/#2020-02-04-foliantcontribslate-108","text":"Support meta 1.3","title":"[2020-02-04] foliantcontrib.slate 1.0.8"},{"location":"releases/#2020-02-04-foliantcontribsuperlinks-103","text":"Support meta 1.3","title":"[2020-02-04] foliantcontrib.superlinks 1.0.3"},{"location":"releases/#2020-02-04-foliantcontribincludes-119","text":"Support meta 1.3.","title":"[2020-02-04] foliantcontrib.includes 1.1.9"},{"location":"releases/#2020-02-04-foliantcontribmeta-130","text":"Restructure modules to aid import errors. Meta-related functions and classes are now available independantly from foliant.meta package.","title":"[2020-02-04] foliantcontrib.meta 1.3.0"},{"location":"releases/#2020-02-04-foliantcontribconfluence-066","text":"Support meta 1.3 Now foliant-anchors are always added around uploaded content Anchors are now case insensitive","title":"[2020-02-04] foliantcontrib.confluence 0.6.6"},{"location":"releases/#2020-02-03-foliantcontribmeta-123","text":"Add get_chapter method to Meta class. Add Developer's guide to readme.","title":"[2020-02-03] foliantcontrib.meta 1.2.3"},{"location":"releases/#2020-01-31-foliantcontribelasticsearch-102","text":"Add format option. Use escape_html only for format: plaintext .","title":"[2020-01-31] foliantcontrib.elasticsearch 1.0.2"},{"location":"releases/#2020-01-31-foliantcontribelasticsearch-101","text":"Add escape_html option. Perform actions delete , create by default. Fix HTML markup in Web application example.","title":"[2020-01-31] foliantcontrib.elasticsearch 1.0.1"},{"location":"releases/#2020-01-22-foliantcontribconfluence-065","text":"Fix: build crashed when several resolved inline comments referred to same string","title":"[2020-01-22] foliantcontrib.confluence 0.6.5"},{"location":"releases/#2019-12-24-foliantcontribsuperlinks-102","text":"add dependencies order check rename anchor parameter to id. add anchor parameter for possibly global anchor search. link to anchors in Confluence are now partly supported.","title":"[2019-12-24] foliantcontrib.superlinks 1.0.2"},{"location":"releases/#2019-12-24-foliantcontributilsheader_anchors-101","text":"Add is_flat function to determine flat backends.","title":"[2019-12-24] foliantcontrib.utils.header_anchors 1.0.1"},{"location":"releases/#2019-12-24-foliantcontribanchors-104","text":"Applied anchors are now checked from all chapters for flat backends.","title":"[2019-12-24] foliantcontrib.anchors 1.0.4"},{"location":"releases/#2019-12-24-foliantcontribtestrail-119","text":"Function to get case data by id added.","title":"[2019-12-24] foliantcontrib.testrail 1.1.9"},{"location":"releases/#2019-12-23-foliantcontribsuperlinks-101","text":"Initial release","title":"[2019-12-23] foliantcontrib.superlinks 1.0.1"},{"location":"releases/#2019-12-20-foliantcontributilsheader_anchors-100","text":"Initial release.","title":"[2019-12-20] foliantcontrib.utils.header_anchors 1.0.0"},{"location":"releases/#2019-12-20-foliantcontribanchors-103","text":"Better regex patterns. Conflicts are now determined for each backend separately. Add confluence anchors.","title":"[2019-12-20] foliantcontrib.anchors 1.0.3"},{"location":"releases/#2019-12-20-foliantcontribmeta-122","text":"Don't require empty line between heading and meta tag. Allow comments in YFM. Better patterns for sections detection.","title":"[2019-12-20] foliantcontrib.meta 1.2.2"},{"location":"releases/#2019-12-12-foliantcontribshowcommits-101","text":"Fix template processing. Log repo path.","title":"[2019-12-12] foliantcontrib.showcommits 1.0.1"},{"location":"releases/#2019-12-12-foliantcontribflatten-106","text":"Rewrite local links (e.g. some_file.md#some_id \u2192 #some_id ).","title":"[2019-12-12] foliantcontrib.flatten 1.0.6"},{"location":"releases/#2019-12-04-foliantcontribslate-107","text":"Fix: images are preserved in the output, even from subfolders. YAML Front Matter from the sources is now ignored.","title":"[2019-12-04] foliantcontrib.slate 1.0.7"},{"location":"releases/#2019-12-02-foliantcontribinit-108","text":"Add comment to Dockerfile with option to use Foliant full image. Remove slugs from docker-compose. Now the service is always named foliant .","title":"[2019-12-02] foliantcontrib.init 1.0.8"},{"location":"releases/#2019-11-22-foliantcontribmeta-121","text":"Fix bug with imports.","title":"[2019-11-22] foliantcontrib.meta 1.2.1"},{"location":"releases/#2019-11-21-foliantcontribmeta-120","text":"Support sections meta.yml format restructure","title":"[2019-11-21] foliantcontrib.meta 1.2.0"},{"location":"releases/#2019-11-21-foliantcontribconfluence-064","text":"Support meta 1.2. Now you can publish sections to confluence.","title":"[2019-11-21] foliantcontrib.confluence 0.6.4"},{"location":"releases/#2019-11-21-foliantcontribincludes-118","text":"Support meta 1.2.","title":"[2019-11-21] foliantcontrib.includes 1.1.8"},{"location":"releases/#2019-11-20-foliantcontribimgcaptions-102","text":"Fix: stylesheet_path only worked with the !project_path modifier. Add the template parameter to customize the caption HTML tag.","title":"[2019-11-20] foliantcontrib.imgcaptions 1.0.2"},{"location":"releases/#2019-11-09-foliantcontribmdtopdf-100","text":"Initial release.","title":"[2019-11-09] foliantcontrib.mdtopdf 1.0.0"},{"location":"releases/#2019-11-06-foliantcontribramldoc-101","text":"Initial release","title":"[2019-11-06] foliantcontrib.ramldoc 1.0.1"},{"location":"releases/#2019-10-28-foliantcontribaglio-100","text":"Initial release","title":"[2019-10-28] foliantcontrib.aglio 1.0.0"},{"location":"releases/#2019-10-25-foliantcontribslate-106","text":"Fix bug with error catching introduced in 1.0.5","title":"[2019-10-25] foliantcontrib.slate 1.0.6"},{"location":"releases/#2019-10-25-foliantcontribslate-105","text":"Better error reporting. Fixes for working with includes.","title":"[2019-10-25] foliantcontrib.slate 1.0.5"},{"location":"releases/#2019-10-16-foliantcontribescapecode-102","text":"Improve flexibility: add new actions, allow to override defaults.","title":"[2019-10-16] foliantcontrib.escapecode 1.0.2"},{"location":"releases/#2019-10-16-foliantcontribmultiproject-1012","text":"Take into account the quiet flag. Require Foliant 1.0.11 for this reason.","title":"[2019-10-16] foliantcontrib.multiproject 1.0.12"},{"location":"releases/#2019-10-16-foliantcontribincludes-117","text":"Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value.","title":"[2019-10-16] foliantcontrib.includes 1.1.7"},{"location":"releases/#2019-10-16-foliant-1011","text":"Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. Pass the quiet flag to BaseParser() as an optional argument for using in config extensions.","title":"[2019-10-16] foliant 1.0.11"},{"location":"releases/#2019-10-15-foliantcontribsubset-109","text":"Fix incompatibilities with newer versions of modules: Cliar, PyYAML.","title":"[2019-10-15] foliantcontrib.subset 1.0.9"},{"location":"releases/#2019-10-10-foliantcontribmultiproject-1011","text":"Allow recursive processing of nested subprojects. Allow to specify type (HTML/Markdown) and location for repo links. Fix incompatibility with new Cliar: key names should not contain hyphens.","title":"[2019-10-10] foliantcontrib.multiproject 1.0.11"},{"location":"releases/#2019-10-07-foliantcontribconfluence-063","text":"Remove resolved inline comments as they mix up with unresolved.","title":"[2019-10-07] foliantcontrib.confluence 0.6.3"},{"location":"releases/#2019-10-04-foliantcontribmermaid-101","text":"Better error reporting","title":"[2019-10-04] foliantcontrib.mermaid 1.0.1"},{"location":"releases/#2019-10-02-foliantcontributilscombined_options-108","text":"Fix validate_exists validator.","title":"[2019-10-02] foliantcontrib.utils.combined_options 1.0.8"},{"location":"releases/#2019-10-01-foliantcontribconfluence-062","text":"Added parent_title parameter. Fix: images were not uploaded for new pages.","title":"[2019-10-01] foliantcontrib.confluence 0.6.2"},{"location":"releases/#2019-10-01-foliantcontribmultiproject-1010","text":"Allow the first heading to be located not in the beginning of a document.","title":"[2019-10-01] foliantcontrib.multiproject 1.0.10"},{"location":"releases/#2019-09-26-foliantcontribflatten-105","text":"Add the keep_sources option to keep original files in the temporary working directory after flattening.","title":"[2019-09-26] foliantcontrib.flatten 1.0.5"},{"location":"releases/#2019-09-25-foliantcontribconfluence-060","text":"Now content is put in place of foliant anchor or instead of foliant_start ... foliant_end anchors on the target page. If no anchors on page \u2014 content replaces the whole body. New modes (backwards compatibility is broken!). Now following files are available for debug in cache dir: 1. markdown before conversion to html. 2. Converted to HTML. 3. Final XHTML source which is uploaded to confluence. Working (but far from perfect) detection if file was changed. Only upload changed attachments. Updating attachments instead of deleting and uploading again.","title":"[2019-09-25] foliantcontrib.confluence 0.6.0"},{"location":"releases/#2019-09-19-foliantcontribconfluence-052","text":"Completely rewrite restoring inline comments feature. Add restore_comments and resolve_if_changed emergency options. Allow insert raw confluence code (macros, etc) inside <raw_confluence> tag.","title":"[2019-09-19] foliantcontrib.confluence 0.5.2"},{"location":"releases/#2019-09-19-foliantcontribhistory-108","text":"Allow to ignore merge commits in from: commits mode.","title":"[2019-09-19] foliantcontrib.history 1.0.8"},{"location":"releases/#2019-09-18-foliantcontribhistory-107","text":"Allow to get repo names from README files.","title":"[2019-09-18] foliantcontrib.history 1.0.7"},{"location":"releases/#2019-09-16-foliantcontribhistory-106","text":"Fix some regex patterns.","title":"[2019-09-16] foliantcontrib.history 1.0.6"},{"location":"releases/#2019-09-16-foliantcontribhistory-105","text":"Allow to generate history based on tags and commits.","title":"[2019-09-16] foliantcontrib.history 1.0.5"},{"location":"releases/#2019-09-13-foliantcontribhistory-104","text":"Add templates for target Markdown headings and RSS items titles.","title":"[2019-09-13] foliantcontrib.history 1.0.4"},{"location":"releases/#2019-09-13-foliantcontribhistory-103","text":"Escape regex metacharacters in headings.","title":"[2019-09-13] foliantcontrib.history 1.0.3"},{"location":"releases/#2019-09-10-foliantcontribepsconvert-107","text":"Fix image reference detection pattern, other minor fixes.","title":"[2019-09-10] foliantcontrib.epsconvert 1.0.7"},{"location":"releases/#2019-09-09-foliantcontribhistory-102","text":"Do not generate common top-level heading of target Markdown content.","title":"[2019-09-09] foliantcontrib.history 1.0.2"},{"location":"releases/#2019-09-06-foliantcontribhistory-101","text":"Add RSS feed generation.","title":"[2019-09-06] foliantcontrib.history 1.0.1"},{"location":"releases/#2019-08-28-foliantcontribincludes-116","text":"Escape regular expression metacharacters in starting and ending headings, IDs, modifiers.","title":"[2019-08-28] foliantcontrib.includes 1.1.6"},{"location":"releases/#2019-08-27-foliantcontribincludes-115","text":"Remove meta blocks from the included content.","title":"[2019-08-27] foliantcontrib.includes 1.1.5"},{"location":"releases/#2019-08-26-foliantcontribmkdocs-1010","text":"Fix pattern for heading detection.","title":"[2019-08-26] foliantcontrib.mkdocs 1.0.10"},{"location":"releases/#2019-08-26-foliantcontribswaggerdoc-120","text":"Add spec_path and spec_url parameters. All path tag parameters are now loaded relative to current file. Better logging and error reporting","title":"[2019-08-26] foliantcontrib.swaggerdoc 1.2.0"},{"location":"releases/#2019-08-26-foliantcontributilscombined_options-107","text":"Add validate_exists validator. Add rel_path_convertor .","title":"[2019-08-26] foliantcontrib.utils.combined_options 1.0.7"},{"location":"releases/#2019-08-26-foliantcontribcustomids-106","text":"Allow to define custom styles for headings of each level.","title":"[2019-08-26] foliantcontrib.customids 1.0.6"},{"location":"releases/#2019-08-26-foliantcontribconfluence-041","text":"Fix: conflict with escape_code","title":"[2019-08-26] foliantcontrib.confluence 0.4.1"},{"location":"releases/#2019-08-23-foliantcontribincludes-114","text":"Allow for the starting and ending headings to be 1-character long.","title":"[2019-08-23] foliantcontrib.includes 1.1.4"},{"location":"releases/#2019-08-23-foliantcontribconfluence-040","text":"Fix: attachments were not uploaded for nonexistent pages Change confluence api wrapper to atlassian-python-api Rename backend to confluence Better error reporting","title":"[2019-08-23] foliantcontrib.confluence 0.4.0"},{"location":"releases/#2019-08-23-foliantcontribmkdocs-109","text":"Allow the first heading to be located not in the beginning of a document.","title":"[2019-08-23] foliantcontrib.mkdocs 1.0.9"},{"location":"releases/#2019-08-23-foliantcontribepsconvert-106","text":"Bug fix: update current directory path before processing of Markdown file content, not after.","title":"[2019-08-23] foliantcontrib.epsconvert 1.0.6"},{"location":"releases/#2019-08-22-foliantcontribimagemagick-102","text":"Bug fix: update current directory path before processing of Markdown file content, not after.","title":"[2019-08-22] foliantcontrib.imagemagick 1.0.2"},{"location":"releases/#2019-08-22-foliantcontribmeta-110","text":"Remove the sections entity. Restructure code.","title":"[2019-08-22] foliantcontrib.meta 1.1.0"},{"location":"releases/#2019-08-22-foliantcontribconfluence-030","text":"Fix bug with images. Add multiple modes and mode parameter. Add toc parameter to automatically insert toc. Fix: upload attachments before text update (this caused images to disappear after manually editing).","title":"[2019-08-22] foliantcontrib.confluence 0.3.0"},{"location":"releases/#2019-08-20-foliantcontribmeta-103","text":"Add span to meta","title":"[2019-08-20] foliantcontrib.meta 1.0.3"},{"location":"releases/#2019-08-16-foliantcontribconfluence-020","text":"Allow to input login and/or password during build Added pandoc_path option Better logging and error catching","title":"[2019-08-16] foliantcontrib.confluence 0.2.0"},{"location":"releases/#2019-08-16-foliantcontributilscombined_options-106","text":"Add check for required params. Add val_type validator to check for param types. Allow to set values in Options objects","title":"[2019-08-16] foliantcontrib.utils.combined_options 1.0.6"},{"location":"releases/#2019-08-15-foliantcontribconfluence-010","text":"Initial release.","title":"[2019-08-15] foliantcontrib.confluence 0.1.0"},{"location":"releases/#2019-08-14-foliantcontribincludes-113","text":"Allow to specify IDs of anchors in the from_id and to_id attributes. Support the to_end attribute.","title":"[2019-08-14] foliantcontrib.includes 1.1.3"},{"location":"releases/#2019-08-02-foliantcontribescapecode-101","text":"Do not ignore diagram definitions. It should be possible to escape the tags used by diagram drawing preprocessors. If some preprocessors need to work with the content that is recognized as code, call UnescapeCode explicitly before them.","title":"[2019-08-02] foliantcontrib.escapecode 1.0.1"},{"location":"releases/#2019-08-01-foliantcontribreplace-103","text":"Fixed issue with PyYAML deprecated loader.","title":"[2019-08-01] foliantcontrib.replace 1.0.3"},{"location":"releases/#2019-08-01-foliantcontribmermaid-100","text":"Initial release","title":"[2019-08-01] foliantcontrib.mermaid 1.0.0"},{"location":"releases/#2019-07-30-foliantcontribincludes-112","text":"Fix include statement regex pattern. Tags joined with | must be in non-capturing parentheses.","title":"[2019-07-30] foliantcontrib.includes 1.1.2"},{"location":"releases/#2019-07-30-foliant-1010","text":"Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed.","title":"[2019-07-30] foliant 1.0.10"},{"location":"releases/#2019-07-30-foliantcontribincludes-111","text":"Support escape_code config option. Require Foliant 1.0.10 and escapecode preprocessor 1.0.0. Process sethead recursively.","title":"[2019-07-30] foliantcontrib.includes 1.1.1"},{"location":"releases/#2019-07-29-foliantcontributilspreprocessor_ext-102","text":"Fix output Remove get_options overriding, it's now implemented similarly in core","title":"[2019-07-29] foliantcontrib.utils.preprocessor_ext 1.0.2"},{"location":"releases/#2019-07-16-foliantcontribbindsympli-1014","text":"Add width attribute to <sympli> tag. Refactor a little.","title":"[2019-07-16] foliantcontrib.bindsympli 1.0.14"},{"location":"releases/#2019-07-15-foliantcontribslugs-101","text":"Add !version and !commit_count YAML tags.","title":"[2019-07-15] foliantcontrib.slugs 1.0.1"},{"location":"releases/#2019-07-09-foliantcontribdocus-020","text":"More flexible chapters parsing. Lists are now not mandatory.","title":"[2019-07-09] foliantcontrib.docus 0.2.0"},{"location":"releases/#2019-07-09-foliantcontribdocus-010","text":"Initial release.","title":"[2019-07-09] foliantcontrib.docus 0.1.0"},{"location":"releases/#2019-07-05-foliantcontribruncommands-101","text":"Capture the output of an external command and write it to STDOUT.","title":"[2019-07-05] foliantcontrib.runcommands 1.0.1"},{"location":"releases/#2019-07-01-foliantcontribmeta-102","text":"Fix: subsections title may be specified in YFM; Fix: in subsections title was being cropped out","title":"[2019-07-01] foliantcontrib.meta 1.0.2"},{"location":"releases/#2019-07-01-foliantcontribproject_graph-101","text":"Rename rel attributes: rel_path to path , rel_id to id Relation types now don't implicitly go to edge labels. Add label explicitly from now on. Fixed: relations to !project_path and !rel_path didn't work.","title":"[2019-07-01] foliantcontrib.project_graph 1.0.1"},{"location":"releases/#2019-07-01-foliantcontribmeta-101","text":"Fix: seeds for main sections were not processed. Add debug messages for seeds processing.","title":"[2019-07-01] foliantcontrib.meta 1.0.1"},{"location":"releases/#2019-06-28-foliantcontribproject_graph-100","text":"Initial release.","title":"[2019-06-28] foliantcontrib.project_graph 1.0.0"},{"location":"releases/#2019-06-28-foliantcontribmeta-100","text":"Initial release.","title":"[2019-06-28] foliantcontrib.meta 1.0.0"},{"location":"releases/#2019-06-28-foliantcontribincludes-110","text":"Support Foliant 1.0.9. Add processing of !path , !project_path , and !rel_path modifiers (i.e. YAML tags) in attribute values of pseudo-XML tags inside the included content. Replace the values that preceded by these modifiers with absolute paths resolved depending on current context. Allow to specify the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to, with optional project_root attribute of the <include> tag. This can be necessary to resolve the !path and the !project_path modifiers in the included content correctly. Allow to specify all necessary parameters of each include statement as attribute values of pseudo-XML tags. Keep legacy syntax for backward compatibility. Update README.","title":"[2019-06-28] foliantcontrib.includes 1.1.0"},{"location":"releases/#2019-06-17-foliant-109","text":"Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags.","title":"[2019-06-17] foliant 1.0.9"},{"location":"releases/#2019-06-14-foliantcontributilspreprocessor_ext-101","text":"Support PyYAML 5.1","title":"[2019-06-14] foliantcontrib.utils.preprocessor_ext 1.0.1"},{"location":"releases/#2019-06-14-foliantcontributilscombined_options-105","text":"support PyYAML 5.1","title":"[2019-06-14] foliantcontrib.utils.combined_options 1.0.5"},{"location":"releases/#2019-06-14-foliantcontribtemplateparser-102","text":"support PyYAML 5.1","title":"[2019-06-14] foliantcontrib.templateparser 1.0.2"},{"location":"releases/#2019-06-14-foliantcontribbindsympli-1013","text":"Set 2-minutes timeout instead of default 30-seconds when launching Chromium. Use page.waitForSelector() instead of page.waitForNavigation() . Use custom sleep() function for intentional delays.","title":"[2019-06-14] foliantcontrib.bindsympli 1.0.13"},{"location":"releases/#2019-06-13-foliantcontribbadges-102","text":"support params which alter badge look to be supplied in tag params","title":"[2019-06-13] foliantcontrib.badges 1.0.2"},{"location":"releases/#2019-06-11-foliantcontribbadges-101","text":"force img mode on pdf and docx add target parameter","title":"[2019-06-11] foliantcontrib.badges 1.0.1"},{"location":"releases/#2019-06-11-foliantcontribbadges-100","text":"Initial release","title":"[2019-06-11] foliantcontrib.badges 1.0.0"},{"location":"releases/#2019-06-10-foliantcontribadmonitions-100","text":"Initial release.","title":"[2019-06-10] foliantcontrib.admonitions 1.0.0"},{"location":"releases/#2019-05-20-foliantcontribgraphviz-111","text":"Remove src param. (Use includes instead) Allow separate tags fail. Preprocessor would issue warning and continue work.","title":"[2019-05-20] foliantcontrib.graphviz 1.1.1"},{"location":"releases/#2019-05-20-foliantcontribtemplateparser-101","text":"add ext_context param for external file with context allow separate templates to fail, the preprocessor would issue warning and skip them","title":"[2019-05-20] foliantcontrib.templateparser 1.0.1"},{"location":"releases/#2019-05-20-foliantcontributilscombined_options-104","text":"Add path_convertor which converts string options to pathlib.PosixPath","title":"[2019-05-20] foliantcontrib.utils.combined_options 1.0.4"},{"location":"releases/#2019-05-17-foliantcontribblockdiag-105","text":"Attributes of pseudo-XML tags have higher priority than config file options.","title":"[2019-05-17] foliantcontrib.blockdiag 1.0.5"},{"location":"releases/#2019-05-17-foliantcontribplantuml-106","text":"Attributes of <plantuml> tag have higher priority than config file options.","title":"[2019-05-17] foliantcontrib.plantuml 1.0.6"},{"location":"releases/#2019-05-17-foliantcontributilspreprocessor_ext-100","text":"Initial release.","title":"[2019-05-17] foliantcontrib.utils.preprocessor_ext 1.0.0"},{"location":"releases/#2019-05-15-foliantcontributilscombined_options-103","text":"add iter method to allow for param in options","title":"[2019-05-15] foliantcontrib.utils.combined_options 1.0.3"},{"location":"releases/#2019-05-15-foliantcontributilscombined_options-102","text":"add '0'\\'1' to bool_convertor","title":"[2019-05-15] foliantcontrib.utils.combined_options 1.0.2"},{"location":"releases/#2019-05-14-foliantcontribtemplateparser-100","text":"Initial release","title":"[2019-05-14] foliantcontrib.templateparser 1.0.0"},{"location":"releases/#2019-04-30-foliantcontribbindsympli-1012","text":"Capture the output of the Puppeter-based script and write it to STDOUT.","title":"[2019-04-30] foliantcontrib.bindsympli 1.0.12"},{"location":"releases/#2019-04-15-foliantcontribswaggerdoc-113","text":"Fix issues with json and yaml. All spec files are now loaded with yaml loader. Change PyYAML to ruamel.yaml jinja mode is deprecated, widdershins is the default mode","title":"[2019-04-15] foliantcontrib.swaggerdoc 1.1.3"},{"location":"releases/#2019-04-10-foliantcontribmkdocs-108","text":"Escape control characters (double quotation marks, dollar signs, backticks) that may be used in system shell commands.","title":"[2019-04-10] foliantcontrib.mkdocs 1.0.8"},{"location":"releases/#2019-04-10-foliantcontribpandoc-1010","text":"Add backticks to the set of characters that should be escaped.","title":"[2019-04-10] foliantcontrib.pandoc 1.0.10"},{"location":"releases/#2019-04-10-foliantcontribpandoc-109","text":"Escape double quotation marks ( \" ) and dollar signs ( $ ) which may be used in PDF, docx, and TeX generation commands as parts of filenames, variable values, etc. Enclose filenames that may be used in commands into double quotes.","title":"[2019-04-10] foliantcontrib.pandoc 1.0.9"},{"location":"releases/#2019-04-05-foliantcontribincludes-1011","text":"Take into account the results of work of preprocessors that may be applied before includes within a single Foliant project. Rewrite the currently processed Markdown file path with the path of corresponding file that is located inside the project source directory only if the currently processed Markdown file is located inside the temporary working directory and the included file is located outside the temporary working directory. Keep all paths unchanged in all other cases.","title":"[2019-04-05] foliantcontrib.includes 1.0.11"},{"location":"releases/#2019-03-27-foliantcontribgraphviz-106","text":"Added as_image option.","title":"[2019-03-27] foliantcontrib.graphviz 1.0.6"},{"location":"releases/#2019-03-21-foliantcontribanchors-102","text":"Added preprocessor_ext for better warnings (and better code)","title":"[2019-03-21] foliantcontrib.anchors 1.0.2"},{"location":"releases/#2019-03-21-foliantcontribanchors-101","text":"Added 'element' option to customize anchor span element.","title":"[2019-03-21] foliantcontrib.anchors 1.0.1"},{"location":"releases/#2019-03-21-foliantcontribanchors-100","text":"Initial release","title":"[2019-03-21] foliantcontrib.anchors 1.0.0"},{"location":"releases/#2019-03-21-foliantcontributilscombined_options-101","text":"Add boolean convertor","title":"[2019-03-21] foliantcontrib.utils.combined_options 1.0.1"},{"location":"releases/#2019-03-14-foliantcontribnotifier-100","text":"Initial release.","title":"[2019-03-14] foliantcontrib.notifier 1.0.0"},{"location":"releases/#2019-02-21-foliantcontribtestrail-118","text":"Hardcoded section headers processing removed.","title":"[2019-02-21] foliantcontrib.testrail 1.1.8"},{"location":"releases/#2019-02-18-foliantcontribreplace-102","text":"Now it's possible to pass the lambda function from dictionary file. with_confirmation parameter added.","title":"[2019-02-18] foliantcontrib.replace 1.0.2"},{"location":"releases/#2019-02-15-foliantcontribcsvtables-101","text":"setup.py fixed.","title":"[2019-02-15] foliantcontrib.csvtables 1.0.1"},{"location":"releases/#2019-02-14-foliantcontribgraphviz-104","text":"Moved combined_options out","title":"[2019-02-14] foliantcontrib.graphviz 1.0.4"},{"location":"releases/#2019-02-14-foliantcontribapilinks-113","text":"Moved combined_options into a submodule","title":"[2019-02-14] foliantcontrib.apilinks 1.1.3"},{"location":"releases/#2019-02-14-foliantcontribpgsqldoc-115","text":"Move combined_options into another module","title":"[2019-02-14] foliantcontrib.pgsqldoc 1.1.5"},{"location":"releases/#2019-02-14-foliantcontributilscombined_options-100","text":"Initial release.","title":"[2019-02-14] foliantcontrib.utils.combined_options 1.0.0"},{"location":"releases/#2019-02-12-foliantcontribtestrail-117","text":"Sections exclusion fixed.","title":"[2019-02-12] foliantcontrib.testrail 1.1.7"},{"location":"releases/#2019-02-08-foliantcontribtestrail-116","text":"Case structure output fixed if any problem occurs.","title":"[2019-02-08] foliantcontrib.testrail 1.1.6"},{"location":"releases/#2019-02-01-foliantcontribtestrail-115","text":"Bug with test case table numbering when deleting empty objects fixed. Readme updated.","title":"[2019-02-01] foliantcontrib.testrail 1.1.5"},{"location":"releases/#2019-01-21-foliantcontribapilinks-111","text":"Added filename to warnings.","title":"[2019-01-21] foliantcontrib.apilinks 1.1.1"},{"location":"releases/#2019-01-10-foliantcontribbindsympli-1011","text":"Disable images downloading from design pages only, but not from login page.","title":"[2019-01-10] foliantcontrib.bindsympli 1.0.11"},{"location":"releases/#2018-12-24-foliantcontribgraphviz-102","text":"Fixed external diagrams not reloading on change. Fixed external diagrams are not crashing preprocessor if the file is missing.","title":"[2018-12-24] foliantcontrib.graphviz 1.0.2"},{"location":"releases/#2018-12-20-foliantcontribbindsympli-1010","text":"Check if the design page exists and the image URL is valid.","title":"[2018-12-20] foliantcontrib.bindsympli 1.0.10"},{"location":"releases/#2018-12-17-foliantcontribgraphviz-101","text":"Added 'src' tag option to load diagram source from external file.","title":"[2018-12-17] foliantcontrib.graphviz 1.0.1"},{"location":"releases/#2018-12-17-foliantcontribgraphviz-100","text":"Initial release","title":"[2018-12-17] foliantcontrib.graphviz 1.0.0"},{"location":"releases/#2018-12-13-foliantcontribapilinks-110","text":"Prefixes are now case insensitive. Only prefixes which are defined are trimmed. New option only-defined-prefixes to ignore all prefixes which are not listed in config. Options renamed and regrouped. Breaks backward compatibility. Support of several reference pattern and properties (to catch models). Now search on API page for headers h1, h2, h3 and h4.","title":"[2018-12-13] foliantcontrib.apilinks 1.1.0"},{"location":"releases/#2018-12-06-foliantcontribsubset-108","text":"Remove forgotten unnecessary import.","title":"[2018-12-06] foliantcontrib.subset 1.0.8"},{"location":"releases/#2018-12-06-foliantcontribsubset-107","text":"Move the imports of the oyaml module directly into the methods that use it.","title":"[2018-12-06] foliantcontrib.subset 1.0.7"},{"location":"releases/#2018-12-06-foliantcontribbindsympli-109","text":"Move the while loop from JavaScript code to Python code. Add the max_attempts config option. Require Foliant 1.0.8 because of using the utils.output() method.","title":"[2018-12-06] foliantcontrib.bindsympli 1.0.9"},{"location":"releases/#2018-12-04-foliantcontribsubset-106","text":"Fix a bug: check if subset partial config contains chapters section correctly. Inherit the class Cli from BaseCli , not from Cliar .","title":"[2018-12-04] foliantcontrib.subset 1.0.6"},{"location":"releases/#2018-12-04-foliantcontribmultiproject-109","text":"Inherit the class Cli from BaseCli , not from Cliar .","title":"[2018-12-04] foliantcontrib.multiproject 1.0.9"},{"location":"releases/#2018-12-04-foliantcontribapilinks-105","text":"Now both command and endpoint prefix are ensured to start from root (/).","title":"[2018-12-04] foliantcontrib.apilinks 1.0.5"},{"location":"releases/#2018-12-03-foliantcontribapilinks-104","text":"Fix not catching errors from urllib. Added 'ignoring-prefix' option. Added 'endpoint-prefix' option into API->Name section.","title":"[2018-12-03] foliantcontrib.apilinks 1.0.4"},{"location":"releases/#2018-11-29-foliantcontribapilinks-103","text":"Add require-prefix option.","title":"[2018-11-29] foliantcontrib.apilinks 1.0.3"},{"location":"releases/#2018-11-29-foliantcontribapilinks-102","text":"Trim prefixes function.","title":"[2018-11-29] foliantcontrib.apilinks 1.0.2"},{"location":"releases/#2018-11-29-foliantcontribapilinks-101","text":"Update docs, fix anchor error. Add all HTTP verbs to regular expression.","title":"[2018-11-29] foliantcontrib.apilinks 1.0.1"},{"location":"releases/#2018-11-27-foliantcontribapilinks-100","text":"Initial release.","title":"[2018-11-27] foliantcontrib.apilinks 1.0.0"},{"location":"releases/#2018-11-23-foliantcontribtemplatespreprocessor-103","text":"Fix packages value in setup.py of the template: use foliant.preprocessors instead of foliantcontrib.preprocessors . Require Foliant 1.0.8 in setup.py of the template.","title":"[2018-11-23] foliantcontrib.templates.preprocessor 1.0.3"},{"location":"releases/#2018-11-20-foliantcontribtestrail-114","text":"Another bug with multi-select parameter processing fixed.","title":"[2018-11-20] foliantcontrib.testrail 1.1.4"},{"location":"releases/#2018-11-20-foliantcontribtestrail-113","text":"Jinja templates updated. Bug with multi-select parameter processing fixed.","title":"[2018-11-20] foliantcontrib.testrail 1.1.3"},{"location":"releases/#2018-11-19-foliantcontribtestrail-112","text":"Now it's possible to use dropdown type parameters for test cases samplings.","title":"[2018-11-19] foliantcontrib.testrail 1.1.2"},{"location":"releases/#2018-11-19-foliantcontribtestrail-111","text":"Readme updated.","title":"[2018-11-19] foliantcontrib.testrail 1.1.1"},{"location":"releases/#2018-11-19-foliantcontribtestrail-110","text":"Removed parameters: platforms, platform_id, add_cases_without_platform, add_unpublished_cases. Added parameters: exclude_suite_ids \u2014 to exclude suites from final document by ID, exclude_section_ids \u2014 to exclude sections from final document by ID, exclude_case_ids \u2014 to exclude cases from final document by ID, add_case_id_to_std_table - to add column with case ID to the testing table, multi_param_name - name of custom TestRail multi-select parameter for cases sampling, multi_param_select - values of multi-select parameter for cases sampling, multi_param_select_type \u2014 sampling method, add_cases_without_multi_param - to add cases without any value of multi-select parameter, add_multi_param_to_case_header \u2014 to add values of multi-select parameter to the case headers, add_multi_param_to_std_table \u2014 to add column with values of multi-select parameter to the testing table, checkbox_param_name - name of custom TestRail checkbox parameter for cases sampling, checkbox_param_select_type \u2014 state of custom TestRail checkbox parameter for cases sampling, choose_priorities \u2014 selection of case priorities for cases sampling, add_priority_to_case_header - to add priority to the case header, add_priority_to_std_table \u2014 to add column with priority to the testing table. Renamed parameters: add_case_id_to_case_name -> add_case_id_to_case_header. Fixed config parsing.","title":"[2018-11-19] foliantcontrib.testrail 1.1.0"},{"location":"releases/#2018-11-19-foliantcontribpgsqldoc-113","text":"Add tests; refactor code Fix triggers and functions; add description to functions Fix template","title":"[2018-11-19] foliantcontrib.pgsqldoc 1.1.3"},{"location":"releases/#2018-11-16-foliantcontribtemplatespreprocessor-102","text":"Require foliantcontrib.init 1.0.7, import the output() method. Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.templates.preprocessor 1.0.2"},{"location":"releases/#2018-11-16-foliantcontribmultiproject-108","text":"Do not rewrite source Markdown file if an error occurs in RepoLink preprocessor.","title":"[2018-11-16] foliantcontrib.multiproject 1.0.8"},{"location":"releases/#2018-11-16-foliantcontribmacros-104","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.macros 1.0.4"},{"location":"releases/#2018-11-16-foliantcontribincludes-1010","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.includes 1.0.10"},{"location":"releases/#2018-11-16-foliantcontribimgcaptions-101","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.imgcaptions 1.0.1"},{"location":"releases/#2018-11-16-foliantcontribimagemagick-101","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.imagemagick 1.0.1"},{"location":"releases/#2018-11-16-foliantcontribflags-102","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.flags 1.0.2"},{"location":"releases/#2018-11-16-foliantcontribepsconvert-105","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.epsconvert 1.0.5"},{"location":"releases/#2018-11-16-foliantcontribcustomids-105","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.customids 1.0.5"},{"location":"releases/#2018-11-16-foliantcontribbindsympli-108","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.bindsympli 1.0.8"},{"location":"releases/#2018-11-16-foliantcontribgupload-115","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-16] foliantcontrib.gupload 1.1.5"},{"location":"releases/#2018-11-16-foliantcontribslate-104","text":"Provide compatibility with Foliant 1.0.8. Fix preprocessor: if error source won't be cleared.","title":"[2018-11-16] foliantcontrib.slate 1.0.4"},{"location":"releases/#2018-11-14-foliantcontribplantuml-105","text":"Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.plantuml 1.0.5"},{"location":"releases/#2018-11-14-foliantcontribblockdiag-104","text":"Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.blockdiag 1.0.4"},{"location":"releases/#2018-11-14-foliantcontribmkdocs-107","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.mkdocs 1.0.7"},{"location":"releases/#2018-11-14-foliantcontribpandoc-108","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.pandoc 1.0.8"},{"location":"releases/#2018-11-14-foliantcontribinit-107","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.init 1.0.7"},{"location":"releases/#2018-11-14-foliant-108","text":"Restore quiet mode. Add the output() method for using in preprocessors.","title":"[2018-11-14] foliant 1.0.8"},{"location":"releases/#2018-11-14-foliantcontribpandoc-107","text":"Provide compatibility with Foliant 1.0.7.","title":"[2018-11-14] foliantcontrib.pandoc 1.0.7"},{"location":"releases/#2018-11-14-foliantcontribmkdocs-106","text":"Provide compatibility with Foliant 1.0.7.","title":"[2018-11-14] foliantcontrib.mkdocs 1.0.6"},{"location":"releases/#2018-11-14-foliant-107","text":"Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs.","title":"[2018-11-14] foliant 1.0.7"},{"location":"releases/#2018-11-13-foliantcontribinit-106","text":"Provide compatibility with Foliant 1.0.7.","title":"[2018-11-13] foliantcontrib.init 1.0.6"},{"location":"releases/#2018-11-12-foliantcontribmultilinetables-122","text":"Problem with deletion of table strings containing only spaces fixed (critical for lists in grid tables).","title":"[2018-11-12] foliantcontrib.multilinetables 1.2.2"},{"location":"releases/#2018-11-09-foliantcontribsubset-105","text":"Do not use yaml alias for oyaml module to prevent possible influence of this overriding on other parts of code.","title":"[2018-11-09] foliantcontrib.subset 1.0.5"},{"location":"releases/#2018-11-09-foliantcontribplantuml-104","text":"Additionally \u0441heck if diagram image is not saved.","title":"[2018-11-09] foliantcontrib.plantuml 1.0.4"},{"location":"releases/#2018-11-09-foliantcontribblockdiag-103","text":"Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log.","title":"[2018-11-09] foliantcontrib.blockdiag 1.0.3"},{"location":"releases/#2018-11-08-foliantcontribslate-103","text":"Add slate preprocessor which copies the images outside src into the slate project.","title":"[2018-11-08] foliantcontrib.slate 1.0.3"},{"location":"releases/#2018-11-08-foliantcontribtestrail-107","text":"Minor fixes.","title":"[2018-11-08] foliantcontrib.testrail 1.0.7"},{"location":"releases/#2018-11-08-foliantcontribplantuml-103","text":"Add parse_raw option. Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log.","title":"[2018-11-08] foliantcontrib.plantuml 1.0.3"},{"location":"releases/#2018-11-08-foliantcontribtestrail-106","text":"Added: parameters to exclude suite and section headers from the final document.","title":"[2018-11-08] foliantcontrib.testrail 1.0.6"},{"location":"releases/#2018-11-07-foliantcontribtestrail-105","text":"Minor fixes.","title":"[2018-11-07] foliantcontrib.testrail 1.0.5"},{"location":"releases/#2018-11-07-foliantcontribtestrail-104","text":"Fixed: if there is only one suite in project, it's header not added to the contents.","title":"[2018-11-07] foliantcontrib.testrail 1.0.4"},{"location":"releases/#2018-11-02-foliantcontribgupload-114","text":"Code refactored.","title":"[2018-11-02] foliantcontrib.gupload 1.1.4"},{"location":"releases/#2018-11-01-foliantcontribtemplatespreprocessor-101","text":"Add package_data to setup.py .","title":"[2018-11-01] foliantcontrib.templates.preprocessor 1.0.1"},{"location":"releases/#2018-11-01-foliantcontribgupload-113","text":"Logger bug fixed.","title":"[2018-11-01] foliantcontrib.gupload 1.1.3"},{"location":"releases/#2018-10-31-foliantcontribswaggerdoc-112","text":"Bug fixes All path parameters in config now accept either strings or !path strings","title":"[2018-10-31] foliantcontrib.swaggerdoc 1.1.2"},{"location":"releases/#2018-10-31-foliantcontribswaggerdoc-111","text":"Add 'additional_json_path' param for jinja mode Add support for several json_urls","title":"[2018-10-31] foliantcontrib.swaggerdoc 1.1.1"},{"location":"releases/#2018-10-30-foliantcontribmultilinetables-121","text":"Possibility to rewrite source files added.","title":"[2018-10-30] foliantcontrib.multilinetables 1.2.1"},{"location":"releases/#2018-10-30-foliantcontribtestrail-103","text":"Possibility to rewrite source file added.","title":"[2018-10-30] foliantcontrib.testrail 1.0.3"},{"location":"releases/#2018-10-29-foliantcontribbindsympli-107","text":"Use 60-seconds timeout instead of 30-seconds. Provide multiple attempts to open pages.","title":"[2018-10-29] foliantcontrib.bindsympli 1.0.7"},{"location":"releases/#2018-10-29-foliantcontribtestrail-102","text":"Suites collecting fixed.","title":"[2018-10-29] foliantcontrib.testrail 1.0.2"},{"location":"releases/#2018-10-29-foliantcontribmultilinetables-120","text":"Convertation th the grid format added for arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.).","title":"[2018-10-29] foliantcontrib.multilinetables 1.2.0"},{"location":"releases/#2018-10-24-foliantcontribmultiproject-107","text":"Allow to override the edit_uri config option of RepoLink preprocessor with the FOLIANT_REPOLINK_EDIT_URI system environment variable.","title":"[2018-10-24] foliantcontrib.multiproject 1.0.7"},{"location":"releases/#2018-10-23-foliantcontribmultiproject-106","text":"Tidy up CLI arguments.","title":"[2018-10-23] foliantcontrib.multiproject 1.0.6"},{"location":"releases/#2018-10-23-foliantcontribsubset-104","text":"Tidy up command line arguments one more time.","title":"[2018-10-23] foliantcontrib.subset 1.0.4"},{"location":"releases/#2018-10-23-foliantcontribsubset-103","text":"Tidy up command line arguments.","title":"[2018-10-23] foliantcontrib.subset 1.0.3"},{"location":"releases/#2018-10-23-foliantcontribsubset-102","text":"Fix a bug with object names.","title":"[2018-10-23] foliantcontrib.subset 1.0.2"},{"location":"releases/#2018-10-22-foliantcontribsubset-101","text":"Parse YAML fairly. Merge config files recursively.","title":"[2018-10-22] foliantcontrib.subset 1.0.1"},{"location":"releases/#2018-10-19-foliantcontribswaggerdoc-110","text":"Change parameter names and behavior uncompatible with 1.0.0 Add conversion to md with widdershins","title":"[2018-10-19] foliantcontrib.swaggerdoc 1.1.0"},{"location":"releases/#2018-10-11-foliantcontribincludes-109","text":"Don\u2019t crash on failed repo sync (i.e. when you\u2019re offline).","title":"[2018-10-11] foliantcontrib.includes 1.0.9"},{"location":"releases/#2018-10-11-foliantcontribmkdocs-105","text":"Require MkDocs 1.0.4.","title":"[2018-10-11] foliantcontrib.mkdocs 1.0.5"},{"location":"releases/#2018-10-02-foliantcontribreplace-101","text":"Strings with image links are ignored.","title":"[2018-10-02] foliantcontrib.replace 1.0.1"},{"location":"releases/#2018-10-01-foliantcontribgupload-112","text":"Convert to google docs format setting added.","title":"[2018-10-01] foliantcontrib.gupload 1.1.2"},{"location":"releases/#2018-09-25-foliantcontribgupload-111","text":"Unification of repository name, settings section name, and command.","title":"[2018-09-25] foliantcontrib.gupload 1.1.1"},{"location":"releases/#2018-09-25-foliantcontribgupload-110","text":"Backend was converted to CLI extension.","title":"[2018-09-25] foliantcontrib.gupload 1.1.0"},{"location":"releases/#2018-09-25-foliantcontribmultilinetables-113","text":"'targets' option added to the preprocessor settings.","title":"[2018-09-25] foliantcontrib.multilinetables 1.1.3"},{"location":"releases/#2018-09-21-foliantcontribslate-102","text":"Rename shards_path param to shards. It now accepts string or list. Fix no header param.","title":"[2018-09-21] foliantcontrib.slate 1.0.2"},{"location":"releases/#2018-09-20-foliantcontribslate-101","text":"Remove flatten. First chapter goes to index.html.md; all the rest go into the includes.","title":"[2018-09-20] foliantcontrib.slate 1.0.1"},{"location":"releases/#2018-09-18-foliantcontribgupload-101","text":"Command line authentication was added, for example for Docker use.","title":"[2018-09-18] foliantcontrib.gupload 1.0.1"},{"location":"releases/#2018-09-14-foliantcontribtestrail-101","text":"Preprocessor folder structure fixed.","title":"[2018-09-14] foliantcontrib.testrail 1.0.1"},{"location":"releases/#2018-09-12-foliantcontribbindsympli-106","text":"Do not disable images downloading. Use delays when filling email and password fields. Wait for idle network connections when loading pages.","title":"[2018-09-12] foliantcontrib.bindsympli 1.0.6"},{"location":"releases/#2018-08-31-foliant-106","text":"CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor.","title":"[2018-08-31] foliant 1.0.6"},{"location":"releases/#2018-08-29-foliantcontribpgsqldoc-112","text":"Queries are now ordered (not adjustable right now) Flexable filters instead of strict filtering by schema","title":"[2018-08-29] foliantcontrib.pgsqldoc 1.1.2"},{"location":"releases/#2018-08-27-foliantcontribpgsqldoc-111","text":"Fix scheme template (blank lines issue) Refactor queries code","title":"[2018-08-27] foliantcontrib.pgsqldoc 1.1.1"},{"location":"releases/#2018-08-24-foliantcontribmultilinetables-112","text":"Now it's possible to break the text anywhere in multiline tables with custom tag. Fixed determination of columns number in tables with and without side lines.","title":"[2018-08-24] foliantcontrib.multilinetables 1.1.2"},{"location":"releases/#2018-08-24-foliantcontribpgsqldoc-110","text":"Docs and scheme structure is now defined by Jinja2 templates.","title":"[2018-08-24] foliantcontrib.pgsqldoc 1.1.0"},{"location":"releases/#2018-08-22-foliantcontribmultilinetables-111","text":"Bug with regular expression fixed. 3+ code strings with || operator in a row are not perceived as a tables now.","title":"[2018-08-22] foliantcontrib.multilinetables 1.1.1"},{"location":"releases/#2018-08-22-foliantcontribmultilinetables-110","text":"Code strings with || operator are not perceived as a tables now.","title":"[2018-08-22] foliantcontrib.multilinetables 1.1.0"},{"location":"releases/#2018-07-31-foliantcontribbump-102","text":"Declare semver as dependency.","title":"[2018-07-31] foliantcontrib.bump 1.0.2"},{"location":"releases/#2018-07-29-foliantcontribbump-101","text":"Fix packaging with setup.py. Poetry doesn't quite do the trick \ud83d\ude14","title":"[2018-07-29] foliantcontrib.bump 1.0.1"},{"location":"releases/#2018-07-28-foliantcontribbump-100","text":"Initial release.","title":"[2018-07-28] foliantcontrib.bump 1.0.0"},{"location":"releases/#2018-07-24-foliantcontribmkdocs-104","text":"Provide customizable default names for untitled nested groups of chapters.","title":"[2018-07-24] foliantcontrib.mkdocs 1.0.4"},{"location":"releases/#2018-07-24-foliantcontribflatten-104","text":"Skip empty headings of nested subsections.","title":"[2018-07-24] foliantcontrib.flatten 1.0.4"},{"location":"releases/#2018-07-23-foliantcontribincludes-108","text":"Require at least one space after hashes in the beginning of each heading. Add inline option to the <include> tag. Fix the bug: do not ignore empty lines after headings when using sethead . Fix the bug: allow to use less than 3 characters in the heading content. Do not mark as headings the strings that contain more than 6 leading hashes. If shifted heading level is more than 6, mark the heading content as bold paragraph text, not as heading.","title":"[2018-07-23] foliantcontrib.includes 1.0.8"},{"location":"releases/#2018-06-08-foliantcontribmultiproject-105","text":"Provide Git submodules support.","title":"[2018-06-08] foliantcontrib.multiproject 1.0.5"},{"location":"releases/#2018-06-07-foliantcontribflatten-103","text":"Use flattened file path in includes preprocessor call. Require includes preprocessor 1.0.7.","title":"[2018-06-07] foliantcontrib.flatten 1.0.3"},{"location":"releases/#2018-06-06-foliantcontribincludes-107","text":"Fix paths resolving in case of recursive processing of include statements. Allow revision markers in repo aliases.","title":"[2018-06-06] foliantcontrib.includes 1.0.7"},{"location":"releases/#2018-06-04-foliantcontribincludes-106","text":"Fix logging in file search method. Fix top heading level calculation.","title":"[2018-06-04] foliantcontrib.includes 1.0.6"},{"location":"releases/#2018-06-04-foliantcontribmultiproject-104","text":"Provide compatibility with Foliant 1.0.5. Allow to use multiple config files.","title":"[2018-06-04] foliantcontrib.multiproject 1.0.4"},{"location":"releases/#2018-06-04-foliantcontribpandoc-106","text":"Apply flatten after all preprocessors, not before them. This fixes incompatibility with foliantcontrib.includes 1.0.5.","title":"[2018-06-04] foliantcontrib.pandoc 1.0.6"},{"location":"releases/#2018-06-04-foliantcontribflatten-102","text":"Fix incorrect includes preprocessor call. Require Foliant 1.0.5.","title":"[2018-06-04] foliantcontrib.flatten 1.0.2"},{"location":"releases/#2018-06-04-foliantcontribinit-105","text":"Require Foliant 1.0.5 with prompt_toolkit^2.0.0.","title":"[2018-06-04] foliantcontrib.init 1.0.5"},{"location":"releases/#2018-05-30-foliantcontribcustomids-104","text":"Provide separate block-level HTML elements for the anchors. Allow to define custom stylesheets for these elements.","title":"[2018-05-30] foliantcontrib.customids 1.0.4"},{"location":"releases/#2018-05-25-foliantcontribincludes-105","text":"Use paths that are relative to the current processed Markdown file. Fix sethead behavior for headings that contains hashes ( # ).","title":"[2018-05-25] foliantcontrib.includes 1.0.5"},{"location":"releases/#2018-05-14-foliant-105","text":"Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style.","title":"[2018-05-14] foliant 1.0.5"},{"location":"releases/#2018-05-10-foliantcontribpandoc-105","text":"Add slug config option.","title":"[2018-05-10] foliantcontrib.pandoc 1.0.5"},{"location":"releases/#2018-05-08-foliantcontribmultiproject-103","text":"Fix config loading. Other small fixes.","title":"[2018-05-08] foliantcontrib.multiproject 1.0.3"},{"location":"releases/#2018-04-25-foliantcontribmultiproject-102","text":"Fix bugs with the project directory path and Git repos syncronizing.","title":"[2018-04-25] foliantcontrib.multiproject 1.0.2"},{"location":"releases/#2018-04-23-foliantcontribmultiproject-101","text":"Fix logging.","title":"[2018-04-23] foliantcontrib.multiproject 1.0.1"},{"location":"releases/#2018-04-20-foliantcontribbindsympli-105","text":"Add logging.","title":"[2018-04-20] foliantcontrib.bindsympli 1.0.5"},{"location":"releases/#2018-04-20-foliantcontribplantuml-102","text":"Fix logging in __init__ .","title":"[2018-04-20] foliantcontrib.plantuml 1.0.2"},{"location":"releases/#2018-04-20-foliantcontribplantuml-101","text":"Add logging.","title":"[2018-04-20] foliantcontrib.plantuml 1.0.1"},{"location":"releases/#2018-04-20-foliantcontribflatten-101","text":"Fix incorrect includes preprocessor call. Add logging. Require Foliant 1.0.4.","title":"[2018-04-20] foliantcontrib.flatten 1.0.1"},{"location":"releases/#2018-04-19-foliantcontribepsconvert-104","text":"Do not use image path when computing MD5 hash. Add targets config option. Add logging.","title":"[2018-04-19] foliantcontrib.epsconvert 1.0.4"},{"location":"releases/#2018-04-19-foliantcontribtemplatespreprocessor-100","text":"Initial release.","title":"[2018-04-19] foliantcontrib.templates.preprocessor 1.0.0"},{"location":"releases/#2018-04-18-foliantcontribcustomids-103","text":"Add targets config option. Add logging.","title":"[2018-04-18] foliantcontrib.customids 1.0.3"},{"location":"releases/#2018-04-14-foliantcontribblockdiag-102","text":"Add logging. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.blockdiag 1.0.2"},{"location":"releases/#2018-04-14-foliantcontribpandoc-104","text":"Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.pandoc 1.0.4"},{"location":"releases/#2018-04-14-foliantcontribmkdocs-103","text":"Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.mkdocs 1.0.3"},{"location":"releases/#2018-04-14-foliantcontribinit-104","text":"Replace placeholders in file and directory names. Process *.py files. User Template strings instead of format strings for safer substitutions. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.init 1.0.4"},{"location":"releases/#2018-04-11-foliant-104","text":"Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions.","title":"[2018-04-11] foliant 1.0.4"},{"location":"releases/#2018-04-10-foliantcontribbindsympli-104","text":"Describe the preprocessor usage in README.md .","title":"[2018-04-10] foliantcontrib.bindsympli 1.0.4"},{"location":"releases/#2018-04-10-foliantcontribbindsympli-103","text":"Eliminate external Perl scripts, rewrite the preprocessor code in Python.","title":"[2018-04-10] foliantcontrib.bindsympli 1.0.3"},{"location":"releases/#2018-04-02-foliant-103","text":"Fix critical issue when config parsing would fail if any config value contained non-latin characters.","title":"[2018-04-02] foliant 1.0.3"},{"location":"releases/#2018-04-01-foliantcontribincludes-104","text":"Fix the pattern for headings detection.","title":"[2018-04-01] foliantcontrib.includes 1.0.4"},{"location":"releases/#2018-03-31-foliantcontribincludes-103","text":"Allow hashes ( # characters) in the content of headings.","title":"[2018-03-31] foliantcontrib.includes 1.0.3"},{"location":"releases/#2018-03-29-foliantcontribepsconvert-103","text":"Take into account the content of image file when computing MD5 hash.","title":"[2018-03-29] foliantcontrib.epsconvert 1.0.3"},{"location":"releases/#2018-03-29-foliantcontribepsconvert-102","text":"Add support of any local paths. Add image cache. Remove mogrify_path and diagrams_cache_dir options, add convert_path and cache_dir instead.","title":"[2018-03-29] foliantcontrib.epsconvert 1.0.2"},{"location":"releases/#2018-03-28-foliantcontribcustomids-102","text":"Process first heading and all other headings separately.","title":"[2018-03-28] foliantcontrib.customids 1.0.2"},{"location":"releases/#2018-03-27-foliantcontribcustomids-101","text":"Update README.md and docstrings. Update long description content type in setup.py","title":"[2018-03-27] foliantcontrib.customids 1.0.1"},{"location":"releases/#2018-03-27-foliantcontribbindsympli-102","text":"Change the path for non-Python scripts once more.","title":"[2018-03-27] foliantcontrib.bindsympli 1.0.2"},{"location":"releases/#2018-03-27-foliantcontribbindsympli-101","text":"Change the path for non-Python scripts.","title":"[2018-03-27] foliantcontrib.bindsympli 1.0.1"},{"location":"releases/#2018-03-21-foliantcontribincludes-102","text":"Fix inappropriate translation of image URLs into local paths.","title":"[2018-03-21] foliantcontrib.includes 1.0.2"},{"location":"releases/#2018-03-21-foliantcontribmkdocs-102","text":"Add use_headings and slug options for MkDocs backend. Fix inappropriate translation of image URLs into local paths in MkDocs preprocessor.","title":"[2018-03-21] foliantcontrib.mkdocs 1.0.2"},{"location":"releases/#2018-03-17-foliant-102","text":"Use README.md as package description.","title":"[2018-03-17] foliant 1.0.2"},{"location":"releases/#2018-03-13-foliantcontribepsconvert-101","text":"Add diagrams_cache_dir option support.","title":"[2018-03-13] foliantcontrib.epsconvert 1.0.1"},{"location":"releases/#2018-02-28-foliantcontribpandoc-103","text":"Change Pandoc command line parameter --reference-docx to --reference-doc .","title":"[2018-02-28] foliantcontrib.pandoc 1.0.3"},{"location":"releases/#2018-02-25-foliant-101","text":"Fix critical bug with CLI module caused by missing version definition in the root __init__.py file.","title":"[2018-02-25] foliant 1.0.1"},{"location":"releases/#2018-02-23-foliant-100","text":"Complete rewrite.","title":"[2018-02-23] foliant 1.0.0"},{"location":"releases/#2018-02-16-foliantcontribblockdiag-101","text":"Add pdf output format support.","title":"[2018-02-16] foliantcontrib.blockdiag 1.0.1"},{"location":"releases/#2018-02-07-foliantcontribinit-103","text":"Upon creation, relative path to the created project directory is returned instead of an absolute one. Templates: basic: Foliant docs related content removed from README.md. Templates: basic: foliantcontrib.mkdocs added to requirements.txt.","title":"[2018-02-07] foliantcontrib.init 1.0.3"},{"location":"releases/#2018-02-07-foliantcontribinit-102","text":"Add slug placeholder. Process placeholders in .yml , .txt , and .md files, not just foliant.yml . Templates: basic: Add Dockerfile , docker-compose.yml , requirements.txt , and README.md .","title":"[2018-02-07] foliantcontrib.init 1.0.2"},{"location":"releases/#2018-02-07-foliantcontribinit-101","text":"Fix issue with init command missing after installation. Fix issue with missing templates after installation.","title":"[2018-02-07] foliantcontrib.init 1.0.1"},{"location":"releases/#2018-02-01-foliantcontribmacros-103","text":"Add tag <m>...</m> .","title":"[2018-02-01] foliantcontrib.macros 1.0.3"},{"location":"releases/#2018-01-17-foliantcontribmacros-102","text":"Switch from unnamed to named parameters. Macro name is now defined in the tag body instead of \"name\" option.","title":"[2018-01-17] foliantcontrib.macros 1.0.2"},{"location":"releases/#2018-01-15-foliantcontribmacros-101","text":"Preserve param case.","title":"[2018-01-15] foliantcontrib.macros 1.0.1"},{"location":"releases/#2018-01-06-foliantcontribflags-101","text":"Add targets and backends options to <if> tag.","title":"[2018-01-06] foliantcontrib.flags 1.0.1"},{"location":"releases/#2018-01-05-foliantcontribpandoc-102","text":"Change default Markdown flavor from markdown_strict to markdown .","title":"[2018-01-05] foliantcontrib.pandoc 1.0.2"},{"location":"releases/#2017-12-17-foliantcontribpandoc-101","text":"Add tex target.","title":"[2017-12-17] foliantcontrib.pandoc 1.0.1"},{"location":"releases/#2017-12-16-foliantcontribmkdocs-101","text":"Add ghp target for GitHub Pages deploy with mkdocs gh-deploy .","title":"[2017-12-16] foliantcontrib.mkdocs 1.0.1"},{"location":"releases/#2017-12-15-foliantcontribincludes-101","text":"Fix git repo name detection when the repo part contains full stops.","title":"[2017-12-15] foliantcontrib.includes 1.0.1"},{"location":"backends/aglio/","text":"Aglio \u00b6 Aglio Backend for Foliant \u00b6 Aglio backend generates API documentation from API Blueprint using aglio renderer . This backend operates the site target. Note, that aglio is designed to render API Blueprint documents. Blueprint syntax is very close to that of Markdown and you may be tempted to use this backend as a general purpose static site generator. It may work in some cases, but is not guaranteed to work in all of them. Installation \u00b6 $ pip install foliantcontrib.aglio Usage \u00b6 To use this backend aglio should be installed in your system. Follow the instruction in aglio repo. To test if you've installed aglio properly run the aglio -h command, which should return you a list of options. To generate a static website from your Foliant project run the following command: $ foliant make site --with aglio Parsing config... Done Making site... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Awesome_Project.aglio Config \u00b6 You don't have to put anything in the config to use aglio backend. If it's installed, Foliant detects it. To customize the output, use options in backend_config.aglio section: backend_config : aglio : aglio_path : aglio params : theme-variables : flatly fullWidth : True aglio_path Path to the aglio binary. Default: aglio params Parameters which will be supplied to the aglio command. To get the list of possible parameters, run aglio -h or check the official docs . Customizing output \u00b6 Templates \u00b6 You can customize the appearance of the static website build by aglio with Jade templates. Aglio has two built-in templates: default \u2014 two-column web-page; triple \u2014 three-column web-page. To add your own template, follow the instructions in the official docs. To specify the template add the theme-template field to the params option: backend_config : aglio : params : theme-template : triple Color scheme \u00b6 You can customize the color scheme of the website by specifying the color scheme name in theme-variables param. Available built-in color schemes: default , cyborg , flatly , slate , streak . You can also specify your own scheme in a LESS or CSS file. backend_config : aglio : params : theme-variables : flatly Stylesheets \u00b6 Finally, you can provide custom stylesheets in a LESS or CSS file in theme-style param: backend_config : aglio : params : theme-style : !path my-style.less","title":"Aglio"},{"location":"backends/aglio/#aglio","text":"","title":"Aglio"},{"location":"backends/aglio/#aglio-backend-for-foliant","text":"Aglio backend generates API documentation from API Blueprint using aglio renderer . This backend operates the site target. Note, that aglio is designed to render API Blueprint documents. Blueprint syntax is very close to that of Markdown and you may be tempted to use this backend as a general purpose static site generator. It may work in some cases, but is not guaranteed to work in all of them.","title":"Aglio Backend for Foliant"},{"location":"backends/aglio/#installation","text":"$ pip install foliantcontrib.aglio","title":"Installation"},{"location":"backends/aglio/#usage","text":"To use this backend aglio should be installed in your system. Follow the instruction in aglio repo. To test if you've installed aglio properly run the aglio -h command, which should return you a list of options. To generate a static website from your Foliant project run the following command: $ foliant make site --with aglio Parsing config... Done Making site... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Awesome_Project.aglio","title":"Usage"},{"location":"backends/aglio/#config","text":"You don't have to put anything in the config to use aglio backend. If it's installed, Foliant detects it. To customize the output, use options in backend_config.aglio section: backend_config : aglio : aglio_path : aglio params : theme-variables : flatly fullWidth : True aglio_path Path to the aglio binary. Default: aglio params Parameters which will be supplied to the aglio command. To get the list of possible parameters, run aglio -h or check the official docs .","title":"Config"},{"location":"backends/aglio/#customizing-output","text":"","title":"Customizing output"},{"location":"backends/aglio/#templates","text":"You can customize the appearance of the static website build by aglio with Jade templates. Aglio has two built-in templates: default \u2014 two-column web-page; triple \u2014 three-column web-page. To add your own template, follow the instructions in the official docs. To specify the template add the theme-template field to the params option: backend_config : aglio : params : theme-template : triple","title":"Templates"},{"location":"backends/aglio/#color-scheme","text":"You can customize the color scheme of the website by specifying the color scheme name in theme-variables param. Available built-in color schemes: default , cyborg , flatly , slate , streak . You can also specify your own scheme in a LESS or CSS file. backend_config : aglio : params : theme-variables : flatly","title":"Color scheme"},{"location":"backends/aglio/#stylesheets","text":"Finally, you can provide custom stylesheets in a LESS or CSS file in theme-style param: backend_config : aglio : params : theme-style : !path my-style.less","title":"Stylesheets"},{"location":"backends/confluence/","text":"Confluence \u00b6 Confluence backend generates confluence articles and uploads them on your confluence server. It can create and edit pages in Confluence with content based on your Foliant project. It also has a feature of restoring the user inline comments, added for the article, even after the commented fragment was changed. This backend adds the confluence target for your Foliant make command. Installation \u00b6 $ pip install foliantcontrib.confluence The backend requires Pandoc to be installed in your system. Pandoc is needed to convert Markdown into HTML. Usage \u00b6 To upload a Foliant project to Confluence server use make confluence command: $ foliant make confluence Parsing config... Done Making confluence... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: https://my_confluence_server.org/pages/viewpage.action?pageId = 123 ( Page Title ) Config \u00b6 You have to set up the correct config for this backend to work properly. Specify all options in backend_config.confluence section: backend_config : confluence : host : 'https://my_confluence_server.org' login : user password : user_password id : 124443 title : Title of the page space_key : \"~user\" parent_id : 124442 parent_title : Parent test_run : false notify_watchers : false toc : false restore_comments : true resolve_if_changed : false pandoc_path : pandoc codeblocks : ... host Required Host of your confluence server. login Login of the user who has permissions to create and update pages. If login is not supplied, it will be prompted during the build. password Password of the user. If the password is not supplied, it will be prompted during the build. id ID of the page where the content will be uploaded. Only for already existing pages title Title of the page to be created or updated. Remember that page titles in the space have to be unique. space_key The space key where the page(s) will be created/edited. Only for not yet existing pages . parent_id ID of the parent page under which the new one(s) should be created. Only for not yet existing pages . parent_title Another way to define the parent of the page. Lower priority than paren_di . Title of the parent page under which the new one(s) should be created. The parent should exist under the space_key specified. Only for not yet existing pages . test_run If this option is true, Foliant will prepare the files for uploading to Confluence, but won't actually upload them. Use this option for testing your content before upload. The prepared files can be found in .confluencecache/debug folder. Default: false notify_watchers If true \u2014 watchers will be notified that the page has changed. Default: false toc Set to true to add a table of contents to the beginning of the document. Default: false restore_comments Attempt to restore inline comments near the same places after updating the page. Default: true resolve_if_changed Delete inline comment from the source if the commented text was changed. This will automatically mark the comment as resolved. Default: false pandoc_path Path to Pandoc executable (Pandoc is used to convert Markdown into HTML). codeblocks Configuration for converting Markdown code blocks into code-block macros. See details in Code blocks processing sections. User's guide \u00b6 Uploading articles \u00b6 By default, if you specify id or space_key and title in foliant.yml, the whole project will be built and uploaded to this page. If you wish to upload separate chapters into separate articles, you need to specify the respective id or space_key and title in meta section of the chapter. Meta section is a YAML-formatted field-value section in the beginning of the document, which is defined like this: --- field : value field2 : value --- Your chapter md-content If you want to upload a chapter into confluence, add its properties under the confluence key like this: --- confluence : title : My confluence page space_key : \"~user\" --- You chapter md-content Important notice! Both modes work together. If you specify the id1 in foliant.yml and id2 in chapter's meta \u2014 the whole project will be uploaded to the page with id1 , and the specific chapter will also be uploaded to the page with id2 . Creating pages \u00b6 If you want a new page to be created for content in your Foliant project, just supply in foliant.yml the space key and a title that does not yet exist in this space. Remember that in Confluence page titles are unique inside one space. If you use a title of an already existing page, the backend will attempt to edit it and replace its content with your project. Example config for this situation is: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass title : My unique title space_key : \"~user\" Now if you change the title in your config, confluence will create a new page with the new title , leaving the old one intact. If you want to change the title of your page, the answer is in the following section. Updating pages \u00b6 Generally to update the page contents you may use the same config you used to create it (see the previous section). If the page with a specified title exists, it will be updated. Also, you can just specify the id of an existing page. After build its contents will be updated. backend_config : confluence : host : https://my_confluence_server.org login : user password : pass id : 124443 This is also the only way to edit a page title. If title param is specified, the backend will attempt to change the page's title to the new one: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass id : 124443 title : New unique title Updating part of a page \u00b6 Confluence backend can also upload an article into the middle of a Confluence page, leaving all the rest of it intact. To do this you need to add an Anchor into your page in the place where you want Foliant content to appear. Go to Confluence web interface and open the article. Go to Edit mode. Put the cursor in the position where you want your Foliant content to be inserted and start typing {anchor to open the macros menu and locate the Anchor macro. Add an anchor with the name foliant . Save the page. Now if you upload content into this page (see two previous sections), Confluence backend will leave all text which was before and after the anchor intact, and add your Foliant content in the middle. You can also add two anchors: foliant_start and foliant_end . In this case, all text between these anchors will be replaced by your Foliant content. Inserting raw confluence tags \u00b6 If you want to supplement your page with confluence macros or any other storage-specific HTML, you may do it by wrapping them in the <raw_confluence></raw_confluence> tag. For example, if you wish to add a table of contents into the middle of the document for some reason, you can do something like this: Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit dolorem nulla quam doloribus delectus voluptate. < raw_confluence >< ac:structured-macro ac:macro-id = \"1\" ac:name = \"toc\" ac:schema-version = \"1\" /></ raw_confluence > Lorem ipsum dolor sit amet, consectetur adipisicing elit. Officiis, laboriosam cumque soluta sequi blanditiis, voluptatibus quaerat similique nihil debitis repellendus. Code blocks processing \u00b6 Since 0.6.9 backend converts Markdown code blocks into Confluence code-block macros. You can tune the macros appearance by specifying some options in codeblocks config section of Confluence backend backend_config : confluence : codeblocks : # all are optional theme : django title : Code example linenumbers : false collapse : false theme Color theme of the code blocks. Should be one of: emacs , django , fadetogrey , midnight , rdark , eclipse , confluence . title Title of the code block. linenumbers Show line numbers in code blocks. Default: false collapse Collapse code blocks into a clickable bar. Default: false Right now Foliant only converts code blocks by backticks/tildes (tabbed code blocks are ignored for now): This code block will be converted : ``` python def test2 (): pass ``` And this: ~~~ def test3(): pass ~~~ Syntax name, defined after backticks/tildes is converted into its Confluence counterpart. Right now following syntaxes are supported: actionscript , applescript , bash , c , c , coldfusion , cpp , cs , css , delphi , diff , erlang , groovy , html , java , javascript , js , perl , php , powershell , python , xml , yaml . Credits \u00b6 The following wonderful tools and libraries are used in foliantcontrib.confluence: Atlassian Python API wrapper , BeautifulSoup , PyParsing .","title":"Confluence"},{"location":"backends/confluence/#confluence","text":"Confluence backend generates confluence articles and uploads them on your confluence server. It can create and edit pages in Confluence with content based on your Foliant project. It also has a feature of restoring the user inline comments, added for the article, even after the commented fragment was changed. This backend adds the confluence target for your Foliant make command.","title":"Confluence"},{"location":"backends/confluence/#installation","text":"$ pip install foliantcontrib.confluence The backend requires Pandoc to be installed in your system. Pandoc is needed to convert Markdown into HTML.","title":"Installation"},{"location":"backends/confluence/#usage","text":"To upload a Foliant project to Confluence server use make confluence command: $ foliant make confluence Parsing config... Done Making confluence... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: https://my_confluence_server.org/pages/viewpage.action?pageId = 123 ( Page Title )","title":"Usage"},{"location":"backends/confluence/#config","text":"You have to set up the correct config for this backend to work properly. Specify all options in backend_config.confluence section: backend_config : confluence : host : 'https://my_confluence_server.org' login : user password : user_password id : 124443 title : Title of the page space_key : \"~user\" parent_id : 124442 parent_title : Parent test_run : false notify_watchers : false toc : false restore_comments : true resolve_if_changed : false pandoc_path : pandoc codeblocks : ... host Required Host of your confluence server. login Login of the user who has permissions to create and update pages. If login is not supplied, it will be prompted during the build. password Password of the user. If the password is not supplied, it will be prompted during the build. id ID of the page where the content will be uploaded. Only for already existing pages title Title of the page to be created or updated. Remember that page titles in the space have to be unique. space_key The space key where the page(s) will be created/edited. Only for not yet existing pages . parent_id ID of the parent page under which the new one(s) should be created. Only for not yet existing pages . parent_title Another way to define the parent of the page. Lower priority than paren_di . Title of the parent page under which the new one(s) should be created. The parent should exist under the space_key specified. Only for not yet existing pages . test_run If this option is true, Foliant will prepare the files for uploading to Confluence, but won't actually upload them. Use this option for testing your content before upload. The prepared files can be found in .confluencecache/debug folder. Default: false notify_watchers If true \u2014 watchers will be notified that the page has changed. Default: false toc Set to true to add a table of contents to the beginning of the document. Default: false restore_comments Attempt to restore inline comments near the same places after updating the page. Default: true resolve_if_changed Delete inline comment from the source if the commented text was changed. This will automatically mark the comment as resolved. Default: false pandoc_path Path to Pandoc executable (Pandoc is used to convert Markdown into HTML). codeblocks Configuration for converting Markdown code blocks into code-block macros. See details in Code blocks processing sections.","title":"Config"},{"location":"backends/confluence/#users-guide","text":"","title":"User's guide"},{"location":"backends/confluence/#uploading-articles","text":"By default, if you specify id or space_key and title in foliant.yml, the whole project will be built and uploaded to this page. If you wish to upload separate chapters into separate articles, you need to specify the respective id or space_key and title in meta section of the chapter. Meta section is a YAML-formatted field-value section in the beginning of the document, which is defined like this: --- field : value field2 : value --- Your chapter md-content If you want to upload a chapter into confluence, add its properties under the confluence key like this: --- confluence : title : My confluence page space_key : \"~user\" --- You chapter md-content Important notice! Both modes work together. If you specify the id1 in foliant.yml and id2 in chapter's meta \u2014 the whole project will be uploaded to the page with id1 , and the specific chapter will also be uploaded to the page with id2 .","title":"Uploading articles"},{"location":"backends/confluence/#creating-pages","text":"If you want a new page to be created for content in your Foliant project, just supply in foliant.yml the space key and a title that does not yet exist in this space. Remember that in Confluence page titles are unique inside one space. If you use a title of an already existing page, the backend will attempt to edit it and replace its content with your project. Example config for this situation is: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass title : My unique title space_key : \"~user\" Now if you change the title in your config, confluence will create a new page with the new title , leaving the old one intact. If you want to change the title of your page, the answer is in the following section.","title":"Creating pages"},{"location":"backends/confluence/#updating-pages","text":"Generally to update the page contents you may use the same config you used to create it (see the previous section). If the page with a specified title exists, it will be updated. Also, you can just specify the id of an existing page. After build its contents will be updated. backend_config : confluence : host : https://my_confluence_server.org login : user password : pass id : 124443 This is also the only way to edit a page title. If title param is specified, the backend will attempt to change the page's title to the new one: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass id : 124443 title : New unique title","title":"Updating pages"},{"location":"backends/confluence/#updating-part-of-a-page","text":"Confluence backend can also upload an article into the middle of a Confluence page, leaving all the rest of it intact. To do this you need to add an Anchor into your page in the place where you want Foliant content to appear. Go to Confluence web interface and open the article. Go to Edit mode. Put the cursor in the position where you want your Foliant content to be inserted and start typing {anchor to open the macros menu and locate the Anchor macro. Add an anchor with the name foliant . Save the page. Now if you upload content into this page (see two previous sections), Confluence backend will leave all text which was before and after the anchor intact, and add your Foliant content in the middle. You can also add two anchors: foliant_start and foliant_end . In this case, all text between these anchors will be replaced by your Foliant content.","title":"Updating part of a page"},{"location":"backends/confluence/#inserting-raw-confluence-tags","text":"If you want to supplement your page with confluence macros or any other storage-specific HTML, you may do it by wrapping them in the <raw_confluence></raw_confluence> tag. For example, if you wish to add a table of contents into the middle of the document for some reason, you can do something like this: Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit dolorem nulla quam doloribus delectus voluptate. < raw_confluence >< ac:structured-macro ac:macro-id = \"1\" ac:name = \"toc\" ac:schema-version = \"1\" /></ raw_confluence > Lorem ipsum dolor sit amet, consectetur adipisicing elit. Officiis, laboriosam cumque soluta sequi blanditiis, voluptatibus quaerat similique nihil debitis repellendus.","title":"Inserting raw confluence tags"},{"location":"backends/confluence/#code-blocks-processing","text":"Since 0.6.9 backend converts Markdown code blocks into Confluence code-block macros. You can tune the macros appearance by specifying some options in codeblocks config section of Confluence backend backend_config : confluence : codeblocks : # all are optional theme : django title : Code example linenumbers : false collapse : false theme Color theme of the code blocks. Should be one of: emacs , django , fadetogrey , midnight , rdark , eclipse , confluence . title Title of the code block. linenumbers Show line numbers in code blocks. Default: false collapse Collapse code blocks into a clickable bar. Default: false Right now Foliant only converts code blocks by backticks/tildes (tabbed code blocks are ignored for now): This code block will be converted : ``` python def test2 (): pass ``` And this: ~~~ def test3(): pass ~~~ Syntax name, defined after backticks/tildes is converted into its Confluence counterpart. Right now following syntaxes are supported: actionscript , applescript , bash , c , c , coldfusion , cpp , cs , css , delphi , diff , erlang , groovy , html , java , javascript , js , perl , php , powershell , python , xml , yaml .","title":"Code blocks processing"},{"location":"backends/confluence/#credits","text":"The following wonderful tools and libraries are used in foliantcontrib.confluence: Atlassian Python API wrapper , BeautifulSoup , PyParsing .","title":"Credits"},{"location":"backends/mdtopdf/","text":"MdToPdf \u00b6 MdToPdf backend for Foliant \u00b6 This backend generates a single PDF document from your Foliant project. It uses md-to-pdf library under the hood. md-to-pdf supports styling with CSS, automatic syntax highlighting by highlight.js , and PDF generation with Puppeteer . MdToPdf backend for Foliant operates the pdf target. Installation \u00b6 First install md-to-pdf on your machine: $ npm install -g md-to-pdf Then install the backend: $ pip install foliantcontrib.mdtopdf Usage \u00b6 $ foliant make pdf --with mdtopdf Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor mdtopdf... Done Applying preprocessor _unescape... Done Making pdf with md-to-pdf... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: MyProject.pdf Config \u00b6 You don't have to put anything in the config to use MdToPdf backend. If it's installed, Foliant will detect it. You can however customize the backend with options in backend_config.mdtopdf section: backend_config : mdtopdf : mdtopdf_path : md-to-pdf options : stylesheet : https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.min.css body_class : markdown-body css : |- .page-break { page-break-after: always; } .markdown-body { font-size: 11px; } .markdown-body pre > code { white-space: pre-wrap; } mdtopdf_path is the path to md-to-pdf executable. Default: md-to-pdf options is a mapping of options which then will be converted into JSON and fed to the md-to-pdf command. For all possible options consult the md-to-pdf documentation .","title":"MdToPdf"},{"location":"backends/mdtopdf/#mdtopdf","text":"","title":"MdToPdf"},{"location":"backends/mdtopdf/#mdtopdf-backend-for-foliant","text":"This backend generates a single PDF document from your Foliant project. It uses md-to-pdf library under the hood. md-to-pdf supports styling with CSS, automatic syntax highlighting by highlight.js , and PDF generation with Puppeteer . MdToPdf backend for Foliant operates the pdf target.","title":"MdToPdf backend for Foliant"},{"location":"backends/mdtopdf/#installation","text":"First install md-to-pdf on your machine: $ npm install -g md-to-pdf Then install the backend: $ pip install foliantcontrib.mdtopdf","title":"Installation"},{"location":"backends/mdtopdf/#usage","text":"$ foliant make pdf --with mdtopdf Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor mdtopdf... Done Applying preprocessor _unescape... Done Making pdf with md-to-pdf... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: MyProject.pdf","title":"Usage"},{"location":"backends/mdtopdf/#config","text":"You don't have to put anything in the config to use MdToPdf backend. If it's installed, Foliant will detect it. You can however customize the backend with options in backend_config.mdtopdf section: backend_config : mdtopdf : mdtopdf_path : md-to-pdf options : stylesheet : https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.min.css body_class : markdown-body css : |- .page-break { page-break-after: always; } .markdown-body { font-size: 11px; } .markdown-body pre > code { white-space: pre-wrap; } mdtopdf_path is the path to md-to-pdf executable. Default: md-to-pdf options is a mapping of options which then will be converted into JSON and fed to the md-to-pdf command. For all possible options consult the md-to-pdf documentation .","title":"Config"},{"location":"backends/mkdocs/","text":"MkDocs \u00b6 MkDocs backend lets you build websites from Foliant projects using MkDocs static site generator. The backend adds three targets: mkdocs , site , and ghp . The first one converts a Foliant project into a MkDocs project without building any html files. The second one builds a standalone website. The last one deploys the website to GitHub Pages. Installation \u00b6 $ pip install foliantcontrib.mkdocs Usage \u00b6 Convert Foliant project to MkDocs: $ foliant make mkdocs -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making mkdocs with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.mkdocs.src Build a standalone website: $ foliant make site -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.mkdocs Deploy to GitHub Pages: $ foliant make ghp -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making ghp with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: https://account-name.github.io/my-project/ Config \u00b6 You don't have to put anything in the config to use MkDocs backend. If it's installed, Foliant detects it. To customize the output, use options in backend_config.mkdocs section: backend_config : mkdocs : mkdocs_path : mkdocs slug : my_awesome_project use_title : true use_chapters : true use_headings : true default_subsection_title : Expand mkdocs.yml : site_name : Custom Title site_url : http://example.com site_author : John Smith mkdocs_path Path to the MkDocs executable. By default, mkdocs command is run, which implies it's somewhere in your PATH . slug Result directory name without suffix (e.g. .mkdocs ). Overrides top-level config option slug . use_title If true , use title value from foliant.yml as site_name in mkdocs.yml . It this case, you don't have to specify site_name in mkdocs.yml section. If you do, the value from mkdocs.yml section has higher priority. If false , you must specify site_name manually, otherwise MkDocs will not be able to build the site. Default is true . use_chapters Similar to use_title , but for pages . If true , chapters value from foliant.yml is used as pages in mkdocs.yml . use_headings If true , the resulting data of pages section in mkdocs.yml will be updated with the content of top-level headings of source Markdown files. default_subsection_title Default title of a subsection, i.e. a group of nested chapters, in case the title is specified as an empty string. If default_subsection_title is not set in the config, \u2026 will be used. mkdocs.yml Params to be copied into mkdocs.yml file. The params are passed \u201cas is,\u201d so you should consult with the MkDocs configuration docs . Preprocessor \u00b6 MkDocs backend ships with a preprocessor that transforms a Foliant project into a MkDocs one. Basically, foliant make mkdocs just applies the preprocessor. The preprocessor is invoked automatically when you run MkDocs backend, so you don't have to add it in preprocessors section manually. However, it's just a regular preprocessor like any other, so you can call it manually if necessary: preprocessors : - mkdocs : mkdocs_project_dir_name : mkdocs mkdocs_project_dir_name Name of the directory for the generated MkDocs project within the tmp directory. Troubleshooting \u00b6 Fenced Code Is Not Rendered in List Items or Blockquotes \u00b6 MkDocs can't handle fenced code blocks in blockquotes or list items due to an issue in Python Markdown . Unfortunately, nothing can be done about it, either on MkDocs's or Foliant's part. As a workaround, use indented code blocks . Paragraphs Inside List Items Are Rendered on the Root Level \u00b6 Check if you use four-space indentation . Python Markdown is stern about this point .","title":"MkDocs"},{"location":"backends/mkdocs/#mkdocs","text":"MkDocs backend lets you build websites from Foliant projects using MkDocs static site generator. The backend adds three targets: mkdocs , site , and ghp . The first one converts a Foliant project into a MkDocs project without building any html files. The second one builds a standalone website. The last one deploys the website to GitHub Pages.","title":"MkDocs"},{"location":"backends/mkdocs/#installation","text":"$ pip install foliantcontrib.mkdocs","title":"Installation"},{"location":"backends/mkdocs/#usage","text":"Convert Foliant project to MkDocs: $ foliant make mkdocs -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making mkdocs with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.mkdocs.src Build a standalone website: $ foliant make site -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.mkdocs Deploy to GitHub Pages: $ foliant make ghp -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making ghp with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: https://account-name.github.io/my-project/","title":"Usage"},{"location":"backends/mkdocs/#config","text":"You don't have to put anything in the config to use MkDocs backend. If it's installed, Foliant detects it. To customize the output, use options in backend_config.mkdocs section: backend_config : mkdocs : mkdocs_path : mkdocs slug : my_awesome_project use_title : true use_chapters : true use_headings : true default_subsection_title : Expand mkdocs.yml : site_name : Custom Title site_url : http://example.com site_author : John Smith mkdocs_path Path to the MkDocs executable. By default, mkdocs command is run, which implies it's somewhere in your PATH . slug Result directory name without suffix (e.g. .mkdocs ). Overrides top-level config option slug . use_title If true , use title value from foliant.yml as site_name in mkdocs.yml . It this case, you don't have to specify site_name in mkdocs.yml section. If you do, the value from mkdocs.yml section has higher priority. If false , you must specify site_name manually, otherwise MkDocs will not be able to build the site. Default is true . use_chapters Similar to use_title , but for pages . If true , chapters value from foliant.yml is used as pages in mkdocs.yml . use_headings If true , the resulting data of pages section in mkdocs.yml will be updated with the content of top-level headings of source Markdown files. default_subsection_title Default title of a subsection, i.e. a group of nested chapters, in case the title is specified as an empty string. If default_subsection_title is not set in the config, \u2026 will be used. mkdocs.yml Params to be copied into mkdocs.yml file. The params are passed \u201cas is,\u201d so you should consult with the MkDocs configuration docs .","title":"Config"},{"location":"backends/mkdocs/#preprocessor","text":"MkDocs backend ships with a preprocessor that transforms a Foliant project into a MkDocs one. Basically, foliant make mkdocs just applies the preprocessor. The preprocessor is invoked automatically when you run MkDocs backend, so you don't have to add it in preprocessors section manually. However, it's just a regular preprocessor like any other, so you can call it manually if necessary: preprocessors : - mkdocs : mkdocs_project_dir_name : mkdocs mkdocs_project_dir_name Name of the directory for the generated MkDocs project within the tmp directory.","title":"Preprocessor"},{"location":"backends/mkdocs/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"backends/mkdocs/#fenced-code-is-not-rendered-in-list-items-or-blockquotes","text":"MkDocs can't handle fenced code blocks in blockquotes or list items due to an issue in Python Markdown . Unfortunately, nothing can be done about it, either on MkDocs's or Foliant's part. As a workaround, use indented code blocks .","title":"Fenced Code Is Not Rendered in List Items or Blockquotes"},{"location":"backends/mkdocs/#paragraphs-inside-list-items-are-rendered-on-the-root-level","text":"Check if you use four-space indentation . Python Markdown is stern about this point .","title":"Paragraphs Inside List Items Are Rendered on the Root Level"},{"location":"backends/pandoc/","text":"Pandoc \u00b6 Pandoc is a Swiss-army knife document converter. It converts almost any format to any other format: md to pdf, rst to html, adoc to docx, and so on and so on. Pandoc backend for Foliant add pdf , docx , and tex targets. Installation \u00b6 $ pip install foliantcontrib.pandoc You also need to install Pandoc and TeXLive distribution for your platform. Usage \u00b6 Build pdf: $ foliant make pdf -p my-project \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.pdf Build docx: $ foliant make docx -p my-project \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.docx Build tex (mostly for pdf debugging): $ foliant make tex -p my-project \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.tex Config \u00b6 You don't have to put anything in the config to use Pandoc backend. If it's installed, Foliant will detect it. You can however customize the backend with options in backend_config.pandoc section: backend_config : pandoc : pandoc_path : pandoc template : !path template.tex vars : ... reference_docx : !path reference.docx params : ... filters : ... markdown_flavor : markdown markdown_extensions : ... slug : My_Awesome_Custom_Slug pandoc_path is the path to pandoc executable. By default, it's assumed to be in the PATH . template is the path to the TeX template to use when building pdf and tex (see \u201cTemplates\u201d in the Pandoc documentation). Tip Use !path tag to ensure the value is converted into a valid path relative to the project directory. vars is a mapping of template variables and their values. reference_docx is the path to the reference document to used when building docx (see \u201cTemplates\u201d in the Pandoc documentation). Tip Use !path tag to ensure the value is converted into a valid path relative to the project directory. params are passed to the pandoc command. Params should be defined by their long names, with dashes replaced with underscores (e.g. --pdf-engine is defined as pdf_engine ). filters is a list of Pandoc filters to be applied during build. markdown_flavor is the Markdown flavor assumed in the source. Default is markdown , Pandoc's extended Markdown . See \u201cMarkdown Variants\u201d in the Pandoc documentation. markdown_extensions is a list of Markdown extensions applied to the Markdown source. See Pandoc\u2019s Markdown in the Pandoc documentation. slug is the result file name without suffix (e.g. .pdf ). Overrides top-level config option slug . Example config: backend_config : pandoc : template : !path templates/basic.tex vars : toc : true title : This Is a Title second_title : This Is a Subtitle logo : !path templates/logo.png year : 2017 params : pdf_engine : xelatex listings : true number_sections : true markdown_extensions : - simple_tables - fenced_code_blocks - strikeout Troubleshooting \u00b6 Could not convert image ...: check that rsvg2pdf is in path \u00b6 In order to use svg images in pdf, you need to have rsvg-convert executable in PATH . On macOS, brew install librsvg does the trick. On Ubuntu, apt install librsvg2-bin . On Windows, download rsvg-convert.7z (without fontconfig support), unpack rsvg-convert.exe , and put it anywhere in PATH . For example, you can put it in the same directory where you run foliant make . LaTeX listings package does not work correctly with non-ASCII characters, e.g. Cyrillic letters \u00b6 If you use non-ASCII characters inside backticks in your document, you can see an error like this: Error producing PDF. ! Undefined control sequence. \\l st@arg ->git clone [ SSH-\u043a \u043b\u044e\u0447 ] l.627 ...through { \\l stinline!git clone [ SSH-\u043a\u043b\u044e\u0447 ] ! } To fix it, set listings parameter to false : backend_config : pandoc : ... params : pdf_engine : xelatex listings : false number_sections : true ...","title":"Pandoc"},{"location":"backends/pandoc/#pandoc","text":"Pandoc is a Swiss-army knife document converter. It converts almost any format to any other format: md to pdf, rst to html, adoc to docx, and so on and so on. Pandoc backend for Foliant add pdf , docx , and tex targets.","title":"Pandoc"},{"location":"backends/pandoc/#installation","text":"$ pip install foliantcontrib.pandoc You also need to install Pandoc and TeXLive distribution for your platform.","title":"Installation"},{"location":"backends/pandoc/#usage","text":"Build pdf: $ foliant make pdf -p my-project \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making pdf with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.pdf Build docx: $ foliant make docx -p my-project \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.docx Build tex (mostly for pdf debugging): $ foliant make tex -p my-project \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.tex","title":"Usage"},{"location":"backends/pandoc/#config","text":"You don't have to put anything in the config to use Pandoc backend. If it's installed, Foliant will detect it. You can however customize the backend with options in backend_config.pandoc section: backend_config : pandoc : pandoc_path : pandoc template : !path template.tex vars : ... reference_docx : !path reference.docx params : ... filters : ... markdown_flavor : markdown markdown_extensions : ... slug : My_Awesome_Custom_Slug pandoc_path is the path to pandoc executable. By default, it's assumed to be in the PATH . template is the path to the TeX template to use when building pdf and tex (see \u201cTemplates\u201d in the Pandoc documentation). Tip Use !path tag to ensure the value is converted into a valid path relative to the project directory. vars is a mapping of template variables and their values. reference_docx is the path to the reference document to used when building docx (see \u201cTemplates\u201d in the Pandoc documentation). Tip Use !path tag to ensure the value is converted into a valid path relative to the project directory. params are passed to the pandoc command. Params should be defined by their long names, with dashes replaced with underscores (e.g. --pdf-engine is defined as pdf_engine ). filters is a list of Pandoc filters to be applied during build. markdown_flavor is the Markdown flavor assumed in the source. Default is markdown , Pandoc's extended Markdown . See \u201cMarkdown Variants\u201d in the Pandoc documentation. markdown_extensions is a list of Markdown extensions applied to the Markdown source. See Pandoc\u2019s Markdown in the Pandoc documentation. slug is the result file name without suffix (e.g. .pdf ). Overrides top-level config option slug . Example config: backend_config : pandoc : template : !path templates/basic.tex vars : toc : true title : This Is a Title second_title : This Is a Subtitle logo : !path templates/logo.png year : 2017 params : pdf_engine : xelatex listings : true number_sections : true markdown_extensions : - simple_tables - fenced_code_blocks - strikeout","title":"Config"},{"location":"backends/pandoc/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"backends/pandoc/#could-not-convert-image-check-that-rsvg2pdf-is-in-path","text":"In order to use svg images in pdf, you need to have rsvg-convert executable in PATH . On macOS, brew install librsvg does the trick. On Ubuntu, apt install librsvg2-bin . On Windows, download rsvg-convert.7z (without fontconfig support), unpack rsvg-convert.exe , and put it anywhere in PATH . For example, you can put it in the same directory where you run foliant make .","title":"Could not convert image ...: check that rsvg2pdf is in path"},{"location":"backends/pandoc/#latex-listings-package-does-not-work-correctly-with-non-ascii-characters-eg-cyrillic-letters","text":"If you use non-ASCII characters inside backticks in your document, you can see an error like this: Error producing PDF. ! Undefined control sequence. \\l st@arg ->git clone [ SSH-\u043a \u043b\u044e\u0447 ] l.627 ...through { \\l stinline!git clone [ SSH-\u043a\u043b\u044e\u0447 ] ! } To fix it, set listings parameter to false : backend_config : pandoc : ... params : pdf_engine : xelatex listings : false number_sections : true ...","title":"LaTeX listings package does not work correctly with non-ASCII characters, e.g. Cyrillic letters"},{"location":"backends/slate/","text":"Slate \u00b6 Slate Backend for Foliant \u00b6 Slate backend generates API documentation from Markdown using Slate docs generator . This backend operates two targets: site \u2014 build a standalone website; slate \u2014 generate a slate project out from your Foliant project. Installation \u00b6 $ pip install foliantcontrib.slate Usage \u00b6 To use this backend Slate should be installed in your system. Follow the instruction in Slate repo. To test if you've installed Slate properly head to the cloned Slate repo in your terminal and try the command below. You should get similar response. $ bundle exec middleman == The Middleman is loading == View your site at ... == Inspect your site configuration at ... To convert Foliant project to Slate: $ foliant make slate \u2714 Parsing config \u2714 Making slate \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2018-09-19.src/ Build a standalone website: $ foliant make site \u2714 Parsing config \u2714 Making site \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2018-09-19.slate/ Config \u00b6 You don't have to put anything in the config to use Slate backend. If it is installed, Foliant detects it. To customize the output, use options in backend_config.slate section: backend_config : slate : shards : data/shards header : title : My API documentation language_tabs : - xml : Response example search : true shards Path to the shards directory relative to Foliant project dir or list of such paths. Shards allow you to customize Slate's layout, add scripts etc. More info on shards in the following section. Default: shards header Params to be copied into the beginning of Slate main Markdown file index.html.md . They allow you to change the title of the website, toggle search and add language tabs. More info in Slate Wiki . About shards \u00b6 Shards is just a folder with files which will be copied into the generated Slate project replacing all files in there. If you follow the Slate project structure you can replace stylesheets, scripts, images, layouts etc to customize the view of the resulting site. If shards is a string \u2014 it is considered a path to single shards directory relative to Foliant project dir: slate : shards : 'data/shards' If shards is a list \u2014 each list item is considered as a shards dir. They will be copied into the Slate project subsequently with replace. slate : shards : - 'common/shards' - 'custom/shards' - 'new_design' For example, I want to customize standard Slate stylesheets. I look at the Slate repo and see that they lie in the folder <slate>/source/stylesheets . I create new stylesheets with the same names as the original ones and put them into my shards dir like that: shards\\ source\\ stylesheets\\ _variables.scss screen.css.scss These stylesheets will replace the original ones in the Slate project just before the website is be baked. So the page will have my styles in the end.","title":"Slate"},{"location":"backends/slate/#slate","text":"","title":"Slate"},{"location":"backends/slate/#slate-backend-for-foliant","text":"Slate backend generates API documentation from Markdown using Slate docs generator . This backend operates two targets: site \u2014 build a standalone website; slate \u2014 generate a slate project out from your Foliant project.","title":"Slate Backend for Foliant"},{"location":"backends/slate/#installation","text":"$ pip install foliantcontrib.slate","title":"Installation"},{"location":"backends/slate/#usage","text":"To use this backend Slate should be installed in your system. Follow the instruction in Slate repo. To test if you've installed Slate properly head to the cloned Slate repo in your terminal and try the command below. You should get similar response. $ bundle exec middleman == The Middleman is loading == View your site at ... == Inspect your site configuration at ... To convert Foliant project to Slate: $ foliant make slate \u2714 Parsing config \u2714 Making slate \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2018-09-19.src/ Build a standalone website: $ foliant make site \u2714 Parsing config \u2714 Making site \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2018-09-19.slate/","title":"Usage"},{"location":"backends/slate/#config","text":"You don't have to put anything in the config to use Slate backend. If it is installed, Foliant detects it. To customize the output, use options in backend_config.slate section: backend_config : slate : shards : data/shards header : title : My API documentation language_tabs : - xml : Response example search : true shards Path to the shards directory relative to Foliant project dir or list of such paths. Shards allow you to customize Slate's layout, add scripts etc. More info on shards in the following section. Default: shards header Params to be copied into the beginning of Slate main Markdown file index.html.md . They allow you to change the title of the website, toggle search and add language tabs. More info in Slate Wiki .","title":"Config"},{"location":"backends/slate/#about-shards","text":"Shards is just a folder with files which will be copied into the generated Slate project replacing all files in there. If you follow the Slate project structure you can replace stylesheets, scripts, images, layouts etc to customize the view of the resulting site. If shards is a string \u2014 it is considered a path to single shards directory relative to Foliant project dir: slate : shards : 'data/shards' If shards is a list \u2014 each list item is considered as a shards dir. They will be copied into the Slate project subsequently with replace. slate : shards : - 'common/shards' - 'custom/shards' - 'new_design' For example, I want to customize standard Slate stylesheets. I look at the Slate repo and see that they lie in the folder <slate>/source/stylesheets . I create new stylesheets with the same names as the original ones and put them into my shards dir like that: shards\\ source\\ stylesheets\\ _variables.scss screen.css.scss These stylesheets will replace the original ones in the Slate project just before the website is be baked. So the page will have my styles in the end.","title":"About shards"},{"location":"cli/bump/","text":"Bump \u00b6 This CLI extension adds bump command that lets you bump Foliant project semantic version without editing the config manually. Installation \u00b6 $ pip install foliantcontrib.bump Usage \u00b6 Bump version from \"1.0.0\" to \"1.0.1\": $ foliant bump Version bumped from 1 .0.0 to 1 .0.1. Bump major version: $ foliant bump -v major Version bumped from 1 .0.1 to 2 .0.0. To see all available options, run foliant bump --help : $ foliant bump --help usage: foliant bump [ -h ] [ -v VERSION_PART ] [ -p PATH ] [ -c CONFIG ] Bump Foliant project version. optional arguments: -h, --help show this help message and exit -v VERSION_PART, --version-part VERSION_PART Part of the version to bump: major, minor, patch, prerelease, or build ( default: patch ) . -p PATH, --path PATH Path to the directory with the config file ( default: \".\" ) . -c CONFIG, --config CONFIG Name of the config file ( default: \"foliant.yml\" ) .","title":"Bump"},{"location":"cli/bump/#bump","text":"This CLI extension adds bump command that lets you bump Foliant project semantic version without editing the config manually.","title":"Bump"},{"location":"cli/bump/#installation","text":"$ pip install foliantcontrib.bump","title":"Installation"},{"location":"cli/bump/#usage","text":"Bump version from \"1.0.0\" to \"1.0.1\": $ foliant bump Version bumped from 1 .0.0 to 1 .0.1. Bump major version: $ foliant bump -v major Version bumped from 1 .0.1 to 2 .0.0. To see all available options, run foliant bump --help : $ foliant bump --help usage: foliant bump [ -h ] [ -v VERSION_PART ] [ -p PATH ] [ -c CONFIG ] Bump Foliant project version. optional arguments: -h, --help show this help message and exit -v VERSION_PART, --version-part VERSION_PART Part of the version to bump: major, minor, patch, prerelease, or build ( default: patch ) . -p PATH, --path PATH Path to the directory with the config file ( default: \".\" ) . -c CONFIG, --config CONFIG Name of the config file ( default: \"foliant.yml\" ) .","title":"Usage"},{"location":"cli/gupload/","text":"Gupload \u00b6 Gupload is the Foliant CLI extension, it's used to upload created documents to Google Drive. Gupload adds gupload command to Foliant. Installation \u00b6 $ pip install foliantcontrib.gupload Config \u00b6 To config the CLI extension, add gupload section in the project config. As gupload needs document to upload, appropriate backend settings also have to be here. CLI extension has a number of options (all fields are required but can have no values): gupload : gdrive_folder_name : Foliant upload gdrive_folder_id : gdoc_title : gdoc_id : convert_file : com_line_auth : false gdrive_folder_name Folder with this name will be created on Google Drive to upload file. gdrive_folder_id This field is necessary to upload files to previously created folder. gdoc_title Uploaded file will have this title. If empty, real filename will be used. gdoc_id This field is necessary to rewrite previously uploaded file and keep the link to it. convert_file Convert uploaded files to google docs format or not. com_line_auth In some cases it's impossible to authenticate automatically (for example, with Docker), so you can set True and use command line authentication procedure. Usage \u00b6 At first you have to get Google Drive authentication file. Go to APIs Console and make your own project. Go to library , search for \u2018Google Drive API\u2019, select the entry, and click \u2018Enable\u2019. Select \u2018Credentials\u2019 from the left menu, click \u2018Create Credentials\u2019, select \u2018OAuth client ID\u2019. Now, the product name and consent screen need to be set -> click \u2018Configure consent screen\u2019 and follow the instructions. Once finished: Select \u2018Application type\u2019 to be Other types . Enter an appropriate name. Input http://localhost:8080 for \u2018Authorized JavaScript origins\u2019. Input http://localhost:8080/ for \u2018Authorized redirect URIs\u2019. Click \u2018Save\u2019. Click \u2018Download JSON\u2019 on the right side of Client ID to download client_secret_ .json. The downloaded file has all authentication information of your application. Rename the file to \u201cclient_secrets.json\u201d and place it in your working directory near foliant.yml. Now add the CLI extension to the project config with all settings strings. At this moment you have no data to set Google Drive folder ID and google doc ID so keep it empty. Run Foliant with gupload command: $ foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Your browser has been opened to visit: https://accounts.google.com/o/oauth2/auth?... Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Authentication form will be opened. Choose account to log in. With command line authentication procedure differs little bit: $ docker-compose run --rm foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?... Enter verification code: 4 /XgBllTXpxv8kKjsiTxLc Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Copy link from terminal to your browser, choose account to log in and copy generated code back to the terminal. After that the document will be uploaded to Google Drive and opened in new browser tab. Now you can use Google Drive folder ID to upload files to the same folder and google doc ID to rewrite document (also you can IDs in folder and file links). Notes \u00b6 If you set up google doc ID without Google Drive folder ID file will be moved to the new folder with the same link.","title":"Gupload"},{"location":"cli/gupload/#gupload","text":"Gupload is the Foliant CLI extension, it's used to upload created documents to Google Drive. Gupload adds gupload command to Foliant.","title":"Gupload"},{"location":"cli/gupload/#installation","text":"$ pip install foliantcontrib.gupload","title":"Installation"},{"location":"cli/gupload/#config","text":"To config the CLI extension, add gupload section in the project config. As gupload needs document to upload, appropriate backend settings also have to be here. CLI extension has a number of options (all fields are required but can have no values): gupload : gdrive_folder_name : Foliant upload gdrive_folder_id : gdoc_title : gdoc_id : convert_file : com_line_auth : false gdrive_folder_name Folder with this name will be created on Google Drive to upload file. gdrive_folder_id This field is necessary to upload files to previously created folder. gdoc_title Uploaded file will have this title. If empty, real filename will be used. gdoc_id This field is necessary to rewrite previously uploaded file and keep the link to it. convert_file Convert uploaded files to google docs format or not. com_line_auth In some cases it's impossible to authenticate automatically (for example, with Docker), so you can set True and use command line authentication procedure.","title":"Config"},{"location":"cli/gupload/#usage","text":"At first you have to get Google Drive authentication file. Go to APIs Console and make your own project. Go to library , search for \u2018Google Drive API\u2019, select the entry, and click \u2018Enable\u2019. Select \u2018Credentials\u2019 from the left menu, click \u2018Create Credentials\u2019, select \u2018OAuth client ID\u2019. Now, the product name and consent screen need to be set -> click \u2018Configure consent screen\u2019 and follow the instructions. Once finished: Select \u2018Application type\u2019 to be Other types . Enter an appropriate name. Input http://localhost:8080 for \u2018Authorized JavaScript origins\u2019. Input http://localhost:8080/ for \u2018Authorized redirect URIs\u2019. Click \u2018Save\u2019. Click \u2018Download JSON\u2019 on the right side of Client ID to download client_secret_ .json. The downloaded file has all authentication information of your application. Rename the file to \u201cclient_secrets.json\u201d and place it in your working directory near foliant.yml. Now add the CLI extension to the project config with all settings strings. At this moment you have no data to set Google Drive folder ID and google doc ID so keep it empty. Run Foliant with gupload command: $ foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Your browser has been opened to visit: https://accounts.google.com/o/oauth2/auth?... Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Authentication form will be opened. Choose account to log in. With command line authentication procedure differs little bit: $ docker-compose run --rm foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?... Enter verification code: 4 /XgBllTXpxv8kKjsiTxLc Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Copy link from terminal to your browser, choose account to log in and copy generated code back to the terminal. After that the document will be uploaded to Google Drive and opened in new browser tab. Now you can use Google Drive folder ID to upload files to the same folder and google doc ID to rewrite document (also you can IDs in folder and file links).","title":"Usage"},{"location":"cli/gupload/#notes","text":"If you set up google doc ID without Google Drive folder ID file will be moved to the new folder with the same link.","title":"Notes"},{"location":"cli/meta/","text":"Meta \u00b6 Metadata for Foliant \u00b6 This extension adds the meta generate command to Foliant, which generates the yaml-file with project metadata. It also allows to add other meta commands meta <command> which use the generated metadata. Installation \u00b6 $ pip install foliantcontrib.meta Specifying metadata \u00b6 Metadata for the main section (more on sections in User's Guide below) may be specified in the beginning of a Markdown-file using YAML Front Matter format: --- id : MAIN_DOC title : Description of the product key : value --- You may also use regular XML-like format with meta tag: If meta tag is present, all Metadata from YAML Front Matter is ignored. meta generate command \u00b6 Usage \u00b6 To generate meta file run the meta generate command: $ foliant meta generate Metadata for the document will appear in the meta.yml file. Config \u00b6 Meta generate command has just one option right now. It is specified under meta section in config: meta : filename : meta.yml filename name of the YAML-file with generated project metadata. User's guide \u00b6 Metadata allows you to specific properties to your documents, which won't be visible directly to the end-user. These properties may be: the document author's name; Jira ticket id; date of last revision; or anything else, there is no limitation. This module is required for metadata to work in your projects. But it doesn't care about most of the fields and their values. The only exception being the id field. See Special fields section. Sections \u00b6 You can specify metadata for a whole chapter and for it's portions, which are called sections . Section is a fragment of the document from one heading to another one of the same level of higher. Metadata specified at the beginning of the document (before the first heading) is applied to the whole Markdown document. We call it the main section of the chapter. Note that you can specify metadata for the main section either in YAML Front Matter format, or with meta tag. If you specify metadata after the heading of some level, it will be applied to all content inside this heading, including the nested headings. See the illustration below. Special fields \u00b6 Right now there's only one field that is treated specially: the id field. If specified, it will be used as identifier of the section. Note that IDs must be unique within the project. If id field is omitted \u2014 the section will get auto generated id based on: chapter filename for main section, title for general sections. Additional info \u00b6 Metadata works only for files, mentioned in the chapters section in foliant.yml. All other files in src dir are ignored. When using includes , all metadata from the included content is removed. Developer's guide \u00b6 You can use the powers of metadata in your preprocessors, backends and other tools. You can define fields with special meaning for your tools and process sections based on these fields. Getting metadata \u00b6 Typical way to work with metadata is to run the load_meta function from the foliant.meta.generate module. load_meta(chapters: list, md_root: str or PosixPath = 'src') -> Meta This function collects metadata and returns a Meta object, which gives access to all sections and meta-fields in the project. The required parameter is chapters \u2014 list of chaters loaded from foliant.yml >>> from foliant.meta.generate import load_meta >>> meta = load_meta ([ 'index.md' ]) You can also specify the md_root parameter. If your tool is a CLI extension, md_root should point to the project's src dir. But if you are building a preprocessor or a backend, you would probably want to point it to the __folianttmp__ dir with the current state of the sources. The Meta class \u00b6 Meta class holds all metadata and offers few handy methods to work with it. load_meta_from_file(filename: str or PosixPath) This method allows you to load meta into the Meta class instance from previously generated yaml-file. Use it only with empty Meta class: >>> from foliant.meta.classes import Meta >>> meta = Meta () >>> meta . load_meta_from_file ( 'meta.yml' ) iter_sections() This method returns an iterator which yields project's meta-sections ( Section objects) in the proper order from the first chapter to the last one. get_chapter(self, filename: str or PosixPath) -> Chapter Get chapter ( Chapter object) by its name. filename should be path to chapter relative to the Project dir (or absolute path). get_by_id(self, id_: str) -> Section Get section ( Section object) by its id. chapters A property which holds the list of chapters ( Chapter objects). The Chapter class \u00b6 Chapter class represents a project's chapter. It has several important methods which may be useful for working with metadata. iter_sections() This method returns an iterator which yields chapter's meta-sections ( Section objects) in the proper order from the first chapter to the last one. get_section_by_offset(offset: int) -> Section: This method allows you to get section ( Section object) by just pointing to a place in text. Pointing is performed by specifying offset from the beginning of the file in offset parameter. important properties main_section A property which holds the main section of the chapter. name Chapter's name. filename Chapter's filename. The Section class \u00b6 Section represents a meta section. iter_children() This method returns an iterator which yields the section's child sections ( Section objects) in the proper order. get_source(self, without_meta=True) -> str Returns section's source. If without_meta is True , all meta tags are cut out from the text. is_main(self) -> bool Determine whether the section is main or not. important properties id Holds section's ID. title Section's title. chapter Holds reference to section's chapter. children Holds list of section's children in proper order. data Holds a dictionary with fields and their values, defined in the <meta> tag (or YAML front matter if it is a main section). level Section's level. Main section has level 0 , section, defined inside the ### heading will have level 3 . start and end Section's offsets from the beginning of the chapter. filename Holds reference to section's chapter's filename for easy access.","title":"Meta"},{"location":"cli/meta/#meta","text":"","title":"Meta"},{"location":"cli/meta/#metadata-for-foliant","text":"This extension adds the meta generate command to Foliant, which generates the yaml-file with project metadata. It also allows to add other meta commands meta <command> which use the generated metadata.","title":"Metadata for Foliant"},{"location":"cli/meta/#installation","text":"$ pip install foliantcontrib.meta","title":"Installation"},{"location":"cli/meta/#specifying-metadata","text":"Metadata for the main section (more on sections in User's Guide below) may be specified in the beginning of a Markdown-file using YAML Front Matter format: --- id : MAIN_DOC title : Description of the product key : value --- You may also use regular XML-like format with meta tag: If meta tag is present, all Metadata from YAML Front Matter is ignored.","title":"Specifying metadata"},{"location":"cli/meta/#meta-generate-command","text":"","title":"meta generate command"},{"location":"cli/meta/#usage","text":"To generate meta file run the meta generate command: $ foliant meta generate Metadata for the document will appear in the meta.yml file.","title":"Usage"},{"location":"cli/meta/#config","text":"Meta generate command has just one option right now. It is specified under meta section in config: meta : filename : meta.yml filename name of the YAML-file with generated project metadata.","title":"Config"},{"location":"cli/meta/#users-guide","text":"Metadata allows you to specific properties to your documents, which won't be visible directly to the end-user. These properties may be: the document author's name; Jira ticket id; date of last revision; or anything else, there is no limitation. This module is required for metadata to work in your projects. But it doesn't care about most of the fields and their values. The only exception being the id field. See Special fields section.","title":"User's guide"},{"location":"cli/meta/#sections","text":"You can specify metadata for a whole chapter and for it's portions, which are called sections . Section is a fragment of the document from one heading to another one of the same level of higher. Metadata specified at the beginning of the document (before the first heading) is applied to the whole Markdown document. We call it the main section of the chapter. Note that you can specify metadata for the main section either in YAML Front Matter format, or with meta tag. If you specify metadata after the heading of some level, it will be applied to all content inside this heading, including the nested headings. See the illustration below.","title":"Sections"},{"location":"cli/meta/#special-fields","text":"Right now there's only one field that is treated specially: the id field. If specified, it will be used as identifier of the section. Note that IDs must be unique within the project. If id field is omitted \u2014 the section will get auto generated id based on: chapter filename for main section, title for general sections.","title":"Special fields"},{"location":"cli/meta/#additional-info","text":"Metadata works only for files, mentioned in the chapters section in foliant.yml. All other files in src dir are ignored. When using includes , all metadata from the included content is removed.","title":"Additional info"},{"location":"cli/meta/#developers-guide","text":"You can use the powers of metadata in your preprocessors, backends and other tools. You can define fields with special meaning for your tools and process sections based on these fields.","title":"Developer's guide"},{"location":"cli/meta/#getting-metadata","text":"Typical way to work with metadata is to run the load_meta function from the foliant.meta.generate module. load_meta(chapters: list, md_root: str or PosixPath = 'src') -> Meta This function collects metadata and returns a Meta object, which gives access to all sections and meta-fields in the project. The required parameter is chapters \u2014 list of chaters loaded from foliant.yml >>> from foliant.meta.generate import load_meta >>> meta = load_meta ([ 'index.md' ]) You can also specify the md_root parameter. If your tool is a CLI extension, md_root should point to the project's src dir. But if you are building a preprocessor or a backend, you would probably want to point it to the __folianttmp__ dir with the current state of the sources.","title":"Getting metadata"},{"location":"cli/meta/#the-meta-class","text":"Meta class holds all metadata and offers few handy methods to work with it. load_meta_from_file(filename: str or PosixPath) This method allows you to load meta into the Meta class instance from previously generated yaml-file. Use it only with empty Meta class: >>> from foliant.meta.classes import Meta >>> meta = Meta () >>> meta . load_meta_from_file ( 'meta.yml' ) iter_sections() This method returns an iterator which yields project's meta-sections ( Section objects) in the proper order from the first chapter to the last one. get_chapter(self, filename: str or PosixPath) -> Chapter Get chapter ( Chapter object) by its name. filename should be path to chapter relative to the Project dir (or absolute path). get_by_id(self, id_: str) -> Section Get section ( Section object) by its id. chapters A property which holds the list of chapters ( Chapter objects).","title":"The Meta class"},{"location":"cli/meta/#the-chapter-class","text":"Chapter class represents a project's chapter. It has several important methods which may be useful for working with metadata. iter_sections() This method returns an iterator which yields chapter's meta-sections ( Section objects) in the proper order from the first chapter to the last one. get_section_by_offset(offset: int) -> Section: This method allows you to get section ( Section object) by just pointing to a place in text. Pointing is performed by specifying offset from the beginning of the file in offset parameter. important properties main_section A property which holds the main section of the chapter. name Chapter's name. filename Chapter's filename.","title":"The Chapter class"},{"location":"cli/meta/#the-section-class","text":"Section represents a meta section. iter_children() This method returns an iterator which yields the section's child sections ( Section objects) in the proper order. get_source(self, without_meta=True) -> str Returns section's source. If without_meta is True , all meta tags are cut out from the text. is_main(self) -> bool Determine whether the section is main or not. important properties id Holds section's ID. title Section's title. chapter Holds reference to section's chapter. children Holds list of section's children in proper order. data Holds a dictionary with fields and their values, defined in the <meta> tag (or YAML front matter if it is a main section). level Section's level. Main section has level 0 , section, defined inside the ### heading will have level 3 . start and end Section's offsets from the beginning of the chapter. filename Holds reference to section's chapter's filename for easy access.","title":"The Section class"},{"location":"cli/src/","text":"Src \u00b6 This extension supports the command src to backup the source directory of Foliant project (usually called as src ) and to restore it from prepared backup. Backing up of the source directory is needed because MultiProject extension modifies this directory by moving the directories of built subprojects into it. Installation \u00b6 To enable the src command, install MultiProject extension: $ pip install foliantcontrib.multiproject Usage \u00b6 To make a backup of the source directory, use the command: $ foliant src backup To restore the source directory from the backup, use the command: $ foliant src restore You may use the --config option to specify custom config file name of your Foliant project. By default, the name foliant.yml is used: $ foliant src backup --config alternative_config.yml Also you may specify the root directory of your Foliant project by using the --path option. If not specified, current directory will be used.","title":"Src"},{"location":"cli/src/#src","text":"This extension supports the command src to backup the source directory of Foliant project (usually called as src ) and to restore it from prepared backup. Backing up of the source directory is needed because MultiProject extension modifies this directory by moving the directories of built subprojects into it.","title":"Src"},{"location":"cli/src/#installation","text":"To enable the src command, install MultiProject extension: $ pip install foliantcontrib.multiproject","title":"Installation"},{"location":"cli/src/#usage","text":"To make a backup of the source directory, use the command: $ foliant src backup To restore the source directory from the backup, use the command: $ foliant src restore You may use the --config option to specify custom config file name of your Foliant project. By default, the name foliant.yml is used: $ foliant src backup --config alternative_config.yml Also you may specify the root directory of your Foliant project by using the --path option. If not specified, current directory will be used.","title":"Usage"},{"location":"cli/subset/","text":"Subset \u00b6 This CLI extension adds the command subset that generates a config file for a subset (i.e. a detached part) of the Foliant project. The command uses: the common (i.e. default, single) config file for the whole Foliant project; the part of config that is individual for each subset. The Foliant project may include multiple subsets that are defined by their own partial config files. The command subset takes a path to the subset directory as a mandatory command line parameter. The command subset : reads the partial config of the subset; optionally rewrites the paths of Markdown files that specified there in the chapters section; merges the result with the default config of the whole Foliant project config; finally, writes a new config file that allows to build a certain subset of the Foliant project with the make command. Installation \u00b6 To install the extension, use the command: $ pip install foliantcontrib.subset Usage \u00b6 To get the list of all necessary parameters and available options, run foliant subset --help : $ foliant subset --help usage: foliant subset [ -h ] [ -p PROJECT_DIR_PATH ] [ -c CONFIG ] [ -n ] [ -d ] SUBPATH Generate the config file to build the project subset from SUBPATH. positional arguments: SUBPATH Path to the subset of the Foliant project optional arguments: -h, --help show this help message and exit -p PROJECT_DIR, --path PROJECT_DIR Path to the Foliant project -c CONFIG, --config CONFIG Name of config file of the Foliant project, default 'foliant.yml' -n, --norewrite Do not rewrite the paths of Markdown files in the subset partial config -d, --debug Log all events during build. If not set, only warnings and errors are logged In most cases it\u2019s enough to use the default values of optional parameters. You need to specify only the SUBPATH \u2014the directory that should be located inside the Foliant project source directory. Suppose you use the default settings. Then you have to prepare: the common (default) config file foliant.yml in the Foliant project root directory; partial config files for each subset. They also must be named foliant.yml , and they must be located in the directories of the subsets. Your Foliant project tree may look so: $ tree . \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 src \u251c\u2500\u2500 group_1 \u2502 \u251c\u2500\u2500 product_1 \u2502 \u2502 \u2514\u2500\u2500 feature_1 \u2502 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 product_2 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2514\u2500\u2500 main.md \u2514\u2500\u2500 group_2 \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 intro.md The command foliant subset group_1/product_1/feautre_1 will merge the files ./src/group_1/product_1/feautre_1/foliant.yml and ./foliant.yml , and write the result into the file ./foliant.yml.subset . After that you may use the command like the following to build your Foliant project: $ foliant make pdf --config foliant.yml.subset Let\u2019s look at some examples. The content of the common (default) file ./foliant.yml : title : &title Default Title subtitle : &subtitle Default Subtitle version : &version 0.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2018 params : pdf_engine : xelatex The content of the partial config file ./src/group_1/product_1/feautre_1/foliant.yml : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 chapters : - index.md backend_config : pandoc : vars : year : 2019 The content of newly generated file ./foliant.yml.subset : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2019 params : pdf_engine : xelatex chapters : - b2b/order_1/feature_1/index.md If the option --no-rewrite is not set, the paths of Markdown files that are specified in the chapters section of the file ./src/group_1/product_1/feautre_1/foliant.yml , will be rewritten as if these paths were relative to the directory ./src/group_1/product_1/feautre_1/ . Otherwise, the Subset CLI extension will not rewrite the paths of Markdown files as if they were relative to ./src/ directory. Note that the Subset CLI Extension merges the data of the config files recursively, so any subkeys of default config may be overridden by the settings of partial config.","title":"Subset"},{"location":"cli/subset/#subset","text":"This CLI extension adds the command subset that generates a config file for a subset (i.e. a detached part) of the Foliant project. The command uses: the common (i.e. default, single) config file for the whole Foliant project; the part of config that is individual for each subset. The Foliant project may include multiple subsets that are defined by their own partial config files. The command subset takes a path to the subset directory as a mandatory command line parameter. The command subset : reads the partial config of the subset; optionally rewrites the paths of Markdown files that specified there in the chapters section; merges the result with the default config of the whole Foliant project config; finally, writes a new config file that allows to build a certain subset of the Foliant project with the make command.","title":"Subset"},{"location":"cli/subset/#installation","text":"To install the extension, use the command: $ pip install foliantcontrib.subset","title":"Installation"},{"location":"cli/subset/#usage","text":"To get the list of all necessary parameters and available options, run foliant subset --help : $ foliant subset --help usage: foliant subset [ -h ] [ -p PROJECT_DIR_PATH ] [ -c CONFIG ] [ -n ] [ -d ] SUBPATH Generate the config file to build the project subset from SUBPATH. positional arguments: SUBPATH Path to the subset of the Foliant project optional arguments: -h, --help show this help message and exit -p PROJECT_DIR, --path PROJECT_DIR Path to the Foliant project -c CONFIG, --config CONFIG Name of config file of the Foliant project, default 'foliant.yml' -n, --norewrite Do not rewrite the paths of Markdown files in the subset partial config -d, --debug Log all events during build. If not set, only warnings and errors are logged In most cases it\u2019s enough to use the default values of optional parameters. You need to specify only the SUBPATH \u2014the directory that should be located inside the Foliant project source directory. Suppose you use the default settings. Then you have to prepare: the common (default) config file foliant.yml in the Foliant project root directory; partial config files for each subset. They also must be named foliant.yml , and they must be located in the directories of the subsets. Your Foliant project tree may look so: $ tree . \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 src \u251c\u2500\u2500 group_1 \u2502 \u251c\u2500\u2500 product_1 \u2502 \u2502 \u2514\u2500\u2500 feature_1 \u2502 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 product_2 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2514\u2500\u2500 main.md \u2514\u2500\u2500 group_2 \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 intro.md The command foliant subset group_1/product_1/feautre_1 will merge the files ./src/group_1/product_1/feautre_1/foliant.yml and ./foliant.yml , and write the result into the file ./foliant.yml.subset . After that you may use the command like the following to build your Foliant project: $ foliant make pdf --config foliant.yml.subset Let\u2019s look at some examples. The content of the common (default) file ./foliant.yml : title : &title Default Title subtitle : &subtitle Default Subtitle version : &version 0.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2018 params : pdf_engine : xelatex The content of the partial config file ./src/group_1/product_1/feautre_1/foliant.yml : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 chapters : - index.md backend_config : pandoc : vars : year : 2019 The content of newly generated file ./foliant.yml.subset : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2019 params : pdf_engine : xelatex chapters : - b2b/order_1/feature_1/index.md If the option --no-rewrite is not set, the paths of Markdown files that are specified in the chapters section of the file ./src/group_1/product_1/feautre_1/foliant.yml , will be rewritten as if these paths were relative to the directory ./src/group_1/product_1/feautre_1/ . Otherwise, the Subset CLI extension will not rewrite the paths of Markdown files as if they were relative to ./src/ directory. Note that the Subset CLI Extension merges the data of the config files recursively, so any subkeys of default config may be overridden by the settings of partial config.","title":"Usage"},{"location":"cli/init/","text":"Init \u00b6 This CLI extension add init command that lets you create Foliant projects from templates. Installation \u00b6 $ pip install foliantcontrib.init Usage \u00b6 Create project from the default \u201cbase\u201d template: $ foliant init Enter the project name: Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Create project from a custom template: $ foliant init --template /path/to/custom/template Enter the project name: Awesome Customized Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Customized Docs\" created in awesome-customized-docs You can provide the project name without user prompt: $ foliant init --name Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Another useful option is --quiet , which hides all output except for the path to the generated project: $ foliant init --name Awesome Docs --quiet awesome-docs To see all available options, run foliant init --help : $ foliant init --help usage: foliant init [ -h ] [ -n NAME ] [ -t NAME or PATH ] [ -q ] Generate new Foliant project. optional arguments: -h, --help show this help message and exit -n NAME, --name NAME Name of the Foliant project -t NAME or PATH, --template NAME or PATH Name of a built-in project template or path to custom one -q, --quiet Hide all output accept for the result. Useful for piping. Project Templates \u00b6 A project template is a regular Foliant project but containing placeholders in files. When the project is generated, the placeholders are replaced with the values you provide. Currently, there are two placeholders: $title and $slug . There is a built-in template called base . It's used by default if no template is specified.","title":"Init"},{"location":"cli/init/#init","text":"This CLI extension add init command that lets you create Foliant projects from templates.","title":"Init"},{"location":"cli/init/#installation","text":"$ pip install foliantcontrib.init","title":"Installation"},{"location":"cli/init/#usage","text":"Create project from the default \u201cbase\u201d template: $ foliant init Enter the project name: Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Create project from a custom template: $ foliant init --template /path/to/custom/template Enter the project name: Awesome Customized Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Customized Docs\" created in awesome-customized-docs You can provide the project name without user prompt: $ foliant init --name Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Another useful option is --quiet , which hides all output except for the path to the generated project: $ foliant init --name Awesome Docs --quiet awesome-docs To see all available options, run foliant init --help : $ foliant init --help usage: foliant init [ -h ] [ -n NAME ] [ -t NAME or PATH ] [ -q ] Generate new Foliant project. optional arguments: -h, --help show this help message and exit -n NAME, --name NAME Name of the Foliant project -t NAME or PATH, --template NAME or PATH Name of a built-in project template or path to custom one -q, --quiet Hide all output accept for the result. Useful for piping.","title":"Usage"},{"location":"cli/init/#project-templates","text":"A project template is a regular Foliant project but containing placeholders in files. When the project is generated, the placeholders are replaced with the values you provide. Currently, there are two placeholders: $title and $slug . There is a built-in template called base . It's used by default if no template is specified.","title":"Project Templates"},{"location":"cli/init/templates/preprocessor/","text":"Preprocessor \u00b6 Template for a Foliant preprocessor. Instead of looking for an existing preprocessor, cloning it, and modifying its source, install this package and generate a preprocessor directory. As simple as: $ foliant init -t preprocessor Installation \u00b6 $ pip install --no-compile foliantcontrib.templates.preprocessor Usage \u00b6 $ foliant init -t preprocessor Enter the project name: Awesome Preprocessor \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Or: $ foliant init -t preprocessor -n \"Awesome Preprocessor\" \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Result: $ tree awesome-preprocessor . \u251c\u2500\u2500 changelog.md \u251c\u2500\u2500 foliant \u2502 \u2514\u2500\u2500 preprocessors \u2502 \u2514\u2500\u2500 awesome-preprocessor.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u2514\u2500\u2500 setup.py 2 directories, 5 files","title":"Preprocessor"},{"location":"cli/init/templates/preprocessor/#preprocessor","text":"Template for a Foliant preprocessor. Instead of looking for an existing preprocessor, cloning it, and modifying its source, install this package and generate a preprocessor directory. As simple as: $ foliant init -t preprocessor","title":"Preprocessor"},{"location":"cli/init/templates/preprocessor/#installation","text":"$ pip install --no-compile foliantcontrib.templates.preprocessor","title":"Installation"},{"location":"cli/init/templates/preprocessor/#usage","text":"$ foliant init -t preprocessor Enter the project name: Awesome Preprocessor \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Or: $ foliant init -t preprocessor -n \"Awesome Preprocessor\" \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Result: $ tree awesome-preprocessor . \u251c\u2500\u2500 changelog.md \u251c\u2500\u2500 foliant \u2502 \u2514\u2500\u2500 preprocessors \u2502 \u2514\u2500\u2500 awesome-preprocessor.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u2514\u2500\u2500 setup.py 2 directories, 5 files","title":"Usage"},{"location":"config/alt_structure/","text":"AltStructure \u00b6 AltStructure Extension \u00b6 AltStructure is a config extension for Foliant to generate alternative chapter structure based on metadata. It adds an alt_structure preprocessor and resolves !alt_structure YAML tags in the project config. Installation \u00b6 $ pip install foliantcontrib.alt_structure Configuration \u00b6 Config extension Options for AltStructure are specified in the alt_structure section at the root of Foliant config file: alt_structure : structure : - \"topic/entity\" - \"additional\" sep : '/' add_unmatched_to_root : false registry : topic : auth : \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f weather : \u041f\u043e\u0433\u043e\u0434\u0430 entity : test_case : \u0422\u0435\u0441\u0442 \u043a\u0435\u0439\u0441\u044b spec : \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 structure (required) List of structure strings (or lists), each of them representing a branch in chapters structure. sep separator for structure strings (ignored for structure lists). Deafault: / add_unmatched_to_root if true , all chapters that weren't matched to structure in metadata will be added to root of the chapter tree. If false \u2014 they will be ignored. Default: false registry A dictionary which defines aliases for chapter tree categories. Preprocessor Preprocessor has just one option: preprocessors : - alt_structure : create_subfolders : true create_subfolders If true , preprocessor will create a full copy of the working_dir and add it to the beginning of all filepaths in the generated structure. If false \u2014 preprocessor doesn't do anything. Default: true Usage \u00b6 Step 1 Add !alt_structure tag to your chapters in the place where you expect new structure to be generated. It accepts one argument: list of chapters, which will be scanned. chapters : - basic : # <-- this is _chapter tree category_ - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md - Alternative : !alt_structure - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md AltStructure extension introduces a lot of new notions so to make sure we are on the same page, let's agree on some terms. Chapter tree category is a mapping with single key which you add to your chapter list to create hierarchy. basic: and Alternative: are categories in this example. You can also utilize YAML anchors and aliases, but in this case, because of language limitation you need to supply alias inside a list. Let's use it to get the same result as the above, but in a more compact way: chapters : - basic : &basic - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md - Alternative : !alt_structure [ *basic ] Step 2 Next you need to define the structure in structure parameter of extension config. It is defined by list of node types , or a single string with node types, divided by separators. For example: alt_structure : structure : - [ 'topic' , 'entity' ] # list with two node types - 'additional/glossaries' # single string with two node types and separator / These names of the node types are arbitrary, you can use any words you like except root and subfolder . Step 3 Open your source md-files and edit their main meta sections . Main meta section is a section, defined before the first heading in the document (check metadata documentation for details). Add a mapping with nodes for this chapter under the key structure . file auth_spec.md --- structure : topic : auth # <-- node type: node name entity : spec --- ## Specification for authorization Here topic and entity are node types, which are part of our structure (step 2). auth and spec are node names . After applying !alt_structure tag nodes will be converted into chapter tree categories. Node type defines the level of the category and node name defines the caption of the category. We've added two nodes to the structure field of chapter metadata: topic: auth and entity: spec . In the structure that we've defined on step 2 the topic goes first and entity \u2014 second. So after applying the tag, this chapter will appear in config like this: - auth : - spec : - auth_spec.md If we'd stated only topic key in metadata, then it would look like this: - auth : - auth_spec.md Step 4 Now let's fill up registry. We used spec and auth in our metadata for node names, but these words don't look pretty in the documents. Registry allows us to set verbose captions for node names in config: alt_structure : structure : - [ 'topic' , 'entity' ] - 'additional/glossaries' registry : topic : auth : Authentication and Authorization entity : spec : Specifications With such registry now our new structure will look like this: - Authentication and Authorization : - Specifications : - auth_spec.md Special node types \u00b6 In the step 2 of the user guide above we've mentioned that you may choose any node names in the structure except root and subfolder . These are special note types and here's how you can use them. root For example, if our structure looks like this: alt_structure : structure : - [ 'topic' , 'entity' ] and our chapter's metadata looks like this: --- structure : foo : bar --- The node foo: bar is not part of the structure, so applying the !alt_structure tag it will just be ignored (unless add_unmatched_to_root is set to true in config). But what if you want to add it to the root of your chapter tree? To do that \u2014 add the root node to your metadata: --- structure : foo : bar root : true # the value of the key `root` is ignored, we use `true` for clarity --- Please note that if you add root: true to meta, the chapter will be sent to root of your tree only if it wasn't matched by your structure definition. So in the following example it will still appear under node auth and root: true will be ignored: --- structure : topic : auth root : true # ignored --- subfolder By defining subfolder node in chapter's metadata you can manually add another chapter tree category to any chapter. For example: file auth_spec.md --- structure : topic : auth entity : spec subfolder : Main specifications --- After applying tag the new structure will look like this: - auth : - spec : - Main specifications : - auth_spec.md Using preprocessor \u00b6 By default the !alt_structure tag only affects the chapters section of your foliant.yml. This may lead to situation when the same file is mentioned several times in the chapters section. While most backends are fine with that \u2014 they will just publish the file two times, MkDocs does not handle this situation well. That's where you will need to add the preprocessor alt_structure to your preprocessors list. Preprocessor creates a subfolder in the working_dir and copies the entier working_dir contents into it. Then it inserts the subfolder name into the beginning of all chapters paths in the alternative structure. Important: It is recommended to add this preprocessor to the end of the preprocessors list. preprocessors : ... alt_structure : create_subfolders : true Note, that the parameter create_subfolders is not necessary, it is true by default. But we recommend to state it anyway for clarity. After applying the tag, your new structure will now look like this: - Authentication and Authorization : - Specifications : - alt1/auth_spec.md The contents of the working_dir were copied into a subdir alt1 , and new structure refers to the files in this subdir.","title":"AltStructure"},{"location":"config/alt_structure/#altstructure","text":"","title":"AltStructure"},{"location":"config/alt_structure/#altstructure-extension","text":"AltStructure is a config extension for Foliant to generate alternative chapter structure based on metadata. It adds an alt_structure preprocessor and resolves !alt_structure YAML tags in the project config.","title":"AltStructure Extension"},{"location":"config/alt_structure/#installation","text":"$ pip install foliantcontrib.alt_structure","title":"Installation"},{"location":"config/alt_structure/#configuration","text":"Config extension Options for AltStructure are specified in the alt_structure section at the root of Foliant config file: alt_structure : structure : - \"topic/entity\" - \"additional\" sep : '/' add_unmatched_to_root : false registry : topic : auth : \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f weather : \u041f\u043e\u0433\u043e\u0434\u0430 entity : test_case : \u0422\u0435\u0441\u0442 \u043a\u0435\u0439\u0441\u044b spec : \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 structure (required) List of structure strings (or lists), each of them representing a branch in chapters structure. sep separator for structure strings (ignored for structure lists). Deafault: / add_unmatched_to_root if true , all chapters that weren't matched to structure in metadata will be added to root of the chapter tree. If false \u2014 they will be ignored. Default: false registry A dictionary which defines aliases for chapter tree categories. Preprocessor Preprocessor has just one option: preprocessors : - alt_structure : create_subfolders : true create_subfolders If true , preprocessor will create a full copy of the working_dir and add it to the beginning of all filepaths in the generated structure. If false \u2014 preprocessor doesn't do anything. Default: true","title":"Configuration"},{"location":"config/alt_structure/#usage","text":"Step 1 Add !alt_structure tag to your chapters in the place where you expect new structure to be generated. It accepts one argument: list of chapters, which will be scanned. chapters : - basic : # <-- this is _chapter tree category_ - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md - Alternative : !alt_structure - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md AltStructure extension introduces a lot of new notions so to make sure we are on the same page, let's agree on some terms. Chapter tree category is a mapping with single key which you add to your chapter list to create hierarchy. basic: and Alternative: are categories in this example. You can also utilize YAML anchors and aliases, but in this case, because of language limitation you need to supply alias inside a list. Let's use it to get the same result as the above, but in a more compact way: chapters : - basic : &basic - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md - Alternative : !alt_structure [ *basic ] Step 2 Next you need to define the structure in structure parameter of extension config. It is defined by list of node types , or a single string with node types, divided by separators. For example: alt_structure : structure : - [ 'topic' , 'entity' ] # list with two node types - 'additional/glossaries' # single string with two node types and separator / These names of the node types are arbitrary, you can use any words you like except root and subfolder . Step 3 Open your source md-files and edit their main meta sections . Main meta section is a section, defined before the first heading in the document (check metadata documentation for details). Add a mapping with nodes for this chapter under the key structure . file auth_spec.md --- structure : topic : auth # <-- node type: node name entity : spec --- ## Specification for authorization Here topic and entity are node types, which are part of our structure (step 2). auth and spec are node names . After applying !alt_structure tag nodes will be converted into chapter tree categories. Node type defines the level of the category and node name defines the caption of the category. We've added two nodes to the structure field of chapter metadata: topic: auth and entity: spec . In the structure that we've defined on step 2 the topic goes first and entity \u2014 second. So after applying the tag, this chapter will appear in config like this: - auth : - spec : - auth_spec.md If we'd stated only topic key in metadata, then it would look like this: - auth : - auth_spec.md Step 4 Now let's fill up registry. We used spec and auth in our metadata for node names, but these words don't look pretty in the documents. Registry allows us to set verbose captions for node names in config: alt_structure : structure : - [ 'topic' , 'entity' ] - 'additional/glossaries' registry : topic : auth : Authentication and Authorization entity : spec : Specifications With such registry now our new structure will look like this: - Authentication and Authorization : - Specifications : - auth_spec.md","title":"Usage"},{"location":"config/alt_structure/#special-node-types","text":"In the step 2 of the user guide above we've mentioned that you may choose any node names in the structure except root and subfolder . These are special note types and here's how you can use them. root For example, if our structure looks like this: alt_structure : structure : - [ 'topic' , 'entity' ] and our chapter's metadata looks like this: --- structure : foo : bar --- The node foo: bar is not part of the structure, so applying the !alt_structure tag it will just be ignored (unless add_unmatched_to_root is set to true in config). But what if you want to add it to the root of your chapter tree? To do that \u2014 add the root node to your metadata: --- structure : foo : bar root : true # the value of the key `root` is ignored, we use `true` for clarity --- Please note that if you add root: true to meta, the chapter will be sent to root of your tree only if it wasn't matched by your structure definition. So in the following example it will still appear under node auth and root: true will be ignored: --- structure : topic : auth root : true # ignored --- subfolder By defining subfolder node in chapter's metadata you can manually add another chapter tree category to any chapter. For example: file auth_spec.md --- structure : topic : auth entity : spec subfolder : Main specifications --- After applying tag the new structure will look like this: - auth : - spec : - Main specifications : - auth_spec.md","title":"Special node types"},{"location":"config/alt_structure/#using-preprocessor","text":"By default the !alt_structure tag only affects the chapters section of your foliant.yml. This may lead to situation when the same file is mentioned several times in the chapters section. While most backends are fine with that \u2014 they will just publish the file two times, MkDocs does not handle this situation well. That's where you will need to add the preprocessor alt_structure to your preprocessors list. Preprocessor creates a subfolder in the working_dir and copies the entier working_dir contents into it. Then it inserts the subfolder name into the beginning of all chapters paths in the alternative structure. Important: It is recommended to add this preprocessor to the end of the preprocessors list. preprocessors : ... alt_structure : create_subfolders : true Note, that the parameter create_subfolders is not necessary, it is true by default. But we recommend to state it anyway for clarity. After applying the tag, your new structure will now look like this: - Authentication and Authorization : - Specifications : - alt1/auth_spec.md The contents of the working_dir were copied into a subdir alt1 , and new structure refers to the files in this subdir.","title":"Using preprocessor"},{"location":"config/from/","text":"MultiProject \u00b6 This extension resolves the !from YAML tag in the project config and replaces the value of the tag with chaptres section of related subproject. Nested subprojects are processed recursively. Installation \u00b6 $ pip install foliantcontrib.multiproject Usage \u00b6 The subproject location may be specified as a local path, or as a Git repository with optional revision (branch name, commit hash or another reference). Example of chapters section in the project config: chapters : - index.md - !from local_dir - !from https://github.com/foliant-docs/docs.git - !from https://github.com/some_other_group/some_other_repo.git#develop Before building the documentation superproject, Multiproject extension calls Foliant to build each subproject into pre target, and then moves the directories of built subprojects into the source directory of the superproject (usually called as src ). Limitations: directory names of subprojects of the same level should be unique; source directories of the multiproject and of all the subprojects should have the same names; also they should be located inside the \u201croot\u201d directories of corresponding projects; config files of the multiproject and of all the subprojects should have the same names; subprojects from remote Git repositories do not need to be newly cloned before each build, but local subprojects are copied into cache before each build; it\u2019s undesirable if the path of the \u201croot\u201d directory of the top-level project contains .multiprojectcache directory as its some part.","title":"MultiProject"},{"location":"config/from/#multiproject","text":"This extension resolves the !from YAML tag in the project config and replaces the value of the tag with chaptres section of related subproject. Nested subprojects are processed recursively.","title":"MultiProject"},{"location":"config/from/#installation","text":"$ pip install foliantcontrib.multiproject","title":"Installation"},{"location":"config/from/#usage","text":"The subproject location may be specified as a local path, or as a Git repository with optional revision (branch name, commit hash or another reference). Example of chapters section in the project config: chapters : - index.md - !from local_dir - !from https://github.com/foliant-docs/docs.git - !from https://github.com/some_other_group/some_other_repo.git#develop Before building the documentation superproject, Multiproject extension calls Foliant to build each subproject into pre target, and then moves the directories of built subprojects into the source directory of the superproject (usually called as src ). Limitations: directory names of subprojects of the same level should be unique; source directories of the multiproject and of all the subprojects should have the same names; also they should be located inside the \u201croot\u201d directories of corresponding projects; config files of the multiproject and of all the subprojects should have the same names; subprojects from remote Git repositories do not need to be newly cloned before each build, but local subprojects are copied into cache before each build; it\u2019s undesirable if the path of the \u201croot\u201d directory of the top-level project contains .multiprojectcache directory as its some part.","title":"Usage"},{"location":"config/slugs/","text":"Slugs \u00b6 Slugs is an extension for Foliant to generate custom slugs from arbitrary lists of values. It resolves !slug , !date , !version , and !commit_count YAML tags in the project config. The list of values after the !slug tag is replaced with the string that joins these values using - delimeter. Spaces ( ) in the values are replaced with underscores ( _ ). The value of the node that contains the !date tag is replaced with the current local date. The list of values after the !version tag is replaced with the string that joins these values using . delimeter. The value of the node that contains the !commit_count tag is replaced by the number of commits in the current Git repository. Installation \u00b6 $ pip install foliantcontrib.slugs Usage \u00b6 Slug \u00b6 Config example: title : &title My Awesome Project version : &version 1.0 slug : !slug - *title - *version - !date Example of the resulting slug: My_Awesome_Project-1.0-2018-05-10 Note that backends allow to override the top-level slug, so you may define different custom slugs for each backend: backend_config : pandoc : slug : !slug - *title - *version - !date mkdocs : slug : my_awesome_project Version \u00b6 Config example: version : !version [ 1 , 0 , 5 ] Resulting version: 1.0.5 If you wish to use the number of commits in the current branch as a part of your version, add the !commit_count tag: version : !version - 1 - !commit_count Resulting version: 1.85 The !commit_count tag accepts two arguments: name of the branch to count commits in; correction\u2014a positive or negative number to adjust the commit count. Suppose you want to bump the major version and start counting commits from the beginning. Also you want to use only number of commits in the master branch. So your config will look like this: version : !version - 2 - !commit_count master -85 Result: 2.0","title":"Slugs"},{"location":"config/slugs/#slugs","text":"Slugs is an extension for Foliant to generate custom slugs from arbitrary lists of values. It resolves !slug , !date , !version , and !commit_count YAML tags in the project config. The list of values after the !slug tag is replaced with the string that joins these values using - delimeter. Spaces ( ) in the values are replaced with underscores ( _ ). The value of the node that contains the !date tag is replaced with the current local date. The list of values after the !version tag is replaced with the string that joins these values using . delimeter. The value of the node that contains the !commit_count tag is replaced by the number of commits in the current Git repository.","title":"Slugs"},{"location":"config/slugs/#installation","text":"$ pip install foliantcontrib.slugs","title":"Installation"},{"location":"config/slugs/#usage","text":"","title":"Usage"},{"location":"config/slugs/#slug","text":"Config example: title : &title My Awesome Project version : &version 1.0 slug : !slug - *title - *version - !date Example of the resulting slug: My_Awesome_Project-1.0-2018-05-10 Note that backends allow to override the top-level slug, so you may define different custom slugs for each backend: backend_config : pandoc : slug : !slug - *title - *version - !date mkdocs : slug : my_awesome_project","title":"Slug"},{"location":"config/slugs/#version","text":"Config example: version : !version [ 1 , 0 , 5 ] Resulting version: 1.0.5 If you wish to use the number of commits in the current branch as a part of your version, add the !commit_count tag: version : !version - 1 - !commit_count Resulting version: 1.85 The !commit_count tag accepts two arguments: name of the branch to count commits in; correction\u2014a positive or negative number to adjust the commit count. Suppose you want to bump the major version and start counting commits from the beginning. Also you want to use only number of commits in the master branch. So your config will look like this: version : !version - 2 - !commit_count master -85 Result: 2.0","title":"Version"},{"location":"preprocessors/admonitions/","text":"Admonitions \u00b6 Admonitions preprocessor for Foliant \u00b6 Preprocessor which tries to make admonitions syntax available for most backends. Admonitions are decorated fragments of text which indicate a warning, notice, tip, etc. We use rST-style syntax for admonitions which is already supported by mkdocs backend with admonition extension turned on. This preprocessor makes this syntax work for pandoc and slate backends. Installation \u00b6 $ pip install foliantcontrib.admonitions Config \u00b6 Just add admonitions into your preprocessors list. Right now the preprocessor doesn't have any options: preprocessors : - admonitions Usage \u00b6 Add an admonition to your Markdown file: !!! warning \"optional admonition title\" Admonition text . May be several paragraphs . Currently supported backends: pandoc mkdocs * slate * for admonitions to work in mkdocs, add admonition to the markdown_extensions section of your mkdocs.yml config: backend_config : mkdocs : mkdocs.yml : markdown_extensions : - admonition Notes for slate \u00b6 Slate has its own admonitions syntax of three types: notice (blue notes), warning (red warnings) and success (green notes). If another type is supplied, slate draws a blue note but without the \"i\" icon. Admonitions preprocessor transforms some of the general admonition types into slate's for convenience (so you could use error type to display same kind of note in both slate and mkdocs). These translations are indicated in the table below: original type translates to error warning danger warning caution warning info notice note notice tip notice hint notice","title":"Admonitions"},{"location":"preprocessors/admonitions/#admonitions","text":"","title":"Admonitions"},{"location":"preprocessors/admonitions/#admonitions-preprocessor-for-foliant","text":"Preprocessor which tries to make admonitions syntax available for most backends. Admonitions are decorated fragments of text which indicate a warning, notice, tip, etc. We use rST-style syntax for admonitions which is already supported by mkdocs backend with admonition extension turned on. This preprocessor makes this syntax work for pandoc and slate backends.","title":"Admonitions preprocessor for Foliant"},{"location":"preprocessors/admonitions/#installation","text":"$ pip install foliantcontrib.admonitions","title":"Installation"},{"location":"preprocessors/admonitions/#config","text":"Just add admonitions into your preprocessors list. Right now the preprocessor doesn't have any options: preprocessors : - admonitions","title":"Config"},{"location":"preprocessors/admonitions/#usage","text":"Add an admonition to your Markdown file: !!! warning \"optional admonition title\" Admonition text . May be several paragraphs . Currently supported backends: pandoc mkdocs * slate * for admonitions to work in mkdocs, add admonition to the markdown_extensions section of your mkdocs.yml config: backend_config : mkdocs : mkdocs.yml : markdown_extensions : - admonition","title":"Usage"},{"location":"preprocessors/admonitions/#notes-for-slate","text":"Slate has its own admonitions syntax of three types: notice (blue notes), warning (red warnings) and success (green notes). If another type is supplied, slate draws a blue note but without the \"i\" icon. Admonitions preprocessor transforms some of the general admonition types into slate's for convenience (so you could use error type to display same kind of note in both slate and mkdocs). These translations are indicated in the table below: original type translates to error warning danger warning caution warning info notice note notice tip notice hint notice","title":"Notes for slate"},{"location":"preprocessors/anchors/","text":"Anchors \u00b6 Anchors \u00b6 Preprocessor which allows to use arbitrary anchors in Foliant documents. Installation \u00b6 $ pip install foliantcontrib.anchors Config \u00b6 To enable the preprocessor, add anchors to preprocessors section in the project config: preprocessors : - anchors The preprocessor has some options, but most probably you won't need any of them: preprocessors : - anchors : element : '<span id=\"{anchor}\"></span>' tex : False element Template of an HTML-element which will be placed instead of the <anchor> tag. In this template {anchor} will be replaced with the tag contents. Default: '<span id=\"{anchor}\"></span>' tex If this option is True , preprocessor will try to use TeX-language anchors: \\hypertarget{anchor}{} . Default: False Notice, this option will work only with pdf target. For all other targets it is set to False . Usage \u00b6 Just add an anchor tag to some place and then use an ordinary Markdown-link to this anchor: ... < anchor > limitation </ anchor > Some important notice about system limitation. ... Don't forget about [limitation](#limitation)! You can also place anchors in the middle of paragraph: Lorem ipsum dolor sit amet, consectetur adipisicing elit. < anchor > middle </ anchor > Molestiae illum iusto, sequi magnam consequatur porro iste facere at fugiat est corrupti dolorum quidem sapiente pariatur rem, alias unde! Iste, aliquam. [Go to the middle of the paragraph](#middle) You can place anchors inside tables: Name | Age | Weight ---- | --- | ------ Max | 17 | 60 Jane | 98 | 12 John | 10 | 40 Katy | 54 | 54 Mike < anchor > Mike </ anchor > | 22 | 299 Cinty| 25 | 42 ... Something's wrong with Mike, [look](#Mike)! Additional info \u00b6 1. Anchors are case sensitive Markdown and MarkDown are two different anchors. 2. Anchors should be unique You can't use two anchors with the same name in one document. If preprocessor notices repeating anchors in one md-file it will throw you a warning. If there are repeating anchors in different md-files and they all go into single pdf or docx, all links will lead to the first one. 3. Anchors may conflict with headers Headers are usually assigned anchors of their own. Be careful, your anchors may conflict with them. Preprocessor will try to detect if you are using anchor which is already taken by the header and warn you in console. Remember, that header anchors are almost always in lower-case and almost never use special symbols except - . 4. Some symbols are restricted You can't use these symbols in anchors: []<>\\\" Also you can't use space. 5. But a lot of other symbols are available All these are valid anchors: <anchor> !important! </anchor> <anchor> _anchor_ </anchor> <anchor> section(1) </anchor> <anchor> section/1/ </anchor> <anchor> anchor$1$ </anchor> <anchor> about:info </anchor> <anchor> test'1'; </anchor> <anchor> \u044f\u043a\u043e\u0440\u044c </anchor> <anchor> \ud83d\udc40 </anchor> Notice for Mkdocs \u00b6 In many Mkdocs themes the top menu lays over the text with absolute position. In this situation all anchors will be hidden by the menu. Possible solution is to use element option. Example config: preprocessors : - anchors : element : '<span style=\"display:block; margin:-3.1rem; padding:3.1rem;\" id=\"{anchor}\"></span>'","title":"Anchors"},{"location":"preprocessors/anchors/#anchors","text":"","title":"Anchors"},{"location":"preprocessors/anchors/#anchors_1","text":"Preprocessor which allows to use arbitrary anchors in Foliant documents.","title":"Anchors"},{"location":"preprocessors/anchors/#installation","text":"$ pip install foliantcontrib.anchors","title":"Installation"},{"location":"preprocessors/anchors/#config","text":"To enable the preprocessor, add anchors to preprocessors section in the project config: preprocessors : - anchors The preprocessor has some options, but most probably you won't need any of them: preprocessors : - anchors : element : '<span id=\"{anchor}\"></span>' tex : False element Template of an HTML-element which will be placed instead of the <anchor> tag. In this template {anchor} will be replaced with the tag contents. Default: '<span id=\"{anchor}\"></span>' tex If this option is True , preprocessor will try to use TeX-language anchors: \\hypertarget{anchor}{} . Default: False Notice, this option will work only with pdf target. For all other targets it is set to False .","title":"Config"},{"location":"preprocessors/anchors/#usage","text":"Just add an anchor tag to some place and then use an ordinary Markdown-link to this anchor: ... < anchor > limitation </ anchor > Some important notice about system limitation. ... Don't forget about [limitation](#limitation)! You can also place anchors in the middle of paragraph: Lorem ipsum dolor sit amet, consectetur adipisicing elit. < anchor > middle </ anchor > Molestiae illum iusto, sequi magnam consequatur porro iste facere at fugiat est corrupti dolorum quidem sapiente pariatur rem, alias unde! Iste, aliquam. [Go to the middle of the paragraph](#middle) You can place anchors inside tables: Name | Age | Weight ---- | --- | ------ Max | 17 | 60 Jane | 98 | 12 John | 10 | 40 Katy | 54 | 54 Mike < anchor > Mike </ anchor > | 22 | 299 Cinty| 25 | 42 ... Something's wrong with Mike, [look](#Mike)!","title":"Usage"},{"location":"preprocessors/anchors/#additional-info","text":"1. Anchors are case sensitive Markdown and MarkDown are two different anchors. 2. Anchors should be unique You can't use two anchors with the same name in one document. If preprocessor notices repeating anchors in one md-file it will throw you a warning. If there are repeating anchors in different md-files and they all go into single pdf or docx, all links will lead to the first one. 3. Anchors may conflict with headers Headers are usually assigned anchors of their own. Be careful, your anchors may conflict with them. Preprocessor will try to detect if you are using anchor which is already taken by the header and warn you in console. Remember, that header anchors are almost always in lower-case and almost never use special symbols except - . 4. Some symbols are restricted You can't use these symbols in anchors: []<>\\\" Also you can't use space. 5. But a lot of other symbols are available All these are valid anchors: <anchor> !important! </anchor> <anchor> _anchor_ </anchor> <anchor> section(1) </anchor> <anchor> section/1/ </anchor> <anchor> anchor$1$ </anchor> <anchor> about:info </anchor> <anchor> test'1'; </anchor> <anchor> \u044f\u043a\u043e\u0440\u044c </anchor> <anchor> \ud83d\udc40 </anchor>","title":"Additional info"},{"location":"preprocessors/anchors/#notice-for-mkdocs","text":"In many Mkdocs themes the top menu lays over the text with absolute position. In this situation all anchors will be hidden by the menu. Possible solution is to use element option. Example config: preprocessors : - anchors : element : '<span style=\"display:block; margin:-3.1rem; padding:3.1rem;\" id=\"{anchor}\"></span>'","title":"Notice for Mkdocs"},{"location":"preprocessors/apilinks/","text":"APILinks \u00b6 Preprocessor for replacing API reference s in markdown files with links to actual method description on the API documentation web-page. Installation \u00b6 $ pip install foliantcontrib.apilinks Quick Start \u00b6 Say, you have an API documentation hosted at the url http://example.com/api-docs On this page you have HTML headings before each method description which look like this: < h2 id = \"get-user-authenticate\" > GET user/authenticate </ h2 > You want references to these methods in your documentation to be replaced with the links to the actual method descriptions. Your references look like this: To authenticate user use API method `GET user/authenticate`. Now all you need to do is add the apilinks preprocessor into your foliant.yml and state your API url in its options like this: preprocessors : - apilinks : API : My-API : url : http://example.com/api-docs Here: API is a required section; My-API is a local name of your API. Right now it is not very important but will come in handy in the next example; url is a string with full url to your API documentation web-page. It will be used to validate references and to construct a link to method. After foliant applies the preprocessor your document will be transformed into this: To authenticate user use API method [GET user/authenticate](http://example.com/api-docs/#get-user-authenticate). Notice that preprocessor figured out the correct anchor #get-user-authenticate by himself. Now instead of plain name of the method you've got a link to the method description! Ok, what if I have two different APIs: client API and admin API? No problem, put both of them into your config: preprocessors : - apilinks : API : Client-API : url : http://example.com/client/api-docs Admin-API : url : http://example.com/admin/api-docs Now this source: To authenticate user use API method `GET user/authenticate`. To ban user from the website use admin API method `POST admin/ban_user/{user_id}` Will be transformed by apilinks into this: To authenticate user use API method [GET user/authenticate](http://example.com/client/api-docs/#get-user-authenticate). To ban user from the website use admin API method [POST admin/ban_user/{user_id}](http://example.com/admin/api-docs/#post-admin-ban_user-user_id) Notice that apilinks determined that the first reference is from Client API, and the second one is from the Admin API. How is that possible? Easy: preprocessor parses each API url from the config and stores their methods before looking for references. When the time comes to process the references it already has a list of all methods to validate your reference and to determine which API link should be inserted. But what if we have the same-named method in both of our APIs? In this case you will see a warning: WARNING : GET /service/ healthcheck is present in several APIs ( Client - API , Admin - API ). Please , use prefix . Skipping It suggests us to use prefix, and by that it means to prefix the reference by the local name of the API in config. Like that: Check status of the server through Client API: `Client-API: GET /service/healthcheck` Do the same through Admin API: `Admin-API: GET /service/healthcheck` Here Client-API: and Admin-API: are prefixes. And they should be the same as your API names in the config. Now each reference will be replaced with the link to corresponding API web-page. apilinks is a highly customizable preprocessor. You can tune: the format of the references; the output string which will replace the reference; the format of the headings in your API web-page; and more! For details look through the following sections. Glossary: reference \u2014 reference to an API method in the source file. The one to be replaced with the link, e.g. GET user/config verb \u2014 HTTP method, e.g. GET , POST , etc. command \u2014 resource used to represent method on the API documentation webpage, e.g. /service/healthcheck . endpoint prefix \u2014 A prefix from server root to the command. If the command is /user/status and full resource is /api/v0/user/satus then the endpoint-prefix should be stated /api/v0 . In references you can use either full resource ( {endpoint_prefix}/{command} ) or just the command. apilinks will sort it out for you. output \u2014 string, which will replace the reference . header \u2014 HTML header on the API documentation web-page of the method description, e.g. <h2 id=\"get-user-config\">GET user/config</h2> anchor \u2014 web-anchor leading to the specific header on the API documentation web-page, e.g. #get-user-config How Does It Work? \u00b6 Preprocessor can work in online and offline modes. In offline mode it merely replaces references to API methods with links to their description. The references are catched by a regular expression. The link url is taken from config and the link anchor is generated from the reference automatically. You can have several different APIs stated in the config. You can use prefixes to point out which API is being reference d. Prefixes format may be customized in the configuration but by default you do it like this: Client-API: GET user/name . Here ' Client-API ' is a prefix. If you don't use prefix in the reference preprocessor will suppose that you meant the default API, which is marked by default option in config. If none of them is marked \u2014 goes for the first in list. In online mode things are getting interesting. Preprocessor actually goes to each of the API web-pages, and collects all method headers (right now only h2 headers are supported). Then it goes through your document's source: when it meets a reference , it looks through all the collected methods and replaces the reference with the correct link to it. If method is not found \u2014 preprocessor will show warning and leave the reference unchanged. Same will happen if there are several methods with this name in different APIs. Prefixes, explained before, are supported too. Config \u00b6 To enable the preprocessor, add apilinks to preprocessors section in the project config: preprocessors : - apilinks The preprocessor has a lot of options. For your convenience the required options are marked (required) ; and those options which are used in customization are marked (optional) . Most likely you will need just one or two of the latter. preprocessors : - apilinks : targets : - site offline : False trim_if_targets : - pdf prefix_to_ignore : Ignore reference : - regex : *ref_pattern only_with_prefixes : false only_defined_prefixes : true output_template : '[{verb} {command}]({url})' trim_template : '`{verb} {command}`' API : Client-API : url : http://example.com/api/client default : true header_template : '{verb} {command}' Admin-API : url : http://example.com/api/client header_template : '{command}' endpoint-prefix : /api/v0 prefix_to_ignore (optional) A default prefix for ignoring references. If apilinks meets a reference with this prefix it leaves it unchanged. Default: Ignore targets (optional) List of supported targets for foliant make command. If target is not listed here \u2014 preprocessor won't be applied. If the list is empty \u2014 preprocessor will be applied for any target. Default: [] offline (optional) Option determining whether the preprocessor will work in online or offline mode. Details in the How Does It Work? and Online and Offline Modes Comparison sections. Default: False trim_if_targets (optional) List of targets for foliant make command for which the prefixes from all references in the text will be cut out. Default: [] Only those references whose prefixes are defined in the API section (described below) are affected by this option. All references with unlisted prefixes will not be trimmed. reference (optional) A subsection for listing all the types of references you are going to catch in the text, and their properties. Options for this section are listed below. Reference options regex (optional) regular expression used to catch references in the source. Look for details in the Capturing References section. Default: (?P<source>`((?P<prefix>[\\w-]+):\\s*)?(?P<verb>OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT|PATCH|LINK|UNLINK)\\s+(?P<command>\\S+)`) only_with_prefixes (optional) if this is true , only references with prefix will be transformed. Ordinary links like GET user/info will be ignored. Default: false only_defined_prefixes (optional) if this is true all references whose prefix is not listed in the API section (described below) will be ignored, left unchanged. References without prefix are not affected by this option. Default: false . output_template (optional) A template string describing the output which will replace the reference . More info in the Customizing Output section. Default: '[{verb} {command}]({url})' trim_template (optional) Only for targets listed in trim_if_targets option. Tune this template if you want to customize how apilinks cuts out prefixes. The reference will be replaced with text based on this template. Default: '`{verb} {command}`' API (required) A subsection for listing all the APIs and their properties. Under this section there should be a separate subsection for each API. The section name represents the API name and, at the same time, the prefix used in the references. You need to add at least one API subsection for preprocessor to work. API properties url (required) An API documentation web-page URL. It will be used to construct the full link to the method. In online mode it will also be parsed by preprocessor for validation. default (optional) Only for offline mode. Marker to define the default API. If several APIs are marked default, preprocessor will choose the first of them. If none is marked default \u2014 the first API in the list will be chosen. The value of this item should be true . header_template (optional) A template string describing the format of the headings in the API documentation web-page. Details in parsing API web-page section. Default: '{verb} {command}' endpoint-prefix (optional) The endpoint prefix from the server root to API methods. If is stated \u2014 apilinks can divide the command in the reference and search for it more accurately. Also you could use it in templates. More info coming soon. Default: '' Online and Offline Modes Comparison \u00b6 Let's study an example and look how the behavior of the preprocessor will change in online and offline modes. We have three APIs described in the config: preprocessors : - apilinks : API : Admin-API : url : http://example.com/api/client Client-API : url : http://example.com/api/client default : true header_template : '{verb} {command}' Remote-API : url : https://remote.net/api-ref/ header_template : '{command}' Now let's look at different examples of the text used in Markdown source and how it is going to be transformed in Offline and Online modes Example 1 Source: Unprefixed link which only exists in Remote API: `GET system/info`. In Offline mode preprocessor won't do any checks and just replace the reference with the link to default API from the config: Unprefixed link which only exists in Remote API: [GET system/info](http://example.com/api/client/#get-system-info). This is certainly a wrong decision, but it is our fault, we sould have added the prefix to the reference. But let's look what will happen in Online mode : Unprefixed link which only exists in Remote API: [GET system/info](https://remote.net/api-ref/#system-info). Without any prefix the preprocessor determined that it should choose the Remote API to replace this reference because this method exists only on its page. The default option is just ignored in this mode. By the way, notice how anchors differ in the two examples. For Remote API preprocessor used its header template to reconstruct the anchor, dropping the verb from it. Example 2 Source: Unprefixed link with misprint: `GET user/sttus`. The link is incorrect, there's no such method in any of the APIs. In Offline mode preprocessor won't do any checks again. No magic, the reference will be replaced with the link to default API from the config: Unprefixed link with misprint: [GET user/sttus](http://example.com/api/client/#get-user-sttus). The link is incorrect, there's no such method in any of the APIs. In Online mode preprocessor won't be able to find the method during validation and the reference won't be replaced at all: Unprefixed link with misprint: `GET user/sttus`. The link is incorrect, there's no such method in any of the APIs. During the Foliant project assembly you will see a warning message: WARNING : Cannot find method GET user / sttus . Skipping Example 3 Source: Prefixed link to the Admin API: `Admin-API: POST user/ban_forever`. In Offline mode preprocessor will notice the prefix and will be able to replace the reference with an appropriate link: Prefixed link to the Admin API: [POST user/ban_forever](http://example.com/api/client/#post-user-ban_forever). Notice that prefix disappeared from the text. If you wish it to stay there \u2014 edit the output_template option to something like this: '{prefix}: {verb} {command}' . In Online mode the result will be exactly the same. Preprocessor will check the Admin-API methods, find there the referenced method and replace it in the text: Prefixed link to the Admin API: [POST user/ban_forever](http://example.com/api/client/#post-user-ban_forever). Example 4 Prefixed link to the Remote API with a misprint: `Remote-API: GET billling/info`. Oh no, the method is incorrect again. In Offline mode preprocessor will perform no checks and just replace the reference with the link to Remote API: Prefixed link to the Remote API with a misprint: [GET billling/info](https://remote.net/api-ref/#get-billling-info). Oh no, the method is incorrect again. Online mode , on the other hand, will make its homework. It will check whether the Remote API actually has the method GET billling/info . Finding out that it hasn't it will leave the reference unchanged: Prefixed link to the Remote API with a misprint: `Remote-API: GET billling/info`. Oh no, the method is incorrect again. ...and warn us with the message: WARNING : Cannot find method GET billling / info in Remote - API . Skipping Example 5 Now let's reference a method which is present in both Client and Admin APIs: `GET service/healthcheck`. In Offline mode preprocessor will just replace the reference with a link to default API: Now let's reference a method which is present in both Client and Admin APIs: [GET service/healthcheck](http://example.com/api/client/#get-service-healthcheck). But in Online mode preprocessor will go through all API method lists. It will find several mentions of this exact method and, confused, won't replace the reference at all: Now let's reference a method which is present in both Client and Admin APIs: `GET service/healthcheck`. You will also see a warning: WARNING : GET /service/ healthcheck is present in several APIs ( Admin - API , Client - API ). Please , use prefix . Skipping Capturing References \u00b6 apilinks uses regular expressions to capture references to API methods in Markdown files. The default reg-ex is as following: (?P<source>`((?P<prefix>[\\w-]+):\\s*)?(?P<verb>OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT|PATCH|LINK|UNLINK)\\s+(?P<command>\\S+)`) This expression accepts references like these: Client-API: GET user/info UPDATE user/details Notice that default expression uses Named Capturing Groups . You would probably want to use all of them too if you are to redefine the expression. Though not all of them are required, see the table below. Group Required Description source YES The full original reference string prefix NO Prefix pointing to the name of the API from config verb NO HTTP verb as GET , POST , etc command YES the full method resource as it is stated in the API header (may include endpoint prefix) To redefine the regular expression add an option reg-regex to the preprocessor config. For example, if you want to capture ONLY references with prefixes you may use the following: preprocessors : - apilinks : reference : - regex : '(?P<source>`((?P<prefix>[\\w-]+):\\s*)(?P<verb>POST|GET|PUT|UPDATE|DELETE)\\s+(?P<command>\\S+)`)' This example is for illustrative purposes only. You can achieve the same goal by just switching on the only_with_prefixes option. Now the references without prefix ( UPDATE user/details ) will be ignored. Customizing Output \u00b6 You can customize the output -string which will replace the reference string. To do that add a template into your config-file. A template is a string which may contain properties, surrounded by curly braces. These properties will be replaced with the values, and all the rest will remain unchanged. For example, look at the default template: preprocessors : - apilinks : reference : - output_template : '[{verb} {command}]({url})' , Don't forget the single quotes around the template. This way we say to yaml engine that this is a string for it not to be confused with curly braces. With the default template, the reference string will be replaced by something like that: [GET user/info](http://example.com/api/#get-user-info) If you don't want references to be transfromed into links, use your own template. Properties you may use in the template: property description example url Full url to the method description http://example.com/api/#get-user-info source Full original reference string ` Client-API: GET user/info ` prefix Prefix used in the reference Client-API verb HTTP verb used in the reference GET command API command being referenced with endpoint prefix removed user/info endpoint_prefix Endpoint prefix to the API (if endpoint-prefix option is filled in) /api/v0 Parsing API Web-page \u00b6 apilinks goes through the API web-page content and gathers all the methods which are described there. To do this preprocessor scans each HTML h2 tag and stores its id attribute (which is an anchor of the link to be constructed) and the contents of the tag (the heading itself). For example in this link: < h2 id = \"get-user-info\" > GET user/info </ h2 > the anchor would be get-user-info and the heading would be GET user/info . To construct the link to the method description we will have to create the correct anchor for it. To create an anchor we would need to reconstruct the heading first. But the heading format may be arbitrary and that's why we need the header_template config option. The header_template is a string which may contain properties, surrounded by curly braces. These properties will be replaced with the values, when preprocessor will attempt to reconstruct the heading. All the rest will remain unchanged. For example, if your API headings look like this: <h2 id= \"method-user-info-get\" > Method user/info (GET) </h2> You should use the following option: ... API : Client-API : header_template : 'Method {command} ({verb})' ... Don't forget the single quotes around the template. This way we say to yaml engine that this is a string. If your headers do not have a verb at all: <h2 id= \"user-info\" > user/info </h2> You should use the following option: ... API : Client-API : header_template : '{command}' ... Properties you may use in the template: property description example verb HTTP verb used in the reference GET command API command being referenced user/info endpoint_prefix Endpoint prefix to the API (if endpoint-prefix option is filled in) /api/v0","title":"APILinks"},{"location":"preprocessors/apilinks/#apilinks","text":"Preprocessor for replacing API reference s in markdown files with links to actual method description on the API documentation web-page.","title":"APILinks"},{"location":"preprocessors/apilinks/#installation","text":"$ pip install foliantcontrib.apilinks","title":"Installation"},{"location":"preprocessors/apilinks/#quick-start","text":"Say, you have an API documentation hosted at the url http://example.com/api-docs On this page you have HTML headings before each method description which look like this: < h2 id = \"get-user-authenticate\" > GET user/authenticate </ h2 > You want references to these methods in your documentation to be replaced with the links to the actual method descriptions. Your references look like this: To authenticate user use API method `GET user/authenticate`. Now all you need to do is add the apilinks preprocessor into your foliant.yml and state your API url in its options like this: preprocessors : - apilinks : API : My-API : url : http://example.com/api-docs Here: API is a required section; My-API is a local name of your API. Right now it is not very important but will come in handy in the next example; url is a string with full url to your API documentation web-page. It will be used to validate references and to construct a link to method. After foliant applies the preprocessor your document will be transformed into this: To authenticate user use API method [GET user/authenticate](http://example.com/api-docs/#get-user-authenticate). Notice that preprocessor figured out the correct anchor #get-user-authenticate by himself. Now instead of plain name of the method you've got a link to the method description! Ok, what if I have two different APIs: client API and admin API? No problem, put both of them into your config: preprocessors : - apilinks : API : Client-API : url : http://example.com/client/api-docs Admin-API : url : http://example.com/admin/api-docs Now this source: To authenticate user use API method `GET user/authenticate`. To ban user from the website use admin API method `POST admin/ban_user/{user_id}` Will be transformed by apilinks into this: To authenticate user use API method [GET user/authenticate](http://example.com/client/api-docs/#get-user-authenticate). To ban user from the website use admin API method [POST admin/ban_user/{user_id}](http://example.com/admin/api-docs/#post-admin-ban_user-user_id) Notice that apilinks determined that the first reference is from Client API, and the second one is from the Admin API. How is that possible? Easy: preprocessor parses each API url from the config and stores their methods before looking for references. When the time comes to process the references it already has a list of all methods to validate your reference and to determine which API link should be inserted. But what if we have the same-named method in both of our APIs? In this case you will see a warning: WARNING : GET /service/ healthcheck is present in several APIs ( Client - API , Admin - API ). Please , use prefix . Skipping It suggests us to use prefix, and by that it means to prefix the reference by the local name of the API in config. Like that: Check status of the server through Client API: `Client-API: GET /service/healthcheck` Do the same through Admin API: `Admin-API: GET /service/healthcheck` Here Client-API: and Admin-API: are prefixes. And they should be the same as your API names in the config. Now each reference will be replaced with the link to corresponding API web-page. apilinks is a highly customizable preprocessor. You can tune: the format of the references; the output string which will replace the reference; the format of the headings in your API web-page; and more! For details look through the following sections. Glossary: reference \u2014 reference to an API method in the source file. The one to be replaced with the link, e.g. GET user/config verb \u2014 HTTP method, e.g. GET , POST , etc. command \u2014 resource used to represent method on the API documentation webpage, e.g. /service/healthcheck . endpoint prefix \u2014 A prefix from server root to the command. If the command is /user/status and full resource is /api/v0/user/satus then the endpoint-prefix should be stated /api/v0 . In references you can use either full resource ( {endpoint_prefix}/{command} ) or just the command. apilinks will sort it out for you. output \u2014 string, which will replace the reference . header \u2014 HTML header on the API documentation web-page of the method description, e.g. <h2 id=\"get-user-config\">GET user/config</h2> anchor \u2014 web-anchor leading to the specific header on the API documentation web-page, e.g. #get-user-config","title":"Quick Start"},{"location":"preprocessors/apilinks/#how-does-it-work","text":"Preprocessor can work in online and offline modes. In offline mode it merely replaces references to API methods with links to their description. The references are catched by a regular expression. The link url is taken from config and the link anchor is generated from the reference automatically. You can have several different APIs stated in the config. You can use prefixes to point out which API is being reference d. Prefixes format may be customized in the configuration but by default you do it like this: Client-API: GET user/name . Here ' Client-API ' is a prefix. If you don't use prefix in the reference preprocessor will suppose that you meant the default API, which is marked by default option in config. If none of them is marked \u2014 goes for the first in list. In online mode things are getting interesting. Preprocessor actually goes to each of the API web-pages, and collects all method headers (right now only h2 headers are supported). Then it goes through your document's source: when it meets a reference , it looks through all the collected methods and replaces the reference with the correct link to it. If method is not found \u2014 preprocessor will show warning and leave the reference unchanged. Same will happen if there are several methods with this name in different APIs. Prefixes, explained before, are supported too.","title":"How Does It Work?"},{"location":"preprocessors/apilinks/#config","text":"To enable the preprocessor, add apilinks to preprocessors section in the project config: preprocessors : - apilinks The preprocessor has a lot of options. For your convenience the required options are marked (required) ; and those options which are used in customization are marked (optional) . Most likely you will need just one or two of the latter. preprocessors : - apilinks : targets : - site offline : False trim_if_targets : - pdf prefix_to_ignore : Ignore reference : - regex : *ref_pattern only_with_prefixes : false only_defined_prefixes : true output_template : '[{verb} {command}]({url})' trim_template : '`{verb} {command}`' API : Client-API : url : http://example.com/api/client default : true header_template : '{verb} {command}' Admin-API : url : http://example.com/api/client header_template : '{command}' endpoint-prefix : /api/v0 prefix_to_ignore (optional) A default prefix for ignoring references. If apilinks meets a reference with this prefix it leaves it unchanged. Default: Ignore targets (optional) List of supported targets for foliant make command. If target is not listed here \u2014 preprocessor won't be applied. If the list is empty \u2014 preprocessor will be applied for any target. Default: [] offline (optional) Option determining whether the preprocessor will work in online or offline mode. Details in the How Does It Work? and Online and Offline Modes Comparison sections. Default: False trim_if_targets (optional) List of targets for foliant make command for which the prefixes from all references in the text will be cut out. Default: [] Only those references whose prefixes are defined in the API section (described below) are affected by this option. All references with unlisted prefixes will not be trimmed. reference (optional) A subsection for listing all the types of references you are going to catch in the text, and their properties. Options for this section are listed below. Reference options regex (optional) regular expression used to catch references in the source. Look for details in the Capturing References section. Default: (?P<source>`((?P<prefix>[\\w-]+):\\s*)?(?P<verb>OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT|PATCH|LINK|UNLINK)\\s+(?P<command>\\S+)`) only_with_prefixes (optional) if this is true , only references with prefix will be transformed. Ordinary links like GET user/info will be ignored. Default: false only_defined_prefixes (optional) if this is true all references whose prefix is not listed in the API section (described below) will be ignored, left unchanged. References without prefix are not affected by this option. Default: false . output_template (optional) A template string describing the output which will replace the reference . More info in the Customizing Output section. Default: '[{verb} {command}]({url})' trim_template (optional) Only for targets listed in trim_if_targets option. Tune this template if you want to customize how apilinks cuts out prefixes. The reference will be replaced with text based on this template. Default: '`{verb} {command}`' API (required) A subsection for listing all the APIs and their properties. Under this section there should be a separate subsection for each API. The section name represents the API name and, at the same time, the prefix used in the references. You need to add at least one API subsection for preprocessor to work. API properties url (required) An API documentation web-page URL. It will be used to construct the full link to the method. In online mode it will also be parsed by preprocessor for validation. default (optional) Only for offline mode. Marker to define the default API. If several APIs are marked default, preprocessor will choose the first of them. If none is marked default \u2014 the first API in the list will be chosen. The value of this item should be true . header_template (optional) A template string describing the format of the headings in the API documentation web-page. Details in parsing API web-page section. Default: '{verb} {command}' endpoint-prefix (optional) The endpoint prefix from the server root to API methods. If is stated \u2014 apilinks can divide the command in the reference and search for it more accurately. Also you could use it in templates. More info coming soon. Default: ''","title":"Config"},{"location":"preprocessors/apilinks/#online-and-offline-modes-comparison","text":"Let's study an example and look how the behavior of the preprocessor will change in online and offline modes. We have three APIs described in the config: preprocessors : - apilinks : API : Admin-API : url : http://example.com/api/client Client-API : url : http://example.com/api/client default : true header_template : '{verb} {command}' Remote-API : url : https://remote.net/api-ref/ header_template : '{command}' Now let's look at different examples of the text used in Markdown source and how it is going to be transformed in Offline and Online modes Example 1 Source: Unprefixed link which only exists in Remote API: `GET system/info`. In Offline mode preprocessor won't do any checks and just replace the reference with the link to default API from the config: Unprefixed link which only exists in Remote API: [GET system/info](http://example.com/api/client/#get-system-info). This is certainly a wrong decision, but it is our fault, we sould have added the prefix to the reference. But let's look what will happen in Online mode : Unprefixed link which only exists in Remote API: [GET system/info](https://remote.net/api-ref/#system-info). Without any prefix the preprocessor determined that it should choose the Remote API to replace this reference because this method exists only on its page. The default option is just ignored in this mode. By the way, notice how anchors differ in the two examples. For Remote API preprocessor used its header template to reconstruct the anchor, dropping the verb from it. Example 2 Source: Unprefixed link with misprint: `GET user/sttus`. The link is incorrect, there's no such method in any of the APIs. In Offline mode preprocessor won't do any checks again. No magic, the reference will be replaced with the link to default API from the config: Unprefixed link with misprint: [GET user/sttus](http://example.com/api/client/#get-user-sttus). The link is incorrect, there's no such method in any of the APIs. In Online mode preprocessor won't be able to find the method during validation and the reference won't be replaced at all: Unprefixed link with misprint: `GET user/sttus`. The link is incorrect, there's no such method in any of the APIs. During the Foliant project assembly you will see a warning message: WARNING : Cannot find method GET user / sttus . Skipping Example 3 Source: Prefixed link to the Admin API: `Admin-API: POST user/ban_forever`. In Offline mode preprocessor will notice the prefix and will be able to replace the reference with an appropriate link: Prefixed link to the Admin API: [POST user/ban_forever](http://example.com/api/client/#post-user-ban_forever). Notice that prefix disappeared from the text. If you wish it to stay there \u2014 edit the output_template option to something like this: '{prefix}: {verb} {command}' . In Online mode the result will be exactly the same. Preprocessor will check the Admin-API methods, find there the referenced method and replace it in the text: Prefixed link to the Admin API: [POST user/ban_forever](http://example.com/api/client/#post-user-ban_forever). Example 4 Prefixed link to the Remote API with a misprint: `Remote-API: GET billling/info`. Oh no, the method is incorrect again. In Offline mode preprocessor will perform no checks and just replace the reference with the link to Remote API: Prefixed link to the Remote API with a misprint: [GET billling/info](https://remote.net/api-ref/#get-billling-info). Oh no, the method is incorrect again. Online mode , on the other hand, will make its homework. It will check whether the Remote API actually has the method GET billling/info . Finding out that it hasn't it will leave the reference unchanged: Prefixed link to the Remote API with a misprint: `Remote-API: GET billling/info`. Oh no, the method is incorrect again. ...and warn us with the message: WARNING : Cannot find method GET billling / info in Remote - API . Skipping Example 5 Now let's reference a method which is present in both Client and Admin APIs: `GET service/healthcheck`. In Offline mode preprocessor will just replace the reference with a link to default API: Now let's reference a method which is present in both Client and Admin APIs: [GET service/healthcheck](http://example.com/api/client/#get-service-healthcheck). But in Online mode preprocessor will go through all API method lists. It will find several mentions of this exact method and, confused, won't replace the reference at all: Now let's reference a method which is present in both Client and Admin APIs: `GET service/healthcheck`. You will also see a warning: WARNING : GET /service/ healthcheck is present in several APIs ( Admin - API , Client - API ). Please , use prefix . Skipping","title":"Online and Offline Modes Comparison"},{"location":"preprocessors/apilinks/#capturing-references","text":"apilinks uses regular expressions to capture references to API methods in Markdown files. The default reg-ex is as following: (?P<source>`((?P<prefix>[\\w-]+):\\s*)?(?P<verb>OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT|PATCH|LINK|UNLINK)\\s+(?P<command>\\S+)`) This expression accepts references like these: Client-API: GET user/info UPDATE user/details Notice that default expression uses Named Capturing Groups . You would probably want to use all of them too if you are to redefine the expression. Though not all of them are required, see the table below. Group Required Description source YES The full original reference string prefix NO Prefix pointing to the name of the API from config verb NO HTTP verb as GET , POST , etc command YES the full method resource as it is stated in the API header (may include endpoint prefix) To redefine the regular expression add an option reg-regex to the preprocessor config. For example, if you want to capture ONLY references with prefixes you may use the following: preprocessors : - apilinks : reference : - regex : '(?P<source>`((?P<prefix>[\\w-]+):\\s*)(?P<verb>POST|GET|PUT|UPDATE|DELETE)\\s+(?P<command>\\S+)`)' This example is for illustrative purposes only. You can achieve the same goal by just switching on the only_with_prefixes option. Now the references without prefix ( UPDATE user/details ) will be ignored.","title":"Capturing References"},{"location":"preprocessors/apilinks/#customizing-output","text":"You can customize the output -string which will replace the reference string. To do that add a template into your config-file. A template is a string which may contain properties, surrounded by curly braces. These properties will be replaced with the values, and all the rest will remain unchanged. For example, look at the default template: preprocessors : - apilinks : reference : - output_template : '[{verb} {command}]({url})' , Don't forget the single quotes around the template. This way we say to yaml engine that this is a string for it not to be confused with curly braces. With the default template, the reference string will be replaced by something like that: [GET user/info](http://example.com/api/#get-user-info) If you don't want references to be transfromed into links, use your own template. Properties you may use in the template: property description example url Full url to the method description http://example.com/api/#get-user-info source Full original reference string ` Client-API: GET user/info ` prefix Prefix used in the reference Client-API verb HTTP verb used in the reference GET command API command being referenced with endpoint prefix removed user/info endpoint_prefix Endpoint prefix to the API (if endpoint-prefix option is filled in) /api/v0","title":"Customizing Output"},{"location":"preprocessors/apilinks/#parsing-api-web-page","text":"apilinks goes through the API web-page content and gathers all the methods which are described there. To do this preprocessor scans each HTML h2 tag and stores its id attribute (which is an anchor of the link to be constructed) and the contents of the tag (the heading itself). For example in this link: < h2 id = \"get-user-info\" > GET user/info </ h2 > the anchor would be get-user-info and the heading would be GET user/info . To construct the link to the method description we will have to create the correct anchor for it. To create an anchor we would need to reconstruct the heading first. But the heading format may be arbitrary and that's why we need the header_template config option. The header_template is a string which may contain properties, surrounded by curly braces. These properties will be replaced with the values, when preprocessor will attempt to reconstruct the heading. All the rest will remain unchanged. For example, if your API headings look like this: <h2 id= \"method-user-info-get\" > Method user/info (GET) </h2> You should use the following option: ... API : Client-API : header_template : 'Method {command} ({verb})' ... Don't forget the single quotes around the template. This way we say to yaml engine that this is a string. If your headers do not have a verb at all: <h2 id= \"user-info\" > user/info </h2> You should use the following option: ... API : Client-API : header_template : '{command}' ... Properties you may use in the template: property description example verb HTTP verb used in the reference GET command API command being referenced user/info endpoint_prefix Endpoint prefix to the API (if endpoint-prefix option is filled in) /api/v0","title":"Parsing API Web-page"},{"location":"preprocessors/badges/","text":"Badges \u00b6 Badges \u00b6 Preprocessor for Foliant which helps to add badges to your documents. It uses Shields.io to generate badges. Installation \u00b6 $ pip install foliantcontrib.badges Config \u00b6 To enable the preprocessor, add badges to preprocessors section in the project config: preprocessors : - badges The preprocessor has a number of options: preprocessors : - badges : server : 'https://img.shields.io' as_object : true add_link : true vars : jira_path : localhost:3000/jira package : foliant # badge look parameters style : flat-square logo : jira server Shields server URL, which hosts badges. default: https://img.shields.io as_object If true \u2014 preprocessor inserts svg badges with HTML <object> tag, instead of Markdown image tag. This is required for links and hints to work. default: true add_link If true preprocessor tries to determine the link which should be added to badge (for example, link to jira issue page for jira issue badge). Only works with as_object = true . default: true Please note that right now only links for pypi and jira-issue badges are being added automatically. Please contribute or contact author for adding other services. vars Dictionary with variables which will be replaced in badge urls. See variables section. Also you may add parameters specified on the shields.io website which alter the badge view like: label , logo , style etc. Usage \u00b6 Just add the badge tag and specify path to badge in the tag body: <badge> jira/issue/https/issues.apache.org/jira/kafka-2896.svg </badge> All options from config may be overriden in tag parameters: <badge style= \"social\" as_object= \"false\" > jira/issue/https/issues.apache.org/jira/kafka-2896.svg </badge> Variables \u00b6 You can use variables in your badges to replace parts which repeat often. For example, if we need to add many badges to our Jira tracker, we may put the protocol and host parameters into a variable like this: preprocessors : - badges : vars : jira : https/issues.apache.org/jira To reference a variable in a badge path use syntax ${variable} : <badge> jira/issue/ ${ jira } /kafka-2896.svg </badge> Description of the issue goes here. But it's not the only one. <badge> jira/issue/ ${ jira } /KAFKA-7951.svg </badge> Description of the second issue.","title":"Badges"},{"location":"preprocessors/badges/#badges","text":"","title":"Badges"},{"location":"preprocessors/badges/#badges_1","text":"Preprocessor for Foliant which helps to add badges to your documents. It uses Shields.io to generate badges.","title":"Badges"},{"location":"preprocessors/badges/#installation","text":"$ pip install foliantcontrib.badges","title":"Installation"},{"location":"preprocessors/badges/#config","text":"To enable the preprocessor, add badges to preprocessors section in the project config: preprocessors : - badges The preprocessor has a number of options: preprocessors : - badges : server : 'https://img.shields.io' as_object : true add_link : true vars : jira_path : localhost:3000/jira package : foliant # badge look parameters style : flat-square logo : jira server Shields server URL, which hosts badges. default: https://img.shields.io as_object If true \u2014 preprocessor inserts svg badges with HTML <object> tag, instead of Markdown image tag. This is required for links and hints to work. default: true add_link If true preprocessor tries to determine the link which should be added to badge (for example, link to jira issue page for jira issue badge). Only works with as_object = true . default: true Please note that right now only links for pypi and jira-issue badges are being added automatically. Please contribute or contact author for adding other services. vars Dictionary with variables which will be replaced in badge urls. See variables section. Also you may add parameters specified on the shields.io website which alter the badge view like: label , logo , style etc.","title":"Config"},{"location":"preprocessors/badges/#usage","text":"Just add the badge tag and specify path to badge in the tag body: <badge> jira/issue/https/issues.apache.org/jira/kafka-2896.svg </badge> All options from config may be overriden in tag parameters: <badge style= \"social\" as_object= \"false\" > jira/issue/https/issues.apache.org/jira/kafka-2896.svg </badge>","title":"Usage"},{"location":"preprocessors/badges/#variables","text":"You can use variables in your badges to replace parts which repeat often. For example, if we need to add many badges to our Jira tracker, we may put the protocol and host parameters into a variable like this: preprocessors : - badges : vars : jira : https/issues.apache.org/jira To reference a variable in a badge path use syntax ${variable} : <badge> jira/issue/ ${ jira } /kafka-2896.svg </badge> Description of the issue goes here. But it's not the only one. <badge> jira/issue/ ${ jira } /KAFKA-7951.svg </badge> Description of the second issue.","title":"Variables"},{"location":"preprocessors/bindfigma/","text":"BindFigma \u00b6 BindFigma is a preprocessor that downloads and optionally resizes design layout images from Figma , and binds these images with the documentation project. The preprocessor uses Figma REST API to get URLs of images to download. To use the preprocessor, you should get an access token for it via your Figma account. If you need to resize downloaded images, you should install ImageMagick . Installation \u00b6 $ pip install foliantcontrib.bindfigma Config \u00b6 To enable the preprocessor, add bindfigma to preprocessors section in the project config: preprocessors : - bindfigma The preprocessor has a number of options with the following default values: preprocessors : - bindfigma : cache_dir : !path .bindfigmacache convert_path : convert caption : '' hyperlinks : true multi_delimeter : '\\n\\n' resize : null access_token : null file_key : null ids : null scale : null format : null svg_include_id : null svg_simplify_stroke : null use_absolute_bounds : null version : null Some values of options specified in the project config may be overridden by tag attributes, see below. cache_dir Directory to store downloaded and resized images. convert_path Path to convert binary, a part of ImageMagick. If resizing is not needed, ImageMagick will not be used. caption Caption of images. The {{image_id}} placeholder in the caption will be replaced with Figma node ID. hyperlinks Flag that tells the preprocessor to wrap image references into hyperlinks to related Figma URLs. multi_delimeter String that should separate multiple image references. resize Width of resulting images in pixels. If not specified, resizing is not performed. access_token Access token that you can generate in your Figma account. file_key ID of the Figma file. ids One or more IDs of nodes in the Figma file. May be specified as a list or as a comma-separated string. scale , format , svg_include_id , svg_simplify_stroke , use_absolute_bounds , version Query parameters to use in Figma API requests, see descriptions in Figma API documentation . Usage \u00b6 To insert a design layout image from Figma into your documentation, use <figma>...</figma> tags in Markdown source: Here\u2019s an image from Figma: <figma caption= \"An optional caption\" resize= \"300\" file_key= \"ABC\" ids= \"node1,node2,node3\" ></figma> You may use tag attributes to override the values of the project config options with the same names. All the options excepting cache_dir and convert_path may be overridden in this way. BindFigma preprocessor will replace such statements with local image references. If ids refers to more than one image, a set of image references will be generated. Multiple image references will be separated with the string specified as multi_delimeter .","title":"BindFigma"},{"location":"preprocessors/bindfigma/#bindfigma","text":"BindFigma is a preprocessor that downloads and optionally resizes design layout images from Figma , and binds these images with the documentation project. The preprocessor uses Figma REST API to get URLs of images to download. To use the preprocessor, you should get an access token for it via your Figma account. If you need to resize downloaded images, you should install ImageMagick .","title":"BindFigma"},{"location":"preprocessors/bindfigma/#installation","text":"$ pip install foliantcontrib.bindfigma","title":"Installation"},{"location":"preprocessors/bindfigma/#config","text":"To enable the preprocessor, add bindfigma to preprocessors section in the project config: preprocessors : - bindfigma The preprocessor has a number of options with the following default values: preprocessors : - bindfigma : cache_dir : !path .bindfigmacache convert_path : convert caption : '' hyperlinks : true multi_delimeter : '\\n\\n' resize : null access_token : null file_key : null ids : null scale : null format : null svg_include_id : null svg_simplify_stroke : null use_absolute_bounds : null version : null Some values of options specified in the project config may be overridden by tag attributes, see below. cache_dir Directory to store downloaded and resized images. convert_path Path to convert binary, a part of ImageMagick. If resizing is not needed, ImageMagick will not be used. caption Caption of images. The {{image_id}} placeholder in the caption will be replaced with Figma node ID. hyperlinks Flag that tells the preprocessor to wrap image references into hyperlinks to related Figma URLs. multi_delimeter String that should separate multiple image references. resize Width of resulting images in pixels. If not specified, resizing is not performed. access_token Access token that you can generate in your Figma account. file_key ID of the Figma file. ids One or more IDs of nodes in the Figma file. May be specified as a list or as a comma-separated string. scale , format , svg_include_id , svg_simplify_stroke , use_absolute_bounds , version Query parameters to use in Figma API requests, see descriptions in Figma API documentation .","title":"Config"},{"location":"preprocessors/bindfigma/#usage","text":"To insert a design layout image from Figma into your documentation, use <figma>...</figma> tags in Markdown source: Here\u2019s an image from Figma: <figma caption= \"An optional caption\" resize= \"300\" file_key= \"ABC\" ids= \"node1,node2,node3\" ></figma> You may use tag attributes to override the values of the project config options with the same names. All the options excepting cache_dir and convert_path may be overridden in this way. BindFigma preprocessor will replace such statements with local image references. If ids refers to more than one image, a set of image references will be generated. Multiple image references will be separated with the string specified as multi_delimeter .","title":"Usage"},{"location":"preprocessors/bindsympli/","text":"BindSympli \u00b6 BindSympli is a tool to download design layout images from Sympli CDN using certain Sympli account, to resize these images, and to bind them with the documentation project. Installation \u00b6 Before using BindSympli, you need to install Node.js , Puppeteer , wget , and ImageMagick . BindSympli preprocessor code is written in Python, but it uses the external script written in JavaScript. This script is provided in BindSympli package: $ pip install foliantcontrib.bindsympli Config \u00b6 To enable the preprocessor, add bindsympli to preprocessors section in the project config: preprocessors : - bindsympli The preprocessor has a number of options with the following default values: preprocessors : - bindsympli : get_sympli_img_urls_path : get_sympli_img_urls.js wget_path : wget convert_path : convert cache_dir : !path .bindsymplicache sympli_login : '' sympli_password : '' image_width : 800 max_attempts : 5 get_sympli_img_urls_path Path to the script get_sympli_img_urls.js or alternative command that launches it (e.g. node some_another_script.js ). By default, it is assumed that you have this command and all other commands in PATH . wget_path Path to wget binary. convert_path Path to convert binary, a part of ImageMagick. cache_dir Directory to store downloaded and resized images. sympli_login Your username in Sympli account. sympli_password Your password in Sympli account. image_width Width of resulting images in pixels (original images are too large). max_attempts Maximum number of attempts to run the script get_sympli_img_urls.js on fails. Usage \u00b6 To insert a design layout image from Sympli into your documentation, use <sympli>...</sympli> tags in Markdown source: Here\u2019s an image from Sympli: <sympli caption= \"An optional caption\" width= \"400\" url= \"https://app.sympli.io/app#!/designs/0123456789abcdef01234567/specs/assets\" ></sympli> You have to specify the URL of Sympli design layout page in url attribute. You may specify an optional caption in the caption attribute, and an optional custom image width in the width attribute. The width attribute overrides the image_width config option for a certain image. BindSympli preprocessor will replace such blocks with local image references.","title":"BindSympli"},{"location":"preprocessors/bindsympli/#bindsympli","text":"BindSympli is a tool to download design layout images from Sympli CDN using certain Sympli account, to resize these images, and to bind them with the documentation project.","title":"BindSympli"},{"location":"preprocessors/bindsympli/#installation","text":"Before using BindSympli, you need to install Node.js , Puppeteer , wget , and ImageMagick . BindSympli preprocessor code is written in Python, but it uses the external script written in JavaScript. This script is provided in BindSympli package: $ pip install foliantcontrib.bindsympli","title":"Installation"},{"location":"preprocessors/bindsympli/#config","text":"To enable the preprocessor, add bindsympli to preprocessors section in the project config: preprocessors : - bindsympli The preprocessor has a number of options with the following default values: preprocessors : - bindsympli : get_sympli_img_urls_path : get_sympli_img_urls.js wget_path : wget convert_path : convert cache_dir : !path .bindsymplicache sympli_login : '' sympli_password : '' image_width : 800 max_attempts : 5 get_sympli_img_urls_path Path to the script get_sympli_img_urls.js or alternative command that launches it (e.g. node some_another_script.js ). By default, it is assumed that you have this command and all other commands in PATH . wget_path Path to wget binary. convert_path Path to convert binary, a part of ImageMagick. cache_dir Directory to store downloaded and resized images. sympli_login Your username in Sympli account. sympli_password Your password in Sympli account. image_width Width of resulting images in pixels (original images are too large). max_attempts Maximum number of attempts to run the script get_sympli_img_urls.js on fails.","title":"Config"},{"location":"preprocessors/bindsympli/#usage","text":"To insert a design layout image from Sympli into your documentation, use <sympli>...</sympli> tags in Markdown source: Here\u2019s an image from Sympli: <sympli caption= \"An optional caption\" width= \"400\" url= \"https://app.sympli.io/app#!/designs/0123456789abcdef01234567/specs/assets\" ></sympli> You have to specify the URL of Sympli design layout page in url attribute. You may specify an optional caption in the caption attribute, and an optional custom image width in the width attribute. The width attribute overrides the image_width config option for a certain image. BindSympli preprocessor will replace such blocks with local image references.","title":"Usage"},{"location":"preprocessors/blockdiag/","text":"Blockdiag \u00b6 Blockdiag is a tool to generate diagrams from plain text. This preprocessor finds diagram definitions in the source and converts them into images on the fly during project build. It supports all Blockdiag flavors: blockdiag, seqdiag, actdiag, and nwdiag. Installation \u00b6 $ pip install foliantcontrib.blockdiag Config \u00b6 To enable the preprocessor, add blockdiag to preprocessors section in the project config: preprocessors : - blockdiag The preprocessor has a number of options: preprocessors : - blockdiag : cache_dir : !path .diagramscache blockdiag_path : blockdiag seqdiag_path : seqdiag actdiag_path : actdiag nwdiag_path : nwdiag params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. Note To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. *_path Paths to the blockdiag , seqdiag , actdiag , and nwdiag binaries. By default, it is assumed that you have these commands in PATH , but if they're installed in a custom place, you can define it here. params Params passed to the image generation commands ( blockdiag , seqdiag , etc.). Params should be defined by their long names, with dashes replaced with underscores (e.g. --no-transparency becomes no_transparency ); also, -T param is called format for readability: preprocessors: - blockdiag: params: antialias: true font: !path Anonymous_pro.ttf To see the full list of params, run blockdiag -h . Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <blockdiag>...</blockdiag> , <seqdiag>...</seqdiag> , <actdiag>...</actdiag> , or <nwdiag>...</nwdiag> tags (indentation inside tags is optional): Here's a block diagram: <blockdiag> blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag> Here's a sequence diagram: <seqdiag> seqdiag { browser -> webserver [label = \"GET /index.html\"]; browser <-- webserver; browser - > webserver [label = \"POST /blog/comment\"]; webserver -> database [label = \"INSERT comment\"]; webserver <-- database; browser <-- webserver; } </seqdiag > To set a caption, use caption option: Diagram with a caption: <blockdiag caption= \"Sample diagram from the official site\" > blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag> You can override params values from the preprocessor config for each diagram: By default, diagrams are in png. But this diagram is in svg: <blockdiag caption= \"High-quality diagram\" format= \"svg\" > blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag>","title":"Blockdiag"},{"location":"preprocessors/blockdiag/#blockdiag","text":"Blockdiag is a tool to generate diagrams from plain text. This preprocessor finds diagram definitions in the source and converts them into images on the fly during project build. It supports all Blockdiag flavors: blockdiag, seqdiag, actdiag, and nwdiag.","title":"Blockdiag"},{"location":"preprocessors/blockdiag/#installation","text":"$ pip install foliantcontrib.blockdiag","title":"Installation"},{"location":"preprocessors/blockdiag/#config","text":"To enable the preprocessor, add blockdiag to preprocessors section in the project config: preprocessors : - blockdiag The preprocessor has a number of options: preprocessors : - blockdiag : cache_dir : !path .diagramscache blockdiag_path : blockdiag seqdiag_path : seqdiag actdiag_path : actdiag nwdiag_path : nwdiag params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. Note To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. *_path Paths to the blockdiag , seqdiag , actdiag , and nwdiag binaries. By default, it is assumed that you have these commands in PATH , but if they're installed in a custom place, you can define it here. params Params passed to the image generation commands ( blockdiag , seqdiag , etc.). Params should be defined by their long names, with dashes replaced with underscores (e.g. --no-transparency becomes no_transparency ); also, -T param is called format for readability: preprocessors: - blockdiag: params: antialias: true font: !path Anonymous_pro.ttf To see the full list of params, run blockdiag -h .","title":"Config"},{"location":"preprocessors/blockdiag/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <blockdiag>...</blockdiag> , <seqdiag>...</seqdiag> , <actdiag>...</actdiag> , or <nwdiag>...</nwdiag> tags (indentation inside tags is optional): Here's a block diagram: <blockdiag> blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag> Here's a sequence diagram: <seqdiag> seqdiag { browser -> webserver [label = \"GET /index.html\"]; browser <-- webserver; browser - > webserver [label = \"POST /blog/comment\"]; webserver -> database [label = \"INSERT comment\"]; webserver <-- database; browser <-- webserver; } </seqdiag > To set a caption, use caption option: Diagram with a caption: <blockdiag caption= \"Sample diagram from the official site\" > blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag> You can override params values from the preprocessor config for each diagram: By default, diagrams are in png. But this diagram is in svg: <blockdiag caption= \"High-quality diagram\" format= \"svg\" > blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag>","title":"Usage"},{"location":"preprocessors/confluence/","text":"Confluence \u00b6 Confluence preprocessor allows inserting content from Confluence server into your Foliant project. Installation \u00b6 $ pip install foliantcontrib.confluence Config \u00b6 To enable the preprocessor, add confluence to preprocessors section in the project config: preprocessors : - confluence The preprocessor has a number of options: preprocessors : - confluence : host : https://my_confluence_server.org login : user password : user_password space_key : \"~user\" pandoc_path : pandoc host Required Host of your confluence server. If not stated \u2014 it would be taken from Confluence backend config. login Login of the user who has permissions to create and update pages. If login is not supplied, it would be taken from backend config, or prompted during the build. password Password of the user. If password is not supplied, it would be taken from backend config, or prompted during the build. space_key The space key where the page titles will be searched for. pandoc_path Path to Pandoc executable (Pandoc is used to convert Confluence content into Markdown). Usage \u00b6 Add a <confluence></confluence> tag at the position in the document where the content from Confluence should be inserted. The page is defined by its id or title . If you are specifying page by title, you will also need to set space_key either in tag or in the preprocessor options. The following content is imported from Confluence: < confluence id = \"12345\" ></ confluence > This is from Confluence too, but determined by page title (space key is defined in preprocessor config): < confluence title = \"My Page\" ></ confluence > Here we are overriding space_key: < confluence space_key = \"ANOTHER_SPACE\" title = \"My Page\" ></ confluence >","title":"Confluence"},{"location":"preprocessors/confluence/#confluence","text":"Confluence preprocessor allows inserting content from Confluence server into your Foliant project.","title":"Confluence"},{"location":"preprocessors/confluence/#installation","text":"$ pip install foliantcontrib.confluence","title":"Installation"},{"location":"preprocessors/confluence/#config","text":"To enable the preprocessor, add confluence to preprocessors section in the project config: preprocessors : - confluence The preprocessor has a number of options: preprocessors : - confluence : host : https://my_confluence_server.org login : user password : user_password space_key : \"~user\" pandoc_path : pandoc host Required Host of your confluence server. If not stated \u2014 it would be taken from Confluence backend config. login Login of the user who has permissions to create and update pages. If login is not supplied, it would be taken from backend config, or prompted during the build. password Password of the user. If password is not supplied, it would be taken from backend config, or prompted during the build. space_key The space key where the page titles will be searched for. pandoc_path Path to Pandoc executable (Pandoc is used to convert Confluence content into Markdown).","title":"Config"},{"location":"preprocessors/confluence/#usage","text":"Add a <confluence></confluence> tag at the position in the document where the content from Confluence should be inserted. The page is defined by its id or title . If you are specifying page by title, you will also need to set space_key either in tag or in the preprocessor options. The following content is imported from Confluence: < confluence id = \"12345\" ></ confluence > This is from Confluence too, but determined by page title (space key is defined in preprocessor config): < confluence title = \"My Page\" ></ confluence > Here we are overriding space_key: < confluence space_key = \"ANOTHER_SPACE\" title = \"My Page\" ></ confluence >","title":"Usage"},{"location":"preprocessors/csvtables/","text":"CSVTables \u00b6 This preprocessor converts csv data to markdown tables. Installation \u00b6 $ pip install foliantcontrib.csvtables Config \u00b6 To enable the preprocessor with default options, add csvtables to preprocessors section in the project config: preprocessors : - csvtables The preprocessor has a number of options (default values stated below): preprocessors : - csvtables : delimiter : ';' padding_symbol : ' ' paddings_number : 1 delimiter Delimiter of csv data. padding_symbol Symbol combination that will be places around datum (reversed on the right side). paddings_number Symbol combination multiplier. Usage \u00b6 You can place csv data in csvtable tag. <csvtable> Header 1;Header 2;Header 3;Header 4;Header 5 Datum 1;Datum 2;Datum 3;Datum 4;Datum 5 Datum 6;Datum 7;Datum 8;Datum 9;Datum 10 </csvtable> Or in external file.csv . <csvtable src= \"table.csv\" ></csvtable> You can reassign setting for certain csv tables. <csvtable delimiter= \":\" padding_symbol= \" *\" > Header 1:Header 2:Header 3:Header 4:Header 5 Datum 1:Datum 2:Datum 3:Datum 4:Datum 5 Datum 6:Datum 7:Datum 8:Datum 9:Datum 10 </csvtable> Example \u00b6 Usage section will be converted to this: You can place csv data in csvtable tag. | Header 1 | Header 2 | Header 3 | Header 4 | Header 5 | |----------|----------|----------|----------|----------| | Datum 1 | Datum 2 | Datum 3 | Datum 4 | Datum 5 | | Datum 6 | Datum 7 | Datum 8 | Datum 9 | Datum 10 | Or in external file.csv . | Header 1 | Header 2 | Header 3 | Header 4 | Header 5 | |----------|----------|----------|----------|----------| | Datum 1 | Datum 2 | Datum 3 | Datum 4 | Datum 5 | | Datum 6 | Datum 7 | Datum 8 | Datum 9 | Datum 10 | You can reassign setting for certain csv tables. | *Header 1* | *Header 2* | *Header 3* | *Header 4* | *Header 5* | |------------|------------|------------|------------|------------| | *Datum 1* | *Datum 2* | *Datum 3* | *Datum 4* | *Datum 5* | | *Datum 6* | *Datum 7* | *Datum 8* | *Datum 9* | *Datum 10* |","title":"CSVTables"},{"location":"preprocessors/csvtables/#csvtables","text":"This preprocessor converts csv data to markdown tables.","title":"CSVTables"},{"location":"preprocessors/csvtables/#installation","text":"$ pip install foliantcontrib.csvtables","title":"Installation"},{"location":"preprocessors/csvtables/#config","text":"To enable the preprocessor with default options, add csvtables to preprocessors section in the project config: preprocessors : - csvtables The preprocessor has a number of options (default values stated below): preprocessors : - csvtables : delimiter : ';' padding_symbol : ' ' paddings_number : 1 delimiter Delimiter of csv data. padding_symbol Symbol combination that will be places around datum (reversed on the right side). paddings_number Symbol combination multiplier.","title":"Config"},{"location":"preprocessors/csvtables/#usage","text":"You can place csv data in csvtable tag. <csvtable> Header 1;Header 2;Header 3;Header 4;Header 5 Datum 1;Datum 2;Datum 3;Datum 4;Datum 5 Datum 6;Datum 7;Datum 8;Datum 9;Datum 10 </csvtable> Or in external file.csv . <csvtable src= \"table.csv\" ></csvtable> You can reassign setting for certain csv tables. <csvtable delimiter= \":\" padding_symbol= \" *\" > Header 1:Header 2:Header 3:Header 4:Header 5 Datum 1:Datum 2:Datum 3:Datum 4:Datum 5 Datum 6:Datum 7:Datum 8:Datum 9:Datum 10 </csvtable>","title":"Usage"},{"location":"preprocessors/csvtables/#example","text":"Usage section will be converted to this: You can place csv data in csvtable tag. | Header 1 | Header 2 | Header 3 | Header 4 | Header 5 | |----------|----------|----------|----------|----------| | Datum 1 | Datum 2 | Datum 3 | Datum 4 | Datum 5 | | Datum 6 | Datum 7 | Datum 8 | Datum 9 | Datum 10 | Or in external file.csv . | Header 1 | Header 2 | Header 3 | Header 4 | Header 5 | |----------|----------|----------|----------|----------| | Datum 1 | Datum 2 | Datum 3 | Datum 4 | Datum 5 | | Datum 6 | Datum 7 | Datum 8 | Datum 9 | Datum 10 | You can reassign setting for certain csv tables. | *Header 1* | *Header 2* | *Header 3* | *Header 4* | *Header 5* | |------------|------------|------------|------------|------------| | *Datum 1* | *Datum 2* | *Datum 3* | *Datum 4* | *Datum 5* | | *Datum 6* | *Datum 7* | *Datum 8* | *Datum 9* | *Datum 10* |","title":"Example"},{"location":"preprocessors/customids/","text":"CustomIDs \u00b6 CustomIDs is a preprocessor that allows to define custom identifiers (IDs) for headings in Markdown source by using Pandoc-style syntax in projects built with MkDocs or another backend that provides HTML output. These IDs may be used in hyperlinks that refer to a specific part of a page. Installation \u00b6 $ pip install foliantcontrib.customids Usage \u00b6 To enable the preprocessor, add customids to preprocessors section in the project config: preprocessors : - customids The preprocessor supports the following options: - customids : stylesheet_path : !path customids.css targets : - pre - mkdocs - site - ghp stylesheet_path Path to the CSS stylesheet file. This stylesheet should define rules for .custom_id_anchor_container , .custom_id_anchor_container_level_N , .custom_id_anchor , and .custom_id_anchor_level_N classes. Here N is the heading level ( 1 to 6 ). Default path is customids.css . If stylesheet file does not exist, default built-in stylesheet will be used. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Custom ID may be specified after a heading content at the same line. Examples of Markdown syntax: ## First Heading { # custom_id_for_first_heading } A paragraph . ### Second Heading { # custom_id_for_second_heading } Some another paragraph . This Markdown source will be finally transformed into the HTML code: < div class = \"custom_id_anchor_container custom_id_anchor_container_level_1\" >< div id = \"custom_id_for_first_heading\" class = \"custom_id_anchor custom_id_anchor_level_1\" ></ div ></ div > < h1 > First Heading </ h1 > < p > A paragraph. </ p > < div class = \"custom_id_anchor_container custom_id_anchor_container_level_2\" >< div id = \"custom_id_for_second_heading\" class = \"custom_id_anchor custom_id_anchor_level_2\" ></ div ></ div > < h2 > Second Heading </ h2 > < p > Some another paragraph. </ p > (Note that CustomIDs preprocessor does not convert Markdown syntax into HTML; it only inserts HTML tags <div class=\"custom_id_anchor_container\">...</div> into Markdown code.) Custom IDs must not contain spaces and non-ASCII characters. Examples of hyperlinks that refer to custom IDs: [ Link to Heading 1 ]( # custom_id_for_first_heading ) [ Link to Heading 2 in some document at the current site ]( / some / page /# custom_id_for_second_heading ) [ Link to some heading with custom ID at an external site ]( https : // some . site / path / to / the / page /# some_custom_id )","title":"CustomIDs"},{"location":"preprocessors/customids/#customids","text":"CustomIDs is a preprocessor that allows to define custom identifiers (IDs) for headings in Markdown source by using Pandoc-style syntax in projects built with MkDocs or another backend that provides HTML output. These IDs may be used in hyperlinks that refer to a specific part of a page.","title":"CustomIDs"},{"location":"preprocessors/customids/#installation","text":"$ pip install foliantcontrib.customids","title":"Installation"},{"location":"preprocessors/customids/#usage","text":"To enable the preprocessor, add customids to preprocessors section in the project config: preprocessors : - customids The preprocessor supports the following options: - customids : stylesheet_path : !path customids.css targets : - pre - mkdocs - site - ghp stylesheet_path Path to the CSS stylesheet file. This stylesheet should define rules for .custom_id_anchor_container , .custom_id_anchor_container_level_N , .custom_id_anchor , and .custom_id_anchor_level_N classes. Here N is the heading level ( 1 to 6 ). Default path is customids.css . If stylesheet file does not exist, default built-in stylesheet will be used. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Custom ID may be specified after a heading content at the same line. Examples of Markdown syntax: ## First Heading { # custom_id_for_first_heading } A paragraph . ### Second Heading { # custom_id_for_second_heading } Some another paragraph . This Markdown source will be finally transformed into the HTML code: < div class = \"custom_id_anchor_container custom_id_anchor_container_level_1\" >< div id = \"custom_id_for_first_heading\" class = \"custom_id_anchor custom_id_anchor_level_1\" ></ div ></ div > < h1 > First Heading </ h1 > < p > A paragraph. </ p > < div class = \"custom_id_anchor_container custom_id_anchor_container_level_2\" >< div id = \"custom_id_for_second_heading\" class = \"custom_id_anchor custom_id_anchor_level_2\" ></ div ></ div > < h2 > Second Heading </ h2 > < p > Some another paragraph. </ p > (Note that CustomIDs preprocessor does not convert Markdown syntax into HTML; it only inserts HTML tags <div class=\"custom_id_anchor_container\">...</div> into Markdown code.) Custom IDs must not contain spaces and non-ASCII characters. Examples of hyperlinks that refer to custom IDs: [ Link to Heading 1 ]( # custom_id_for_first_heading ) [ Link to Heading 2 in some document at the current site ]( / some / page /# custom_id_for_second_heading ) [ Link to some heading with custom ID at an external site ]( https : // some . site / path / to / the / page /# some_custom_id )","title":"Usage"},{"location":"preprocessors/elasticsearch/","text":"Elasticsearch \u00b6 This extension allows to integrate Foliant-managed documentation projects with Elasticsearch search engine. The main part of this extension is a preprocessor that prepares data for a search index. Also this extension provides a simple working example of a client-side Web application that may be used to perform searching. By editing HTML, CSS and JS code you may customize it according to your needs. Installation \u00b6 To install the preprocessor, run the command: $ pip install foliantcontrib.elasticsearch To use an example of a client-side Web application for searching, download these HTML, CSS, and JS files and open the file index.html in your Web browser. Config \u00b6 To enable the preprocessor, add elasticsearch to preprocessors section in the project config: preprocessors : - elasticsearch The preprocessor has a number of options with the following default values: preprocessors : - elasticsearch : es_url : 'http://127.0.0.1:9200/' index_name : '' index_properties : {} actions : - delete - create use_chapters : true format : plaintext escape_html : true url_transform : - '\\/?index\\.md$' : '/' - '\\.md$' : '/' - '^([^\\/]+)' : '/\\g<1>' targets : [] es_url Elasticsearch API URL. index_name Name of the index. Your index must have an explicitly specified name, otherwise (by default) API URL will be invalid. index_properties Settings and other properties that should be used when creating an index. If not specified (by default), the default Elasticsearch settings will be used. More details are described below. actions List of actions that the preprocessor should to perform. Available item values are: delete , create . By default, both of them are used since in most cases it\u2019s needed to remove and then fully rebuild the index. use_chapters If set to true (by default), the preprocessor applies only to the files that are mentioned in the chapters section of the project config. Otherwise, the preprocessor applies to all of the files of the project. format Format that the source Markdown content should be converted to before adding to the index; available values are: plaintext (by default), html , markdown (for no conversion). escape_html If set to true (by default), HTML syntax constructions in the content converted to plaintext will be escaped by replacing & with &amp; , < with &lt; , > with &gt; , and \" with &quot; . url_transform Sequence of rules to transform local paths of source Markdown files into URLs of target pages. Each rule should be a dictionary. Its data is passed to the re.sub() method : key as the pattern argument, and value as the repl argument. The local path (possibly previously transformed) to the source Markdown file relative to the temporary working directory is passed as the string argument. The default value of the url_transform option is designed to be used to build static websites with MkDocs backend. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Usage \u00b6 The preprocessor reads each source Markdown file and generates three fields for indexing: url \u2014target page URL; title \u2014document title, it\u2019s taken from the first heading of source Markdown content; content \u2014source Markdown content, optionally converted into plain text or HTML. When all the files are processed, the preprocessor calls Elasticsearch API to create the index. Optionally the preprocessor may call Elasticsearch API to delete previously created index. By using the index_properties option, you may override the default Elasticsearch settings when creating an index. Below is an example of JSON-formatted value of the index_properties option to create an index with Russian morphology analysis: { \"settings\" : { \"analysis\" : { \"filter\" : { \"ru_stop\" : { \"type\" : \"stop\" , \"stopwords\" : \"_russian_\" }, \"ru_stemmer\" : { \"type\" : \"stemmer\" , \"language\" : \"russian\" } }, \"analyzer\" : { \"default\" : { \"tokenizer\" : \"standard\" , \"filter\" : [ \"lowercase\" , \"ru_stop\" , \"ru_stemmer\" ] } } } } } You may perform custom search requests to Elasticsearch API. The simple client-side Web application example that is provided as a part of this extension, performs requests like this: { \"query\" : { \"multi_match\" : { \"query\" : \"foliant\" , \"type\" : \"phrase_prefix\" , \"fields\" : [ \"title^3\" , \"content\" ] } }, \"highlight\" : { \"fields\" : { \"content\" : {} } }, \"size\" : 50 } Search results may look like that: If you use self-hosted instance of Elasticsearch, you may need to configure it to append CORS headers to HTTP API responses.","title":"Elasticsearch"},{"location":"preprocessors/elasticsearch/#elasticsearch","text":"This extension allows to integrate Foliant-managed documentation projects with Elasticsearch search engine. The main part of this extension is a preprocessor that prepares data for a search index. Also this extension provides a simple working example of a client-side Web application that may be used to perform searching. By editing HTML, CSS and JS code you may customize it according to your needs.","title":"Elasticsearch"},{"location":"preprocessors/elasticsearch/#installation","text":"To install the preprocessor, run the command: $ pip install foliantcontrib.elasticsearch To use an example of a client-side Web application for searching, download these HTML, CSS, and JS files and open the file index.html in your Web browser.","title":"Installation"},{"location":"preprocessors/elasticsearch/#config","text":"To enable the preprocessor, add elasticsearch to preprocessors section in the project config: preprocessors : - elasticsearch The preprocessor has a number of options with the following default values: preprocessors : - elasticsearch : es_url : 'http://127.0.0.1:9200/' index_name : '' index_properties : {} actions : - delete - create use_chapters : true format : plaintext escape_html : true url_transform : - '\\/?index\\.md$' : '/' - '\\.md$' : '/' - '^([^\\/]+)' : '/\\g<1>' targets : [] es_url Elasticsearch API URL. index_name Name of the index. Your index must have an explicitly specified name, otherwise (by default) API URL will be invalid. index_properties Settings and other properties that should be used when creating an index. If not specified (by default), the default Elasticsearch settings will be used. More details are described below. actions List of actions that the preprocessor should to perform. Available item values are: delete , create . By default, both of them are used since in most cases it\u2019s needed to remove and then fully rebuild the index. use_chapters If set to true (by default), the preprocessor applies only to the files that are mentioned in the chapters section of the project config. Otherwise, the preprocessor applies to all of the files of the project. format Format that the source Markdown content should be converted to before adding to the index; available values are: plaintext (by default), html , markdown (for no conversion). escape_html If set to true (by default), HTML syntax constructions in the content converted to plaintext will be escaped by replacing & with &amp; , < with &lt; , > with &gt; , and \" with &quot; . url_transform Sequence of rules to transform local paths of source Markdown files into URLs of target pages. Each rule should be a dictionary. Its data is passed to the re.sub() method : key as the pattern argument, and value as the repl argument. The local path (possibly previously transformed) to the source Markdown file relative to the temporary working directory is passed as the string argument. The default value of the url_transform option is designed to be used to build static websites with MkDocs backend. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Config"},{"location":"preprocessors/elasticsearch/#usage","text":"The preprocessor reads each source Markdown file and generates three fields for indexing: url \u2014target page URL; title \u2014document title, it\u2019s taken from the first heading of source Markdown content; content \u2014source Markdown content, optionally converted into plain text or HTML. When all the files are processed, the preprocessor calls Elasticsearch API to create the index. Optionally the preprocessor may call Elasticsearch API to delete previously created index. By using the index_properties option, you may override the default Elasticsearch settings when creating an index. Below is an example of JSON-formatted value of the index_properties option to create an index with Russian morphology analysis: { \"settings\" : { \"analysis\" : { \"filter\" : { \"ru_stop\" : { \"type\" : \"stop\" , \"stopwords\" : \"_russian_\" }, \"ru_stemmer\" : { \"type\" : \"stemmer\" , \"language\" : \"russian\" } }, \"analyzer\" : { \"default\" : { \"tokenizer\" : \"standard\" , \"filter\" : [ \"lowercase\" , \"ru_stop\" , \"ru_stemmer\" ] } } } } } You may perform custom search requests to Elasticsearch API. The simple client-side Web application example that is provided as a part of this extension, performs requests like this: { \"query\" : { \"multi_match\" : { \"query\" : \"foliant\" , \"type\" : \"phrase_prefix\" , \"fields\" : [ \"title^3\" , \"content\" ] } }, \"highlight\" : { \"fields\" : { \"content\" : {} } }, \"size\" : 50 } Search results may look like that: If you use self-hosted instance of Elasticsearch, you may need to configure it to append CORS headers to HTTP API responses.","title":"Usage"},{"location":"preprocessors/epsconvert/","text":"Epsconvert \u00b6 EPSConvert is a tool to convert EPS images into PNG format. Installation \u00b6 $ pip install foliantcontrib.epsconvert Config \u00b6 To enable the preprocessor, add epsconvert to preprocessors section in the project config: preprocessors : - epsconvert The preprocessor has a number of options: preprocessors : - epsconvert : convert_path : convert cache_dir : !path .epsconvertcache image_width : 0 targets : - pre - mkdocs - site - ghp convert_path Path to convert binary. By default, it is assumed that you have this command in PATH . ImageMagick must be installed. cache_dir Directory to store processed images. They may be reused later. image_width Width of PNG images in pixels. By default (in case when the value is 0 ), the width of each image is set by ImageMagick automatically. Default behavior is recommended. If the width is given explicitly, file size may increase. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Epsconvert"},{"location":"preprocessors/epsconvert/#epsconvert","text":"EPSConvert is a tool to convert EPS images into PNG format.","title":"Epsconvert"},{"location":"preprocessors/epsconvert/#installation","text":"$ pip install foliantcontrib.epsconvert","title":"Installation"},{"location":"preprocessors/epsconvert/#config","text":"To enable the preprocessor, add epsconvert to preprocessors section in the project config: preprocessors : - epsconvert The preprocessor has a number of options: preprocessors : - epsconvert : convert_path : convert cache_dir : !path .epsconvertcache image_width : 0 targets : - pre - mkdocs - site - ghp convert_path Path to convert binary. By default, it is assumed that you have this command in PATH . ImageMagick must be installed. cache_dir Directory to store processed images. They may be reused later. image_width Width of PNG images in pixels. By default (in case when the value is 0 ), the width of each image is set by ImageMagick automatically. Default behavior is recommended. If the width is given explicitly, file size may increase. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Config"},{"location":"preprocessors/escapecode/","text":"EscapeCode and UnescapeCode \u00b6 EscapeCode and UnescapeCode preprocessors work in pair. EscapeCode finds in the source Markdown content the parts that should not be modified by any next preprocessors. Examples of content that should be left raw: fence code blocks, pre code blocks, inline code. EscapeCode replaces these raw content parts with pseudo-XML tags recognized by UnescapeCode preprocessor. EscapeCode saves raw content parts into files. Later, UnescapeCode restores this content from files. Also, before the replacement, EscapeCode normalizes the source Markdown content to unify and simplify further operations. The preprocessor replaces CRLF with LF , removes excessive whitespace characters, provides trailing newline, etc. Installation \u00b6 To install EscapeCode and UnescapeCode preprocessors, run: $ pip install foliantcontrib.escapecode See more details below. Integration with Foliant and Includes \u00b6 You may call EscapeCode and UnescapeCode explicitly, but these preprocessors are integrated with Foliant core (since version 1.0.10) and with Includes preprocessor (since version 1.1.1). The escape_code project\u2019s config option, if set to true , provides applying EscapeCode before all other preprocessors, and applying UnescapeCode after all other preprocessors. Also this option tells Includes preprocessor to apply EscapeCode to each included file. In this mode EscapeCode and UnescapeCode preprocessors deprecate _unescape preprocessor. > **Note** > > The preprocessor _unescape is a part of Foliant core. It allows to use pseudo-XML tags in code examples. If you want an opening tag not to be interpreted by any preprocessor, precede this tag with the `<` character. The preprocessor _unescape applies after all other preprocessors and removes such characters. Config example: title : My Awesome Project chapters : - index.md ... escape_code : true preprocessors : ... - includes ... ... If the escape_code option isn\u2019t used or set to false , backward compatibility mode is involved. In this mode EscapeCode and UnescapeCode aren\u2019t applied automatically, but _unescape preprocessor is applied. In more complicated case, you may pass some custom options to EscapeCode preprocessor: escape_code : options : ... Custom options available in EscapeCode since version 1.0.2. Foliant core supports passing custom options to EscapeCode preprocessor as the value of escape_code.options parameter since version 1.0.11. Options are described below. The Python package that includes EscapeCode and UnescapeCode preprocessors is the dependence of Includes preprocessor since version 1.1.1. At the same time this package isn\u2019t a dependence of Foliant core. To use escape_code config option in Foliant core, you have to install the package with EscapeCode and UnescapeCode preprocessors separately. Explicit Enabling \u00b6 You may not to use the escape_code option and call the preprocessors explicitly: preprocessors : - escapecode # usually the first list item ... - unescapecode # usually the last list item Both preprocessors allow to override the path to the directory that is used to store temporary files: preprocessors : - escapecode : cache_dir : !path .escapecodecache ... - unescapecode : cache_dir : !path .escapecodecache The default values are shown in this example. EscapeCode and related UnescapeCode must work with the same cache directory. Note that if you use Includes preprocessor, and the included content doesn\u2019t belong to the current Foliant project, there\u2019s no way to escape raw parts of this content before Includes preprocessor is applied. Config \u00b6 Since version 1.0.2, EscapeCode preprocessor supports the option actions in additional to cache_dir . The value of actions options should be a list of acceptable actions. By default, the following list is used: actions : - normalize - escape : - fence_blocks - pre_blocks - inline_code This default list may be overridden. For example: actions : - normalize - escape : - fence_blocks - inline_code - tags : - plantuml - seqdiag - comments Meanings of parameters: normalize \u2014perform normalization; escape \u2014perform escaping of certain types of raw content: fence_blocks \u2014fence code blocks; pre_blocks \u2014pre code blocks; inline_code \u2014inline code; comments \u2014HTML-style comments, also usual for Markdown; tags \u2014content of certain tags with the tags themselves, for example plantuml for <plantuml>...</plantuml> . Usage \u00b6 Below you can see an example of Markdown content with code blocks and inline code. # Heading Text that contains some `inline code` . Below is a fence code block , language is optional : `` ` python import this `` ` One more fence code block : ~~~ # This is a comment that should not be interpreted as a heading print ( 'Hello World' ) ~~~ And this is a pre code block : mov dx , hello ; mov ah , 9 ; int 21 h ; The preprocessor EscapeCode with default behavior will do the following replacements: # Heading Text that contains some <escaped hash= \"2bb20aeb00314e915ecfefd86d26f46a\" ></escaped> . Below is a fence code block, language is optional: <escaped hash= \"15e1e46a75ef29eb760f392bb2df4ebb\" ></escaped> One more fence code block: <escaped hash= \"91c3d3da865e24c33c4b366760c99579\" ></escaped> And this is a pre code block: <escaped hash= \"a1e51c9ad3da841d393533f1522ab17e\" ></escaped> Escaped content parts will be saved into files located in the cache directory. The names of the files correspond the values of the hash attributes. For example, that\u2019s the content of the file 15e1e46a75ef29eb760f392bb2df4ebb.md : `` ` python import this `` `","title":"EscapeCode and UnescapeCode"},{"location":"preprocessors/escapecode/#escapecode-and-unescapecode","text":"EscapeCode and UnescapeCode preprocessors work in pair. EscapeCode finds in the source Markdown content the parts that should not be modified by any next preprocessors. Examples of content that should be left raw: fence code blocks, pre code blocks, inline code. EscapeCode replaces these raw content parts with pseudo-XML tags recognized by UnescapeCode preprocessor. EscapeCode saves raw content parts into files. Later, UnescapeCode restores this content from files. Also, before the replacement, EscapeCode normalizes the source Markdown content to unify and simplify further operations. The preprocessor replaces CRLF with LF , removes excessive whitespace characters, provides trailing newline, etc.","title":"EscapeCode and UnescapeCode"},{"location":"preprocessors/escapecode/#installation","text":"To install EscapeCode and UnescapeCode preprocessors, run: $ pip install foliantcontrib.escapecode See more details below.","title":"Installation"},{"location":"preprocessors/escapecode/#integration-with-foliant-and-includes","text":"You may call EscapeCode and UnescapeCode explicitly, but these preprocessors are integrated with Foliant core (since version 1.0.10) and with Includes preprocessor (since version 1.1.1). The escape_code project\u2019s config option, if set to true , provides applying EscapeCode before all other preprocessors, and applying UnescapeCode after all other preprocessors. Also this option tells Includes preprocessor to apply EscapeCode to each included file. In this mode EscapeCode and UnescapeCode preprocessors deprecate _unescape preprocessor. > **Note** > > The preprocessor _unescape is a part of Foliant core. It allows to use pseudo-XML tags in code examples. If you want an opening tag not to be interpreted by any preprocessor, precede this tag with the `<` character. The preprocessor _unescape applies after all other preprocessors and removes such characters. Config example: title : My Awesome Project chapters : - index.md ... escape_code : true preprocessors : ... - includes ... ... If the escape_code option isn\u2019t used or set to false , backward compatibility mode is involved. In this mode EscapeCode and UnescapeCode aren\u2019t applied automatically, but _unescape preprocessor is applied. In more complicated case, you may pass some custom options to EscapeCode preprocessor: escape_code : options : ... Custom options available in EscapeCode since version 1.0.2. Foliant core supports passing custom options to EscapeCode preprocessor as the value of escape_code.options parameter since version 1.0.11. Options are described below. The Python package that includes EscapeCode and UnescapeCode preprocessors is the dependence of Includes preprocessor since version 1.1.1. At the same time this package isn\u2019t a dependence of Foliant core. To use escape_code config option in Foliant core, you have to install the package with EscapeCode and UnescapeCode preprocessors separately.","title":"Integration with Foliant and Includes"},{"location":"preprocessors/escapecode/#explicit-enabling","text":"You may not to use the escape_code option and call the preprocessors explicitly: preprocessors : - escapecode # usually the first list item ... - unescapecode # usually the last list item Both preprocessors allow to override the path to the directory that is used to store temporary files: preprocessors : - escapecode : cache_dir : !path .escapecodecache ... - unescapecode : cache_dir : !path .escapecodecache The default values are shown in this example. EscapeCode and related UnescapeCode must work with the same cache directory. Note that if you use Includes preprocessor, and the included content doesn\u2019t belong to the current Foliant project, there\u2019s no way to escape raw parts of this content before Includes preprocessor is applied.","title":"Explicit Enabling"},{"location":"preprocessors/escapecode/#config","text":"Since version 1.0.2, EscapeCode preprocessor supports the option actions in additional to cache_dir . The value of actions options should be a list of acceptable actions. By default, the following list is used: actions : - normalize - escape : - fence_blocks - pre_blocks - inline_code This default list may be overridden. For example: actions : - normalize - escape : - fence_blocks - inline_code - tags : - plantuml - seqdiag - comments Meanings of parameters: normalize \u2014perform normalization; escape \u2014perform escaping of certain types of raw content: fence_blocks \u2014fence code blocks; pre_blocks \u2014pre code blocks; inline_code \u2014inline code; comments \u2014HTML-style comments, also usual for Markdown; tags \u2014content of certain tags with the tags themselves, for example plantuml for <plantuml>...</plantuml> .","title":"Config"},{"location":"preprocessors/escapecode/#usage","text":"Below you can see an example of Markdown content with code blocks and inline code. # Heading Text that contains some `inline code` . Below is a fence code block , language is optional : `` ` python import this `` ` One more fence code block : ~~~ # This is a comment that should not be interpreted as a heading print ( 'Hello World' ) ~~~ And this is a pre code block : mov dx , hello ; mov ah , 9 ; int 21 h ; The preprocessor EscapeCode with default behavior will do the following replacements: # Heading Text that contains some <escaped hash= \"2bb20aeb00314e915ecfefd86d26f46a\" ></escaped> . Below is a fence code block, language is optional: <escaped hash= \"15e1e46a75ef29eb760f392bb2df4ebb\" ></escaped> One more fence code block: <escaped hash= \"91c3d3da865e24c33c4b366760c99579\" ></escaped> And this is a pre code block: <escaped hash= \"a1e51c9ad3da841d393533f1522ab17e\" ></escaped> Escaped content parts will be saved into files located in the cache directory. The names of the files correspond the values of the hash attributes. For example, that\u2019s the content of the file 15e1e46a75ef29eb760f392bb2df4ebb.md : `` ` python import this `` `","title":"Usage"},{"location":"preprocessors/flags/","text":"Flags \u00b6 This preprocessors lets you exclude parts of the source based on flags defined in the project config and environment variables, as well as current target and backend. Installation \u00b6 $ pip install foliantcontrib.flags Config \u00b6 Enable the propressor by adding it to preprocessors : preprocessors : - flags Enabled project flags are listed in preprocessors.flags.flags : preprocessors : - flags : flags : - foo - bar To set flags for the current session, define FOLIANT_FLAGS environment variable: $ FOLIANT_FLAGS = \"spam, eggs\" You can use commas, semicolons, or spaces to separate flags. Hint To emulate a particular target or backend with a flag, use the special flags target:FLAG and backend:FLAG where FLAG is your target or backend: $ FOLIANT_FLAGS=\"target:pdf, backend:pandoc, spam\" Usage \u00b6 Conditional blocks are enclosed between <if>...</if> tags: This paragraph is for everyone. <if flags= \"management\" > This parapraph is for management only. </if> A block can depend on multiple flags. You can pick whether all tags must be present for the block to appear, or any of them (by default, kind=\"all\" is assumed): < if flags = \"spam, eggs\" kind = \"all\" > This is included only if both `spam` and `eggs` are set . </ if > < if flags = \"spam, eggs\" kind = \"any\" > This is included if both `spam` or `eggs` is set . </ if > You can also list flags that must not be set for the block to be included: < if flags = \"spam, eggs\" kind = \"none\" > This is included only if neither `spam` nor `eggs` are set . </ if > You can check against the current target and backend instead of manually defined flags: <if targets= \"pdf\" > This is for pdf output </if><if targets= \"site\" > This is for the site </if> <if backends= \"mkdocs\" > This is only for MkDocs. </if>","title":"Flags"},{"location":"preprocessors/flags/#flags","text":"This preprocessors lets you exclude parts of the source based on flags defined in the project config and environment variables, as well as current target and backend.","title":"Flags"},{"location":"preprocessors/flags/#installation","text":"$ pip install foliantcontrib.flags","title":"Installation"},{"location":"preprocessors/flags/#config","text":"Enable the propressor by adding it to preprocessors : preprocessors : - flags Enabled project flags are listed in preprocessors.flags.flags : preprocessors : - flags : flags : - foo - bar To set flags for the current session, define FOLIANT_FLAGS environment variable: $ FOLIANT_FLAGS = \"spam, eggs\" You can use commas, semicolons, or spaces to separate flags. Hint To emulate a particular target or backend with a flag, use the special flags target:FLAG and backend:FLAG where FLAG is your target or backend: $ FOLIANT_FLAGS=\"target:pdf, backend:pandoc, spam\"","title":"Config"},{"location":"preprocessors/flags/#usage","text":"Conditional blocks are enclosed between <if>...</if> tags: This paragraph is for everyone. <if flags= \"management\" > This parapraph is for management only. </if> A block can depend on multiple flags. You can pick whether all tags must be present for the block to appear, or any of them (by default, kind=\"all\" is assumed): < if flags = \"spam, eggs\" kind = \"all\" > This is included only if both `spam` and `eggs` are set . </ if > < if flags = \"spam, eggs\" kind = \"any\" > This is included if both `spam` or `eggs` is set . </ if > You can also list flags that must not be set for the block to be included: < if flags = \"spam, eggs\" kind = \"none\" > This is included only if neither `spam` nor `eggs` are set . </ if > You can check against the current target and backend instead of manually defined flags: <if targets= \"pdf\" > This is for pdf output </if><if targets= \"site\" > This is for the site </if> <if backends= \"mkdocs\" > This is only for MkDocs. </if>","title":"Usage"},{"location":"preprocessors/flatten/","text":"Flatten \u00b6 This preprocessor converts a Foliant project source directory into a single Markdown file containing all the sources, preserving order and inheritance. This preprocessor is used by backends that require a single Markdown file as input instead of a directory. The Pandoc backend is one such example. Installation \u00b6 $ pip install foliantcontrib.flatten Config \u00b6 This preprocessor is required by Pandoc backend, so if you use it, you don\u2019t need to install Flatten or enable it in the project config manually. However, it\u2019s still a regular preprocessor, and you can run it manually by listing it in preprocessors : preprocessors : - flatten The preprocessor has a number of options with the following default values: preprocessors : - flatten : flat_src_file_name : __all__.md keep_sources : false flat_src_file_name Name of the flattened file that is created in the temporary working directory. keep_sources Flag that tells the preprocessor to keep Markdown sources in the temporary working directory after flattening. If set to false , all Markdown files excepting the flattened will be deleted from the temporary working directory. Note Flatten preprocessor uses Includes, so when you install Pandoc backend, Includes preprocessor will also be installed, along with Flatten.","title":"Flatten"},{"location":"preprocessors/flatten/#flatten","text":"This preprocessor converts a Foliant project source directory into a single Markdown file containing all the sources, preserving order and inheritance. This preprocessor is used by backends that require a single Markdown file as input instead of a directory. The Pandoc backend is one such example.","title":"Flatten"},{"location":"preprocessors/flatten/#installation","text":"$ pip install foliantcontrib.flatten","title":"Installation"},{"location":"preprocessors/flatten/#config","text":"This preprocessor is required by Pandoc backend, so if you use it, you don\u2019t need to install Flatten or enable it in the project config manually. However, it\u2019s still a regular preprocessor, and you can run it manually by listing it in preprocessors : preprocessors : - flatten The preprocessor has a number of options with the following default values: preprocessors : - flatten : flat_src_file_name : __all__.md keep_sources : false flat_src_file_name Name of the flattened file that is created in the temporary working directory. keep_sources Flag that tells the preprocessor to keep Markdown sources in the temporary working directory after flattening. If set to false , all Markdown files excepting the flattened will be deleted from the temporary working directory. Note Flatten preprocessor uses Includes, so when you install Pandoc backend, Includes preprocessor will also be installed, along with Flatten.","title":"Config"},{"location":"preprocessors/general_notes/","text":"General Notes on Usage \u00b6 Most simple preprocessors apply unconditionally to the whole content of each Markdown file in the Foliant project. But usually preprocessors look for some specific pseudo-XML tags in Markdown content. Each preprocessor registers its own set of tags. Tags can have attributes and a body. Attributes are usually used to specify some required or optional parameters. Body is the content that is enclosed between opening and closing tags; preprocessors usually do something with this content: <tag attribute_1= \"value_1\" ... attribute_N= \"value_N\" > body </tag> Foliant under 1.0.8 tries to convert each attribute value into a boolean value, a number, or a string. Attribute values must be enclosed in double quotes ( \" ). Since Foliant 1.0.9, attribute values are processed as YAML. Scalar values are also converted into boolean values, numbers and strings, but you may specify composite values that should be transformed into lists or dictionaries. You may also use modifiers (i.e. YAML tags) that are available in the Foliant project\u2019s config. !path The string preceded by this modifier should be converted into an existing path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. !project_path The string preceded by this modifier should be converted into a path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. This path may be nonexistent. !rel_path The string preceded by this modifier should be converted into a path relative to the currently processed Markdown file. This path may be nonexistent. If you develop a preprocessor that accepts some path, by default it is better to be a path relative to the currently processed Markdown file. Also, since Foliant 1.0.9, attribute values may be enclosed into double ( \" ) or single ( ' ) quotes.","title":"General Notes"},{"location":"preprocessors/general_notes/#general-notes-on-usage","text":"Most simple preprocessors apply unconditionally to the whole content of each Markdown file in the Foliant project. But usually preprocessors look for some specific pseudo-XML tags in Markdown content. Each preprocessor registers its own set of tags. Tags can have attributes and a body. Attributes are usually used to specify some required or optional parameters. Body is the content that is enclosed between opening and closing tags; preprocessors usually do something with this content: <tag attribute_1= \"value_1\" ... attribute_N= \"value_N\" > body </tag> Foliant under 1.0.8 tries to convert each attribute value into a boolean value, a number, or a string. Attribute values must be enclosed in double quotes ( \" ). Since Foliant 1.0.9, attribute values are processed as YAML. Scalar values are also converted into boolean values, numbers and strings, but you may specify composite values that should be transformed into lists or dictionaries. You may also use modifiers (i.e. YAML tags) that are available in the Foliant project\u2019s config. !path The string preceded by this modifier should be converted into an existing path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. !project_path The string preceded by this modifier should be converted into a path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. This path may be nonexistent. !rel_path The string preceded by this modifier should be converted into a path relative to the currently processed Markdown file. This path may be nonexistent. If you develop a preprocessor that accepts some path, by default it is better to be a path relative to the currently processed Markdown file. Also, since Foliant 1.0.9, attribute values may be enclosed into double ( \" ) or single ( ' ) quotes.","title":"General Notes on Usage"},{"location":"preprocessors/glossary/","text":"Glossary \u00b6 Glossary preprocessor collects terms and definitions from the files stated and inserts them to specified places of the document. Installation \u00b6 $ pip install foliantcontrib.glossary Config \u00b6 To enable the preprocessor, add glossary to preprocessors section in the project config. preprocessors : - glossary The preprocessor has a number of options (default values stated below): preprocessors : - glossary : term_definitions : 'term_definitions.md' definition_mark : ': ' files_to_process : '' term_definitions Local or remote file with terms and definitions in Pandoc definition_lists notation (by default this file stored in foliant project folder, but you can place it other folder). Also you can use includes in this file to join several glossary files. In this case includes preprocessor should be stated before glossary in foliant.yml preprocessors section. Note that if several definitions of one term are found, only first will be used. definition_mark Preprocessor uses this string to determine, if the definition should be inserted here. \": \" for Pandoc definition_lists notation. files_to_process You can set certain files to process by preprocessor. Usage \u00b6 Just add the preprocessor to the project config, set it up and enjoy the automatically collected glossary in your document. Example \u00b6 foliant.yml ... chapters : - text.md preprocessors : ... - includes - glossary ... term_definitions.md ## Glossary <include nohead= \"true\" > $https://git.repo/repo_name_1$src/glossary_1.md </include> <include nohead= \"true\" > $https://git.repo/repo_name_2$src/glossary_2.md </include> glossary_1.md from repo_1 ## Glossary Term 1 : Definition 1 Term 2 : Definition 2 Term 3 : Definition 3 glossary_2.md from repo_2 ## Glossary Term 4 : Definition 4 { some code , part of Definition 4 } Third paragraph of definition 4 . Term 5 : Definition 5 text.md ## Main chapter Some text . ## Glossary : Term 1 : Term 4 : Term 2 __all__.md ## Main chapter Some text . ## Glossary Term 1 : Definition 1 Term 4 : Definition 4 { some code , part of Definition 4 } Third paragraph of definition 4 . Term 2 : Definition 2","title":"Glossary"},{"location":"preprocessors/glossary/#glossary","text":"Glossary preprocessor collects terms and definitions from the files stated and inserts them to specified places of the document.","title":"Glossary"},{"location":"preprocessors/glossary/#installation","text":"$ pip install foliantcontrib.glossary","title":"Installation"},{"location":"preprocessors/glossary/#config","text":"To enable the preprocessor, add glossary to preprocessors section in the project config. preprocessors : - glossary The preprocessor has a number of options (default values stated below): preprocessors : - glossary : term_definitions : 'term_definitions.md' definition_mark : ': ' files_to_process : '' term_definitions Local or remote file with terms and definitions in Pandoc definition_lists notation (by default this file stored in foliant project folder, but you can place it other folder). Also you can use includes in this file to join several glossary files. In this case includes preprocessor should be stated before glossary in foliant.yml preprocessors section. Note that if several definitions of one term are found, only first will be used. definition_mark Preprocessor uses this string to determine, if the definition should be inserted here. \": \" for Pandoc definition_lists notation. files_to_process You can set certain files to process by preprocessor.","title":"Config"},{"location":"preprocessors/glossary/#usage","text":"Just add the preprocessor to the project config, set it up and enjoy the automatically collected glossary in your document.","title":"Usage"},{"location":"preprocessors/glossary/#example","text":"foliant.yml ... chapters : - text.md preprocessors : ... - includes - glossary ... term_definitions.md ## Glossary <include nohead= \"true\" > $https://git.repo/repo_name_1$src/glossary_1.md </include> <include nohead= \"true\" > $https://git.repo/repo_name_2$src/glossary_2.md </include> glossary_1.md from repo_1 ## Glossary Term 1 : Definition 1 Term 2 : Definition 2 Term 3 : Definition 3 glossary_2.md from repo_2 ## Glossary Term 4 : Definition 4 { some code , part of Definition 4 } Third paragraph of definition 4 . Term 5 : Definition 5 text.md ## Main chapter Some text . ## Glossary : Term 1 : Term 4 : Term 2 __all__.md ## Main chapter Some text . ## Glossary Term 1 : Definition 1 Term 4 : Definition 4 { some code , part of Definition 4 } Third paragraph of definition 4 . Term 2 : Definition 2","title":"Example"},{"location":"preprocessors/graphviz/","text":"Graphviz \u00b6 Graphviz Diagrams Preprocessor for Foliant \u00b6 Graphviz is an open source graph visualization tool. This preprocessor converts Graphviz diagram definitions in the source and converts them into images on the fly during project build. Installation \u00b6 $ pip install foliantcontrib.graphviz Config \u00b6 To enable the preprocessor, add graphviz to preprocessors section in the project config: preprocessors : - graphviz The preprocessor has a number of options: preprocessors : - graphviz : cache_dir : !path .diagramscache graphviz_path : dot engine : dot format : png as_image : true params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. graphviz_path Path to Graphviz launcher. By default, it is assumed that you have the dot command in your PATH , but if Graphviz uses another command to launch, or if the dot launcher is installed in a custom place, you can define it here. engine Layout engine used to process the diagram source. Available engines: ( circo , dot , fdp , neato , osage , patchwork , sfdp twopi ). Default: dot format Output format of the diagram image. Available formats: tons of them . Default: png as_image If true \u2014 inserts scheme into document as md-image. If false \u2014 inserts the file generated by GraphViz directly into the document (may be handy for svg images). Default: true params Params passed to the image generation command: preprocessors: - graphviz: params: Gdpi: 100 To see the full list of params, run the command that launches Graphviz, with -? command line option. Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <graphviz>...</graphviz> tags: Here\u2019s a diagram: <graphviz> a -> b </graphviz> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have two exclusive options: caption option \u2014 the markdown caption of the diagram image and src \u2014 path to diagram source (relative to current file). If src tag option is supplied, tag body is ignored. Diagram source is loaded from external file. Diagram with a caption: <graphviz caption= \"Deployment diagram\" params= \"Earrowsize: 0.5\" src= \"diags/sample.gv\" > </graphviz> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Graphviz"},{"location":"preprocessors/graphviz/#graphviz","text":"","title":"Graphviz"},{"location":"preprocessors/graphviz/#graphviz-diagrams-preprocessor-for-foliant","text":"Graphviz is an open source graph visualization tool. This preprocessor converts Graphviz diagram definitions in the source and converts them into images on the fly during project build.","title":"Graphviz Diagrams Preprocessor for Foliant"},{"location":"preprocessors/graphviz/#installation","text":"$ pip install foliantcontrib.graphviz","title":"Installation"},{"location":"preprocessors/graphviz/#config","text":"To enable the preprocessor, add graphviz to preprocessors section in the project config: preprocessors : - graphviz The preprocessor has a number of options: preprocessors : - graphviz : cache_dir : !path .diagramscache graphviz_path : dot engine : dot format : png as_image : true params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. graphviz_path Path to Graphviz launcher. By default, it is assumed that you have the dot command in your PATH , but if Graphviz uses another command to launch, or if the dot launcher is installed in a custom place, you can define it here. engine Layout engine used to process the diagram source. Available engines: ( circo , dot , fdp , neato , osage , patchwork , sfdp twopi ). Default: dot format Output format of the diagram image. Available formats: tons of them . Default: png as_image If true \u2014 inserts scheme into document as md-image. If false \u2014 inserts the file generated by GraphViz directly into the document (may be handy for svg images). Default: true params Params passed to the image generation command: preprocessors: - graphviz: params: Gdpi: 100 To see the full list of params, run the command that launches Graphviz, with -? command line option.","title":"Config"},{"location":"preprocessors/graphviz/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <graphviz>...</graphviz> tags: Here\u2019s a diagram: <graphviz> a -> b </graphviz> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have two exclusive options: caption option \u2014 the markdown caption of the diagram image and src \u2014 path to diagram source (relative to current file). If src tag option is supplied, tag body is ignored. Diagram source is loaded from external file. Diagram with a caption: <graphviz caption= \"Deployment diagram\" params= \"Earrowsize: 0.5\" src= \"diags/sample.gv\" > </graphviz> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Usage"},{"location":"preprocessors/history/","text":"History \u00b6 History is a preprocessor that generates single linear history of releases for multiple Git repositories based on their changelog files, tags, or commits. The history may be represented as Markdown, and as RSS feed. Installation \u00b6 $ pip install foliantcontrib.history Config \u00b6 To enable the preprocessor, add history to preprocessors section in the project config: preprocessors : - history The preprocessor has a number of options with the following default values: - history : repos : [] revision : master name_from_readme : false readme : README.md from : changelog merge_commits : true changelog : changelog.md source_heading_level : 1 target_heading_level : 1 target_heading_template : '[%date%] [%repo%](%link%) %version%' date_format : year_first limit : 0 rss : false rss_file : rss.xml rss_title : 'History of Releases' rss_link : '' rss_description : '' rss_language : en-US rss_item_title_template : '%repo% %version%' repos List of URLs of Git repositories that it\u2019s necessary to generate history for. Example: yaml repos: - https://github.com/foliant-docs/foliant.git - https://github.com/foliant-docs/foliantcontrib.includes.git revision Revision or branch name to use. Branches that are used for stable releases must have the same names in all listed repositories. name_from_readme Flag that tells the preprocessor to try to use the content of the first heading of README file in each listed repository as the repo name. If the flag set to false , or an attempt to get the first heading content is unsuccessful, the repo name will be based on the repo URL. readme Path to README file. README files must be located at the same paths in all listed repositories. from Data source to generate history: changelog \u2014changelog file, tags \u2014tags, commits \u2014all commits. Data sources of the same type will be used for all listed repositories. merge_commits Flag that tells the preprocessor to include merge commits into history when from: commits is used. changelog Path to changelog file. Changelogs must be located at the same paths in all listed repositories. source_heading_level Level of headings that precede descriptions of releases in the source Markdown content. It must be the same for all listed repositories. target_heading_level Level of headings that precede descriptions of releases in the target Markdown content of generated history. target_heading_template Template for top-level headings in the target Markdown content. You may use any characters, and the variables: %date% \u2014date, %repo% \u2014repo name, %link% \u2014repo URL, %version% \u2014version data (content of source changelog heading, tag value, or commit hash). date_format Output date format to use in the target Markdown content. If the default value year_first is used, the date \u201cSeptember 4, 2019\u201d will be represented as 2019-09-04 . If the day_first value is used, this date will be represented as 04.09.2019 . limit Maximum number of items to include into the target Markdown content; 0 means no limit. rss Flag that tells the preprocessor to export the history into RSS feed. Note that the parameters target_heading_level , target_heading_template , date_format , and limit are applied to Markdown content only, not to RSS feed content. rss_file Subpath to the file with RSS feed. It\u2019s relative to the temporary working directory during building, to the directory of built project after building, and to the rss_link value in URLs. rss_title RSS channel title. rss_link RSS channel link, e.g. https://foliant-docs.github.io/docs/ . If the rss parameter value is rss.xml , the RSS feed URL will be https://foliant-docs.github.io/docs/rss.xml . rss_description RSS channel description. rss_language RSS channel language. rss_item_title_template Template for titles of RSS feed items. You may use any characters, and the variables: %repo% \u2014repo name, %version% \u2014version data. Usage \u00b6 To insert some history into Markdown content, use the <history></history> tags: Some optional content here. <history></history> More optional content. If no attributes specified, the values of options from the project config will be used. You may override each config option value with the attribute of the same name. Example: <history repos= \"https://github.com/foliant-docs/foliantcontrib.mkdocs.git\" revision= \"develop\" limit= \"5\" rss= \"true\" rss_file= \"some_another.xml\" ... > </history>","title":"History"},{"location":"preprocessors/history/#history","text":"History is a preprocessor that generates single linear history of releases for multiple Git repositories based on their changelog files, tags, or commits. The history may be represented as Markdown, and as RSS feed.","title":"History"},{"location":"preprocessors/history/#installation","text":"$ pip install foliantcontrib.history","title":"Installation"},{"location":"preprocessors/history/#config","text":"To enable the preprocessor, add history to preprocessors section in the project config: preprocessors : - history The preprocessor has a number of options with the following default values: - history : repos : [] revision : master name_from_readme : false readme : README.md from : changelog merge_commits : true changelog : changelog.md source_heading_level : 1 target_heading_level : 1 target_heading_template : '[%date%] [%repo%](%link%) %version%' date_format : year_first limit : 0 rss : false rss_file : rss.xml rss_title : 'History of Releases' rss_link : '' rss_description : '' rss_language : en-US rss_item_title_template : '%repo% %version%' repos List of URLs of Git repositories that it\u2019s necessary to generate history for. Example: yaml repos: - https://github.com/foliant-docs/foliant.git - https://github.com/foliant-docs/foliantcontrib.includes.git revision Revision or branch name to use. Branches that are used for stable releases must have the same names in all listed repositories. name_from_readme Flag that tells the preprocessor to try to use the content of the first heading of README file in each listed repository as the repo name. If the flag set to false , or an attempt to get the first heading content is unsuccessful, the repo name will be based on the repo URL. readme Path to README file. README files must be located at the same paths in all listed repositories. from Data source to generate history: changelog \u2014changelog file, tags \u2014tags, commits \u2014all commits. Data sources of the same type will be used for all listed repositories. merge_commits Flag that tells the preprocessor to include merge commits into history when from: commits is used. changelog Path to changelog file. Changelogs must be located at the same paths in all listed repositories. source_heading_level Level of headings that precede descriptions of releases in the source Markdown content. It must be the same for all listed repositories. target_heading_level Level of headings that precede descriptions of releases in the target Markdown content of generated history. target_heading_template Template for top-level headings in the target Markdown content. You may use any characters, and the variables: %date% \u2014date, %repo% \u2014repo name, %link% \u2014repo URL, %version% \u2014version data (content of source changelog heading, tag value, or commit hash). date_format Output date format to use in the target Markdown content. If the default value year_first is used, the date \u201cSeptember 4, 2019\u201d will be represented as 2019-09-04 . If the day_first value is used, this date will be represented as 04.09.2019 . limit Maximum number of items to include into the target Markdown content; 0 means no limit. rss Flag that tells the preprocessor to export the history into RSS feed. Note that the parameters target_heading_level , target_heading_template , date_format , and limit are applied to Markdown content only, not to RSS feed content. rss_file Subpath to the file with RSS feed. It\u2019s relative to the temporary working directory during building, to the directory of built project after building, and to the rss_link value in URLs. rss_title RSS channel title. rss_link RSS channel link, e.g. https://foliant-docs.github.io/docs/ . If the rss parameter value is rss.xml , the RSS feed URL will be https://foliant-docs.github.io/docs/rss.xml . rss_description RSS channel description. rss_language RSS channel language. rss_item_title_template Template for titles of RSS feed items. You may use any characters, and the variables: %repo% \u2014repo name, %version% \u2014version data.","title":"Config"},{"location":"preprocessors/history/#usage","text":"To insert some history into Markdown content, use the <history></history> tags: Some optional content here. <history></history> More optional content. If no attributes specified, the values of options from the project config will be used. You may override each config option value with the attribute of the same name. Example: <history repos= \"https://github.com/foliant-docs/foliantcontrib.mkdocs.git\" revision= \"develop\" limit= \"5\" rss= \"true\" rss_file= \"some_another.xml\" ... > </history>","title":"Usage"},{"location":"preprocessors/imagemagick/","text":"ImageMagick \u00b6 This tool provides additional processing of images that referred in Markdown source, with ImageMagick . Installation \u00b6 $ pip install foliantcontrib.imagemagick Config \u00b6 To enable the preprocessor, add imagemagick to preprocessors section in the project config: preprocessors : - imagemagick The preprocessor has a number of options with the following default values: preprocessors : - imagemagick : convert_path : convert cache_dir : .imagemagickcache convert_path Path to convert binary, a part of ImageMagick. cache_dir Directory to store processed images. These files can be reused later. Usage \u00b6 Suppose you want to apply the following command to your picture image.eps : $ convert image.eps -resize 600 -background Orange label: 'Picture' +swap -gravity Center -append image.jpg This command takes the source EPS image image.eps , resizes it, puts a text label over the picture, and writes the result into new file image.jpg . The suffix of output file name specifies that the image must be converted into JPEG format. To use the ImageMagick preprocessor to do the same, enclose one or more image references in your Markdown source between <magick> and </magick> tags. < magick command_params = \"-resize 600 -background Orange label:'Picture' +swap -gravity Center -append\" output_format = \"jpg\" > ( leading exclamation mark here )[ Optional Caption ]( image . eps ) </ magick > Use output_format attribute to specify the suffix of output file name. The whole output file name will be generated automatically. Use command_params attribute to specify the string of parameters that should be passed to ImageMagick convert binary. Instead of using command_params attribute, you may specify each parameter as its own attribute with the same name: < magick resize = \"600\" background = \"Orange label:'Picture' +swap\" gravity = \"Center\" append = \"true\" output_format = \"jpg\" > ( leading exclamation mark here )[ Optional Caption ]( image . eps ) </ magick >","title":"ImageMagick"},{"location":"preprocessors/imagemagick/#imagemagick","text":"This tool provides additional processing of images that referred in Markdown source, with ImageMagick .","title":"ImageMagick"},{"location":"preprocessors/imagemagick/#installation","text":"$ pip install foliantcontrib.imagemagick","title":"Installation"},{"location":"preprocessors/imagemagick/#config","text":"To enable the preprocessor, add imagemagick to preprocessors section in the project config: preprocessors : - imagemagick The preprocessor has a number of options with the following default values: preprocessors : - imagemagick : convert_path : convert cache_dir : .imagemagickcache convert_path Path to convert binary, a part of ImageMagick. cache_dir Directory to store processed images. These files can be reused later.","title":"Config"},{"location":"preprocessors/imagemagick/#usage","text":"Suppose you want to apply the following command to your picture image.eps : $ convert image.eps -resize 600 -background Orange label: 'Picture' +swap -gravity Center -append image.jpg This command takes the source EPS image image.eps , resizes it, puts a text label over the picture, and writes the result into new file image.jpg . The suffix of output file name specifies that the image must be converted into JPEG format. To use the ImageMagick preprocessor to do the same, enclose one or more image references in your Markdown source between <magick> and </magick> tags. < magick command_params = \"-resize 600 -background Orange label:'Picture' +swap -gravity Center -append\" output_format = \"jpg\" > ( leading exclamation mark here )[ Optional Caption ]( image . eps ) </ magick > Use output_format attribute to specify the suffix of output file name. The whole output file name will be generated automatically. Use command_params attribute to specify the string of parameters that should be passed to ImageMagick convert binary. Instead of using command_params attribute, you may specify each parameter as its own attribute with the same name: < magick resize = \"600\" background = \"Orange label:'Picture' +swap\" gravity = \"Center\" append = \"true\" output_format = \"jpg\" > ( leading exclamation mark here )[ Optional Caption ]( image . eps ) </ magick >","title":"Usage"},{"location":"preprocessors/imgcaptions/","text":"ImgCaptions \u00b6 ImgCaptions is a preprocessor that generates visible captions for the images from alternative text descriptions of the images. The preprocessor is useful in projects built with MkDocs or another backend that provides HTML output. Installation \u00b6 $ pip install foliantcontrib.imgcaptions Usage \u00b6 To enable the preprocessor, add imgcaptions to preprocessors section in the project config: preprocessors : - imgcaptions The preprocessor supports the following options: - imgcaptions : stylesheet_path : !path imgcaptions.css template : <p class=\"image_caption\">{caption}</p> targets : - pre - mkdocs - site - ghp stylesheet_path Path to the CSS stylesheet file. This stylesheet should define rules for the .image_caption class. Default path is imgcaptions.css . If stylesheet file does not exist, default built-in stylesheet will be used. template Template string representing the HTML tag of the caption to be placed after the image. The template should contain the {caption} variable that will be replaced with the image caption. Default: <p class=\"image_caption\">{caption}</p> . targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Image definition example: ( leading exclamation mark here )[ My Picture ]( picture . png ) This Markdown source will be finally transformed into the HTML code: < p >< img alt = \"My Picture\" src = \"picture.png\" ></ p > < p class = \"image_caption\" > My Picture </ p > (Note that ImgCaptions preprocessor does not convert Markdown syntax into HTML; it only inserts HTML tags like <p class=\"image_caption\">My Picture</p> into Markdown code after the image definitions. Empty alternative text descriptions are ignored.)","title":"ImgCaptions"},{"location":"preprocessors/imgcaptions/#imgcaptions","text":"ImgCaptions is a preprocessor that generates visible captions for the images from alternative text descriptions of the images. The preprocessor is useful in projects built with MkDocs or another backend that provides HTML output.","title":"ImgCaptions"},{"location":"preprocessors/imgcaptions/#installation","text":"$ pip install foliantcontrib.imgcaptions","title":"Installation"},{"location":"preprocessors/imgcaptions/#usage","text":"To enable the preprocessor, add imgcaptions to preprocessors section in the project config: preprocessors : - imgcaptions The preprocessor supports the following options: - imgcaptions : stylesheet_path : !path imgcaptions.css template : <p class=\"image_caption\">{caption}</p> targets : - pre - mkdocs - site - ghp stylesheet_path Path to the CSS stylesheet file. This stylesheet should define rules for the .image_caption class. Default path is imgcaptions.css . If stylesheet file does not exist, default built-in stylesheet will be used. template Template string representing the HTML tag of the caption to be placed after the image. The template should contain the {caption} variable that will be replaced with the image caption. Default: <p class=\"image_caption\">{caption}</p> . targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Image definition example: ( leading exclamation mark here )[ My Picture ]( picture . png ) This Markdown source will be finally transformed into the HTML code: < p >< img alt = \"My Picture\" src = \"picture.png\" ></ p > < p class = \"image_caption\" > My Picture </ p > (Note that ImgCaptions preprocessor does not convert Markdown syntax into HTML; it only inserts HTML tags like <p class=\"image_caption\">My Picture</p> into Markdown code after the image definitions. Empty alternative text descriptions are ignored.)","title":"Usage"},{"location":"preprocessors/imgconvert/","text":"ImgConvert \u00b6 ImgConvert is a tool to convert images from an arbitrary format into PNG. Installation \u00b6 $ pip install foliantcontrib.imgconvert Config \u00b6 To enable the preprocessor, add imgconvert to preprocessors section in the project config: preprocessors : - imgconvert The preprocessor has a number of options with the following default values: preprocessors : - imgconvert : convert_path : convert cache_dir : !path .imgconvertcache image_width : 0 formats : {} convert_path Path to convert binary. By default, it is assumed that you have this command in PATH . ImageMagick must be installed. cache_dir Directory to store processed images. They may be reused later. image_width Width of PNG images in pixels. By default (in case when the value is 0 ), the width of each image is set by ImageMagick automatically. Default behavior is recommended. If the width is given explicitly, file size may increase. formats Settings that apply to each format of source images. The formats option may be used to define lists of targets for each format. If targets for a format are not specified explicitly, the preprocessor will be applied to all targets. Example: formats : eps : targets : - site svg : targets : - docx Formats should be named in lowercase.","title":"ImgConvert"},{"location":"preprocessors/imgconvert/#imgconvert","text":"ImgConvert is a tool to convert images from an arbitrary format into PNG.","title":"ImgConvert"},{"location":"preprocessors/imgconvert/#installation","text":"$ pip install foliantcontrib.imgconvert","title":"Installation"},{"location":"preprocessors/imgconvert/#config","text":"To enable the preprocessor, add imgconvert to preprocessors section in the project config: preprocessors : - imgconvert The preprocessor has a number of options with the following default values: preprocessors : - imgconvert : convert_path : convert cache_dir : !path .imgconvertcache image_width : 0 formats : {} convert_path Path to convert binary. By default, it is assumed that you have this command in PATH . ImageMagick must be installed. cache_dir Directory to store processed images. They may be reused later. image_width Width of PNG images in pixels. By default (in case when the value is 0 ), the width of each image is set by ImageMagick automatically. Default behavior is recommended. If the width is given explicitly, file size may increase. formats Settings that apply to each format of source images. The formats option may be used to define lists of targets for each format. If targets for a format are not specified explicitly, the preprocessor will be applied to all targets. Example: formats : eps : targets : - site svg : targets : - docx Formats should be named in lowercase.","title":"Config"},{"location":"preprocessors/includes/","text":"Includes \u00b6 Includes preprocessor lets you reuse parts of other documents in your Foliant project sources. It can include from files on your local machine and remote Git repositories. You can include entire documents as well as parts between particular headings, removing or normalizing included headings on the way. Installation \u00b6 $ pip install foliantcontrib.includes Config \u00b6 To enable the preprocessor with default options, add includes to preprocessors section in the project config: preprocessors : - includes The preprocessor has a number of options: preprocessors : - includes : cache_dir : !path .includescache recursive : true aliases : ... cache_dir Path to the directory for cloned Git repositories. It can be a path relative to the project path or a global one; you can use ~/ shortcut. Note To include files from remote repositories, the preprocessor clones them. To save time during build, cloned repositories are stored and reused in future builds. recursive Flag that defines whether includes in included documents should be processed. aliases Mapping from aliases to Git repository URLs. Once defined here, an alias can be used to refer to the repository instead of its full URL. Note Aliases are available only within the legacy syntax of include statements (see below). For example, if you set this alias in the config: - includes: aliases: foo: https://github.com/boo/bar.git baz: https://github.com/foo/far.git#develop you can include the content of doc.md files from these repositories using the following syntax: <include> $foo$path/to/doc.md </include> <include> $baz#master$path/to/doc.md </include> Note that in the second example the default revision ( develop ) will be overridden with the custom one ( master ). Usage \u00b6 The preprocessor allows two syntax variants for include statements. The legacy syntax is simpler and shorter but less flexible. There are no plans to extend it. The new syntax introduced in version 1.1.0 is stricter and more flexible. It is more suitable for complex cases, and it can be easily extended in the future. This is the preferred syntax. Both variants of syntax use the <include>...</include> tags. If the included file is specified between the tags, it\u2019s the legacy syntax. If the file is referenced in the tag attributes ( src , repo_url , path ), it\u2019s the new one. The New Syntax \u00b6 To enforce using the new syntax rules, put no content between <include>...</include> tags, and specify a local file or a file in a remote Git repository in tag attributes. To include a local file, use the src attribute: Text below is taken from another document. <include src= \"path/to/another/document.md\" ></include> To include a file from a remote Git repository, use the repo_url and path attributes: Text below is taken from a remote repository. <include repo_url= \"https://github.com/foo/bar.git\" path= \"path/to/doc.md\" ></include> You have to specify the full remote repository URL in the repo_url attribute, aliases are not supported here. Optional branch or revision can be specified in the revision attribute: Text below is taken from a remote repository on branch develop. <include repo_url= \"https://github.com/foo/bar.git\" revision= \"develop\" path= \"path/to/doc.md\" ></include> Attributes \u00b6 src Path to the local file to include. repo_url Full remote Git repository URL without a revision. path Path to the file inside the remote Git repository. Note If you are using the new syntax, the src attribute is required to include a local file, and the repo_url and path attributes are required to include a file from a remote Git repository. All other attributes are optional. Note Foliant 1.0.9 supports the processing of attribute values as YAML. You can precede the values of attributes by the !path , !project_path , and !rel_path modifiers (i.e. YAML tags). These modifiers can be useful in the src , path , and project_root attributes. revision Revision of the Git repository. from_heading Full content of the starting heading when it\u2019s necessary to include some part of the referenced file content. to_heading Full content of the ending heading when it\u2019s necessary to include some part of the referenced file content. from_id ID of the starting heading or starting anchor when it\u2019s necessary to include some part of the referenced file content. The from_id attribute has higher priority than from_heading . to_id ID of the ending heading or ending anchor when it\u2019s necessary to include some part of the referenced file content. The to_id attribute has higher priority than to_heading . to_end Flag that tells the preprocessor to cut to the end of the included content. Otherwise, if from_heading or from_id is specified, the preprocessor cuts the included content to the next heading of the same level as the starting heading, or the heading that precedes the starting anchor. Example: ## Some Heading {#custom_id} <anchor> one_more_custom_id </anchor> Here Some Heading {#custom_id} is the full content of the heading, custom_id is its ID, and one_more_custom_id is the ID of the anchor. Optional Attributes Supported in Both Syntax Variants \u00b6 sethead The level of the topmost heading in the included content. Use it to guarantee that the included text does not break the parent document\u2019s heading order: # Title ## Subtitle <include src= \"other.md\" sethead= \"3\" ></include> nohead Flag that tells the preprocessor to strip the starting heading from the included content: # My Custom Heading <include src= \"other.md\" from_heading= \"Original Heading\" nohead= \"true\" ></include> Default is false . By default, the starting heading is included to the output, and the ending heading is not. Starting and ending anchors are never included into the output. inline Flag that tells the preprocessor to replace sequences of whitespace characters of many kinds (including \\r , \\n , and \\t ) with single spaces ( ) in the included content, and then to strip leading and trailing spaces. It may be useful in single-line table cells. Default value is false . project_root Path to the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to. This option may be needed to resolve the !path and !project_path modifiers in the included content properly. Note By default, if a local file is included, project_root points to the top-level directory of the current Foliant project, and if a file in a remote Git repository is referenced, project_root points to the top-level directory of this repository. In most cases you don\u2019t need to override the default behavior. Different options can be combined. For example, use both sethead and nohead if you want to include a section with a custom heading: ## My Custom Heading <include src= \"other.md\" from_heading= \"Original Heading\" sethead= \"1\" nohead= \"true\" ></include> The Legacy Syntax \u00b6 This syntax was the only supported in the preprocessor up to version 1.0.11. It\u2019s weird and cryptic, you had to memorize strange rules about $ , # and stuff. The new syntax described above is much cleaner. The legacy syntax is kept for backward compatibility. To use it, put the reference to the included file between <include>...</include> tags. Local path example: Text below is taken from another document. <include> path/to/another/document.md </include> The path may be either relative to currently processed Markdown file or absolute. To include a document from a remote Git repository, put its URL between $ s before the document path: Text below is taken from a remote repository. <include> $https://github.com/foo/bar.git$path/to/doc.md </include> If the repository alias is defined in the project config, you can use it instead of the URL: - includes : aliases : foo : https://github.com/foo/bar.git And then in the source: <include> $foo$path/to/doc.md </include> You can also specify a particular branch or revision: Text below is taken from a remote repository on branch develop. <include> $foo#develop$path/to/doc.md </include> To include a part of a document between two headings, use the #Start:Finish syntax after the file path: Include content from \u201cIntro\u201d up to \u201cCredits\u201d: <include> sample.md#Intro:Credits </include> Include content from start up to \u201cCredits\u201d: <include> sample.md#:Credits </include> Include content from \u201cIntro\u201d up to the next heading of the same level: <include> sample.md#Intro </include> In the legacy syntax, problems may occur with the use of $ , # , and : characters in filenames and headings, since these characters may be interpreted as delimeters.","title":"Includes"},{"location":"preprocessors/includes/#includes","text":"Includes preprocessor lets you reuse parts of other documents in your Foliant project sources. It can include from files on your local machine and remote Git repositories. You can include entire documents as well as parts between particular headings, removing or normalizing included headings on the way.","title":"Includes"},{"location":"preprocessors/includes/#installation","text":"$ pip install foliantcontrib.includes","title":"Installation"},{"location":"preprocessors/includes/#config","text":"To enable the preprocessor with default options, add includes to preprocessors section in the project config: preprocessors : - includes The preprocessor has a number of options: preprocessors : - includes : cache_dir : !path .includescache recursive : true aliases : ... cache_dir Path to the directory for cloned Git repositories. It can be a path relative to the project path or a global one; you can use ~/ shortcut. Note To include files from remote repositories, the preprocessor clones them. To save time during build, cloned repositories are stored and reused in future builds. recursive Flag that defines whether includes in included documents should be processed. aliases Mapping from aliases to Git repository URLs. Once defined here, an alias can be used to refer to the repository instead of its full URL. Note Aliases are available only within the legacy syntax of include statements (see below). For example, if you set this alias in the config: - includes: aliases: foo: https://github.com/boo/bar.git baz: https://github.com/foo/far.git#develop you can include the content of doc.md files from these repositories using the following syntax: <include> $foo$path/to/doc.md </include> <include> $baz#master$path/to/doc.md </include> Note that in the second example the default revision ( develop ) will be overridden with the custom one ( master ).","title":"Config"},{"location":"preprocessors/includes/#usage","text":"The preprocessor allows two syntax variants for include statements. The legacy syntax is simpler and shorter but less flexible. There are no plans to extend it. The new syntax introduced in version 1.1.0 is stricter and more flexible. It is more suitable for complex cases, and it can be easily extended in the future. This is the preferred syntax. Both variants of syntax use the <include>...</include> tags. If the included file is specified between the tags, it\u2019s the legacy syntax. If the file is referenced in the tag attributes ( src , repo_url , path ), it\u2019s the new one.","title":"Usage"},{"location":"preprocessors/includes/#the-new-syntax","text":"To enforce using the new syntax rules, put no content between <include>...</include> tags, and specify a local file or a file in a remote Git repository in tag attributes. To include a local file, use the src attribute: Text below is taken from another document. <include src= \"path/to/another/document.md\" ></include> To include a file from a remote Git repository, use the repo_url and path attributes: Text below is taken from a remote repository. <include repo_url= \"https://github.com/foo/bar.git\" path= \"path/to/doc.md\" ></include> You have to specify the full remote repository URL in the repo_url attribute, aliases are not supported here. Optional branch or revision can be specified in the revision attribute: Text below is taken from a remote repository on branch develop. <include repo_url= \"https://github.com/foo/bar.git\" revision= \"develop\" path= \"path/to/doc.md\" ></include>","title":"The New Syntax"},{"location":"preprocessors/includes/#attributes","text":"src Path to the local file to include. repo_url Full remote Git repository URL without a revision. path Path to the file inside the remote Git repository. Note If you are using the new syntax, the src attribute is required to include a local file, and the repo_url and path attributes are required to include a file from a remote Git repository. All other attributes are optional. Note Foliant 1.0.9 supports the processing of attribute values as YAML. You can precede the values of attributes by the !path , !project_path , and !rel_path modifiers (i.e. YAML tags). These modifiers can be useful in the src , path , and project_root attributes. revision Revision of the Git repository. from_heading Full content of the starting heading when it\u2019s necessary to include some part of the referenced file content. to_heading Full content of the ending heading when it\u2019s necessary to include some part of the referenced file content. from_id ID of the starting heading or starting anchor when it\u2019s necessary to include some part of the referenced file content. The from_id attribute has higher priority than from_heading . to_id ID of the ending heading or ending anchor when it\u2019s necessary to include some part of the referenced file content. The to_id attribute has higher priority than to_heading . to_end Flag that tells the preprocessor to cut to the end of the included content. Otherwise, if from_heading or from_id is specified, the preprocessor cuts the included content to the next heading of the same level as the starting heading, or the heading that precedes the starting anchor. Example: ## Some Heading {#custom_id} <anchor> one_more_custom_id </anchor> Here Some Heading {#custom_id} is the full content of the heading, custom_id is its ID, and one_more_custom_id is the ID of the anchor.","title":"Attributes"},{"location":"preprocessors/includes/#optional-attributes-supported-in-both-syntax-variants","text":"sethead The level of the topmost heading in the included content. Use it to guarantee that the included text does not break the parent document\u2019s heading order: # Title ## Subtitle <include src= \"other.md\" sethead= \"3\" ></include> nohead Flag that tells the preprocessor to strip the starting heading from the included content: # My Custom Heading <include src= \"other.md\" from_heading= \"Original Heading\" nohead= \"true\" ></include> Default is false . By default, the starting heading is included to the output, and the ending heading is not. Starting and ending anchors are never included into the output. inline Flag that tells the preprocessor to replace sequences of whitespace characters of many kinds (including \\r , \\n , and \\t ) with single spaces ( ) in the included content, and then to strip leading and trailing spaces. It may be useful in single-line table cells. Default value is false . project_root Path to the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to. This option may be needed to resolve the !path and !project_path modifiers in the included content properly. Note By default, if a local file is included, project_root points to the top-level directory of the current Foliant project, and if a file in a remote Git repository is referenced, project_root points to the top-level directory of this repository. In most cases you don\u2019t need to override the default behavior. Different options can be combined. For example, use both sethead and nohead if you want to include a section with a custom heading: ## My Custom Heading <include src= \"other.md\" from_heading= \"Original Heading\" sethead= \"1\" nohead= \"true\" ></include>","title":"Optional Attributes Supported in Both Syntax Variants"},{"location":"preprocessors/includes/#the-legacy-syntax","text":"This syntax was the only supported in the preprocessor up to version 1.0.11. It\u2019s weird and cryptic, you had to memorize strange rules about $ , # and stuff. The new syntax described above is much cleaner. The legacy syntax is kept for backward compatibility. To use it, put the reference to the included file between <include>...</include> tags. Local path example: Text below is taken from another document. <include> path/to/another/document.md </include> The path may be either relative to currently processed Markdown file or absolute. To include a document from a remote Git repository, put its URL between $ s before the document path: Text below is taken from a remote repository. <include> $https://github.com/foo/bar.git$path/to/doc.md </include> If the repository alias is defined in the project config, you can use it instead of the URL: - includes : aliases : foo : https://github.com/foo/bar.git And then in the source: <include> $foo$path/to/doc.md </include> You can also specify a particular branch or revision: Text below is taken from a remote repository on branch develop. <include> $foo#develop$path/to/doc.md </include> To include a part of a document between two headings, use the #Start:Finish syntax after the file path: Include content from \u201cIntro\u201d up to \u201cCredits\u201d: <include> sample.md#Intro:Credits </include> Include content from start up to \u201cCredits\u201d: <include> sample.md#:Credits </include> Include content from \u201cIntro\u201d up to the next heading of the same level: <include> sample.md#Intro </include> In the legacy syntax, problems may occur with the use of $ , # , and : characters in filenames and headings, since these characters may be interpreted as delimeters.","title":"The Legacy Syntax"},{"location":"preprocessors/macros/","text":"Macros \u00b6 Macro is a string with placeholders that is replaced with predefined content during documentation build. Macros are defined in the config. Installation \u00b6 $ pip install foliantcontrib.macros Config \u00b6 Enable the preprocessor by adding it to preprocessors and listing your macros in macros dictionary: preprocessors : - macros : macros : foo : This is a macro definition. bar : \"This is macro with a parameter: {0}\" Usage \u00b6 Here's the simplest usecase for macros: preprocessors : - macros : macros : support_number : \"8 800 123-45-67\" Now, every time you need to insert your support phone number, you put a macro instead: Call you support team: <macro> support_number </macro> . Here's the number again: <m> support_number </m> . Macros are useful in documentation that should be built into multiple targets, e.g. site and pdf, when the same thing is done differently in one target than in the other. For example, to reference a page in MkDocs, you just put the Markdown file in the link: Here is [ another page ]( another_page . md ). But when building documents with Pandoc all sources are flattened into a single Markdown, so you refer to different parts of the document by anchor links: Here is [ another page ]( # another_page ). This can be implemented using <if></if> tag: Here is [ another page ]( < if backends = \"pandoc\" > # another_page </ if >< if backends = \"mkdocs\" > another_page . md </ if > ). This bulky construct quickly gets old when you use many cross-references in your documentation. To make your sources cleaner, move this construct to the config as a reusable macro: preprocessors : - macros : macros : ref : <if backends=\"pandoc\">{0}</if><if backends=\"mkdocs\">{1}</if> And use it in the source: Here is [ another page ]( < macro params = \"#another_page, another_page.md\" > ref </ macro > ).","title":"Macros"},{"location":"preprocessors/macros/#macros","text":"Macro is a string with placeholders that is replaced with predefined content during documentation build. Macros are defined in the config.","title":"Macros"},{"location":"preprocessors/macros/#installation","text":"$ pip install foliantcontrib.macros","title":"Installation"},{"location":"preprocessors/macros/#config","text":"Enable the preprocessor by adding it to preprocessors and listing your macros in macros dictionary: preprocessors : - macros : macros : foo : This is a macro definition. bar : \"This is macro with a parameter: {0}\"","title":"Config"},{"location":"preprocessors/macros/#usage","text":"Here's the simplest usecase for macros: preprocessors : - macros : macros : support_number : \"8 800 123-45-67\" Now, every time you need to insert your support phone number, you put a macro instead: Call you support team: <macro> support_number </macro> . Here's the number again: <m> support_number </m> . Macros are useful in documentation that should be built into multiple targets, e.g. site and pdf, when the same thing is done differently in one target than in the other. For example, to reference a page in MkDocs, you just put the Markdown file in the link: Here is [ another page ]( another_page . md ). But when building documents with Pandoc all sources are flattened into a single Markdown, so you refer to different parts of the document by anchor links: Here is [ another page ]( # another_page ). This can be implemented using <if></if> tag: Here is [ another page ]( < if backends = \"pandoc\" > # another_page </ if >< if backends = \"mkdocs\" > another_page . md </ if > ). This bulky construct quickly gets old when you use many cross-references in your documentation. To make your sources cleaner, move this construct to the config as a reusable macro: preprocessors : - macros : macros : ref : <if backends=\"pandoc\">{0}</if><if backends=\"mkdocs\">{1}</if> And use it in the source: Here is [ another page ]( < macro params = \"#another_page, another_page.md\" > ref </ macro > ).","title":"Usage"},{"location":"preprocessors/mermaid/","text":"Mermaid \u00b6 Mermaid Diagrams Preprocessor for Foliant \u00b6 Mermaid is an open source diagram visualization tool. This preprocessor converts Mermaid diagram definitions in your Markdown files into images on the fly during project build. Installation \u00b6 $ pip install foliantcontrib.mermaid Please note that to use this preprocessor you will also need to install Mermaid and Mermaid CLI: $ npm install mermaid # installs locally $ npm install mermaid.cli Config \u00b6 To enable the preprocessor, add mermaid to preprocessors section in the project config: preprocessors : - mermaid The preprocessor has a number of options: preprocessors : - mermaid : cache_dir : !path .diagramscache mermaid_path : !path node_modules/.bin/mmdc format : svg params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. mermaid_path Path to Mermaid CLI binary. If you installed Mermaid locally this parameter is required. Default: mmdc . format Generated image format. Available: svg , png , pdf . Default svg . params Params passed to the image generation command: preprocessors: - mermaid: params: theme: forest To see the full list of available params, run mmdc -h or check here . Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <mermaid>...</mermaid> tags: Here\u2019s a diagram: <mermaid> graph TD; A-->B; </mermaid> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: <mermaid caption= \"Deployment diagram\" params= \"theme: dark\" > </mermaid> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Mermaid"},{"location":"preprocessors/mermaid/#mermaid","text":"","title":"Mermaid"},{"location":"preprocessors/mermaid/#mermaid-diagrams-preprocessor-for-foliant","text":"Mermaid is an open source diagram visualization tool. This preprocessor converts Mermaid diagram definitions in your Markdown files into images on the fly during project build.","title":"Mermaid Diagrams Preprocessor for Foliant"},{"location":"preprocessors/mermaid/#installation","text":"$ pip install foliantcontrib.mermaid Please note that to use this preprocessor you will also need to install Mermaid and Mermaid CLI: $ npm install mermaid # installs locally $ npm install mermaid.cli","title":"Installation"},{"location":"preprocessors/mermaid/#config","text":"To enable the preprocessor, add mermaid to preprocessors section in the project config: preprocessors : - mermaid The preprocessor has a number of options: preprocessors : - mermaid : cache_dir : !path .diagramscache mermaid_path : !path node_modules/.bin/mmdc format : svg params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. mermaid_path Path to Mermaid CLI binary. If you installed Mermaid locally this parameter is required. Default: mmdc . format Generated image format. Available: svg , png , pdf . Default svg . params Params passed to the image generation command: preprocessors: - mermaid: params: theme: forest To see the full list of available params, run mmdc -h or check here .","title":"Config"},{"location":"preprocessors/mermaid/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <mermaid>...</mermaid> tags: Here\u2019s a diagram: <mermaid> graph TD; A-->B; </mermaid> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: <mermaid caption= \"Deployment diagram\" params= \"theme: dark\" > </mermaid> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Usage"},{"location":"preprocessors/metagraph/","text":"MetaGraph \u00b6 MetaGraph preprocessor for Foliant \u00b6 Preprocessor generates Graphviz diagrams of meta sections in the project. Installation \u00b6 $ pip install foliantcontrib.metagraph Config \u00b6 preprocessors : - metagraph : natural : false directed : false draw_all : false natural if true \u2014 the graph is generated based on \"natural\" section structure: main sections are connected to the inner sections, which are connected to their child sections and so on. If false \u2014 the connections are deretmined by the relates meta section of each chapter. Default: false directed If true \u2014 draws a directed graph (with arrows). Default: false draw_all If true \u2014 draws all sections, except those which have meta field draw: false . If false \u2014 draws only sections which have meta field draw: true . Default: false Usage \u00b6 First set up a few meta sections: ## First title Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nesciunt, atque. ### Subtitle Then add a metagraph tag somewhere in the project: < metagraph ></ metagraph >","title":"MetaGraph"},{"location":"preprocessors/metagraph/#metagraph","text":"","title":"MetaGraph"},{"location":"preprocessors/metagraph/#metagraph-preprocessor-for-foliant","text":"Preprocessor generates Graphviz diagrams of meta sections in the project.","title":"MetaGraph preprocessor for Foliant"},{"location":"preprocessors/metagraph/#installation","text":"$ pip install foliantcontrib.metagraph","title":"Installation"},{"location":"preprocessors/metagraph/#config","text":"preprocessors : - metagraph : natural : false directed : false draw_all : false natural if true \u2014 the graph is generated based on \"natural\" section structure: main sections are connected to the inner sections, which are connected to their child sections and so on. If false \u2014 the connections are deretmined by the relates meta section of each chapter. Default: false directed If true \u2014 draws a directed graph (with arrows). Default: false draw_all If true \u2014 draws all sections, except those which have meta field draw: false . If false \u2014 draws only sections which have meta field draw: true . Default: false","title":"Config"},{"location":"preprocessors/metagraph/#usage","text":"First set up a few meta sections: ## First title Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nesciunt, atque. ### Subtitle Then add a metagraph tag somewhere in the project: < metagraph ></ metagraph >","title":"Usage"},{"location":"preprocessors/multilinetables/","text":"MultilineTables \u00b6 This preprocessor converts tables to multiline and grid format before creating document (very useful especially for pandoc processing). It helps to make tables in doc and pdf formats more proportional \u2014 column with more text in it will be more wide. Also it helps whith processing of extremely wide tables with pandoc. Convertation to the grid format allows arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.). Installation \u00b6 $ pip install foliantcontrib.multilinetables Config \u00b6 To enable the preprocessor with default options, add multilinetables to preprocessors section in the project config: preprocessors : - multilinetables The preprocessor has a number of options (best values set by default): preprocessors : - multilinetables : rewrite_src_files : false min_table_width : 100 keep_narrow_tables : true table_columns_to_scale : 3 enable_hyphenation : false hyph_combination : '<br>' convert_to_grid : false targets : - docx - pdf rewrite_src_file You can update source files after each use of preprocessor. Be careful, previous data will be deleted. min_table_width Wide markdown tables will be shrinked to this width in symbols. This parameter affects scaling - change it if table columns are merging. keep_narrow_tables If true narrow tables will not be stretched to minimum table width. table_columns_to_scale Minimum amount of columns to process the table. enable_hyphenation Switch breaking text in table cells with the tag set in hyph_combination . Good for lists, paragraphs, etc. hyph_combination Custom tag to break a text in multiline tables. convert_to_grid If true tables will be converted to the grid format, that allows arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.). targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Usage \u00b6 Just add preprocessor to the project config and enjoy the result.","title":"MultilineTables"},{"location":"preprocessors/multilinetables/#multilinetables","text":"This preprocessor converts tables to multiline and grid format before creating document (very useful especially for pandoc processing). It helps to make tables in doc and pdf formats more proportional \u2014 column with more text in it will be more wide. Also it helps whith processing of extremely wide tables with pandoc. Convertation to the grid format allows arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.).","title":"MultilineTables"},{"location":"preprocessors/multilinetables/#installation","text":"$ pip install foliantcontrib.multilinetables","title":"Installation"},{"location":"preprocessors/multilinetables/#config","text":"To enable the preprocessor with default options, add multilinetables to preprocessors section in the project config: preprocessors : - multilinetables The preprocessor has a number of options (best values set by default): preprocessors : - multilinetables : rewrite_src_files : false min_table_width : 100 keep_narrow_tables : true table_columns_to_scale : 3 enable_hyphenation : false hyph_combination : '<br>' convert_to_grid : false targets : - docx - pdf rewrite_src_file You can update source files after each use of preprocessor. Be careful, previous data will be deleted. min_table_width Wide markdown tables will be shrinked to this width in symbols. This parameter affects scaling - change it if table columns are merging. keep_narrow_tables If true narrow tables will not be stretched to minimum table width. table_columns_to_scale Minimum amount of columns to process the table. enable_hyphenation Switch breaking text in table cells with the tag set in hyph_combination . Good for lists, paragraphs, etc. hyph_combination Custom tag to break a text in multiline tables. convert_to_grid If true tables will be converted to the grid format, that allows arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.). targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Config"},{"location":"preprocessors/multilinetables/#usage","text":"Just add preprocessor to the project config and enjoy the result.","title":"Usage"},{"location":"preprocessors/pgsqldoc/","text":"Pgsqldoc \u00b6 This preprocessor generates simple documentation of a PostgreSQL database based on its structure. It uses Jinja2 templating engine for customizing the layout and PlantUML for drawing the database scheme. Installation \u00b6 $ pip install foliantcontrib.pgsqldoc Config \u00b6 To enable the preprocessor, add pgsqldoc to preprocessors section in the project config: preprocessors : - pgsqldoc The preprocessor has a number of options: preprocessors : - pgsqldoc : host : localhost port : 5432 dbname : postgres user : postgres password : '' draw : false filters : ... doc_template : pgsqldoc.j2 scheme_template : scheme.j2 host PostgreSQL database host address. Default: localhost port PostgreSQL database port. Default: 5432 dbname PostgreSQL database name. Default: postgres user PostgreSQL user name. Default: postgres passwrod PostgreSQL user password. draw If this parameter is true \u2014 preprocessor would generate scheme of the database and add it to the end of the document. Default: false filters SQL-like operators for filtering the results. More info in the Filters section. doc_template Path to jinja-template for documentation. Path is relative to the project directory. Default: pgsqldoc.j2 scheme_template Path to jinja-template for scheme. Path is relative to the project directory. Default: scheme.j2 Usage \u00b6 Add a <pgsqldoc></pgsqldoc> tag at the position in the document where the generated documentation of a PostgreSQL database should be inserted: ## Introduction This document contains the most awesome automatically generated documentation of our marvellous database. <pgsqldoc></pgsqldoc> Each time the preprocessor encounters the tag <pgsqldoc></pgsqldoc> it inserts the whole generated documentation text instead of it. The connection parameters are taken from the config-file. You can also specify some parameters (or all of them) in the tag options: ## Introduction Introduction text for database documentation. <pgsqldoc draw= \"true\" host= \"11.51.126.8\" port= \"5432\" dbname= \"mydb\" user= \"scott\" password= \"tiger\" > </pgsqldoc> Tag parameters have the highest priority. This way you can have documentation for several different databases in one foliant project (even in one md-file if you like it so). Filters \u00b6 You can add filters to exclude some tables from the documentation. Pgsqldocs supports several SQL-like filtering operators and a determined list of filtering fields. You can switch on filters either in foliant.yml file like this: preprocessors : - pgsqldoc : filters : eq : schema : public regex : table_name : 'main_.+' or in tag options using the same yaml-syntax: <pgsqldoc filters= \" eq: schema: public regex: table_name: 'main_.+'\" > </pgsqldoc> List of currently supported operators: operator SQL equivalent description value eq = equals literal not_eq != does not equal literal in IN contains list not_in NOT IN does not contain list regex ~ matches regular expression literal not_regex !~ does not match regular expression literal List of currently supported filtering fields: field description schema filter by PostgreSQL database schema table_name filter by database table names The syntax for using filters in configuration files is following: filters : <operator> : <field> : value If value should be list like for in operator, use YAML-lists instead: filters : in : schema : - public - corp About Templates \u00b6 The structure of generated documentation is defined by jinja-templates. You can choose what elements will appear in the documentation, change their positions, add constant text, change layouts and more. Check the Jinja documentation for info on all cool things you can do with templates. If you don't specify path to templates in the config-file and tag-options pgsqldoc will use default paths: <Project_path>/pgsqldoc.j2 for documentation template; <Project_path>/scheme.j2 for database scheme source template. If pgsqldoc can't find these templates in the project dir it will generate default templates and put them there. So if you accidentally mess things up while experimenting with templates you can always delete your templates and run preprocessor \u2014 the default ones will appear in the project dir. (But only if the templates are not specified in config-file or their names are the same as defaults). One more useful thing about default templates is that you can find a detailed description of the source data they get from pgsqldoc in the beginning of the template.","title":"Pgsqldoc"},{"location":"preprocessors/pgsqldoc/#pgsqldoc","text":"This preprocessor generates simple documentation of a PostgreSQL database based on its structure. It uses Jinja2 templating engine for customizing the layout and PlantUML for drawing the database scheme.","title":"Pgsqldoc"},{"location":"preprocessors/pgsqldoc/#installation","text":"$ pip install foliantcontrib.pgsqldoc","title":"Installation"},{"location":"preprocessors/pgsqldoc/#config","text":"To enable the preprocessor, add pgsqldoc to preprocessors section in the project config: preprocessors : - pgsqldoc The preprocessor has a number of options: preprocessors : - pgsqldoc : host : localhost port : 5432 dbname : postgres user : postgres password : '' draw : false filters : ... doc_template : pgsqldoc.j2 scheme_template : scheme.j2 host PostgreSQL database host address. Default: localhost port PostgreSQL database port. Default: 5432 dbname PostgreSQL database name. Default: postgres user PostgreSQL user name. Default: postgres passwrod PostgreSQL user password. draw If this parameter is true \u2014 preprocessor would generate scheme of the database and add it to the end of the document. Default: false filters SQL-like operators for filtering the results. More info in the Filters section. doc_template Path to jinja-template for documentation. Path is relative to the project directory. Default: pgsqldoc.j2 scheme_template Path to jinja-template for scheme. Path is relative to the project directory. Default: scheme.j2","title":"Config"},{"location":"preprocessors/pgsqldoc/#usage","text":"Add a <pgsqldoc></pgsqldoc> tag at the position in the document where the generated documentation of a PostgreSQL database should be inserted: ## Introduction This document contains the most awesome automatically generated documentation of our marvellous database. <pgsqldoc></pgsqldoc> Each time the preprocessor encounters the tag <pgsqldoc></pgsqldoc> it inserts the whole generated documentation text instead of it. The connection parameters are taken from the config-file. You can also specify some parameters (or all of them) in the tag options: ## Introduction Introduction text for database documentation. <pgsqldoc draw= \"true\" host= \"11.51.126.8\" port= \"5432\" dbname= \"mydb\" user= \"scott\" password= \"tiger\" > </pgsqldoc> Tag parameters have the highest priority. This way you can have documentation for several different databases in one foliant project (even in one md-file if you like it so).","title":"Usage"},{"location":"preprocessors/pgsqldoc/#filters","text":"You can add filters to exclude some tables from the documentation. Pgsqldocs supports several SQL-like filtering operators and a determined list of filtering fields. You can switch on filters either in foliant.yml file like this: preprocessors : - pgsqldoc : filters : eq : schema : public regex : table_name : 'main_.+' or in tag options using the same yaml-syntax: <pgsqldoc filters= \" eq: schema: public regex: table_name: 'main_.+'\" > </pgsqldoc> List of currently supported operators: operator SQL equivalent description value eq = equals literal not_eq != does not equal literal in IN contains list not_in NOT IN does not contain list regex ~ matches regular expression literal not_regex !~ does not match regular expression literal List of currently supported filtering fields: field description schema filter by PostgreSQL database schema table_name filter by database table names The syntax for using filters in configuration files is following: filters : <operator> : <field> : value If value should be list like for in operator, use YAML-lists instead: filters : in : schema : - public - corp","title":"Filters"},{"location":"preprocessors/pgsqldoc/#about-templates","text":"The structure of generated documentation is defined by jinja-templates. You can choose what elements will appear in the documentation, change their positions, add constant text, change layouts and more. Check the Jinja documentation for info on all cool things you can do with templates. If you don't specify path to templates in the config-file and tag-options pgsqldoc will use default paths: <Project_path>/pgsqldoc.j2 for documentation template; <Project_path>/scheme.j2 for database scheme source template. If pgsqldoc can't find these templates in the project dir it will generate default templates and put them there. So if you accidentally mess things up while experimenting with templates you can always delete your templates and run preprocessor \u2014 the default ones will appear in the project dir. (But only if the templates are not specified in config-file or their names are the same as defaults). One more useful thing about default templates is that you can find a detailed description of the source data they get from pgsqldoc in the beginning of the template.","title":"About Templates"},{"location":"preprocessors/plantuml/","text":"Plantuml \u00b6 PlantUML is a tool to generate diagrams from plain text. This preprocessor finds PlantUML diagrams definitions in the source and converts them into images on the fly during project build. Installation \u00b6 $ pip install foliantcontrib.plantuml Config \u00b6 To enable the preprocessor, add plantuml to preprocessors section in the project config: preprocessors : - plantuml The preprocessor has a number of options: preprocessors : - plantuml : cache_dir : !path .diagramscache plantuml_path : plantuml params : ... parse_raw : true cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. Note To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. plantuml_path Path to PlantUML launcher. By default, it is assumed that you have the command plantuml in your PATH , but if PlantUML uses another command to launch, or if the plantuml launcher is installed in a custom place, you can define it here. params Params passed to the image generation command: preprocessors: - plantuml: params: config: !path plantuml.cfg To see the full list of params, run the command that launches PlantUML, with -h command line option. parse_raw If this flag is true , the preprocessor will also process all PlantUML diagrams which are not wrapped in <plantuml>...</plantuml> tags. Default value is false . Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <plantuml>...</plantuml> tags (indentation inside tags is optional): Here \u2019 s a diagram : < plantuml > @ startuml ... @ enduml </ plantuml > To set a caption, use caption option: Diagram with a caption : < plantuml caption = \"Sample diagram from the official site\" > @ startuml ... @ enduml </ plantuml > You can override params values from the preprocessor config for each diagram. Also you can use format alias for -t* params: By default , diagrams are in PNG . But this diagram is in EPS : < plantuml caption = \"Vector diagram\" format = \"eps\" > @ startuml ... @ enduml </ plantuml > Sometimes it can be necessary to process auto-generated documents that contain multiple PlantUML diagrams definitions without using Foliant-specific tags syntax. Use the parse_raw option in these cases.","title":"Plantuml"},{"location":"preprocessors/plantuml/#plantuml","text":"PlantUML is a tool to generate diagrams from plain text. This preprocessor finds PlantUML diagrams definitions in the source and converts them into images on the fly during project build.","title":"Plantuml"},{"location":"preprocessors/plantuml/#installation","text":"$ pip install foliantcontrib.plantuml","title":"Installation"},{"location":"preprocessors/plantuml/#config","text":"To enable the preprocessor, add plantuml to preprocessors section in the project config: preprocessors : - plantuml The preprocessor has a number of options: preprocessors : - plantuml : cache_dir : !path .diagramscache plantuml_path : plantuml params : ... parse_raw : true cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. Note To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. plantuml_path Path to PlantUML launcher. By default, it is assumed that you have the command plantuml in your PATH , but if PlantUML uses another command to launch, or if the plantuml launcher is installed in a custom place, you can define it here. params Params passed to the image generation command: preprocessors: - plantuml: params: config: !path plantuml.cfg To see the full list of params, run the command that launches PlantUML, with -h command line option. parse_raw If this flag is true , the preprocessor will also process all PlantUML diagrams which are not wrapped in <plantuml>...</plantuml> tags. Default value is false .","title":"Config"},{"location":"preprocessors/plantuml/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <plantuml>...</plantuml> tags (indentation inside tags is optional): Here \u2019 s a diagram : < plantuml > @ startuml ... @ enduml </ plantuml > To set a caption, use caption option: Diagram with a caption : < plantuml caption = \"Sample diagram from the official site\" > @ startuml ... @ enduml </ plantuml > You can override params values from the preprocessor config for each diagram. Also you can use format alias for -t* params: By default , diagrams are in PNG . But this diagram is in EPS : < plantuml caption = \"Vector diagram\" format = \"eps\" > @ startuml ... @ enduml </ plantuml > Sometimes it can be necessary to process auto-generated documents that contain multiple PlantUML diagrams definitions without using Foliant-specific tags syntax. Use the parse_raw option in these cases.","title":"Usage"},{"location":"preprocessors/ramldoc/","text":"RAMLDoc \u00b6 RAML API Docs Generator for Foliant \u00b6 This preprocessor generates Markdown documentation from RAML spec files. It uses raml2html converter with raml2html-full-markdown-theme . raml2html uses Nunjucks templating system. Installation \u00b6 First install raml2html and the markdown theme: $ npm install -g raml2html raml2html-full-markdown-theme Then install the preprocessor: $ pip install foliantcontrib.ramldoc Config \u00b6 To enable the preprocessor, add ramldoc to preprocessors section in the project config: preprocessors : - ramldoc The preprocessor has a number of options: preprocessors : - ramldoc : spec_url : http://localhost/my_api.raml spec_path : !path my_api.raml template_dir : !path custom_templates raml2html_path : raml2html spec_url URL to RAML spec file. If it is a list \u2014 preprocessor picks the first working URL. spec_path Local path to RAML spec file. If both URL and path are specified \u2014 preprocessor first tries to fetch spec from URL, and then (if that fails) looks for the file on local path. template_dir Path to directory with Nunjucks templates. If not specified \u2014 default template is used. The main template in the directory must have a name root.nunjucks . raml2html_path Path to raml2html binary. Default: raml2html Usage \u00b6 Add a <ramldoc></ramldoc> tag at the position in the document where the generated documentation should be inserted: ## Introduction This document contains the automatically generated documentation of our API. <ramldoc></ramldoc> Each time the preprocessor encounters the tag <ramldoc></ramldoc> it inserts the whole generated documentation text instead of it. The path or url to RAML spec file are taken from foliant.yml. You can also specify some parameters (or all of them) in the tag options: ## Introduction Introduction text for API documentation. <ramldoc spec_url= \"http://localhost/my_api.raml\" template_dir= \"assets/templates\" > </ramldoc> Tag parameters have the highest priority. This way you can have documentation from several different RAML spec files in one Foliant project (even in one md-file if you like it so). Customizing output \u00b6 The output markdown is generated by raml2html converter, which uses Nunjucks templating engine (with syntax similar to Jinja2 . If you want to create your own template or modify the default one, specify the template_dir parameter. The main template file in template dir must be named root.nunjucks . You may use the default template as your starting point.","title":"RAMLDoc"},{"location":"preprocessors/ramldoc/#ramldoc","text":"","title":"RAMLDoc"},{"location":"preprocessors/ramldoc/#raml-api-docs-generator-for-foliant","text":"This preprocessor generates Markdown documentation from RAML spec files. It uses raml2html converter with raml2html-full-markdown-theme . raml2html uses Nunjucks templating system.","title":"RAML API Docs Generator for Foliant"},{"location":"preprocessors/ramldoc/#installation","text":"First install raml2html and the markdown theme: $ npm install -g raml2html raml2html-full-markdown-theme Then install the preprocessor: $ pip install foliantcontrib.ramldoc","title":"Installation"},{"location":"preprocessors/ramldoc/#config","text":"To enable the preprocessor, add ramldoc to preprocessors section in the project config: preprocessors : - ramldoc The preprocessor has a number of options: preprocessors : - ramldoc : spec_url : http://localhost/my_api.raml spec_path : !path my_api.raml template_dir : !path custom_templates raml2html_path : raml2html spec_url URL to RAML spec file. If it is a list \u2014 preprocessor picks the first working URL. spec_path Local path to RAML spec file. If both URL and path are specified \u2014 preprocessor first tries to fetch spec from URL, and then (if that fails) looks for the file on local path. template_dir Path to directory with Nunjucks templates. If not specified \u2014 default template is used. The main template in the directory must have a name root.nunjucks . raml2html_path Path to raml2html binary. Default: raml2html","title":"Config"},{"location":"preprocessors/ramldoc/#usage","text":"Add a <ramldoc></ramldoc> tag at the position in the document where the generated documentation should be inserted: ## Introduction This document contains the automatically generated documentation of our API. <ramldoc></ramldoc> Each time the preprocessor encounters the tag <ramldoc></ramldoc> it inserts the whole generated documentation text instead of it. The path or url to RAML spec file are taken from foliant.yml. You can also specify some parameters (or all of them) in the tag options: ## Introduction Introduction text for API documentation. <ramldoc spec_url= \"http://localhost/my_api.raml\" template_dir= \"assets/templates\" > </ramldoc> Tag parameters have the highest priority. This way you can have documentation from several different RAML spec files in one Foliant project (even in one md-file if you like it so).","title":"Usage"},{"location":"preprocessors/ramldoc/#customizing-output","text":"The output markdown is generated by raml2html converter, which uses Nunjucks templating engine (with syntax similar to Jinja2 . If you want to create your own template or modify the default one, specify the template_dir parameter. The main template file in template dir must be named root.nunjucks . You may use the default template as your starting point.","title":"Customizing output"},{"location":"preprocessors/replace/","text":"Replace \u00b6 Replace preprocessor reads the dictionary (yaml format) placed in foliant project folder and changes one word to another in created document. Installation \u00b6 $ pip install foliantcontrib.replace Config \u00b6 To enable the preprocessor, add replace to preprocessors section in the project config: preprocessors : - replace The preprocessor has two options (default values stated): preprocessors : - replace : dictionary_filename : replace_dictionary.yml with_confirmation : false dictionary_filename File in foliant project folder with dictionary in it ( replace_dictionary.yml by default). with_confirmation if true you will be prompted to confirm any changes. Dictionary format \u00b6 Dictionary stores data in yaml format. It has two sections \u2014 with words and with regular expressions. You can pass the lambda function in regexs section. For example: words : cod : CoD epg : EPG vod : VoD regexs : '!\\w*!' : '' '\\. *(\\w)' : 'lambda x: x.group(0).upper()' Usage \u00b6 Just add the preprocessor to the project config, set the dictionary and enjoy the result.","title":"Replace"},{"location":"preprocessors/replace/#replace","text":"Replace preprocessor reads the dictionary (yaml format) placed in foliant project folder and changes one word to another in created document.","title":"Replace"},{"location":"preprocessors/replace/#installation","text":"$ pip install foliantcontrib.replace","title":"Installation"},{"location":"preprocessors/replace/#config","text":"To enable the preprocessor, add replace to preprocessors section in the project config: preprocessors : - replace The preprocessor has two options (default values stated): preprocessors : - replace : dictionary_filename : replace_dictionary.yml with_confirmation : false dictionary_filename File in foliant project folder with dictionary in it ( replace_dictionary.yml by default). with_confirmation if true you will be prompted to confirm any changes.","title":"Config"},{"location":"preprocessors/replace/#dictionary-format","text":"Dictionary stores data in yaml format. It has two sections \u2014 with words and with regular expressions. You can pass the lambda function in regexs section. For example: words : cod : CoD epg : EPG vod : VoD regexs : '!\\w*!' : '' '\\. *(\\w)' : 'lambda x: x.group(0).upper()'","title":"Dictionary format"},{"location":"preprocessors/replace/#usage","text":"Just add the preprocessor to the project config, set the dictionary and enjoy the result.","title":"Usage"},{"location":"preprocessors/repolink/","text":"RepoLink \u00b6 This preprocessor allows to add into each Markdown source a hyperlink to the related file in Git repository. Applying of the preprocessor to subprojects allows to get links to separate repositories from different pages of a single site (e.g. generated with MkDocs). By default, the preprocessor emulates MkDocs behavior. The preprocessor generates HTML hyperlink with specific attributes and inserts the link after the first heading of the document. The default behavior may be overridden. The preprocessor supports the same options repo_url and edit_uri as MkDocs. Installation \u00b6 RepoLink preprocessor is a part of MultiProject extension: $ pip install foliantcontrib.multiproject Usage \u00b6 To enable the preprocessor, add repolink to preprocessors section in the project config: preprocessors : - repolink The preprocessor has a number of options: preprocessors : - repolink : repo_url : https://github.com/foliant-docs/docs/ edit_uri : /blob/master/src/ link_type : html link_location : after_first_heading link_text : \"&#xE3C9;\" link_title : View the source file link_html_attributes : \"class=\\\"md-icon md-content__icon\\\" style=\\\"margin: -7.5rem 0\\\"\" targets : - pre repo_url URL of the related repository. Default value is an empty string; in this case the preprocessor does not apply. Trailing slashes do not affect. edit_uri Revision-dependent part of URL of each file in the repository. Default value is /blob/master/src/ . Leading and trailing slashes do not affect. link_type Link type: HTML ( html ) or Markdown ( markdown ). Default value is html . link_location Place in the document to put the hyperlink. By default, the hyperlink is placed after the first heading, and newlines are added before and after it ( after_first_heading ). Other values: before_content \u2014the hyperlink is placed before the content of the document, the newline after it is provided; after_content \u2014the hyperlink is placed after the content of the document, the newline before it is added; defined_by_tag \u2014the tags <repo_link></repo_link> that are met in the content of the document are replaced with the hyperlink. link_text Hyperlink text. Default value is Edit this page . link_title Hyperlink title (the value of title HTML attribute). Default value is also Edit this page . This option takes effect only when link_type is set to html . link_html_attributes Additional HTML attributes for the hyperlink. By using CSS in combination with class attribute, and/or style attribute, you may customize the presentation of your hyperlinks. Default value is an empty string. This option takes effect only when link_type is set to html . targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. You may override the value of the edit_uri config option with the FOLIANT_REPOLINK_EDIT_URI system environment variable. It can be useful in some non-stable testing or staging environments.","title":"RepoLink"},{"location":"preprocessors/repolink/#repolink","text":"This preprocessor allows to add into each Markdown source a hyperlink to the related file in Git repository. Applying of the preprocessor to subprojects allows to get links to separate repositories from different pages of a single site (e.g. generated with MkDocs). By default, the preprocessor emulates MkDocs behavior. The preprocessor generates HTML hyperlink with specific attributes and inserts the link after the first heading of the document. The default behavior may be overridden. The preprocessor supports the same options repo_url and edit_uri as MkDocs.","title":"RepoLink"},{"location":"preprocessors/repolink/#installation","text":"RepoLink preprocessor is a part of MultiProject extension: $ pip install foliantcontrib.multiproject","title":"Installation"},{"location":"preprocessors/repolink/#usage","text":"To enable the preprocessor, add repolink to preprocessors section in the project config: preprocessors : - repolink The preprocessor has a number of options: preprocessors : - repolink : repo_url : https://github.com/foliant-docs/docs/ edit_uri : /blob/master/src/ link_type : html link_location : after_first_heading link_text : \"&#xE3C9;\" link_title : View the source file link_html_attributes : \"class=\\\"md-icon md-content__icon\\\" style=\\\"margin: -7.5rem 0\\\"\" targets : - pre repo_url URL of the related repository. Default value is an empty string; in this case the preprocessor does not apply. Trailing slashes do not affect. edit_uri Revision-dependent part of URL of each file in the repository. Default value is /blob/master/src/ . Leading and trailing slashes do not affect. link_type Link type: HTML ( html ) or Markdown ( markdown ). Default value is html . link_location Place in the document to put the hyperlink. By default, the hyperlink is placed after the first heading, and newlines are added before and after it ( after_first_heading ). Other values: before_content \u2014the hyperlink is placed before the content of the document, the newline after it is provided; after_content \u2014the hyperlink is placed after the content of the document, the newline before it is added; defined_by_tag \u2014the tags <repo_link></repo_link> that are met in the content of the document are replaced with the hyperlink. link_text Hyperlink text. Default value is Edit this page . link_title Hyperlink title (the value of title HTML attribute). Default value is also Edit this page . This option takes effect only when link_type is set to html . link_html_attributes Additional HTML attributes for the hyperlink. By using CSS in combination with class attribute, and/or style attribute, you may customize the presentation of your hyperlinks. Default value is an empty string. This option takes effect only when link_type is set to html . targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. You may override the value of the edit_uri config option with the FOLIANT_REPOLINK_EDIT_URI system environment variable. It can be useful in some non-stable testing or staging environments.","title":"Usage"},{"location":"preprocessors/runcommands/","text":"RunCommands \u00b6 RunCommands is a preprocessor that allows to execute a sequence of arbitrary external commands. Installation \u00b6 $ pip install foliantcontrib.runcommands Usage \u00b6 To enable the preprocessor, add runcommands to preprocessors section in the project config, and specify the commands to run: preprocessors : - runcommands : commands : - ./build.sh - echo \"Hello World\" > ${WORKING_DIR}/hello.txt targets : - pre - tex - pdf - docx commands Sequence of system commands to execute one after the other. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Supported environment variables \u00b6 You may use the following environment variables in your commands: ${PROJECT_DIR} \u2014 full path to the project directory, e.g. /usr/src/app ; ${SRC_DIR} \u2014 full path to the directory that contains Markdown sources, e.g. /usr/src/app/src ; ${WORKING_DIR} \u2014 full path to the temporary directory that is used by preprocessors, e.g. /usr/src/app/__folianttmp__ ; ${BACKEND} \u2014 currently used backend, e.g. pre , pandoc , or mkdocs ; ${TARGET} \u2014 current target, e.g. site , or pdf .","title":"RunCommands"},{"location":"preprocessors/runcommands/#runcommands","text":"RunCommands is a preprocessor that allows to execute a sequence of arbitrary external commands.","title":"RunCommands"},{"location":"preprocessors/runcommands/#installation","text":"$ pip install foliantcontrib.runcommands","title":"Installation"},{"location":"preprocessors/runcommands/#usage","text":"To enable the preprocessor, add runcommands to preprocessors section in the project config, and specify the commands to run: preprocessors : - runcommands : commands : - ./build.sh - echo \"Hello World\" > ${WORKING_DIR}/hello.txt targets : - pre - tex - pdf - docx commands Sequence of system commands to execute one after the other. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Usage"},{"location":"preprocessors/runcommands/#supported-environment-variables","text":"You may use the following environment variables in your commands: ${PROJECT_DIR} \u2014 full path to the project directory, e.g. /usr/src/app ; ${SRC_DIR} \u2014 full path to the directory that contains Markdown sources, e.g. /usr/src/app/src ; ${WORKING_DIR} \u2014 full path to the temporary directory that is used by preprocessors, e.g. /usr/src/app/__folianttmp__ ; ${BACKEND} \u2014 currently used backend, e.g. pre , pandoc , or mkdocs ; ${TARGET} \u2014 current target, e.g. site , or pdf .","title":"Supported environment variables"},{"location":"preprocessors/showcommits/","text":"ShowCommits \u00b6 ShowCommits is a preprocessor that appends the history of Git commits corresponding to the current processed file to its content. Installation \u00b6 $ pip install foliantcontrib.showcommits Config \u00b6 To enable the preprocessor, add showcommits to preprocessors section in the project config: preprocessors : - showcommits The preprocessor has a number of options with the following default values: preprocessors : - showcommits : repo_path : !rel_path ./ # Path object that points to the current Foliant project\u2019s top-level (\u201croot\u201d) directory when the preprocessor initializes remote_name : origin self-hosted : gitlab protocol : https position : after_content date_format : year_first template : | ## File History {{startcommits}} Commit: [{{hash}}]({{url}}), author: [{{author}}]({{email}}), date: {{date}} {{message}} ```diff {{diff}} ``` {{endcommits}} targets : [] repo_path Path to the locally cloned copy of the Git repository that the current Foliant project\u2019s files belong to. remote_name Identifier of remote repository; in most cases you don\u2019t need to override the default value. self-hosted String that defines the rules of commit\u2019s web URL anchor generation when a self-hosted Git repositories management system with web interface is used. Supported values are: github for GitHub, gitlab for GitLab, and bitbucket for BitBucket. If the repo fetch URL hostname is github.com , gitlab.com , or bitbucket.org , the corresponding rules are applied automatically. protocol Web interface URL prefix of a repos management system. Supported values are https and http . position String that defines where the history of commits should be placed. Supported values are: after_content for concatenating the history with the currently processed Markdown file content, and defined_by_tag for replacing the tags <commits></commits> with the history. date_format Output date format. If the default value year_first is used, the date \u201cDecember 11, 2019\u201d will be represented as 2019-12-11 . If the day_first value is used, this date will be represented as 11.12.2019 . template Template to render the history of commits. If the value is a string that contains one or more newlines ( \\n ) or double opening curly braces ( {{ ), it is interpreted as a template itself. If the value is a string without newlines and any double opening curly braces, or a Path object, it is interpreted as a path to the file that contains a template. Template syntax is described below. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Usage \u00b6 You may override the default template to customize the commits history formatting and rendering. Feel free to use Markdown syntax, HTML, CSS, and JavaScript in your custom templates. In templates, a number of placeholders is supported. {{startcommits}} Beginning of the list of commits that is rendered within a loop. Before this placeholder, you may use some common stuff like an introducing heading or a stylesheet. {{endcommits}} End of the list of commits. After this placeholder, you also may use some common stuff like a paragraph of text or a script. The following placeholders affect only between the {{startcommits}} and {{endcommits}} . {{hash}} First 8 digits of the commit hash, e.g. deadc0de . {{url}} Web URL of commit with an anchor that points to the certain file, e.g. https://github.com/foliant-docs/foliant/commit/67138f7c#diff-478b1f78b2146021bce46fbf833eb636 . If you don\u2019t use a repos management system with web interface, you don\u2019t need this placeholder. {{author}} Author name, e.g. Artemy Lomov . {{email}} Author email, e.g. artemy@lomov.ru . {{date}} Formatted date, e.g. 2019-12-11 . {{message}} Commit message, e.g. Bump version to 1.0.1. . {{diff}} Diff between the currently processed Markdown file at a certain commit and the same file at the previous state.","title":"ShowCommits"},{"location":"preprocessors/showcommits/#showcommits","text":"ShowCommits is a preprocessor that appends the history of Git commits corresponding to the current processed file to its content.","title":"ShowCommits"},{"location":"preprocessors/showcommits/#installation","text":"$ pip install foliantcontrib.showcommits","title":"Installation"},{"location":"preprocessors/showcommits/#config","text":"To enable the preprocessor, add showcommits to preprocessors section in the project config: preprocessors : - showcommits The preprocessor has a number of options with the following default values: preprocessors : - showcommits : repo_path : !rel_path ./ # Path object that points to the current Foliant project\u2019s top-level (\u201croot\u201d) directory when the preprocessor initializes remote_name : origin self-hosted : gitlab protocol : https position : after_content date_format : year_first template : | ## File History {{startcommits}} Commit: [{{hash}}]({{url}}), author: [{{author}}]({{email}}), date: {{date}} {{message}} ```diff {{diff}} ``` {{endcommits}} targets : [] repo_path Path to the locally cloned copy of the Git repository that the current Foliant project\u2019s files belong to. remote_name Identifier of remote repository; in most cases you don\u2019t need to override the default value. self-hosted String that defines the rules of commit\u2019s web URL anchor generation when a self-hosted Git repositories management system with web interface is used. Supported values are: github for GitHub, gitlab for GitLab, and bitbucket for BitBucket. If the repo fetch URL hostname is github.com , gitlab.com , or bitbucket.org , the corresponding rules are applied automatically. protocol Web interface URL prefix of a repos management system. Supported values are https and http . position String that defines where the history of commits should be placed. Supported values are: after_content for concatenating the history with the currently processed Markdown file content, and defined_by_tag for replacing the tags <commits></commits> with the history. date_format Output date format. If the default value year_first is used, the date \u201cDecember 11, 2019\u201d will be represented as 2019-12-11 . If the day_first value is used, this date will be represented as 11.12.2019 . template Template to render the history of commits. If the value is a string that contains one or more newlines ( \\n ) or double opening curly braces ( {{ ), it is interpreted as a template itself. If the value is a string without newlines and any double opening curly braces, or a Path object, it is interpreted as a path to the file that contains a template. Template syntax is described below. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Config"},{"location":"preprocessors/showcommits/#usage","text":"You may override the default template to customize the commits history formatting and rendering. Feel free to use Markdown syntax, HTML, CSS, and JavaScript in your custom templates. In templates, a number of placeholders is supported. {{startcommits}} Beginning of the list of commits that is rendered within a loop. Before this placeholder, you may use some common stuff like an introducing heading or a stylesheet. {{endcommits}} End of the list of commits. After this placeholder, you also may use some common stuff like a paragraph of text or a script. The following placeholders affect only between the {{startcommits}} and {{endcommits}} . {{hash}} First 8 digits of the commit hash, e.g. deadc0de . {{url}} Web URL of commit with an anchor that points to the certain file, e.g. https://github.com/foliant-docs/foliant/commit/67138f7c#diff-478b1f78b2146021bce46fbf833eb636 . If you don\u2019t use a repos management system with web interface, you don\u2019t need this placeholder. {{author}} Author name, e.g. Artemy Lomov . {{email}} Author email, e.g. artemy@lomov.ru . {{date}} Formatted date, e.g. 2019-12-11 . {{message}} Commit message, e.g. Bump version to 1.0.1. . {{diff}} Diff between the currently processed Markdown file at a certain commit and the same file at the previous state.","title":"Usage"},{"location":"preprocessors/superlinks/","text":"SuperLinks \u00b6 SuperLinks for Foliant \u00b6 This preprocessor extends the functionality of Markdown links, allowing you to reference by the heading title, file name or meta id. It works correctly with most backends, resolving to proper links, depending on which backend is being used. It adds the <link> tag. The Problem \u00b6 The problem with Markdown links is that you have to specify the correct anchor and file path right away. Let's imagine that you want to create a link to a heading which is defined in another chapter. If you are building a single-page PDF with Pandoc, you will only need to specify the anchor, which Pandoc generates from that title. But if you are building an MkDocs website, you will need to specify the relative filename to the referenced chapter, and the anchor, which MkDocs generates from the titles. By the way, Pandoc and MkDocs generate anchors differently. So there's no way to make it work for all backends by using just Markdown link syntax. Superlinks aim to solve this problem. Installation \u00b6 Install the preprocessor: $ pip install foliantcontrib.superlinks Config \u00b6 To enable the preprocessor, add superlink to preprocessors section in the project config. preprocessors : - superlinks The preprocessor has no config options just now. But it has some important tag options. Usage \u00b6 To add a link, use a link tag with a combination of following parameters: title Heading title, which you want to create a link to. src Relative path to a chapter which is being referenced. meta_id ID of the meta section which is being referenced. (if title is used, then this title MUST be inside this meta section) anchor Name of the anchor defined by Anchors preprocessor or an ID defined by CustomIDs preprocessor. If src or meta is not provided \u2014 the id will be searched globally. id Just a hardcoded id. No magic here. Examples \u00b6 Reference a title in the same document < link title = \"My title\" > Link caption </ link > Reference a title in another chapter < link src = \"subfolder/another_chapter.md\" title = \"Another title\" > Link caption </ link > Reference the beginning of another chapter < link src = \"subfolder/another_chapter.md\" > Link caption </ link > Reference a title inside meta section < link meta_id = \"SECTION1\" title = \"Title in section1\" > Link caption </ link > Reference the beginning of meta section < link meta_id = \"SECTION1\" > Link caption </ link > Reference an anchor and search for it globally < link anchor = \"my_anchor\" > Link caption </ link > Reference an anchor and search for it in specific chapter < link src = \"subfolder/another_chapter.md\" anchor = \"my_anchor\" > Link caption </ link > Supported Backends: \u00b6 Backend Support aglio \u2705 YES pandoc \u2705 YES mdtopdf \u2705 YES mkdocs \u2705 YES slate \u2705 YES confluence \u274c NOt yet","title":"SuperLinks"},{"location":"preprocessors/superlinks/#superlinks","text":"","title":"SuperLinks"},{"location":"preprocessors/superlinks/#superlinks-for-foliant","text":"This preprocessor extends the functionality of Markdown links, allowing you to reference by the heading title, file name or meta id. It works correctly with most backends, resolving to proper links, depending on which backend is being used. It adds the <link> tag.","title":"SuperLinks for Foliant"},{"location":"preprocessors/superlinks/#the-problem","text":"The problem with Markdown links is that you have to specify the correct anchor and file path right away. Let's imagine that you want to create a link to a heading which is defined in another chapter. If you are building a single-page PDF with Pandoc, you will only need to specify the anchor, which Pandoc generates from that title. But if you are building an MkDocs website, you will need to specify the relative filename to the referenced chapter, and the anchor, which MkDocs generates from the titles. By the way, Pandoc and MkDocs generate anchors differently. So there's no way to make it work for all backends by using just Markdown link syntax. Superlinks aim to solve this problem.","title":"The Problem"},{"location":"preprocessors/superlinks/#installation","text":"Install the preprocessor: $ pip install foliantcontrib.superlinks","title":"Installation"},{"location":"preprocessors/superlinks/#config","text":"To enable the preprocessor, add superlink to preprocessors section in the project config. preprocessors : - superlinks The preprocessor has no config options just now. But it has some important tag options.","title":"Config"},{"location":"preprocessors/superlinks/#usage","text":"To add a link, use a link tag with a combination of following parameters: title Heading title, which you want to create a link to. src Relative path to a chapter which is being referenced. meta_id ID of the meta section which is being referenced. (if title is used, then this title MUST be inside this meta section) anchor Name of the anchor defined by Anchors preprocessor or an ID defined by CustomIDs preprocessor. If src or meta is not provided \u2014 the id will be searched globally. id Just a hardcoded id. No magic here.","title":"Usage"},{"location":"preprocessors/superlinks/#examples","text":"Reference a title in the same document < link title = \"My title\" > Link caption </ link > Reference a title in another chapter < link src = \"subfolder/another_chapter.md\" title = \"Another title\" > Link caption </ link > Reference the beginning of another chapter < link src = \"subfolder/another_chapter.md\" > Link caption </ link > Reference a title inside meta section < link meta_id = \"SECTION1\" title = \"Title in section1\" > Link caption </ link > Reference the beginning of meta section < link meta_id = \"SECTION1\" > Link caption </ link > Reference an anchor and search for it globally < link anchor = \"my_anchor\" > Link caption </ link > Reference an anchor and search for it in specific chapter < link src = \"subfolder/another_chapter.md\" anchor = \"my_anchor\" > Link caption </ link >","title":"Examples"},{"location":"preprocessors/superlinks/#supported-backends","text":"Backend Support aglio \u2705 YES pandoc \u2705 YES mdtopdf \u2705 YES mkdocs \u2705 YES slate \u2705 YES confluence \u274c NOt yet","title":"Supported Backends:"},{"location":"preprocessors/swaggerdoc/","text":"SwaggerDoc \u00b6 Swagger API Docs Generator for Foliant \u00b6 This preprocessor generates Markdown documentation from Swagger spec files . It uses Jinja2 templating engine or widdershins for generating Markdown from swagger spec files. Installation \u00b6 $ pip install foliantcontrib.swaggerdoc Config \u00b6 To enable the preprocessor, add pgsqldoc to preprocessors section in the project config: preprocessors : - swaggerdoc The preprocessor has a number of options: preprocessors : - swaggerdoc : json_url : http://localhost/swagger.json json_path : swagger.json additional_json_path : tags.json mode : 'jinja' template : swagger.j2 environment : env.yaml json_url URL to Swagger spec file. If it is a list \u2014 preprocessor takes the first url which works. even though the parameters are called json _url and json _path, yaml format is supported too. Parameters may be softly renamed in future. json_path Local path to Swagger spec file (relative to project dir). If both url and path are specified \u2014 preprocessor first tries to fetch JSON from url, and then (if that fails) looks for the file on local path. additional_json_path Only for jinja mode. Local path to swagger spec file with additional info (relative to project dir). It will be merged into original spec file, not overriding existing fields . mode Determines how the Swagger spec file would be converted to markdown. Should be one of: jinja , widdershins . Default: widdershins jinja mode is deprecated. It may be removed in future template Only for jinja mode. Path to jinja-template for rendering the generated documentation. Path is relative to the project directory. If no template is specified preprocessor will use default template (and put it into project dir if it was missing). Default: swagger.j2 environment Only for widdershins mode. Parameters for widdershins converter. You can either pass a string containing relative path to YAML or JSON file with all parameters (like in example above) or specify all parameters in YAML format under this key. More info on widdershins parameters. Usage \u00b6 Add a <swaggerdoc></swaggerdoc> tag at the position in the document where the generated documentation should be inserted: ## Introduction This document contains the automatically generated documentation of our API. <swaggerdoc></swaggerdoc> Each time the preprocessor encounters the tag <swaggerdoc></swaggerdoc> it inserts the whole generated documentation text instead of it. The path or url to Swagger spec file are taken from foliant.yml. You can also specify some parameters (or all of them) in the tag options: ## Introduction Introduction text for API documentation. <swaggerdoc json_url= \"http://localhost/swagger.json\" mode= \"jinja\" template= \"swagger.j2\" > </swaggerdoc> <swaggerdoc json_url= \"http://localhost/swagger.json\" mode= \"widdershins\" environment= \"env.yml\" > </swaggerdoc> Tag parameters have the highest priority. This way you can have documentation from several different Swagger spec files in one foliant project (even in one md-file if you like it so). Customizing output \u00b6 Jinja \u00b6 jinja mode is deprecated. It may be removed in future In jinja mode the output markdown is generated by the Jinja2 template. In this template all fields from Swagger spec file are available under the dictionary named swagger_data . To customize the output create a template which suits your needs. Then supply the path to it in the template parameter. If you wish to use the default template as a starting point, build the foliant project with swaggerdoc preprocessor turned on. After the first build the default template will appear in your foliant project dir under name swagger.j2 . Widdershins \u00b6 In widdershins mode the output markdown is generated by widdershins Node.js application. It supports customizing the output with doT.js templates. Clone the original widdershins repository and modify the templates located in one of the subfolders in the templates folder. Save the modified templates somewhere near your foliant project. Specify the path to modified templates in the user_templates field of the environment configuration. For example, like this: preprocessors : - swaggerdoc : json_path : swagger.yml environment : user_templates : !path ./widdershins_templates/","title":"SwaggerDoc"},{"location":"preprocessors/swaggerdoc/#swaggerdoc","text":"","title":"SwaggerDoc"},{"location":"preprocessors/swaggerdoc/#swagger-api-docs-generator-for-foliant","text":"This preprocessor generates Markdown documentation from Swagger spec files . It uses Jinja2 templating engine or widdershins for generating Markdown from swagger spec files.","title":"Swagger API Docs Generator for Foliant"},{"location":"preprocessors/swaggerdoc/#installation","text":"$ pip install foliantcontrib.swaggerdoc","title":"Installation"},{"location":"preprocessors/swaggerdoc/#config","text":"To enable the preprocessor, add pgsqldoc to preprocessors section in the project config: preprocessors : - swaggerdoc The preprocessor has a number of options: preprocessors : - swaggerdoc : json_url : http://localhost/swagger.json json_path : swagger.json additional_json_path : tags.json mode : 'jinja' template : swagger.j2 environment : env.yaml json_url URL to Swagger spec file. If it is a list \u2014 preprocessor takes the first url which works. even though the parameters are called json _url and json _path, yaml format is supported too. Parameters may be softly renamed in future. json_path Local path to Swagger spec file (relative to project dir). If both url and path are specified \u2014 preprocessor first tries to fetch JSON from url, and then (if that fails) looks for the file on local path. additional_json_path Only for jinja mode. Local path to swagger spec file with additional info (relative to project dir). It will be merged into original spec file, not overriding existing fields . mode Determines how the Swagger spec file would be converted to markdown. Should be one of: jinja , widdershins . Default: widdershins jinja mode is deprecated. It may be removed in future template Only for jinja mode. Path to jinja-template for rendering the generated documentation. Path is relative to the project directory. If no template is specified preprocessor will use default template (and put it into project dir if it was missing). Default: swagger.j2 environment Only for widdershins mode. Parameters for widdershins converter. You can either pass a string containing relative path to YAML or JSON file with all parameters (like in example above) or specify all parameters in YAML format under this key. More info on widdershins parameters.","title":"Config"},{"location":"preprocessors/swaggerdoc/#usage","text":"Add a <swaggerdoc></swaggerdoc> tag at the position in the document where the generated documentation should be inserted: ## Introduction This document contains the automatically generated documentation of our API. <swaggerdoc></swaggerdoc> Each time the preprocessor encounters the tag <swaggerdoc></swaggerdoc> it inserts the whole generated documentation text instead of it. The path or url to Swagger spec file are taken from foliant.yml. You can also specify some parameters (or all of them) in the tag options: ## Introduction Introduction text for API documentation. <swaggerdoc json_url= \"http://localhost/swagger.json\" mode= \"jinja\" template= \"swagger.j2\" > </swaggerdoc> <swaggerdoc json_url= \"http://localhost/swagger.json\" mode= \"widdershins\" environment= \"env.yml\" > </swaggerdoc> Tag parameters have the highest priority. This way you can have documentation from several different Swagger spec files in one foliant project (even in one md-file if you like it so).","title":"Usage"},{"location":"preprocessors/swaggerdoc/#customizing-output","text":"","title":"Customizing output"},{"location":"preprocessors/swaggerdoc/#jinja","text":"jinja mode is deprecated. It may be removed in future In jinja mode the output markdown is generated by the Jinja2 template. In this template all fields from Swagger spec file are available under the dictionary named swagger_data . To customize the output create a template which suits your needs. Then supply the path to it in the template parameter. If you wish to use the default template as a starting point, build the foliant project with swaggerdoc preprocessor turned on. After the first build the default template will appear in your foliant project dir under name swagger.j2 .","title":"Jinja"},{"location":"preprocessors/swaggerdoc/#widdershins","text":"In widdershins mode the output markdown is generated by widdershins Node.js application. It supports customizing the output with doT.js templates. Clone the original widdershins repository and modify the templates located in one of the subfolders in the templates folder. Save the modified templates somewhere near your foliant project. Specify the path to modified templates in the user_templates field of the environment configuration. For example, like this: preprocessors : - swaggerdoc : json_path : swagger.yml environment : user_templates : !path ./widdershins_templates/","title":"Widdershins"},{"location":"preprocessors/templateparser/","text":"TemplateParser \u00b6 TemplateParser preprocessor for Foliant \u00b6 Preprocessor which allows to use templates in Foliant source files. Preprocessor now supports only Jinja2 templating engine, but more can be added easily. Installation \u00b6 $ pip install foliantcontrib.templateparser Config \u00b6 All params that are stated in foliant.yml are considered global params. All of them may be overriden in template tag options, which have higher priority. preprocessors : - templateparser : engine : jinja2 engine_params : root : '/usr/src/app' context : param1 : 1008 param2 : 'Kittens' ext_context : context.yml param3 : 'Puppies' engine name of the template engine which will be used to process template. Supported engines right now: jinja2 . engine_params dictionary with parameters which will be transfered to the template engine. context dictionary with variables which will be redirected to the template. ext_context path to YAML- or JSON-file with context dictionary. (relative to current md-file) All parameters with other names are also transfered to the template, as if they appeared inside the context dictionary. ( param3 in the above example) Please note that even if this may seem convenient, it is preferred to include template variables in the context dictionary, as in future more reserved parameters may be added which may conflict with your stray variables. If some variable names overlap among these methods to supply context, preprocessor uses this priority order: Context dictionary. Stray variables. External context file. Usage \u00b6 To use the template in a Markdown file just insert a tag of the template engine name, for example: This is ordinary markdown text. < jinja2 > This is a Jinja2 template: I can count to five! {% for i in range(5) %}{{ i + 1 }}{% endfor %} </ jinja2 > After making a document with Foliant this will be transformed to: This is ordinary markdown text . This is a Jinja2 template : I can count to five ! 12345 You can also use a general <template> tag, but in this case you have to specify the engine you want to use in the engine parameter: This is ordinary markdown text. < template engine = \"jinja2\" > This is a Jinja2 template: I can count to five! {% for i in range(5) %}{{ i + 1 }}{% endfor %} </ template > Integration with metadata \u00b6 Templates support latest Foliant metadata functionality. You can find the meta dictionary for current section under meta variable inside template: < jinja2 > Document status: {{ meta.status }} The document \"{{ meta.title }}\" is brought to you by {{ meta.author }} </ jinja2 > Result: Document status: ready The document \"Custom Title\" is brought to you by John You can also find the whole project's Meta object under meta_object variable inside template: < jinja2 > List of chapters in this project: {% for chapter in meta_object.chapters %} * {{ chapter.name }} {%- endfor %} </ jinja2 > Result: List of chapters in this project: * index * sub * auth Sending variables to template \u00b6 To send a variable to template, add them into the context option. This option accepts yaml dictionary format. Please note that foliant doesn't support multiline tag options yet, so use one-line dictionary format {'key1': value1, ...} < jinja2 context = \"{'name': Andy, 'age': 8}\" > Hi, my name is {{name}}! I am {{age}} years old. {% for prev in range(age - 1, 0, -1) %} The year before I was {{prev}} years old. {% endfor %} </ jinja2 > Result: Hi , my name is Andy ! I am 8 years old . The year before I was 7 years old . The year before I was 6 years old . The year before I was 5 years old . The year before I was 4 years old . The year before I was 3 years old . The year before I was 2 years old . The year before I was 1 years old . Extends and includes \u00b6 Extends and includes work in templates. The path of the extending\\included file is relative to the Markdown file where the template lives. In Jinja2 engine you can override the path of the included\\extended files with root engine_param. Note that this param is relative to project root.","title":"TemplateParser"},{"location":"preprocessors/templateparser/#templateparser","text":"","title":"TemplateParser"},{"location":"preprocessors/templateparser/#templateparser-preprocessor-for-foliant","text":"Preprocessor which allows to use templates in Foliant source files. Preprocessor now supports only Jinja2 templating engine, but more can be added easily.","title":"TemplateParser preprocessor for Foliant"},{"location":"preprocessors/templateparser/#installation","text":"$ pip install foliantcontrib.templateparser","title":"Installation"},{"location":"preprocessors/templateparser/#config","text":"All params that are stated in foliant.yml are considered global params. All of them may be overriden in template tag options, which have higher priority. preprocessors : - templateparser : engine : jinja2 engine_params : root : '/usr/src/app' context : param1 : 1008 param2 : 'Kittens' ext_context : context.yml param3 : 'Puppies' engine name of the template engine which will be used to process template. Supported engines right now: jinja2 . engine_params dictionary with parameters which will be transfered to the template engine. context dictionary with variables which will be redirected to the template. ext_context path to YAML- or JSON-file with context dictionary. (relative to current md-file) All parameters with other names are also transfered to the template, as if they appeared inside the context dictionary. ( param3 in the above example) Please note that even if this may seem convenient, it is preferred to include template variables in the context dictionary, as in future more reserved parameters may be added which may conflict with your stray variables. If some variable names overlap among these methods to supply context, preprocessor uses this priority order: Context dictionary. Stray variables. External context file.","title":"Config"},{"location":"preprocessors/templateparser/#usage","text":"To use the template in a Markdown file just insert a tag of the template engine name, for example: This is ordinary markdown text. < jinja2 > This is a Jinja2 template: I can count to five! {% for i in range(5) %}{{ i + 1 }}{% endfor %} </ jinja2 > After making a document with Foliant this will be transformed to: This is ordinary markdown text . This is a Jinja2 template : I can count to five ! 12345 You can also use a general <template> tag, but in this case you have to specify the engine you want to use in the engine parameter: This is ordinary markdown text. < template engine = \"jinja2\" > This is a Jinja2 template: I can count to five! {% for i in range(5) %}{{ i + 1 }}{% endfor %} </ template >","title":"Usage"},{"location":"preprocessors/templateparser/#integration-with-metadata","text":"Templates support latest Foliant metadata functionality. You can find the meta dictionary for current section under meta variable inside template: < jinja2 > Document status: {{ meta.status }} The document \"{{ meta.title }}\" is brought to you by {{ meta.author }} </ jinja2 > Result: Document status: ready The document \"Custom Title\" is brought to you by John You can also find the whole project's Meta object under meta_object variable inside template: < jinja2 > List of chapters in this project: {% for chapter in meta_object.chapters %} * {{ chapter.name }} {%- endfor %} </ jinja2 > Result: List of chapters in this project: * index * sub * auth","title":"Integration with metadata"},{"location":"preprocessors/templateparser/#sending-variables-to-template","text":"To send a variable to template, add them into the context option. This option accepts yaml dictionary format. Please note that foliant doesn't support multiline tag options yet, so use one-line dictionary format {'key1': value1, ...} < jinja2 context = \"{'name': Andy, 'age': 8}\" > Hi, my name is {{name}}! I am {{age}} years old. {% for prev in range(age - 1, 0, -1) %} The year before I was {{prev}} years old. {% endfor %} </ jinja2 > Result: Hi , my name is Andy ! I am 8 years old . The year before I was 7 years old . The year before I was 6 years old . The year before I was 5 years old . The year before I was 4 years old . The year before I was 3 years old . The year before I was 2 years old . The year before I was 1 years old .","title":"Sending variables to template"},{"location":"preprocessors/templateparser/#extends-and-includes","text":"Extends and includes work in templates. The path of the extending\\included file is relative to the Markdown file where the template lives. In Jinja2 engine you can override the path of the included\\extended files with root engine_param. Note that this param is relative to project root.","title":"Extends and includes"},{"location":"preprocessors/testrail/","text":"Testrail \u00b6 TestRail preprocessor collects test cases from TestRail project and adds to your testing procedure document. Installation \u00b6 $ pip install foliantcontrib.testrail Config \u00b6 To enable the preprocessor, add testrail to preprocessors section in the project config. The preprocessor has a number of options (best values are set by default where possible): preprocessors : - testrail : testrail_url : http://testrails.url \\\\ Required testrail_login : username \\\\ Required testrail_pass : password \\\\ Required project_id : 35 \\\\ Required suite_ids : \\\\ Optional section_ids : \\\\ Optional exclude_suite_ids : \\\\ Optional exclude_section_ids : \\\\ Optional exclude_case_ids : \\\\ Optional filename : test_cases.md \\\\ Optional rewrite_src_file : false \\\\ Optional template_folder : case_templates \\\\ Optional section_header : Testing program \\\\ Recommended add_std_table : true \\\\ Optional std_table_header : Table with testing results \\\\ Recommended std_table_column_headers : \u2116; Priority; Platform; ID; Test case name; Result; Comment \\\\ Recommended add_suite_headers : true \\\\ Optional add_section_headers : true \\\\ Optional add_case_id_to_case_header : false \\\\ Optional add_case_id_to_std_table : false \\\\ Optional multi_param_name : \\\\ Optional multi_param_select : \\\\ Optional multi_param_select_type : any \\\\ Optional add_cases_without_multi_param : true \\\\ Optional add_multi_param_to_case_header : false \\\\ Optional add_multi_param_to_std_table : false \\\\ Optional checkbox_param_name : \\\\ Optional checkbox_param_select_type : checked \\\\ Optional choose_priorities : \\\\ Optional add_priority_to_case_header : false \\\\ Optional add_priority_to_std_table : false \\\\ Optional resolve_urls : true \\\\ Optional screenshots_url : https://gitlab_repository.url \\\\ Optional screenshots_ext : .png \\\\ Optional print_case_structure : true \\\\ For debugging testrail_url URL of TestRail deployed. testrail_login Your TestRail username. testrail_pass Your TestRail password. project_id TestRail project ID. You can find it in the project URL, for example http://testrails.url/index.php?/projects/overview/17 <-. suite_ids If you have several suites in your project, you can download test cases from certain suites. You can find suite ID in the URL again, for example http://testrails.url/index.php?/suites/view/63... <-. section_ids Also you can download any sections you want regardless of it's level. Just keep in mind that this setting overrides previous suite_ids (but if you set suite_ids and then section_ids from another suite, nothing will be downloaded). And suddenly you can find section ID in it's URL, for example http://testrails.url/index.php?/suites/view/124&group_by=cases:section_id&group_order=asc&group_id=3926 <-. exclude_suite_ids You can exclude any suites (even stated in suite_ids ) from the document. exclude_section_ids The same with the sections. exclude_case_ids And the same with the cases. filename Path to the test cases file. It should be added to project chapters in foliant.yml . Default: test_cases.md . For example: title : &title Test procedure chapters : - intro.md - conditions.md - awesome_test_cases.md <- This one for test cases - appendum.md preprocessors : - testrail : testrail_url : http://testrails.url testrail_login : username testrail_pass : password project_id : 35 filename : awesome_test_cases.md rewrite_src_file You can update ( true ) test cases file after each use of preprocessor. Be careful, previous data will be deleted. template_folder Preprocessor uses Jinja2 templates to compose the file with test cases. Here you can find documentation: http://jinja.pocoo.org/docs/2.10/ . You can store templates in folder inside the foliant project, but if it's not default case_templates you have to write it here. If this parameter not set and there is no default case_templates folder in the project, it will be created automatically with two jinja files for TestRail templates by default \u2014 Test Case (Text) with template_id=1 and Test Case (Steps) with template_id=2 . You can create TestRail templates by yourself in Administration panel, Customizations section, Templates part. Then you have to create jinja templates whith the names {template_id}.j2 for them. For example, file 2.j2 for Test Case (Steps) TestRail template: {% if case [ 'custom_steps_separated' ][ 0 ][ 'content' ] %} {% if case [ 'custom_preconds' ] %} **Preconditions:** {{ case [ 'custom_preconds' ] }} {% endif %} **Scenario:** {% for case_step in case [ 'custom_steps_separated' ] %} *Step {{ loop .index }} .* {{ case_step [ 'content' ] }} *Expected result:* {{ case_step [ 'expected' ] }} {% endfor %} {% endif %} You can use all parameters of two variables in the template \u2014 case and params . Case parameters depends on TestRail template. All custom parameters have prefix 'custom_' before system name set in TestRail. Here is an example of case variable (parameters depends on case template): case = { 'created_by': 3, 'created_on': 1524909903, 'custom_expected': None, 'custom_goals': None, 'custom_mission': None, 'custom_preconds': '- The user is not registered in the system.\\r\\n' '- Registration form opened.', 'custom_steps': '', 'custom_steps_separated': [{ 'content': 'Enter mobile phone number.', 'expected': '- Entered phone number ' 'is visible in the form field.' }, {'content': 'Press OK button.', 'expected': '- SMS with registration code ' 'received.\\n'}], 'custom_test_androidtv': None, 'custom_test_appletv': None, 'custom_test_smarttv': 'None, 'custom_tp': True, 'estimate': None, 'estimate_forecast': None, 'id': 15940, 'milestone_id': None, 'priority_id': 4, 'refs': None, 'section_id': 3441, 'suite_id': 101, 'template_id': 7, 'title': 'Registration by mobile phone number.', 'type_id': 7, 'updated_by': 10, 'updated_on': 1528978979 } And here is an example of params variable (parameters are always the same): params = { 'multi_param_name': 'platform', 'multi_param_sys_name': 'custom_platform', 'multi_param_select': ['android', 'ios'], 'multi_param_select_type': any, 'add_cases_without_multi_param': False, 'checkbox_param_name': 'publish', 'checkbox_param_sys_name': 'custom_publish', 'checkbox_param_select_type': 'checked', 'choose_priorities': ['critical', 'high', 'medium'], 'add_multi_param_to_case_header': True, 'add_multi_param_to_std_table': True, 'add_priority_to_case_header': True, 'add_priority_to_std_table': True, 'add_case_id_to_case_header': False, 'add_case_id_to_std_table': False } Next three fields are necessary due localization issues. While markdown document with test cases is composed on the go, you have to set up some document headers. Definitely not the best solution in my life. section_header First level header of section with test cases. By default it's Testing program in Russian. add_std_table You can exclude ( false ) a testing table from the document. std_table_header First level header of section with test results table. By default it's Testing table in Russian. std_table_column_headers Semicolon separated headers of testing table columns. By default it's \u2116; Priority; Platform; ID; Test case name; Result; Comment in Russian. add_suite_headers With false you can exclude all suite headers from the final document. add_section_headers With false you can exclude all section headers from the final document. add_case_id_to_case_header Every test case in TestRail has unique ID, which, as usual, you can find in the header or test case URL: http://testrails.url/index.php?/cases/view/15920... <-. So you can add ( true ) this ID to the test case headers and testing table. Or not ( false ). add_case_id_to_std_table Also you can add ( true ) the column with the test case IDs to the testing table. In TestRail you can add custom parameters to your test case template. With next settings you can use one multi-select or dropdown (good for platforms, for example) and one checkbox (publishing) plus default priority parameter for cases sampling. multi_param_name Parameter name of multi-select or dropdown type you set in System Name field of Add Custom Field form in TestRail. For example, platforms with values Android , iOS , PC , Mac and web . If multi_param_select not set, all test cases will be downloaded (useful when you need just to add parameter value to the test headers or testing table). multi_param_select Here you can set the platforms for which you want to get test cases (case insensitive). For example, you have similar UX for mobile platforms and want to combine them: preprocessors : - testrail : ... multi_param_name : platforms multi_param_select : android, ios ... multi_param_select_type With this parameter you can make test cases sampling in different ways. It has several options: any (by default) \u2014 at least one of multi_param_select values should be set for the case, all \u2014 all of multi_param_select values should be set and any other can be set for the case, only \u2014 only multi_param_select values in any combination should be set for the case, match \u2014 all and only multi_param_select values should be set for the case. With multi_param_select: android, ios we will get the following cases: Test cases Android iOS PC Mac web any all only match Test case 1 + + + + + + Test case 2 + + + + + + Test case 3 + + Test case 4 + + + + Test case 5 + + + + + Test case 6 + + + + + Test case 7 + + + Test case 8 + + + Test case 9 + + + add_cases_without_multi_param Also you can include (by default) or exclude ( false ) cases without any value of multi-select or dropdown parameter. add_multi_param_to_case_header You can add ( true ) values of multi-select or dropdown parameter to the case headers or not (by default). add_multi_param_to_std_table You can add ( true ) column with values of multi-select or dropdown parameter to the testing table or not (by default). checkbox_param_name Parameter name of checkbox type you set in System Name field of Add Custom Field form in TestRail. For example, publish . Without parameter name set all of cases will be downloaded. checkbox_param_select_type With this parameter you can make test cases sampling in different ways. It has several options: checked (by default) \u2014 only cases whith checked field will be downloaded, unchecked \u2014 only cases whith unchecked field will be downloaded. choose_priorities Here you can set test case priorities to download (case insensitive). preprocessors : - testrail : ... choose_priorities : critical, high, medium ... add_priority_to_case_header You can add ( true ) priority to the case headers or not (by default). add_priority_to_std_table You can add ( true ) column with case priority to the testing table or not (by default). Using described setting you can flexibly adjust test cases sampling. For example, you can download only published critical test cases for both and only Mac and PC . Now strange things, mostly made specially for my project, but may be useful for others. Screenshots. There is no possibility to store screenshots in TestRail projects, but you can store them in the GitLab repository (link to which should be stated in one of the following parameters). GitLab project should have following structure: images/ \u251c\u2500\u2500 smarttv/ | \u251c\u2500\u2500 screenshot1_smarttv.png | \u251c\u2500\u2500 screenshot2_smarttv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 androidtv/ | \u251c\u2500\u2500 screenshot1_androidtv.png | \u251c\u2500\u2500 screenshot2_androidtv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 appletv/ | \u251c\u2500\u2500 screenshot1_appletv.png | \u251c\u2500\u2500 screenshot2_appletv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 web/ | \u251c\u2500\u2500 screenshot1_web.png | \u251c\u2500\u2500 screenshot2_web.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 screenshot1.png \u251c\u2500\u2500 screenshot2.png \u2514\u2500\u2500 ... images folder used for projects without platforms. Filename ending is a first value of multi_param_select parameter ( platform ). Now to add screenshot to your document just add following string to the test case (unfortunately, in TestRail interface it will looks like broken image link): ( leading exclamation mark here ! )[ Image title ]( main_filename_part ) Preprocessor will convert to the following format: https://gitlab.url/gitlab_group_name/gitlab_project_name/raw/master/images/platform_name/main_filename_part_platform_name.png For example, in the project with multi_param_select: smarttv the string (leading exclamation mark here!)[Application main screen](main_screen) will be converted to: (leading exclamation mark here!)[Application main screen](https://gitlab.url/documentation/application-screenshots/raw/master/images/smarttv/main_screen_smarttv.png) That's it. resolve_urls Turn on ( true ) or off ( false , by default) image urls resolving. screenshots_url GitLab repository URL, in our example: https://gitlab.url/documentation/application-screenshots/ . screenshots_ext Screenshots extension. Yes, it must be only one and the same for all screenshots. And the last one emergency tool. If you have no jinja template for any type of TestRail case, you'll see this message like this: There is no jinja template for test case template_id 5 (case_id 1325) in folder case_templates . So you have to write jinja template by yourself. To do this it's necessary to know case structure. This parameter shows it to you. print_case_structure Turn on ( true ) or off ( false , by default) printing out of case structure with all data in it if any problem occurs. Usage \u00b6 Just add the preprocessor to the project config, set it up and enjoy the automatically collected test cases to your document. Tips \u00b6 In some cases you may encounter a problem with test cases text format, so composed markdown file will be converted to the document with bad formatting. In this cases replace preprocessor could be useful: https://foliant-docs.github.io/docs/preprocessors/replace/ .","title":"Testrail"},{"location":"preprocessors/testrail/#testrail","text":"TestRail preprocessor collects test cases from TestRail project and adds to your testing procedure document.","title":"Testrail"},{"location":"preprocessors/testrail/#installation","text":"$ pip install foliantcontrib.testrail","title":"Installation"},{"location":"preprocessors/testrail/#config","text":"To enable the preprocessor, add testrail to preprocessors section in the project config. The preprocessor has a number of options (best values are set by default where possible): preprocessors : - testrail : testrail_url : http://testrails.url \\\\ Required testrail_login : username \\\\ Required testrail_pass : password \\\\ Required project_id : 35 \\\\ Required suite_ids : \\\\ Optional section_ids : \\\\ Optional exclude_suite_ids : \\\\ Optional exclude_section_ids : \\\\ Optional exclude_case_ids : \\\\ Optional filename : test_cases.md \\\\ Optional rewrite_src_file : false \\\\ Optional template_folder : case_templates \\\\ Optional section_header : Testing program \\\\ Recommended add_std_table : true \\\\ Optional std_table_header : Table with testing results \\\\ Recommended std_table_column_headers : \u2116; Priority; Platform; ID; Test case name; Result; Comment \\\\ Recommended add_suite_headers : true \\\\ Optional add_section_headers : true \\\\ Optional add_case_id_to_case_header : false \\\\ Optional add_case_id_to_std_table : false \\\\ Optional multi_param_name : \\\\ Optional multi_param_select : \\\\ Optional multi_param_select_type : any \\\\ Optional add_cases_without_multi_param : true \\\\ Optional add_multi_param_to_case_header : false \\\\ Optional add_multi_param_to_std_table : false \\\\ Optional checkbox_param_name : \\\\ Optional checkbox_param_select_type : checked \\\\ Optional choose_priorities : \\\\ Optional add_priority_to_case_header : false \\\\ Optional add_priority_to_std_table : false \\\\ Optional resolve_urls : true \\\\ Optional screenshots_url : https://gitlab_repository.url \\\\ Optional screenshots_ext : .png \\\\ Optional print_case_structure : true \\\\ For debugging testrail_url URL of TestRail deployed. testrail_login Your TestRail username. testrail_pass Your TestRail password. project_id TestRail project ID. You can find it in the project URL, for example http://testrails.url/index.php?/projects/overview/17 <-. suite_ids If you have several suites in your project, you can download test cases from certain suites. You can find suite ID in the URL again, for example http://testrails.url/index.php?/suites/view/63... <-. section_ids Also you can download any sections you want regardless of it's level. Just keep in mind that this setting overrides previous suite_ids (but if you set suite_ids and then section_ids from another suite, nothing will be downloaded). And suddenly you can find section ID in it's URL, for example http://testrails.url/index.php?/suites/view/124&group_by=cases:section_id&group_order=asc&group_id=3926 <-. exclude_suite_ids You can exclude any suites (even stated in suite_ids ) from the document. exclude_section_ids The same with the sections. exclude_case_ids And the same with the cases. filename Path to the test cases file. It should be added to project chapters in foliant.yml . Default: test_cases.md . For example: title : &title Test procedure chapters : - intro.md - conditions.md - awesome_test_cases.md <- This one for test cases - appendum.md preprocessors : - testrail : testrail_url : http://testrails.url testrail_login : username testrail_pass : password project_id : 35 filename : awesome_test_cases.md rewrite_src_file You can update ( true ) test cases file after each use of preprocessor. Be careful, previous data will be deleted. template_folder Preprocessor uses Jinja2 templates to compose the file with test cases. Here you can find documentation: http://jinja.pocoo.org/docs/2.10/ . You can store templates in folder inside the foliant project, but if it's not default case_templates you have to write it here. If this parameter not set and there is no default case_templates folder in the project, it will be created automatically with two jinja files for TestRail templates by default \u2014 Test Case (Text) with template_id=1 and Test Case (Steps) with template_id=2 . You can create TestRail templates by yourself in Administration panel, Customizations section, Templates part. Then you have to create jinja templates whith the names {template_id}.j2 for them. For example, file 2.j2 for Test Case (Steps) TestRail template: {% if case [ 'custom_steps_separated' ][ 0 ][ 'content' ] %} {% if case [ 'custom_preconds' ] %} **Preconditions:** {{ case [ 'custom_preconds' ] }} {% endif %} **Scenario:** {% for case_step in case [ 'custom_steps_separated' ] %} *Step {{ loop .index }} .* {{ case_step [ 'content' ] }} *Expected result:* {{ case_step [ 'expected' ] }} {% endfor %} {% endif %} You can use all parameters of two variables in the template \u2014 case and params . Case parameters depends on TestRail template. All custom parameters have prefix 'custom_' before system name set in TestRail. Here is an example of case variable (parameters depends on case template): case = { 'created_by': 3, 'created_on': 1524909903, 'custom_expected': None, 'custom_goals': None, 'custom_mission': None, 'custom_preconds': '- The user is not registered in the system.\\r\\n' '- Registration form opened.', 'custom_steps': '', 'custom_steps_separated': [{ 'content': 'Enter mobile phone number.', 'expected': '- Entered phone number ' 'is visible in the form field.' }, {'content': 'Press OK button.', 'expected': '- SMS with registration code ' 'received.\\n'}], 'custom_test_androidtv': None, 'custom_test_appletv': None, 'custom_test_smarttv': 'None, 'custom_tp': True, 'estimate': None, 'estimate_forecast': None, 'id': 15940, 'milestone_id': None, 'priority_id': 4, 'refs': None, 'section_id': 3441, 'suite_id': 101, 'template_id': 7, 'title': 'Registration by mobile phone number.', 'type_id': 7, 'updated_by': 10, 'updated_on': 1528978979 } And here is an example of params variable (parameters are always the same): params = { 'multi_param_name': 'platform', 'multi_param_sys_name': 'custom_platform', 'multi_param_select': ['android', 'ios'], 'multi_param_select_type': any, 'add_cases_without_multi_param': False, 'checkbox_param_name': 'publish', 'checkbox_param_sys_name': 'custom_publish', 'checkbox_param_select_type': 'checked', 'choose_priorities': ['critical', 'high', 'medium'], 'add_multi_param_to_case_header': True, 'add_multi_param_to_std_table': True, 'add_priority_to_case_header': True, 'add_priority_to_std_table': True, 'add_case_id_to_case_header': False, 'add_case_id_to_std_table': False } Next three fields are necessary due localization issues. While markdown document with test cases is composed on the go, you have to set up some document headers. Definitely not the best solution in my life. section_header First level header of section with test cases. By default it's Testing program in Russian. add_std_table You can exclude ( false ) a testing table from the document. std_table_header First level header of section with test results table. By default it's Testing table in Russian. std_table_column_headers Semicolon separated headers of testing table columns. By default it's \u2116; Priority; Platform; ID; Test case name; Result; Comment in Russian. add_suite_headers With false you can exclude all suite headers from the final document. add_section_headers With false you can exclude all section headers from the final document. add_case_id_to_case_header Every test case in TestRail has unique ID, which, as usual, you can find in the header or test case URL: http://testrails.url/index.php?/cases/view/15920... <-. So you can add ( true ) this ID to the test case headers and testing table. Or not ( false ). add_case_id_to_std_table Also you can add ( true ) the column with the test case IDs to the testing table. In TestRail you can add custom parameters to your test case template. With next settings you can use one multi-select or dropdown (good for platforms, for example) and one checkbox (publishing) plus default priority parameter for cases sampling. multi_param_name Parameter name of multi-select or dropdown type you set in System Name field of Add Custom Field form in TestRail. For example, platforms with values Android , iOS , PC , Mac and web . If multi_param_select not set, all test cases will be downloaded (useful when you need just to add parameter value to the test headers or testing table). multi_param_select Here you can set the platforms for which you want to get test cases (case insensitive). For example, you have similar UX for mobile platforms and want to combine them: preprocessors : - testrail : ... multi_param_name : platforms multi_param_select : android, ios ... multi_param_select_type With this parameter you can make test cases sampling in different ways. It has several options: any (by default) \u2014 at least one of multi_param_select values should be set for the case, all \u2014 all of multi_param_select values should be set and any other can be set for the case, only \u2014 only multi_param_select values in any combination should be set for the case, match \u2014 all and only multi_param_select values should be set for the case. With multi_param_select: android, ios we will get the following cases: Test cases Android iOS PC Mac web any all only match Test case 1 + + + + + + Test case 2 + + + + + + Test case 3 + + Test case 4 + + + + Test case 5 + + + + + Test case 6 + + + + + Test case 7 + + + Test case 8 + + + Test case 9 + + + add_cases_without_multi_param Also you can include (by default) or exclude ( false ) cases without any value of multi-select or dropdown parameter. add_multi_param_to_case_header You can add ( true ) values of multi-select or dropdown parameter to the case headers or not (by default). add_multi_param_to_std_table You can add ( true ) column with values of multi-select or dropdown parameter to the testing table or not (by default). checkbox_param_name Parameter name of checkbox type you set in System Name field of Add Custom Field form in TestRail. For example, publish . Without parameter name set all of cases will be downloaded. checkbox_param_select_type With this parameter you can make test cases sampling in different ways. It has several options: checked (by default) \u2014 only cases whith checked field will be downloaded, unchecked \u2014 only cases whith unchecked field will be downloaded. choose_priorities Here you can set test case priorities to download (case insensitive). preprocessors : - testrail : ... choose_priorities : critical, high, medium ... add_priority_to_case_header You can add ( true ) priority to the case headers or not (by default). add_priority_to_std_table You can add ( true ) column with case priority to the testing table or not (by default). Using described setting you can flexibly adjust test cases sampling. For example, you can download only published critical test cases for both and only Mac and PC . Now strange things, mostly made specially for my project, but may be useful for others. Screenshots. There is no possibility to store screenshots in TestRail projects, but you can store them in the GitLab repository (link to which should be stated in one of the following parameters). GitLab project should have following structure: images/ \u251c\u2500\u2500 smarttv/ | \u251c\u2500\u2500 screenshot1_smarttv.png | \u251c\u2500\u2500 screenshot2_smarttv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 androidtv/ | \u251c\u2500\u2500 screenshot1_androidtv.png | \u251c\u2500\u2500 screenshot2_androidtv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 appletv/ | \u251c\u2500\u2500 screenshot1_appletv.png | \u251c\u2500\u2500 screenshot2_appletv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 web/ | \u251c\u2500\u2500 screenshot1_web.png | \u251c\u2500\u2500 screenshot2_web.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 screenshot1.png \u251c\u2500\u2500 screenshot2.png \u2514\u2500\u2500 ... images folder used for projects without platforms. Filename ending is a first value of multi_param_select parameter ( platform ). Now to add screenshot to your document just add following string to the test case (unfortunately, in TestRail interface it will looks like broken image link): ( leading exclamation mark here ! )[ Image title ]( main_filename_part ) Preprocessor will convert to the following format: https://gitlab.url/gitlab_group_name/gitlab_project_name/raw/master/images/platform_name/main_filename_part_platform_name.png For example, in the project with multi_param_select: smarttv the string (leading exclamation mark here!)[Application main screen](main_screen) will be converted to: (leading exclamation mark here!)[Application main screen](https://gitlab.url/documentation/application-screenshots/raw/master/images/smarttv/main_screen_smarttv.png) That's it. resolve_urls Turn on ( true ) or off ( false , by default) image urls resolving. screenshots_url GitLab repository URL, in our example: https://gitlab.url/documentation/application-screenshots/ . screenshots_ext Screenshots extension. Yes, it must be only one and the same for all screenshots. And the last one emergency tool. If you have no jinja template for any type of TestRail case, you'll see this message like this: There is no jinja template for test case template_id 5 (case_id 1325) in folder case_templates . So you have to write jinja template by yourself. To do this it's necessary to know case structure. This parameter shows it to you. print_case_structure Turn on ( true ) or off ( false , by default) printing out of case structure with all data in it if any problem occurs.","title":"Config"},{"location":"preprocessors/testrail/#usage","text":"Just add the preprocessor to the project config, set it up and enjoy the automatically collected test cases to your document.","title":"Usage"},{"location":"preprocessors/testrail/#tips","text":"In some cases you may encounter a problem with test cases text format, so composed markdown file will be converted to the document with bad formatting. In this cases replace preprocessor could be useful: https://foliant-docs.github.io/docs/preprocessors/replace/ .","title":"Tips"},{"location":"tutorials/api/","text":"Documenting API with Foliant \u00b6 In this tutorial we will learn how to use Foliant to generate documentation from API specification formats OpenAPI (Swagger) , RAML and API Blueprint . The general idea is that you supply a specification file path ( json or yaml for OpenAPI, raml for RAML) to a preprocessor which will generate a Markdown document out of it. Markdown is what Foliant is good at, so after that you can do anything with it: convert to PDF, partially include in other documents, etc. In this guide we will concentrate on building a static website for your API documentation. Please note that in this article we cover only the basic usage of the tools. For detailed information on features and customizing output refer to each component's doc page. OpenAPI \u00b6 Installing prerequisites \u00b6 Besides Foliant you will need to install some additional packages on your system. If you are using our full docker image foliant/foliant:full , you can skip this chapter. First, install the SwaggerDoc preprocessor which will convert spec file to Markdown. pip3 install foliantcontrib.swaggerdoc SwaggerDoc preprocessor uses Widdershins under the hood, so you will need to install that too. npm install -g widdershins Finally, to build the static website we will be using Slate backend : pip3 install foliantcontrib.slate Also note that Slate requires Ruby and Bundler to work (that's a lot of dependencies, I know). Creating project \u00b6 Let's create Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We've chosen \"OpenAPI docs\", but it may be anything: cd ~/projects foliant init Enter the project name: OpenAPI docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"OpenAPI docs\" created in openapi-docs In the output Foliant informs us that the project was created in a new folder openapi-docs . Let's copy your OpenAPI spec file into this folder: cp ~/Downloads/my_api.yaml ~/projects/openapi-docs In the end you should get the following directory structure: \u2514\u2500\u2500 openapi-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 my_api.yaml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full Configuring project \u00b6 Now let's set up foliant.yml . Right now it looks like this: title : OpenAPI docs chapters : - index.md First add and fill up the preprocessors section at the bottom: preprocessors : - swaggerdoc : spec_path : !path my_api.yaml # path to your API spec file, relative to project root At this stage you may also specify path to custom templates dir in environment: {user_tempaltes: path/to/custom/templates} parameter. Templates describe the exact way of how to convert structured specification file into a Markdown document. For this tutorial we will be using default templates because they are perfect for our static site. Check Widdershins docs for detailed info on templates. The last thing we need to do is point Foliant where to insert the generated Markdown from the spec file. We already have a source file created for us by init command, called index.md , so let's use it to store our API docs. Open openapi-docs/src/index.md with text editor and replace its contents with the following: < swaggerdoc ></ swaggerdoc > Foliant will insert generated markdown on the place of this tag during build. You may even add some kind of introduction for the API docs before the tag, if you don't have such inside your spec file. That's it! All is left to do is run make command to build your site. foliant make site --with slate Parsing config... Done Applying preprocessor swaggerdoc... Done Applying preprocessor slate... Done Applying preprocessor _unescape... Done Making site... ... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: OpenAPI_docs-2019-11-29.slate/ If you use docker, the command is: docker-compose run --rm foliant make site --with slate Now if you open the index.html from just created OpenAPI_docs-2019-11-29.slate folder, you should see something like this: You can customize the page styles, add or remove language example tabs and tune other options. Check the Slate backend documentation for details. RAML \u00b6 Building API docs from RAML specification is quite similar to that of OpenAPI, the difference is that instead of swaggerdoc preprocessor you use ramldoc . We will go through all the steps anyway. Installing prerequisites \u00b6 Besides Foliant you will need to install some additional packages on your system. If you are using our full docker image foliant/foliant:full , you can skip this chapter. First, install the RAMLdoc preprocessor which will convert spec file to Markdown. pip3 install foliantcontrib.ramldoc RAMLdoc preprocessor uses raml2html with full-markdown-theme under the hood, so you will need to install those too. npm install -g raml2html raml2html-full-markdown-theme Finally, to build the static website we will be using Slate backend . If you don't have it, run: pip3 install foliantcontrib.slate Also note that Slate requires Ruby and Bundler to work. Creating project \u00b6 Let's create Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We've chosen \"API docs\", but it may be anything: cd ~/projects foliant init Enter the project name: API docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"API docs\" created in api-docs In the output Foliant informs us that the project was created in a new folder api-docs . Now let's copy your RAML spec file to this folder: cp ~/Downloads/my_api.raml ~/projects/api-docs In the end you should get the following directory structure: \u2514\u2500\u2500 api-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 my_api.raml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full Configuring project \u00b6 Now let's set up foliant.yml . Right now it looks like this: title : API docs chapters : - index.md First add and fill up the preprocessors section at the bottom: preprocessors : - ramldoc : spec_path : !path my_api.yaml # path to your API spec file, relative to project root At this stage you may also specify path to custom templates dir in the template_dir parameter. Templates describe the exact way of how to convert structured specification file into a Markdown document. raml2html uses Nunjucks templates, which are stored in the theme. So the easiest way to create your own templates is to copy default ones and adjust them to your needs. But we will use the default template which works great with Slate. The last thing we need to do is point Foliant where to insert the generated Markdown from the spec file. We already have a source file created for us by init command, called index.md , so let's use it to store our API docs. Open api-docs/src/index.md with text editor and replace its contents with the following: < ramldoc ></ ramldoc > Foliant will insert generated markdown on the place of this tag during build. You may even add some kind of introduction for the API docs before the tag, if you don't have such in your spec file. That's it! All is left to do is run make command to build your site. foliant make site --with slate Parsing config... Done Applying preprocessor ramldoc... Done Applying preprocessor slate... Done Applying preprocessor _unescape... Done Making site... ... Project built successfully. Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: API_docs-2019-11-29.slate/ If you use docker, the command is: docker-compose run --rm foliant make site --with slate Now if you open the index.html from just created API_docs-2019-11-29.slate folder, you should see something like this: You can customize the page styles, add or remove language example tabs and tune other options. Check the Slate backend documentation for details. Blueprint \u00b6 API Blueprint is a Markdown-based API specification format. That's why the build process differs from that of OpenAPI or RAML: we skip the converting step and just add the specification file as a source. Installing prerequisites \u00b6 To build a static site we will use Aglio backend which is designed specifically for rendering API Blueprint. So first install the backend and Aglio renderer itself: pip3 install foliantcontrib.aglio npm install -g aglio Creating project \u00b6 Let's create a Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We've chosen \"API docs\", but it may be anything: cd ~/projects foliant init Enter the project name: API docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"API docs\" created in api-docs In the output Foliant informs us that the project was created in a new folder api-docs . Now copy your Blueprint spec file into the src subfolder (it's better to change the extension to .md too), replacing \"index.md\": cp ~/Downloads/spec.abip ~/projects/api-docs/src/index.md In the end you should get the following directory structure: \u2514\u2500\u2500 openapi-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full Configuring project \u00b6 Now check your foliant.yml . Right now it looks like this: title : API docs chapters : - index.md # this should be your API Blueprint specification It may be hard to believe, but no other configuration is required! Let's build our project: foliant make site --with aglio Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: OpenAPI_docs-2019-11-29.aglio If you use docker, the command is: docker-compose run --rm foliant make site --with aglio Now if you open the index.html from just created API_docs-2019-11-29.aglio folder, you should see something like this: It's not near as attractive as the Slate site we had in previous examples. But don't worry, Aglio supports styling with CSS and layout control with Jade templates. It also has several built-in themes, which look much better than the default one. Open your foliant.yml again and add following lines at the end: backend_config : aglio : params : theme-variables : streak theme-template : triple Now run the same build command: foliant make site --with aglio And look at the result: Much better!","title":"Documenting API with Foliant"},{"location":"tutorials/api/#documenting-api-with-foliant","text":"In this tutorial we will learn how to use Foliant to generate documentation from API specification formats OpenAPI (Swagger) , RAML and API Blueprint . The general idea is that you supply a specification file path ( json or yaml for OpenAPI, raml for RAML) to a preprocessor which will generate a Markdown document out of it. Markdown is what Foliant is good at, so after that you can do anything with it: convert to PDF, partially include in other documents, etc. In this guide we will concentrate on building a static website for your API documentation. Please note that in this article we cover only the basic usage of the tools. For detailed information on features and customizing output refer to each component's doc page.","title":"Documenting API with Foliant"},{"location":"tutorials/api/#openapi","text":"","title":"OpenAPI"},{"location":"tutorials/api/#installing-prerequisites","text":"Besides Foliant you will need to install some additional packages on your system. If you are using our full docker image foliant/foliant:full , you can skip this chapter. First, install the SwaggerDoc preprocessor which will convert spec file to Markdown. pip3 install foliantcontrib.swaggerdoc SwaggerDoc preprocessor uses Widdershins under the hood, so you will need to install that too. npm install -g widdershins Finally, to build the static website we will be using Slate backend : pip3 install foliantcontrib.slate Also note that Slate requires Ruby and Bundler to work (that's a lot of dependencies, I know).","title":"Installing prerequisites"},{"location":"tutorials/api/#creating-project","text":"Let's create Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We've chosen \"OpenAPI docs\", but it may be anything: cd ~/projects foliant init Enter the project name: OpenAPI docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"OpenAPI docs\" created in openapi-docs In the output Foliant informs us that the project was created in a new folder openapi-docs . Let's copy your OpenAPI spec file into this folder: cp ~/Downloads/my_api.yaml ~/projects/openapi-docs In the end you should get the following directory structure: \u2514\u2500\u2500 openapi-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 my_api.yaml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full","title":"Creating project"},{"location":"tutorials/api/#configuring-project","text":"Now let's set up foliant.yml . Right now it looks like this: title : OpenAPI docs chapters : - index.md First add and fill up the preprocessors section at the bottom: preprocessors : - swaggerdoc : spec_path : !path my_api.yaml # path to your API spec file, relative to project root At this stage you may also specify path to custom templates dir in environment: {user_tempaltes: path/to/custom/templates} parameter. Templates describe the exact way of how to convert structured specification file into a Markdown document. For this tutorial we will be using default templates because they are perfect for our static site. Check Widdershins docs for detailed info on templates. The last thing we need to do is point Foliant where to insert the generated Markdown from the spec file. We already have a source file created for us by init command, called index.md , so let's use it to store our API docs. Open openapi-docs/src/index.md with text editor and replace its contents with the following: < swaggerdoc ></ swaggerdoc > Foliant will insert generated markdown on the place of this tag during build. You may even add some kind of introduction for the API docs before the tag, if you don't have such inside your spec file. That's it! All is left to do is run make command to build your site. foliant make site --with slate Parsing config... Done Applying preprocessor swaggerdoc... Done Applying preprocessor slate... Done Applying preprocessor _unescape... Done Making site... ... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: OpenAPI_docs-2019-11-29.slate/ If you use docker, the command is: docker-compose run --rm foliant make site --with slate Now if you open the index.html from just created OpenAPI_docs-2019-11-29.slate folder, you should see something like this: You can customize the page styles, add or remove language example tabs and tune other options. Check the Slate backend documentation for details.","title":"Configuring project"},{"location":"tutorials/api/#raml","text":"Building API docs from RAML specification is quite similar to that of OpenAPI, the difference is that instead of swaggerdoc preprocessor you use ramldoc . We will go through all the steps anyway.","title":"RAML"},{"location":"tutorials/api/#installing-prerequisites_1","text":"Besides Foliant you will need to install some additional packages on your system. If you are using our full docker image foliant/foliant:full , you can skip this chapter. First, install the RAMLdoc preprocessor which will convert spec file to Markdown. pip3 install foliantcontrib.ramldoc RAMLdoc preprocessor uses raml2html with full-markdown-theme under the hood, so you will need to install those too. npm install -g raml2html raml2html-full-markdown-theme Finally, to build the static website we will be using Slate backend . If you don't have it, run: pip3 install foliantcontrib.slate Also note that Slate requires Ruby and Bundler to work.","title":"Installing prerequisites"},{"location":"tutorials/api/#creating-project_1","text":"Let's create Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We've chosen \"API docs\", but it may be anything: cd ~/projects foliant init Enter the project name: API docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"API docs\" created in api-docs In the output Foliant informs us that the project was created in a new folder api-docs . Now let's copy your RAML spec file to this folder: cp ~/Downloads/my_api.raml ~/projects/api-docs In the end you should get the following directory structure: \u2514\u2500\u2500 api-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 my_api.raml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full","title":"Creating project"},{"location":"tutorials/api/#configuring-project_1","text":"Now let's set up foliant.yml . Right now it looks like this: title : API docs chapters : - index.md First add and fill up the preprocessors section at the bottom: preprocessors : - ramldoc : spec_path : !path my_api.yaml # path to your API spec file, relative to project root At this stage you may also specify path to custom templates dir in the template_dir parameter. Templates describe the exact way of how to convert structured specification file into a Markdown document. raml2html uses Nunjucks templates, which are stored in the theme. So the easiest way to create your own templates is to copy default ones and adjust them to your needs. But we will use the default template which works great with Slate. The last thing we need to do is point Foliant where to insert the generated Markdown from the spec file. We already have a source file created for us by init command, called index.md , so let's use it to store our API docs. Open api-docs/src/index.md with text editor and replace its contents with the following: < ramldoc ></ ramldoc > Foliant will insert generated markdown on the place of this tag during build. You may even add some kind of introduction for the API docs before the tag, if you don't have such in your spec file. That's it! All is left to do is run make command to build your site. foliant make site --with slate Parsing config... Done Applying preprocessor ramldoc... Done Applying preprocessor slate... Done Applying preprocessor _unescape... Done Making site... ... Project built successfully. Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: API_docs-2019-11-29.slate/ If you use docker, the command is: docker-compose run --rm foliant make site --with slate Now if you open the index.html from just created API_docs-2019-11-29.slate folder, you should see something like this: You can customize the page styles, add or remove language example tabs and tune other options. Check the Slate backend documentation for details.","title":"Configuring project"},{"location":"tutorials/api/#blueprint","text":"API Blueprint is a Markdown-based API specification format. That's why the build process differs from that of OpenAPI or RAML: we skip the converting step and just add the specification file as a source.","title":"Blueprint"},{"location":"tutorials/api/#installing-prerequisites_2","text":"To build a static site we will use Aglio backend which is designed specifically for rendering API Blueprint. So first install the backend and Aglio renderer itself: pip3 install foliantcontrib.aglio npm install -g aglio","title":"Installing prerequisites"},{"location":"tutorials/api/#creating-project_2","text":"Let's create a Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We've chosen \"API docs\", but it may be anything: cd ~/projects foliant init Enter the project name: API docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"API docs\" created in api-docs In the output Foliant informs us that the project was created in a new folder api-docs . Now copy your Blueprint spec file into the src subfolder (it's better to change the extension to .md too), replacing \"index.md\": cp ~/Downloads/spec.abip ~/projects/api-docs/src/index.md In the end you should get the following directory structure: \u2514\u2500\u2500 openapi-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full","title":"Creating project"},{"location":"tutorials/api/#configuring-project_2","text":"Now check your foliant.yml . Right now it looks like this: title : API docs chapters : - index.md # this should be your API Blueprint specification It may be hard to believe, but no other configuration is required! Let's build our project: foliant make site --with aglio Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: OpenAPI_docs-2019-11-29.aglio If you use docker, the command is: docker-compose run --rm foliant make site --with aglio Now if you open the index.html from just created API_docs-2019-11-29.aglio folder, you should see something like this: It's not near as attractive as the Slate site we had in previous examples. But don't worry, Aglio supports styling with CSS and layout control with Jade templates. It also has several built-in themes, which look much better than the default one. Open your foliant.yml again and add following lines at the end: backend_config : aglio : params : theme-variables : streak theme-template : triple Now run the same build command: foliant make site --with aglio And look at the result: Much better!","title":"Configuring project"}]}