{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","tags":["changelog"],"text":"Welcome to Foliant! \u00b6 Foliant is an all-in-one single-source documentation authoring tool. It lets you produce standalone documents in pdf and docx , build static websites and upload pages to Confluence , all from single Markdown source. Foliant is a higher order tool, which means it uses other programs to do its job. For building pdf and docx, it can use Pandoc or md-to-pdf , for websites MkDocs , Aglio or Slate . Foliant preprocessors let you reuse parts of your documents, show and hide content with flags, render diagrams from text, and much more. Foliant is highly extensible, so if it lacks some functions or output formats you can always make a plugin for it or request one from our team. Logo made by Hand Drawn Goods from flaticon.com . Who Is It for? \u00b6 You\u2019ll love Foliant if you: need to ship documentation as pdf, docx, and websites want to use Markdown with consistent extension system instead of custom syntax for every new bit of functionality like reStructuredText\u2019s extensibility and AsciiDoc\u2019s flexibility, but would rather use Markdown want a tool that you can extend with custom plugins without dealing with something as over-engineered as Sphinx want to work with docs as code and make them a part of your CI pipeline have a lot of segregated repositories with sources of your documents and want to standardize the documentation approach. Changelog \u00b6 Here is the changelog of Foliant Core , the main and only strictly required package. See also the history of releases of numerous Foliant extensions . 1.0.13 \u00b6 Add the clean_registry function to make . This function checks if multiproject and removes .apirefregistry files in .multiprojectache . 1.0.12 \u00b6 Add the disable_implicit_unescape option. Remove warning when escape_code is not set. Support the !env YAML tag to use environment variables in the project config. Allow to specify custom directory to store logs with the --logs|-l command line option. Flush output to STDOUT in progress status messages and in the foliant.utils.output() method. Get and log the names and versions of all installed Foliant-related packages. Do not raise exception of the same type that is raised by a preprocessor, raise RuntimeError instead because some exceptions take more arguments than one. 1.0.11 \u00b6 Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. Pass the quiet flag to BaseParser() as an optional argument for using in config extensions. 1.0.10 \u00b6 Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed. 1.0.9 \u00b6 Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags. 1.0.8 \u00b6 Restore quiet mode. Add the output() method for using in preprocessors. 1.0.7 \u00b6 Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs. 1.0.6 \u00b6 CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor. 1.0.5 \u00b6 Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style. 1.0.4 \u00b6 Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions. 1.0.3 \u00b6 Fix critical issue when config parsing would fail if any config value contained non-latin characters. 1.0.2 \u00b6 Use README.md as package description. 1.0.1 \u00b6 Fix critical bug with CLI module caused by missing version definition in the root __init__.py file. 1.0.0 \u00b6 Complete rewrite.","title":"Welcome to Foliant!"},{"location":"#welcome-to-foliant","text":"Foliant is an all-in-one single-source documentation authoring tool. It lets you produce standalone documents in pdf and docx , build static websites and upload pages to Confluence , all from single Markdown source. Foliant is a higher order tool, which means it uses other programs to do its job. For building pdf and docx, it can use Pandoc or md-to-pdf , for websites MkDocs , Aglio or Slate . Foliant preprocessors let you reuse parts of your documents, show and hide content with flags, render diagrams from text, and much more. Foliant is highly extensible, so if it lacks some functions or output formats you can always make a plugin for it or request one from our team. Logo made by Hand Drawn Goods from flaticon.com .","title":"Welcome to Foliant!"},{"location":"#who-is-it-for","text":"You\u2019ll love Foliant if you: need to ship documentation as pdf, docx, and websites want to use Markdown with consistent extension system instead of custom syntax for every new bit of functionality like reStructuredText\u2019s extensibility and AsciiDoc\u2019s flexibility, but would rather use Markdown want a tool that you can extend with custom plugins without dealing with something as over-engineered as Sphinx want to work with docs as code and make them a part of your CI pipeline have a lot of segregated repositories with sources of your documents and want to standardize the documentation approach.","title":"Who Is It for?"},{"location":"#changelog","text":"Here is the changelog of Foliant Core , the main and only strictly required package. See also the history of releases of numerous Foliant extensions .","title":"Changelog"},{"location":"#1013","text":"Add the clean_registry function to make . This function checks if multiproject and removes .apirefregistry files in .multiprojectache .","title":"1.0.13"},{"location":"#1012","text":"Add the disable_implicit_unescape option. Remove warning when escape_code is not set. Support the !env YAML tag to use environment variables in the project config. Allow to specify custom directory to store logs with the --logs|-l command line option. Flush output to STDOUT in progress status messages and in the foliant.utils.output() method. Get and log the names and versions of all installed Foliant-related packages. Do not raise exception of the same type that is raised by a preprocessor, raise RuntimeError instead because some exceptions take more arguments than one.","title":"1.0.12"},{"location":"#1011","text":"Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. Pass the quiet flag to BaseParser() as an optional argument for using in config extensions.","title":"1.0.11"},{"location":"#1010","text":"Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed.","title":"1.0.10"},{"location":"#109","text":"Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags.","title":"1.0.9"},{"location":"#108","text":"Restore quiet mode. Add the output() method for using in preprocessors.","title":"1.0.8"},{"location":"#107","text":"Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs.","title":"1.0.7"},{"location":"#106","text":"CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor.","title":"1.0.6"},{"location":"#105","text":"Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style.","title":"1.0.5"},{"location":"#104","text":"Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions.","title":"1.0.4"},{"location":"#103","text":"Fix critical issue when config parsing would fail if any config value contained non-latin characters.","title":"1.0.3"},{"location":"#102","text":"Use README.md as package description.","title":"1.0.2"},{"location":"#101","text":"Fix critical bug with CLI module caused by missing version definition in the root __init__.py file.","title":"1.0.1"},{"location":"#100","text":"Complete rewrite.","title":"1.0.0"},{"location":"architecture/","tags":["overview","architecture"],"text":"Architecture And Basic Design Concepts \u00b6 Overview \u00b6 Foliant is an open-source application written in Python. Foliant has a modular architecture. It consists of three layers: Configuration Layer reads Foliant project configuration file and CLI parameters supplied by the user; Preprocessing Layer adjusts the Markdown sources before the build; Build Layer produces the documentation in the final format. Each layer is supervised by Foliant Core . Foliant Core is a relatively compact and rarely updated Python package. It is a dispatcher which manages installed extensions according to the configuration. Let's take a closer look at each layer of Foliant's architecture. Configuration Layer \u00b6 At the configuration Layer, Foliant processes the CLI-command and reads the command arguments, which were supplied by the user. The Main Foliant command is make , it is the command which builds the documentation project. But there are other commands which may do other things, for example, display the project's metadata (the meta generate command) or generate a new project file structure (the init command). If make command was used, Foliant reads and processes the project configuration file. At this stage, all installed Configuration Extensions are applied to the project config. Preprocessing Layer \u00b6 At the preprocessing layer, Foliant runs the Preprocessor Pipeline, that was defined in the config. Each preprocessor is applied to the Markdown source in the specified order. Preprocessors may: call external services, for example, get data from a Swagger API website or an SQL Database; use local files, for example, templates for text generation, or Markdown snippets for content reuse; call external tools, for example, PlantUML to generate diagrams from code, or ImageMagick to resize images. Finally, the preprocessor may not use any external services or local files, but do the processing itself. For example, perform auto-replace in the text or generate a glossary for the terms in the project. Build Layer \u00b6 At the build layer, Foliant runs the Backend, which was specified in the make command parameters. The Backend produces the documentation in the final format. It may be a local file like PDF or a directory with static website contents, or the Backend may upload the result to an external service like Confluence. Foliant Extensions \u00b6 As was mentioned above, the main Foliant package is Foliant Core. But Foliant Core itself does not build documentation projects, instead it delegates this job to extensions. The Core package also defines base classes for all types of extensions. There are 4 types of base Foliant extensions. CLI extensions extend Foliant\u2019s command-line interface and provide additional actions that may be called from the command line. This is always the topmost component of any Foliant's action. foliant make is in fact a CLI extension that builds projects. Config extensions allow to customize the project configuration parsing, add custom YAML tags and new configuration options. For example, MultiProject extension adds a YAML tag !from which allows to include multiple nested Foliant projects into a single parent project. Preprocessors are modules which apply various transformations to the source Markdown content before passing it to a backend. The transformations include: replacing parts of content according to specific rules; rendering diagrams and schemes from source code; embedding content from external files; getting data for your documentation project from external services, e.g. remote Git repositories, Swagger, Testrail, Figma, Sympli, SQL Databases etc.; seting high-level semantic relations between different parts of content to provide smart cross-target links, or restructure single-source documentation automatically and context-dependently; running arbitrary external commands. Each Foliant project may use any number of preprocessors. Preprocessors are applied sequentially, one after another. The same preprocessor may appear more than once in the pipeline. * Backends build the project's Markdown content into final formats which we call targets , e.g. PDF files or static sites. Backends may call third-party software to produce the final documentation or upload your content to an external service, e.g. Confluence. A single backend may generate multiple targets. Different backends may build the same target. For example, a static site (the site target) can be built with 3 official backends: MkDocs, Slate, and Aglio. If several of them are installed, user may specify the certain backend in the foliant make command or it will be asked interactively. Project Build Process \u00b6 The project build process is operated by Foliant CLI extension called make , which is a part of Foliant Core package. The steps of the build process User calls a make command specifying the backend and the target he wants to build, for example: $ foliant make site --with mkdocs In this example, the target is site and the backend is mkdocs . --with argument is optional, make will assume the backend or ask for user input if there are several options for the target. make launches the project build in the following stages: Configuration parsing . The project configuration file ( foliant.yml by default) is processed by each installed Config extension and saved into the internal context. Copying sources . The src folder which holds Markdown source files of the project is copied into a temporary folder ( __folianttmp__ by default). Preprocessors will only affect the copies, leaving the sources intact. Preprocessing . Each preprocessor defined in the project configuration file is subsequently applied to the temporary folder with copies of Markdown sources. The preprocessors run in an order in which they are specified in the preprocessors list, but each backend may implicitly add specific preprocessors to the beginning or the end of this list. Producing output format . The chosen backend takes the Markdown files from the temporary folder and converts them into the target format. Removing temporary files . If make wasn't run with --keep-tmp|-k argument, the temporary folder with preprocessed Markdown sources is removed from the project dir.","title":"Architecture And Basic Design Concepts"},{"location":"architecture/#architecture-and-basic-design-concepts","text":"","title":"Architecture And Basic Design Concepts"},{"location":"architecture/#overview","text":"Foliant is an open-source application written in Python. Foliant has a modular architecture. It consists of three layers: Configuration Layer reads Foliant project configuration file and CLI parameters supplied by the user; Preprocessing Layer adjusts the Markdown sources before the build; Build Layer produces the documentation in the final format. Each layer is supervised by Foliant Core . Foliant Core is a relatively compact and rarely updated Python package. It is a dispatcher which manages installed extensions according to the configuration. Let's take a closer look at each layer of Foliant's architecture.","title":"Overview"},{"location":"architecture/#configuration-layer","text":"At the configuration Layer, Foliant processes the CLI-command and reads the command arguments, which were supplied by the user. The Main Foliant command is make , it is the command which builds the documentation project. But there are other commands which may do other things, for example, display the project's metadata (the meta generate command) or generate a new project file structure (the init command). If make command was used, Foliant reads and processes the project configuration file. At this stage, all installed Configuration Extensions are applied to the project config.","title":"Configuration Layer"},{"location":"architecture/#preprocessing-layer","text":"At the preprocessing layer, Foliant runs the Preprocessor Pipeline, that was defined in the config. Each preprocessor is applied to the Markdown source in the specified order. Preprocessors may: call external services, for example, get data from a Swagger API website or an SQL Database; use local files, for example, templates for text generation, or Markdown snippets for content reuse; call external tools, for example, PlantUML to generate diagrams from code, or ImageMagick to resize images. Finally, the preprocessor may not use any external services or local files, but do the processing itself. For example, perform auto-replace in the text or generate a glossary for the terms in the project.","title":"Preprocessing Layer"},{"location":"architecture/#build-layer","text":"At the build layer, Foliant runs the Backend, which was specified in the make command parameters. The Backend produces the documentation in the final format. It may be a local file like PDF or a directory with static website contents, or the Backend may upload the result to an external service like Confluence.","title":"Build Layer"},{"location":"architecture/#foliant-extensions","text":"As was mentioned above, the main Foliant package is Foliant Core. But Foliant Core itself does not build documentation projects, instead it delegates this job to extensions. The Core package also defines base classes for all types of extensions. There are 4 types of base Foliant extensions. CLI extensions extend Foliant\u2019s command-line interface and provide additional actions that may be called from the command line. This is always the topmost component of any Foliant's action. foliant make is in fact a CLI extension that builds projects. Config extensions allow to customize the project configuration parsing, add custom YAML tags and new configuration options. For example, MultiProject extension adds a YAML tag !from which allows to include multiple nested Foliant projects into a single parent project. Preprocessors are modules which apply various transformations to the source Markdown content before passing it to a backend. The transformations include: replacing parts of content according to specific rules; rendering diagrams and schemes from source code; embedding content from external files; getting data for your documentation project from external services, e.g. remote Git repositories, Swagger, Testrail, Figma, Sympli, SQL Databases etc.; seting high-level semantic relations between different parts of content to provide smart cross-target links, or restructure single-source documentation automatically and context-dependently; running arbitrary external commands. Each Foliant project may use any number of preprocessors. Preprocessors are applied sequentially, one after another. The same preprocessor may appear more than once in the pipeline. * Backends build the project's Markdown content into final formats which we call targets , e.g. PDF files or static sites. Backends may call third-party software to produce the final documentation or upload your content to an external service, e.g. Confluence. A single backend may generate multiple targets. Different backends may build the same target. For example, a static site (the site target) can be built with 3 official backends: MkDocs, Slate, and Aglio. If several of them are installed, user may specify the certain backend in the foliant make command or it will be asked interactively.","title":"Foliant Extensions"},{"location":"architecture/#project-build-process","text":"The project build process is operated by Foliant CLI extension called make , which is a part of Foliant Core package. The steps of the build process User calls a make command specifying the backend and the target he wants to build, for example: $ foliant make site --with mkdocs In this example, the target is site and the backend is mkdocs . --with argument is optional, make will assume the backend or ask for user input if there are several options for the target. make launches the project build in the following stages: Configuration parsing . The project configuration file ( foliant.yml by default) is processed by each installed Config extension and saved into the internal context. Copying sources . The src folder which holds Markdown source files of the project is copied into a temporary folder ( __folianttmp__ by default). Preprocessors will only affect the copies, leaving the sources intact. Preprocessing . Each preprocessor defined in the project configuration file is subsequently applied to the temporary folder with copies of Markdown sources. The preprocessors run in an order in which they are specified in the preprocessors list, but each backend may implicitly add specific preprocessors to the beginning or the end of this list. Producing output format . The chosen backend takes the Markdown files from the temporary folder and converts them into the target format. Removing temporary files . If make wasn't run with --keep-tmp|-k argument, the temporary folder with preprocessed Markdown sources is removed from the project dir.","title":"Project Build Process"},{"location":"config/","tags":["overview","config","yaml"],"text":"Project Configuration \u00b6 Configuration for Foliant is kept in a YAML file in the project root. The default filename is foliant.yml but you can pick a different name by specifying the --config option: $ foliant make pdf --config myconf.yml Config Sections \u00b6 Root Options chapters preprocessors backend_config Root Options \u00b6 These are the options that are placed at the root of the config file. There are several built-in options, which are described below, but extensions may introduce their own root options (for example, AltStructure or EscapeCode and UnescapeCode ). Refer to each extension\u2019s respective docs for details. Here are all built-in root options: title : My Awesome Project slug : myproj src_dir : src tmp_dir : __folianttmp__ title (string) Project title. It will be used to generate the resulting file name, if slug option is not defined. slug (string) Slug is a string which will be used to name the output file or folder after build. For example, if slug is myproj , the output PDF will be saved into myproj.pdf . If not defined \u2014 title will be used to generate filename. src_dir (string) Name of the directory with your project\u2019s Markdown source files. Default: src . tmp_dir (string) Name of the directory where the intermediate files will be stored during preprocessor pipeline execution. Default: __folianttmp__ . chapters \u00b6 (list) chapters is a list of paths to the Markdown sources which you want to be used in the project. The paths are specified relative to your src dir. Here\u2019s a basic chapters list: chapters : - intro.md - definitions.md - tutorial.md Chapters may be nested with mappings and sublists. These complex structures may be treated differently by different backends: some may ignore nesting, some may use it to alter the resulting build. But usually, these two ideas are shared between all backends: only those Markdown files which are mentioned in the chapters list will appear in the resulting build; the order in which chapters are mentioned in the list will be preserved in the resulting build. Consider this example chapters list: chapters : - intro.md # list item - definitions.md # list item - How To Use This Tutorial : tutorial_help.md # mapping with one element - Creating Documentation With Foliant : # mapping with nested list - preprequisites.md - Preparing Config : - root options.md - chapters.md - preprocessors.md - backend_config.md - create_sources.md - building_project.md In this example first two chapters are defined as simple list items, the third chapter is a mapping with one element, and after that, we see several mappings with nested lists. If we were building a PDF document with Pandoc backend or a static site with Slate backend , this complex chapter structure will be ignored, as if we have supplied a simple flat list: chapters : - intro.md - definitions.md - tutorial_help.md - preprequisites.md - root options.md - chapters.md - preprocessors.md - backend_config.md - create_sources.md - building_project.md In any case, we would get a one-file PDF or a one-page site with data from listed Markdown files in the provided order. But if we were building a site with MkDocs backend , mappings would become meaningful. For example, this element: - How To Use This Tutorial : tutorial_help.md means \"take the source from tutorial_help.md but change its title to How To Use This Tutorial \" in the sidebar. And this element: - Creating Documentation With Foliant : - preprequisites.md - Preparing Config : - root options.md - chapters.md - preprocessors.md - backend_config.md means \"create a subsection Creating Documentation With Foliant in the sidebar and nest the preprequisites.md chapter inside. Then nest another subsection Preparing Config within the first one, and nest four other chapters inside of it\". Refer to each backend\u2019s respective docs for details on how they work with chapters. preprocessors \u00b6 (list) All preprocessors which you want to be used in your project, should be listed under the preprocessors section: preprocessors : - macros : # options are adjusted macros : ref : <if backends=\"pandoc\">{pandoc}</if><if backends=\"mkdocs\">{mkdocs}</if> - flags # all options are set to defaults - includes - blockdiag - plantuml : params : config : !path configs/plantuml.cfg - graphviz : format : svg as_image : false params : Gdpi : 0 Each preprocessor has to be put in a separate list item. If you don\u2019t need to set any options, just put the preprocessor\u2019s name in the item ( flags , includes , and blockdiag in the example above). If you are setting preprocessor options, then make it a mapping, with key being the preprocessor name, and value \u2014 another mapping, with preprocessor options. ( macros , plantuml , and graphviz in the example above). Refer to each preprocessor\u2019s respective docs for details on which options they have and how to set them. There are several things you have to keep in mind when building the preprocessors section: The order matters The order, in which the preprocessors are defined in the list, is the order they are run during the build. For example, if you are using Includes preprocessor to get source code for a PlantUML scheme like this: < plantuml > < include url = \"http://example.com/scheme.puml\" ></ include > </ plantuml > then includes must be defined before plantuml in the preprocessor list. Otherwise, you will get an error from PlantUML when it tries to process <include> tag instead of the scheme code. Some preprocessors are especially sensitive to their position in the list (for example, SuperLinks ) and there may even be situations when you will have to put the same preprocessor in the list twice. Preprocessors are applied to all files Generally, preprocessors just ignore the chapters list and apply to all Markdown files in the src dir. Usually, this is not an issue, but sometimes preprocessor may spend a long time on the files, which may not even get into the resulting build. We suggest you keep your src dir tidy and only put there files that are actually getting into the project. The other solution is to use RemoveExcess preprocessor, which removes all Markdown files, which are not mentioned in the chapters list, from the temporary directory. backend_config \u00b6 (mapping) Keep all your backend settings in backend_config section: backend_config : pandoc : template : !path template/docs.tex vars : title : *title subtitle : User\u2019s Manual logo : !path template/octopus-black-512.png params : pdf_engine : xelatex listings : true mkdocs : use_title : true use_chapters : true use_headings : true mkdocs.yml : repo_name : foliant-docs/docs theme : name : material custom_dir : !path ./theme/ Unlike preprocessors section, backend_config is not a list but a mapping. Hence, the order in which you define backends is not important. Moreover, you can even skip adding a backend into backend_config and still be able to build a project with it. It will just mean that you are using default settings. Modifiers \u00b6 Foliant defines several custom YAML-modifiers, some of which you have already met in the examples above. !include \u00b6 The !include modifier allows inserting content from another YAML-file. For example, if your chapters list has grown so big, that you want to keep it separately from the main config, you can put it into chapters.yml file and include it in foliant.yml : chapters : !include chapters.yml !path, !project_path, !rel_path \u00b6 When used in foliant.yml, !path , !project_path , !rel_path all do the same thing: they resolve the path to an absolute path to make sure the preprocessor or backend processes this file properly. It is recommended, that whenever you supply a path to any file in options, to precede it with the !path modifier: preprocessors : - swaggerdoc : spec_path : !path swagger.yml environment : user_templates : !path widdershins_templates - plantuml : params : config : !path configs/plantuml.cfg backend_config : pandoc : template : !path pandoc/tex_templates/main.tex reference_docx : !path pandoc/docx_references/basic.docx Why there are three of them then, would you ask? The reason is that all foliant tag options in Markdown source files are in fact also YAML-strings, which means that you can supply a list in tag option like this: < jinja2 vars = \"[a1, a2, a3]\" > Received the variables! {% for var in vars %} I\u2019ve got a var {{ var }} {% endfor %} </ jinja2 > And that\u2019s where !project_path , !rel_path modifiers come in really handy. Now you can refer to a file that is sitting in the project root, no matter where inside the src dir your current file is: Here are the contents of this project\u2019s config: < include src = \"!project_path foliant.yml\" ></ include > By convention, all tag parameters, which accept paths to external files, are considered to be paths relative to the current file. But if you want to make things more explicit, you may add the !rel_path tag, which ensures that the path the preprocessor will get, will be relative to the current file: Here are the contents of the adjacent chapter: < include src = \"!rel_path chapter2.md\" ></ include > !path modifier, if used in tag parameters, works the same as !project_path modifier: it returns the absolute path to the file, relative to the project root. !env \u00b6 The !env modifier allows you to access environment variables in the config, as well as in tag options. It is useful if you don\u2019t want to keep credentials in your config files, for example: # foliant.yml preprocessors : dbdoc : host : localhost user : admin password : !env DBA_PASSWORD Now to build this project add the variable to your command: DBA_PASSWORD = WQHsaio901SY foliant make pdf Or, if you are using docker: docker-compose run --rm -e DBA_PASSWORD = WQHsaio901SY foliant make pdf","title":"Project Configuration"},{"location":"config/#project-configuration","text":"Configuration for Foliant is kept in a YAML file in the project root. The default filename is foliant.yml but you can pick a different name by specifying the --config option: $ foliant make pdf --config myconf.yml","title":"Project Configuration"},{"location":"config/#config-sections","text":"Root Options chapters preprocessors backend_config","title":"Config Sections"},{"location":"config/#root-options","text":"These are the options that are placed at the root of the config file. There are several built-in options, which are described below, but extensions may introduce their own root options (for example, AltStructure or EscapeCode and UnescapeCode ). Refer to each extension\u2019s respective docs for details. Here are all built-in root options: title : My Awesome Project slug : myproj src_dir : src tmp_dir : __folianttmp__ title (string) Project title. It will be used to generate the resulting file name, if slug option is not defined. slug (string) Slug is a string which will be used to name the output file or folder after build. For example, if slug is myproj , the output PDF will be saved into myproj.pdf . If not defined \u2014 title will be used to generate filename. src_dir (string) Name of the directory with your project\u2019s Markdown source files. Default: src . tmp_dir (string) Name of the directory where the intermediate files will be stored during preprocessor pipeline execution. Default: __folianttmp__ .","title":"Root Options"},{"location":"config/#chapters","text":"(list) chapters is a list of paths to the Markdown sources which you want to be used in the project. The paths are specified relative to your src dir. Here\u2019s a basic chapters list: chapters : - intro.md - definitions.md - tutorial.md Chapters may be nested with mappings and sublists. These complex structures may be treated differently by different backends: some may ignore nesting, some may use it to alter the resulting build. But usually, these two ideas are shared between all backends: only those Markdown files which are mentioned in the chapters list will appear in the resulting build; the order in which chapters are mentioned in the list will be preserved in the resulting build. Consider this example chapters list: chapters : - intro.md # list item - definitions.md # list item - How To Use This Tutorial : tutorial_help.md # mapping with one element - Creating Documentation With Foliant : # mapping with nested list - preprequisites.md - Preparing Config : - root options.md - chapters.md - preprocessors.md - backend_config.md - create_sources.md - building_project.md In this example first two chapters are defined as simple list items, the third chapter is a mapping with one element, and after that, we see several mappings with nested lists. If we were building a PDF document with Pandoc backend or a static site with Slate backend , this complex chapter structure will be ignored, as if we have supplied a simple flat list: chapters : - intro.md - definitions.md - tutorial_help.md - preprequisites.md - root options.md - chapters.md - preprocessors.md - backend_config.md - create_sources.md - building_project.md In any case, we would get a one-file PDF or a one-page site with data from listed Markdown files in the provided order. But if we were building a site with MkDocs backend , mappings would become meaningful. For example, this element: - How To Use This Tutorial : tutorial_help.md means \"take the source from tutorial_help.md but change its title to How To Use This Tutorial \" in the sidebar. And this element: - Creating Documentation With Foliant : - preprequisites.md - Preparing Config : - root options.md - chapters.md - preprocessors.md - backend_config.md means \"create a subsection Creating Documentation With Foliant in the sidebar and nest the preprequisites.md chapter inside. Then nest another subsection Preparing Config within the first one, and nest four other chapters inside of it\". Refer to each backend\u2019s respective docs for details on how they work with chapters.","title":"chapters"},{"location":"config/#preprocessors","text":"(list) All preprocessors which you want to be used in your project, should be listed under the preprocessors section: preprocessors : - macros : # options are adjusted macros : ref : <if backends=\"pandoc\">{pandoc}</if><if backends=\"mkdocs\">{mkdocs}</if> - flags # all options are set to defaults - includes - blockdiag - plantuml : params : config : !path configs/plantuml.cfg - graphviz : format : svg as_image : false params : Gdpi : 0 Each preprocessor has to be put in a separate list item. If you don\u2019t need to set any options, just put the preprocessor\u2019s name in the item ( flags , includes , and blockdiag in the example above). If you are setting preprocessor options, then make it a mapping, with key being the preprocessor name, and value \u2014 another mapping, with preprocessor options. ( macros , plantuml , and graphviz in the example above). Refer to each preprocessor\u2019s respective docs for details on which options they have and how to set them. There are several things you have to keep in mind when building the preprocessors section: The order matters The order, in which the preprocessors are defined in the list, is the order they are run during the build. For example, if you are using Includes preprocessor to get source code for a PlantUML scheme like this: < plantuml > < include url = \"http://example.com/scheme.puml\" ></ include > </ plantuml > then includes must be defined before plantuml in the preprocessor list. Otherwise, you will get an error from PlantUML when it tries to process <include> tag instead of the scheme code. Some preprocessors are especially sensitive to their position in the list (for example, SuperLinks ) and there may even be situations when you will have to put the same preprocessor in the list twice. Preprocessors are applied to all files Generally, preprocessors just ignore the chapters list and apply to all Markdown files in the src dir. Usually, this is not an issue, but sometimes preprocessor may spend a long time on the files, which may not even get into the resulting build. We suggest you keep your src dir tidy and only put there files that are actually getting into the project. The other solution is to use RemoveExcess preprocessor, which removes all Markdown files, which are not mentioned in the chapters list, from the temporary directory.","title":"preprocessors"},{"location":"config/#backend_config","text":"(mapping) Keep all your backend settings in backend_config section: backend_config : pandoc : template : !path template/docs.tex vars : title : *title subtitle : User\u2019s Manual logo : !path template/octopus-black-512.png params : pdf_engine : xelatex listings : true mkdocs : use_title : true use_chapters : true use_headings : true mkdocs.yml : repo_name : foliant-docs/docs theme : name : material custom_dir : !path ./theme/ Unlike preprocessors section, backend_config is not a list but a mapping. Hence, the order in which you define backends is not important. Moreover, you can even skip adding a backend into backend_config and still be able to build a project with it. It will just mean that you are using default settings.","title":"backend_config"},{"location":"config/#modifiers","text":"Foliant defines several custom YAML-modifiers, some of which you have already met in the examples above.","title":"Modifiers"},{"location":"config/#include","text":"The !include modifier allows inserting content from another YAML-file. For example, if your chapters list has grown so big, that you want to keep it separately from the main config, you can put it into chapters.yml file and include it in foliant.yml : chapters : !include chapters.yml","title":"!include"},{"location":"config/#path-project_path-rel_path","text":"When used in foliant.yml, !path , !project_path , !rel_path all do the same thing: they resolve the path to an absolute path to make sure the preprocessor or backend processes this file properly. It is recommended, that whenever you supply a path to any file in options, to precede it with the !path modifier: preprocessors : - swaggerdoc : spec_path : !path swagger.yml environment : user_templates : !path widdershins_templates - plantuml : params : config : !path configs/plantuml.cfg backend_config : pandoc : template : !path pandoc/tex_templates/main.tex reference_docx : !path pandoc/docx_references/basic.docx Why there are three of them then, would you ask? The reason is that all foliant tag options in Markdown source files are in fact also YAML-strings, which means that you can supply a list in tag option like this: < jinja2 vars = \"[a1, a2, a3]\" > Received the variables! {% for var in vars %} I\u2019ve got a var {{ var }} {% endfor %} </ jinja2 > And that\u2019s where !project_path , !rel_path modifiers come in really handy. Now you can refer to a file that is sitting in the project root, no matter where inside the src dir your current file is: Here are the contents of this project\u2019s config: < include src = \"!project_path foliant.yml\" ></ include > By convention, all tag parameters, which accept paths to external files, are considered to be paths relative to the current file. But if you want to make things more explicit, you may add the !rel_path tag, which ensures that the path the preprocessor will get, will be relative to the current file: Here are the contents of the adjacent chapter: < include src = \"!rel_path chapter2.md\" ></ include > !path modifier, if used in tag parameters, works the same as !project_path modifier: it returns the absolute path to the file, relative to the project root.","title":"!path, !project_path, !rel_path"},{"location":"config/#env","text":"The !env modifier allows you to access environment variables in the config, as well as in tag options. It is useful if you don\u2019t want to keep credentials in your config files, for example: # foliant.yml preprocessors : dbdoc : host : localhost user : admin password : !env DBA_PASSWORD Now to build this project add the variable to your command: DBA_PASSWORD = WQHsaio901SY foliant make pdf Or, if you are using docker: docker-compose run --rm -e DBA_PASSWORD = WQHsaio901SY foliant make pdf","title":"!env"},{"location":"debugging_builds/","tags":["overview","debug"],"text":"Debugging Builds \u00b6 Building simple documentation projects with Foliant is usually straightforward. But Foliant is a powerful, customizable, and very flexible tool, capable of turning your most complex ideas into beautiful documents. If you understand exactly what you want to achieve, you can formalize it at the project config level, and Foliant will perform your task efficiently and precisely. But sometimes it is difficult to configure all preprocessors and backends properly in one go. Some settings are pretty subtle and some preprocessors are quite complicated. The order of applying the preprocessors matters. Some preprocessors may work unexpectedly when paired with others. Fetching data from external sources may also become a bottleneck. The list goes on. Fortunately, Foliant will not ask you to diagnose problems with the car engine without opening the hood. Foliant provides advanced diagnostic facilities such as: detailed event logging in the debug mode ; the pre backend which does nothing, i.e. just returns the preprocessed Markdown; an option to keep the temporary working directory for further analysis. Notes on Docker Use \u00b6 In practice, Foliant is more commonly used with Docker . Here's a tip for debugging Foliant projects with docker. It\u2019s useful to add one more service to your project's default docker-compose.yml . We will call it bash and it will run containers with an interactive shell: version: '3' services: foliant: build: context: ./ dockerfile: ./Dockerfile volumes: - ./:/usr/src/app/ bash: build: context: ./ dockerfile: ./Dockerfile volumes: - ./:/usr/src/app/ entrypoint: /bin/bash Now you can run a container based on the project\u2019s image with an interactive shell. To open the shell for root, run: $ docker-compose run --rm bash To open shell for a user with the same user ID and group ID as your current user on the host machine: $ docker-compose run --user = \" $( id -u ) : $( id -g ) \" --rm bash All debugging approaches which we will discuss next are represented as native Foliant commands, but they are applicable for the Docker way too. Just start your commands with docker-compose run --rm or docker-compose run --user=\"$(id -u):$(id -g)\" --rm to run them within Docker containers. Logging \u00b6 The foliant make ... command runs Foliant in the regular logging mode. In this mode, Foliant and its extensions will only log events with levels of critical , error , and warning . Note that some preprocessors may generate a lot of specific warnings which may or may not indicate that something went wrong. These messages are usually worth studying anyway though. The new log file is created for each build, unless there were no errors and warnings. The logs are stored by default in the project root under the name <unix timestamp of the build>.log , for example, 1628582527.log . With such a naming convention the log file for the latest build will always be last in alphabetical order. The location of the log files may be customized by the --logs|-l command-line option. Debugging Mode Foliant provides the --debug or -d command-line option which enables the debugging mode. In this mode, Foliant and its extensions log not just events with levels critical , error and warning , but also events with levels debug and info . The amount of information you will get from such events depends on the implementation of a particular extension. Complex preprocessors like Includes usually log their actions in great detail. The messages of the info level are usually informative: they may mark the beginning or end of some preprocessor\u2019s work, for example. The messages of the debug level generally show the status of atomic operations, for example, reading data from a certain file. These messages often contain the values of the variables which are important in the current context: paths to files, external commands that are called, etc. But to make sense of these values prepare to get your hands dirty, or, in other words, read and understand the code of the corresponding extension. Here's an example of a command that tells Foliant to build PDF with Pandoc in debug mode: $ foliant make pdf --with pandoc --debug Each log is a text file that contains a number of lines (records). Each record represents a single event and consists of 4 separate fields: date and time of the event registration; context (module name) in which the event was registered; event log level: one of CRITICAL , ERROR , WARNING , DEBUG , INFO ; message text that explains the essence of the event. For example, the first record of a log usually looks like that: 2020-06-25 09:40:54,419 | flt | INFO | Build started. The string flt in the second field means Foliant itself (Foliant Core). The context is hierarchical. The following record represents an event that is registered in the Includes preprocessor which was implicitly called by the Flatten preprocessor, which was implicitly called during project build by Pandoc backend. 2020-06-25 09:40:54,678 | flt.pandoc.flatten.includes | DEBUG | Processing Markdown file: /usr/src/app/__folianttmp__/__all__.md In the next example, Pandoc backend logs the external command that is called to build needed target: 2020-06-25 09:40:54,684 | flt.pandoc | DEBUG | PDF generation command: pandoc --template=\"/foliant_stuff/pandoc_templates/tex_templates/main.tex\" --output \"My_Awesome_Project-1.0-2020-06-25.pdf\" --variable title=\"My Awesome Project\" --variable version=\"1.0\" --variable subtitle=\"Description Of My Awesome Project\" --variable logo=\"/foliant_stuff/pandoc_templates/logos/logo.png\" --variable year=\"2020\" --variable title_page --variable toc --variable tof --pdf-engine=xelatex --listings -f markdown __folianttmp__/__all__.md If you suspect that the command executes wrong, you can run it directly in an interactive shell and study the results. Detailed logging in debug mode allows you to quickly localize problems zooming in from Foliant itself to a specific Foliant extension, a specific Markdown source file, or a specific line of code. This takes effort but with practice allows one to solve complex problems in minimal time. Debugging extensions \u00b6 Each Foliant backend takes preprocessed Markdown content and passes it to an external command (see Architecture And Basic Design Concepts ). For debugging backends it's essential to see the content which the backend actually gets. During the build source files of Foliant project are copied to a temporary working directory. By default, it is called __folianttmp__/ and located in the \u201croot\u201d directory of the project. Source Markdown files of the project are kept unchanged during the build. Any transformations are applied only to the files located in the temporary working directory. The pre backend \u00b6 Foliant Core provides the built-in backend pre which does nothing. More precisely, this backend makes the pre target. The pre target is obtained simply by copying the temporary working directory to a subdirectory inside the project root as the result of the build. The pre target is essentially the content that comes after all preprocessors are applied, but before any backend (other than pre ) is called. Determining the cause of the problem pre backend is convenient to determine the stage of a build which causes problems: configuration stage (reading the configuration file), preprocessing stage (transforming the Markdown content with extensions) or backend stage (producing the output format). If you build a pre target and the results seem fine, then there is a problem with your backend and you have to debug that. You may start with the keep-tmp which we will discuss next. If the problem persists in the results, produced by pre , then it's one of the preprocessors causing trouble or the configuration parser not working properly. In this case, it's a nice idea to stick with the pre target during your experiments so you won't need to wait each time for the backend to complete producing the target while you are debugging the build. To build a Foliant project to the pre target, run the command: $ foliant make pre Keeping the project sources \u00b6 In addition to the pre backend, Foliant Core supports the --keep_tmp or -k command-line option. By default, the temporary working directory ( __folianttmp__ ) is removed after the project build. But if the --keep-tmp or -k option is specified, the temporary working directory will stay in the project root after build. This directory will contain the files that are modified by all preprocessors and the chosen backend. If you have determined that the backend causes issues, pre won't help you anymore. Run the build with -k argument and study the working dir. If it seems fine, then the problem may be with the command that the backend runs to convert Markdown to a target format. Time to study logs ! The following command tells Foliant to build PDF with Pandoc, keeping the temporary working directory after build: $ foliant make pdf --with pandoc --keep_tmp Killing Two Birds With One Stone \u00b6 Now you know what debugging facilities are provided by Foliant. But we strongly recommend you make it a rule to start debugging Foliant projects with one universal shell command: $ foliant make pre --debug This command tells Foliant to build the pre target in the debug mode. And this is a very effective way to get closer to understanding what is wrong with your project.","title":"Debugging Builds"},{"location":"debugging_builds/#debugging-builds","text":"Building simple documentation projects with Foliant is usually straightforward. But Foliant is a powerful, customizable, and very flexible tool, capable of turning your most complex ideas into beautiful documents. If you understand exactly what you want to achieve, you can formalize it at the project config level, and Foliant will perform your task efficiently and precisely. But sometimes it is difficult to configure all preprocessors and backends properly in one go. Some settings are pretty subtle and some preprocessors are quite complicated. The order of applying the preprocessors matters. Some preprocessors may work unexpectedly when paired with others. Fetching data from external sources may also become a bottleneck. The list goes on. Fortunately, Foliant will not ask you to diagnose problems with the car engine without opening the hood. Foliant provides advanced diagnostic facilities such as: detailed event logging in the debug mode ; the pre backend which does nothing, i.e. just returns the preprocessed Markdown; an option to keep the temporary working directory for further analysis.","title":"Debugging Builds"},{"location":"debugging_builds/#notes-on-docker-use","text":"In practice, Foliant is more commonly used with Docker . Here's a tip for debugging Foliant projects with docker. It\u2019s useful to add one more service to your project's default docker-compose.yml . We will call it bash and it will run containers with an interactive shell: version: '3' services: foliant: build: context: ./ dockerfile: ./Dockerfile volumes: - ./:/usr/src/app/ bash: build: context: ./ dockerfile: ./Dockerfile volumes: - ./:/usr/src/app/ entrypoint: /bin/bash Now you can run a container based on the project\u2019s image with an interactive shell. To open the shell for root, run: $ docker-compose run --rm bash To open shell for a user with the same user ID and group ID as your current user on the host machine: $ docker-compose run --user = \" $( id -u ) : $( id -g ) \" --rm bash All debugging approaches which we will discuss next are represented as native Foliant commands, but they are applicable for the Docker way too. Just start your commands with docker-compose run --rm or docker-compose run --user=\"$(id -u):$(id -g)\" --rm to run them within Docker containers.","title":"Notes on Docker Use"},{"location":"debugging_builds/#logging","text":"The foliant make ... command runs Foliant in the regular logging mode. In this mode, Foliant and its extensions will only log events with levels of critical , error , and warning . Note that some preprocessors may generate a lot of specific warnings which may or may not indicate that something went wrong. These messages are usually worth studying anyway though. The new log file is created for each build, unless there were no errors and warnings. The logs are stored by default in the project root under the name <unix timestamp of the build>.log , for example, 1628582527.log . With such a naming convention the log file for the latest build will always be last in alphabetical order. The location of the log files may be customized by the --logs|-l command-line option. Debugging Mode Foliant provides the --debug or -d command-line option which enables the debugging mode. In this mode, Foliant and its extensions log not just events with levels critical , error and warning , but also events with levels debug and info . The amount of information you will get from such events depends on the implementation of a particular extension. Complex preprocessors like Includes usually log their actions in great detail. The messages of the info level are usually informative: they may mark the beginning or end of some preprocessor\u2019s work, for example. The messages of the debug level generally show the status of atomic operations, for example, reading data from a certain file. These messages often contain the values of the variables which are important in the current context: paths to files, external commands that are called, etc. But to make sense of these values prepare to get your hands dirty, or, in other words, read and understand the code of the corresponding extension. Here's an example of a command that tells Foliant to build PDF with Pandoc in debug mode: $ foliant make pdf --with pandoc --debug Each log is a text file that contains a number of lines (records). Each record represents a single event and consists of 4 separate fields: date and time of the event registration; context (module name) in which the event was registered; event log level: one of CRITICAL , ERROR , WARNING , DEBUG , INFO ; message text that explains the essence of the event. For example, the first record of a log usually looks like that: 2020-06-25 09:40:54,419 | flt | INFO | Build started. The string flt in the second field means Foliant itself (Foliant Core). The context is hierarchical. The following record represents an event that is registered in the Includes preprocessor which was implicitly called by the Flatten preprocessor, which was implicitly called during project build by Pandoc backend. 2020-06-25 09:40:54,678 | flt.pandoc.flatten.includes | DEBUG | Processing Markdown file: /usr/src/app/__folianttmp__/__all__.md In the next example, Pandoc backend logs the external command that is called to build needed target: 2020-06-25 09:40:54,684 | flt.pandoc | DEBUG | PDF generation command: pandoc --template=\"/foliant_stuff/pandoc_templates/tex_templates/main.tex\" --output \"My_Awesome_Project-1.0-2020-06-25.pdf\" --variable title=\"My Awesome Project\" --variable version=\"1.0\" --variable subtitle=\"Description Of My Awesome Project\" --variable logo=\"/foliant_stuff/pandoc_templates/logos/logo.png\" --variable year=\"2020\" --variable title_page --variable toc --variable tof --pdf-engine=xelatex --listings -f markdown __folianttmp__/__all__.md If you suspect that the command executes wrong, you can run it directly in an interactive shell and study the results. Detailed logging in debug mode allows you to quickly localize problems zooming in from Foliant itself to a specific Foliant extension, a specific Markdown source file, or a specific line of code. This takes effort but with practice allows one to solve complex problems in minimal time.","title":"Logging"},{"location":"debugging_builds/#debugging-extensions","text":"Each Foliant backend takes preprocessed Markdown content and passes it to an external command (see Architecture And Basic Design Concepts ). For debugging backends it's essential to see the content which the backend actually gets. During the build source files of Foliant project are copied to a temporary working directory. By default, it is called __folianttmp__/ and located in the \u201croot\u201d directory of the project. Source Markdown files of the project are kept unchanged during the build. Any transformations are applied only to the files located in the temporary working directory.","title":"Debugging extensions"},{"location":"debugging_builds/#the-pre-backend","text":"Foliant Core provides the built-in backend pre which does nothing. More precisely, this backend makes the pre target. The pre target is obtained simply by copying the temporary working directory to a subdirectory inside the project root as the result of the build. The pre target is essentially the content that comes after all preprocessors are applied, but before any backend (other than pre ) is called. Determining the cause of the problem pre backend is convenient to determine the stage of a build which causes problems: configuration stage (reading the configuration file), preprocessing stage (transforming the Markdown content with extensions) or backend stage (producing the output format). If you build a pre target and the results seem fine, then there is a problem with your backend and you have to debug that. You may start with the keep-tmp which we will discuss next. If the problem persists in the results, produced by pre , then it's one of the preprocessors causing trouble or the configuration parser not working properly. In this case, it's a nice idea to stick with the pre target during your experiments so you won't need to wait each time for the backend to complete producing the target while you are debugging the build. To build a Foliant project to the pre target, run the command: $ foliant make pre","title":"The pre backend"},{"location":"debugging_builds/#keeping-the-project-sources","text":"In addition to the pre backend, Foliant Core supports the --keep_tmp or -k command-line option. By default, the temporary working directory ( __folianttmp__ ) is removed after the project build. But if the --keep-tmp or -k option is specified, the temporary working directory will stay in the project root after build. This directory will contain the files that are modified by all preprocessors and the chosen backend. If you have determined that the backend causes issues, pre won't help you anymore. Run the build with -k argument and study the working dir. If it seems fine, then the problem may be with the command that the backend runs to convert Markdown to a target format. Time to study logs ! The following command tells Foliant to build PDF with Pandoc, keeping the temporary working directory after build: $ foliant make pdf --with pandoc --keep_tmp","title":"Keeping the project sources"},{"location":"debugging_builds/#killing-two-birds-with-one-stone","text":"Now you know what debugging facilities are provided by Foliant. But we strongly recommend you make it a rule to start debugging Foliant projects with one universal shell command: $ foliant make pre --debug This command tells Foliant to build the pre target in the debug mode. And this is a very effective way to get closer to understanding what is wrong with your project.","title":"Killing Two Birds With One Stone"},{"location":"dev_reference/","tags":["overview","developing"],"text":"Developer\u2019s Reference \u00b6 The power of Foliant is in its extensions. Foliant's ecosystem consists of many beautiful tools for technical writers, but there is still a lot to be done. You are welcome to contribute to Foliant and its extensions. This article contains the reference of the main classes and functions available in Foliant Core. As an extension developer, you will be using them to write your own preprocessors, backends, CLI- and config-extensions. If you are new to extending Foliant, we suggest you to take a look at the Creating a Preprocessor tutorial first. Official Foliant extensions live in Git repositories inside the foliant-docs GitHub group. Check out their source code to find out different approaches to solving techwriters' problems. The repo of Foliant Core is called foliant . The names of Foliant extensions' repositories start with the foliantcontrib. prefix. The repo of this documentation project is called docs . Core Modules \u00b6 Core modules live in the foliant GitHub repository. Foliant Core itself does not build documentation projects, this job is delegated to extensions. But it defines the base classes for all types of extensions. Each base class offers useful attributes and methods which are described later in this article. For more info on how Foliant works check the Architecture And Basic Design Concepts article. This section lists all modules in the Foliant Core package. foliant : backends : base \u2014 defines the base class for all backends; pre \u2014 simplest backend that returns Markdown content processed by specified preprocessors as a build result; preprocessors : base \u2014 defines the base class for all preprocessors; _unescape \u2014 simple preprocessor that escapes pseudo-XML tags (which are normally recognized by other preprocessors as control sequences) in code examples. If you want an opening tag to be ignored by any preprocessor, precede this tag with the < character. The _unescape preprocessor removes these characters before build. Instead of the _unescape preprocessor, you may use more flexible EscapeCode and UnescapeCode preprocessors; cli \u2014 defines the Foliant\u2019s root class Foliant() and the entry_point() method that is used as a starting point for calling Foliant. Nested modules: base \u2014 defines the base class for all CLI extensions; make \u2014 provides the main Foliant\u2019s make command; config : base \u2014 defines the base class for all config extensions; include \u2014 resolves the !include YAML tag that allows to include the content of additional YAML-files in Foliant config. More info in the Project Configuration article; path \u2014 resolves the !path , !project_path and !rep_path YAML tags. These tags are useful for specifying file paths in Foliant config or tag attributes. More info in the Project Configuration article; utils \u2014 defines basic methods that may be used in different types of extensions. The make() Method Arguments \u00b6 The make() method is defined in the foliant.cli.make module. This method is called when the user runs foliant make ... command. For more info on how make command works check the Project Build Process article. The make() method accepts a number of arguments; some of them are then passed to the backends and preprocessors in the build context : target (string) \u2014 required resulting target of the current build; backend (string, defaults to an empty string) \u2014 the name of the backend that is used for the current build; project_path (path, defaults to the current directory path) \u2014 the path of top-level, \u201croot\u201d directory of the current Foliant project; config_file_name (string, defaults to foliant.yml ) \u2014 the file name of the Foliant project\u2019s config; quiet (boolean, default to False ) \u2014 a flag that prohibits writing to STDOUT ; keep_tmp (boolean, defaults to False ) \u2014 a flag that tells Foliant and its extensions to preserve the temporary working directory, which is used during the build; debug (boolean, defaults to False ) \u2014 a flag that tells Foliant and its extensions to log events of info and debug levels in addition to messages of warning , error , and critical levels. Base Classes \u00b6 Foliant Core provides 4 base classes\u2014one per each type of extension. BaseBackend() is defined in the foliant.backends.base module. It is the base class for all backends. Each newly developed backend should: be a module or a package foliant.backends.<your_backend_name> ; import the class BaseBackend() from the foliant.backends.base module; define its own class called Backend() that is inherited from BaseBackend() ; define the method called make() within the Backend class. BasePreprocessor() is defined in the foliant.preprocessors.base module. It is the base class for all preprocessors. Each newly developed preprocessor should: be a module or a package foliant.preprocessors.<your_preprocessor_name> ; import the class BasePreprocessor() from the foliant.preprocessors.base module; define its own class called Preprocessor() that is inherited from BasePreprocessor() ; define the method called apply() within the class Preprocessor() . BaseCli() is defined in the foliant.cli.base module. It is the base class for all CLI extensions. Each newly developed CLI extension should: be a module or a package foliant.cli.<your_cli_extension_name> ; import the class BaseCli() from the foliant.cli.base module; define its own class called Cli() that is inherited from BaseCli() . BaseParser() is defined in the foliant.config.base module. It is the base class for all config extensions. Each newly developed config extension should: be a module or a package foliant.config.<your_config_extension_name> ; import the class BaseParser() from the foliant.config.base module; define its own class called Parser() that is inherited from BaseParser() . The BaseBackend() Attributes \u00b6 Class attributes: targets (tuple of strings) \u2014 names of the targets that the backend can build; required_preprocessors_before (tuple of strings) \u2014 names of the preprocessors that should be applied before all other preprocessors when this backend is used; required_preprocessors_after (tuple of strings) \u2014 names of preprocessors that should be applied after all other preprocessors when this backend is used; instance variables: context \u2014 a dictionary that contains the build context: project_path (path) \u2014 path to the currently built Foliant project; config (dictionary) \u2014 full config of the currently built Foliant project; target (string) \u2014 the name of the resulting target; backend (string) \u2014 the name of the backend that is used in the current build; config \u2014 full config of the currently built Foliant project. The same as context['config'] ; project_path \u2014 path to the currently built Foliant project. The same as context['project_path'] ; working_dir (path) \u2014 the path to the temporary working directory that is used during the build. It is defined as self.project_path / self.config['tmp_dir'] ; logger \u2014 the Logger instance of the current build; quiet (boolean) \u2014 if True , the backend should not write anything to stdout; debug (boolean) \u2014 if True , the backend should log the messages of info and debug levels. The BasePreprocessor() Attributes \u00b6 Class attributes: defaults (dictionary) \u2014 default values of options that may be overridden in config; tags (tuple of strings) \u2014 names of pseudo-XML tags that are recognized by the preprocessor, without < and > characters; instance variables: context \u2014 a dictionary that contains the build context: project_path (path) \u2014 path to the currently built Foliant project; config (dictionary) \u2014 full config of the currently built Foliant project; target (string) \u2014 the name of the resulting target; backend (string) \u2014 the name of the backend that is used in the current build; config \u2014 full config of the currently built Foliant project. The same as self.context['config'] ; project_path \u2014 path to the currently built Foliant project. The same as self.context['project_path'] ; working_dir (path) \u2014 the path to the temporary working directory that is used during the build. It is defined as self.project_path / self.config['tmp_dir'] ; logger \u2014 the Logger instance of the current build; quiet (boolean) \u2014 if True , the backend should not write anything to stdout; debug (boolean) \u2014 if True , the backend should log the messages of info and debug levels. options (dictionary) \u2014 the preprocessor\u2019s options. Is defined as {**self.defaults, **options} , where options is the data that is read from the preprocessor's config in foliant.yml; pattern \u2014 the regular expression pattern that is used to get components of a pseudo-XML tag in an easy way. Defined if self.tags is not empty. Provides the RegEx groups with the following names: tag \u2014 captured tag name; options \u2014 captured tag attributes (options) as a string; this string may be converted into a dictionary by using the self.get_options() method , which is provided by the base class; body \u2014 captured tag body, i.e. the content between the opening and closing tags. BaseCli() Attributes \u00b6 Instance attributes: logger \u2014 the Logger instance of the current build. BaseConfig() Attributes \u00b6 Instance attributes: project_path (path) \u2014 the path to the currently built Foliant project; config_path (path) \u2014 the path to the config file of the currently built Foliant project; logger \u2014 the Logger instance of the current build; quiet (boolean) \u2014 if True , the config extension should not write anything to stdout.","title":"Developer\u2019s Reference"},{"location":"dev_reference/#developers-reference","text":"The power of Foliant is in its extensions. Foliant's ecosystem consists of many beautiful tools for technical writers, but there is still a lot to be done. You are welcome to contribute to Foliant and its extensions. This article contains the reference of the main classes and functions available in Foliant Core. As an extension developer, you will be using them to write your own preprocessors, backends, CLI- and config-extensions. If you are new to extending Foliant, we suggest you to take a look at the Creating a Preprocessor tutorial first. Official Foliant extensions live in Git repositories inside the foliant-docs GitHub group. Check out their source code to find out different approaches to solving techwriters' problems. The repo of Foliant Core is called foliant . The names of Foliant extensions' repositories start with the foliantcontrib. prefix. The repo of this documentation project is called docs .","title":"Developer\u2019s Reference"},{"location":"dev_reference/#core-modules","text":"Core modules live in the foliant GitHub repository. Foliant Core itself does not build documentation projects, this job is delegated to extensions. But it defines the base classes for all types of extensions. Each base class offers useful attributes and methods which are described later in this article. For more info on how Foliant works check the Architecture And Basic Design Concepts article. This section lists all modules in the Foliant Core package. foliant : backends : base \u2014 defines the base class for all backends; pre \u2014 simplest backend that returns Markdown content processed by specified preprocessors as a build result; preprocessors : base \u2014 defines the base class for all preprocessors; _unescape \u2014 simple preprocessor that escapes pseudo-XML tags (which are normally recognized by other preprocessors as control sequences) in code examples. If you want an opening tag to be ignored by any preprocessor, precede this tag with the < character. The _unescape preprocessor removes these characters before build. Instead of the _unescape preprocessor, you may use more flexible EscapeCode and UnescapeCode preprocessors; cli \u2014 defines the Foliant\u2019s root class Foliant() and the entry_point() method that is used as a starting point for calling Foliant. Nested modules: base \u2014 defines the base class for all CLI extensions; make \u2014 provides the main Foliant\u2019s make command; config : base \u2014 defines the base class for all config extensions; include \u2014 resolves the !include YAML tag that allows to include the content of additional YAML-files in Foliant config. More info in the Project Configuration article; path \u2014 resolves the !path , !project_path and !rep_path YAML tags. These tags are useful for specifying file paths in Foliant config or tag attributes. More info in the Project Configuration article; utils \u2014 defines basic methods that may be used in different types of extensions.","title":"Core Modules"},{"location":"dev_reference/#the-make-method-arguments","text":"The make() method is defined in the foliant.cli.make module. This method is called when the user runs foliant make ... command. For more info on how make command works check the Project Build Process article. The make() method accepts a number of arguments; some of them are then passed to the backends and preprocessors in the build context : target (string) \u2014 required resulting target of the current build; backend (string, defaults to an empty string) \u2014 the name of the backend that is used for the current build; project_path (path, defaults to the current directory path) \u2014 the path of top-level, \u201croot\u201d directory of the current Foliant project; config_file_name (string, defaults to foliant.yml ) \u2014 the file name of the Foliant project\u2019s config; quiet (boolean, default to False ) \u2014 a flag that prohibits writing to STDOUT ; keep_tmp (boolean, defaults to False ) \u2014 a flag that tells Foliant and its extensions to preserve the temporary working directory, which is used during the build; debug (boolean, defaults to False ) \u2014 a flag that tells Foliant and its extensions to log events of info and debug levels in addition to messages of warning , error , and critical levels.","title":"The make() Method Arguments"},{"location":"dev_reference/#base-classes","text":"Foliant Core provides 4 base classes\u2014one per each type of extension. BaseBackend() is defined in the foliant.backends.base module. It is the base class for all backends. Each newly developed backend should: be a module or a package foliant.backends.<your_backend_name> ; import the class BaseBackend() from the foliant.backends.base module; define its own class called Backend() that is inherited from BaseBackend() ; define the method called make() within the Backend class. BasePreprocessor() is defined in the foliant.preprocessors.base module. It is the base class for all preprocessors. Each newly developed preprocessor should: be a module or a package foliant.preprocessors.<your_preprocessor_name> ; import the class BasePreprocessor() from the foliant.preprocessors.base module; define its own class called Preprocessor() that is inherited from BasePreprocessor() ; define the method called apply() within the class Preprocessor() . BaseCli() is defined in the foliant.cli.base module. It is the base class for all CLI extensions. Each newly developed CLI extension should: be a module or a package foliant.cli.<your_cli_extension_name> ; import the class BaseCli() from the foliant.cli.base module; define its own class called Cli() that is inherited from BaseCli() . BaseParser() is defined in the foliant.config.base module. It is the base class for all config extensions. Each newly developed config extension should: be a module or a package foliant.config.<your_config_extension_name> ; import the class BaseParser() from the foliant.config.base module; define its own class called Parser() that is inherited from BaseParser() .","title":"Base Classes"},{"location":"dev_reference/#the-basebackend-attributes","text":"Class attributes: targets (tuple of strings) \u2014 names of the targets that the backend can build; required_preprocessors_before (tuple of strings) \u2014 names of the preprocessors that should be applied before all other preprocessors when this backend is used; required_preprocessors_after (tuple of strings) \u2014 names of preprocessors that should be applied after all other preprocessors when this backend is used; instance variables: context \u2014 a dictionary that contains the build context: project_path (path) \u2014 path to the currently built Foliant project; config (dictionary) \u2014 full config of the currently built Foliant project; target (string) \u2014 the name of the resulting target; backend (string) \u2014 the name of the backend that is used in the current build; config \u2014 full config of the currently built Foliant project. The same as context['config'] ; project_path \u2014 path to the currently built Foliant project. The same as context['project_path'] ; working_dir (path) \u2014 the path to the temporary working directory that is used during the build. It is defined as self.project_path / self.config['tmp_dir'] ; logger \u2014 the Logger instance of the current build; quiet (boolean) \u2014 if True , the backend should not write anything to stdout; debug (boolean) \u2014 if True , the backend should log the messages of info and debug levels.","title":"The BaseBackend() Attributes"},{"location":"dev_reference/#the-basepreprocessor-attributes","text":"Class attributes: defaults (dictionary) \u2014 default values of options that may be overridden in config; tags (tuple of strings) \u2014 names of pseudo-XML tags that are recognized by the preprocessor, without < and > characters; instance variables: context \u2014 a dictionary that contains the build context: project_path (path) \u2014 path to the currently built Foliant project; config (dictionary) \u2014 full config of the currently built Foliant project; target (string) \u2014 the name of the resulting target; backend (string) \u2014 the name of the backend that is used in the current build; config \u2014 full config of the currently built Foliant project. The same as self.context['config'] ; project_path \u2014 path to the currently built Foliant project. The same as self.context['project_path'] ; working_dir (path) \u2014 the path to the temporary working directory that is used during the build. It is defined as self.project_path / self.config['tmp_dir'] ; logger \u2014 the Logger instance of the current build; quiet (boolean) \u2014 if True , the backend should not write anything to stdout; debug (boolean) \u2014 if True , the backend should log the messages of info and debug levels. options (dictionary) \u2014 the preprocessor\u2019s options. Is defined as {**self.defaults, **options} , where options is the data that is read from the preprocessor's config in foliant.yml; pattern \u2014 the regular expression pattern that is used to get components of a pseudo-XML tag in an easy way. Defined if self.tags is not empty. Provides the RegEx groups with the following names: tag \u2014 captured tag name; options \u2014 captured tag attributes (options) as a string; this string may be converted into a dictionary by using the self.get_options() method , which is provided by the base class; body \u2014 captured tag body, i.e. the content between the opening and closing tags.","title":"The BasePreprocessor() Attributes"},{"location":"dev_reference/#basecli-attributes","text":"Instance attributes: logger \u2014 the Logger instance of the current build.","title":"BaseCli() Attributes"},{"location":"dev_reference/#baseconfig-attributes","text":"Instance attributes: project_path (path) \u2014 the path to the currently built Foliant project; config_path (path) \u2014 the path to the config file of the currently built Foliant project; logger \u2014 the Logger instance of the current build; quiet (boolean) \u2014 if True , the config extension should not write anything to stdout.","title":"BaseConfig() Attributes"},{"location":"installation/","tags":["tutorial","install"],"text":"Installation \u00b6 Installation of Foliant is split into three stages: installing Python with your system\u2019s package manager, installing Foliant with pip, and optionally installing Pandoc and TeXLive bundle. Below you\u2019ll find the instructions for three popular platforms: macOS, Windows, and Ubuntu. Alternatively, you can avoid installing Foliant and its dependencies on your system by using Docker and Docker Compose . macOS \u00b6 Install Python 3 with Homebrew: $ brew install python3 Install Foliant with pip: $ pip3 install foliant foliantcontrib.init If you plan to bake PDF or DOCX, install Pandoc and MacTeX with Homebrew: $ brew install pandoc mactex librsvg Finally, install the Pandoc backend: $ pip3 install foliantcontrib.pandoc Windows \u00b6 Install Scoop package manager in PowerShell: $ iex (new-object net.webclient).downloadstring('https://get.scoop.sh') Install Python 3 with Scoop: $ scoop install python Install Foliant with pip: $ python -m pip install foliant foliantcontrib.init If you plan to bake pdf or DOCX, install Pandoc and MikTeX with Scoop: $ scoop install pandoc latex Finally, install the Pandoc backend: $ pip3 install foliantcontrib.pandoc Ubuntu \u00b6 Install Python 3 with apt. On 18.04 or higher Python 3 will already be installed. Check that by running: $ python3 If it is not installed, here's a way to install the latest version: $ sudo apt update $ sudo apt install software-properties-common $ sudo add-apt-repository ppa:deadsnakes/ppa $ sudo apt install python3.9 python3-pip Install Foliant with pip: $ pip3 install foliant foliantcontrib.init If you plan to bake pdf or DOCX, install Pandoc and TeXLive with apt and wget: $ sudo apt update $ sudo apt install -y texlive-full librsvg2-bin pandoc Finally, install the Pandoc backend: $ pip3 install foliantcontrib.pandoc Docker \u00b6 There is a selection of Docker images for Foliant in the Docker hub : foliant/foliant:slim \u2014 minimal image of Foliant with no extensions; foliant/foliant \u2014 the basic image with just Foliant core and the init command; foliant/foliant:pandoc \u2014 asic image with the addition of TexLive and Pandoc for building PDF and DOCX; foliant/foliant:full \u2014 the full image with all official Foliant extensions and third-party tools required for them to work. Choose the image you want and run the docker pull command $ docker pull foliant/foliant If you are new to Docker, check our tutorial on using Foliant with Docker .","title":"Installation"},{"location":"installation/#installation","text":"Installation of Foliant is split into three stages: installing Python with your system\u2019s package manager, installing Foliant with pip, and optionally installing Pandoc and TeXLive bundle. Below you\u2019ll find the instructions for three popular platforms: macOS, Windows, and Ubuntu. Alternatively, you can avoid installing Foliant and its dependencies on your system by using Docker and Docker Compose .","title":"Installation"},{"location":"installation/#macos","text":"Install Python 3 with Homebrew: $ brew install python3 Install Foliant with pip: $ pip3 install foliant foliantcontrib.init If you plan to bake PDF or DOCX, install Pandoc and MacTeX with Homebrew: $ brew install pandoc mactex librsvg Finally, install the Pandoc backend: $ pip3 install foliantcontrib.pandoc","title":"macOS"},{"location":"installation/#windows","text":"Install Scoop package manager in PowerShell: $ iex (new-object net.webclient).downloadstring('https://get.scoop.sh') Install Python 3 with Scoop: $ scoop install python Install Foliant with pip: $ python -m pip install foliant foliantcontrib.init If you plan to bake pdf or DOCX, install Pandoc and MikTeX with Scoop: $ scoop install pandoc latex Finally, install the Pandoc backend: $ pip3 install foliantcontrib.pandoc","title":"Windows"},{"location":"installation/#ubuntu","text":"Install Python 3 with apt. On 18.04 or higher Python 3 will already be installed. Check that by running: $ python3 If it is not installed, here's a way to install the latest version: $ sudo apt update $ sudo apt install software-properties-common $ sudo add-apt-repository ppa:deadsnakes/ppa $ sudo apt install python3.9 python3-pip Install Foliant with pip: $ pip3 install foliant foliantcontrib.init If you plan to bake pdf or DOCX, install Pandoc and TeXLive with apt and wget: $ sudo apt update $ sudo apt install -y texlive-full librsvg2-bin pandoc Finally, install the Pandoc backend: $ pip3 install foliantcontrib.pandoc","title":"Ubuntu"},{"location":"installation/#docker","text":"There is a selection of Docker images for Foliant in the Docker hub : foliant/foliant:slim \u2014 minimal image of Foliant with no extensions; foliant/foliant \u2014 the basic image with just Foliant core and the init command; foliant/foliant:pandoc \u2014 asic image with the addition of TexLive and Pandoc for building PDF and DOCX; foliant/foliant:full \u2014 the full image with all official Foliant extensions and third-party tools required for them to work. Choose the image you want and run the docker pull command $ docker pull foliant/foliant If you are new to Docker, check our tutorial on using Foliant with Docker .","title":"Docker"},{"location":"meta/","tags":["overview","config","yaml"],"text":"Metadata \u00b6 User's guide \u00b6 Metadata in Foliant allows you to assign additional properties to the chapters (Markdown files) and sections (parts of a Markdown file) of your project. These properties will be present in the Markdown sources but won't be directly rendered in the built documents. It is up to extensions to make use of these properties and alter your document in the desired way. For instance, Confluence backend uses metadata to upload specific parts of your project into separate Confluence articles. AltStructure config extension uses metadata to rearrange the chapters of your project in the final build. TemplateParser preprocessor can access the metadata and generate chunks of text using the properties defined in it. The foliantcontrib.meta package is required for metadata to work, but you won't need to install it directly. Every extension which uses metadata will install it automatically. Syntax \u00b6 There are two ways to define metadata: In a YAML Front Matter \u2014 to define metadata for a whole chapter, Using the <meta></meta> tag to define metadata for a section, as well as for the chapter. YAML Front Matter YAML Front Matter (or YFM for short) must be defined at the very beginning of a Markdown file. Properties in the YFM are applied to the whole chapter. --- author : John Smith revision_date : 17 August 2021 --- In this example we've defined two properties: author and revision_date for one chapter. Meta tag Meta tags may add properties to smaller chunks of a Markdown file, as well as the whole chapter. If the meta tag is specified at the very beginning of the file, it acts similarly to the YAML Front Matter, e.g. is applied to the whole chapter. To add properties to a smaller chunk of a Markdown file, specify the tag under a heading. The metadata will be applied to the text under the heading and all nested headings. # Specification < meta author = \"John Smith\" revision_date = \"17 August 2021\" ></ meta > Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aliquid neque, in, necessitatibus maxime repudiandae cum. ## Additional notes Lorem ipsum, dolor, sit amet consectetur adipisicing elit. Incidunt pariatur, vel voluptatum exercitationem quae cupiditate! In this example both Specification and Additional notes have the author and revision_date properties. Sections \u00b6 Section is a part of a Markdown file with defined metadata. Section begins with a Markdown heading ( ## Heading ) and ends before the next heading of the same or higher level ( ## Another heading or # Another heading ). A part of a Markdown document is only considered a section if the meta tag is defined in it, with one exception: the main section . The main section is defined implicitly for every chapter of your project, even if there's no meta tag or YFM in it. In other words, if the Markdown file is specified in the chapters in foliant.yml , it will appear in the meta registry, with or without meta properties. Here's an illustration of meta sections in a chapter: Special fields \u00b6 Most meta properties don't mean anything if no extension is using them. The only exception right now is the id property. It is the identifier of a section. IDs are used to distinguish meta sections in the project. They must me unique inside the project. By default IDs are generated by the Meta engine implicitly, but you may override them by defining the id property in the section's metadata. Just make sure that it is unique. The Meta registry \u00b6 All extensions that work with metadata have access to the Meta registry . It is a hierarchical mapping of all sections in the project with all meta properties defined for each section. To take a look at the Meta registry in your project run the meta generate command $ foliant meta generate Generating metadata... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: meta.yml The registry is saved into the meta.yml file. Additional info \u00b6 Metadata works only for files, mentioned in the chapters section in foliant.yml. All other files in src dir are ignored and won't appear in the Meta registry. When using includes , all metadata from the included content is removed. Developer's guide \u00b6 You can use the powers of metadata in your preprocessors, backends and other extensions. You can define fields with special meaning for your tools and process sections based on the values in these fields. Getting metadata \u00b6 Typical way to work with metadata is to run the load_meta function from the foliant.meta.generate module. load_meta(chapters: list, md_root: str or PosixPath = 'src') -> Meta This function returns the Meta registry in a Meta object, which gives access to all sections and meta-fields in the project. The required parameter for load_meta is chapters \u2014 list of chapters loaded from foliant.yml >>> from foliant.meta.generate import load_meta >>> meta = load_meta ([ 'index.md' ]) You can also specify the md_root parameter. If your tool is a CLI extension, md_root should point to the project's src dir. But if you are building a preprocessor or a backend, you would probably want to point it to the __folianttmp__ dir with the current state of the sources. The Meta class \u00b6 Meta class holds all project's metadata and offers few handy methods to work with it. load_meta_from_file(filename: str or PosixPath) This method allows you to load meta into the Meta class instance from previously generated yaml-file. Use it only with an empty Meta class: >>> from foliant.meta.classes import Meta >>> meta = Meta () >>> meta . load_meta_from_file ( 'meta.yml' ) iter_sections() This method returns an iterator which yields project's meta-sections ( Section objects) in the proper order from the first chapter to the last one. get_chapter(self, filename: str or PosixPath) -> Chapter Get chapter ( Chapter object) by its path. filename should be path to chapter relative to the Project dir (or an absolute path). get_by_id(self, id_: str) -> Section Get section ( Section object) by its id. chapters This property holds the list of chapters ( Chapter objects). The Chapter class \u00b6 Chapter class represents a project's chapter. It has several important methods which may be useful for working with metadata. iter_sections() This method returns an iterator which yields chapter's meta-sections ( Section objects) in the proper order from the first chapter to the last one. get_section_by_offset(offset: int) -> Section: This method allows you to get section ( Section object) by just pointing to a place in text. Pointing is performed by specifying offset from the beginning of the file in offset parameter. important properties main_section A property which holds the main section of the chapter. name Chapter's name as stated in foliant.yml (e.g. 'chapter.md' ). filename Chapter's filepath string (e.g. 'src/chapter.md' ). The Section class \u00b6 Section represents a meta section. iter_children() This method returns an iterator which yields the section's child sections ( Section objects) in the proper order. get_source(self, without_meta=True) -> str Returns section's source. The section title is also included in the output. If without_meta is True , all meta tags are cut out from the text. is_main(self) -> bool Determine whether the section is a main section or not. important properties id Holds section's ID. title Section's title. chapter Holds a reference to the section's Chapter object. parent Holds a reference to the section's parent section ( Section object). Main sections have None in this property. children Holds list of section's children ( Section objects) in proper order. data Holds a dictionary with meta properties and their values, defined in the <meta> tag (or the YAML front matter if it is a main section). level Section's level. Main section has level 0 , section, defined inside the ### heading will have the level 3 . start and end Section's offsets from the beginning of the Markdown file. filename Holds a reference to section's chapter's filename for easy access.","title":"Metadata"},{"location":"meta/#metadata","text":"","title":"Metadata"},{"location":"meta/#users-guide","text":"Metadata in Foliant allows you to assign additional properties to the chapters (Markdown files) and sections (parts of a Markdown file) of your project. These properties will be present in the Markdown sources but won't be directly rendered in the built documents. It is up to extensions to make use of these properties and alter your document in the desired way. For instance, Confluence backend uses metadata to upload specific parts of your project into separate Confluence articles. AltStructure config extension uses metadata to rearrange the chapters of your project in the final build. TemplateParser preprocessor can access the metadata and generate chunks of text using the properties defined in it. The foliantcontrib.meta package is required for metadata to work, but you won't need to install it directly. Every extension which uses metadata will install it automatically.","title":"User's guide"},{"location":"meta/#syntax","text":"There are two ways to define metadata: In a YAML Front Matter \u2014 to define metadata for a whole chapter, Using the <meta></meta> tag to define metadata for a section, as well as for the chapter. YAML Front Matter YAML Front Matter (or YFM for short) must be defined at the very beginning of a Markdown file. Properties in the YFM are applied to the whole chapter. --- author : John Smith revision_date : 17 August 2021 --- In this example we've defined two properties: author and revision_date for one chapter. Meta tag Meta tags may add properties to smaller chunks of a Markdown file, as well as the whole chapter. If the meta tag is specified at the very beginning of the file, it acts similarly to the YAML Front Matter, e.g. is applied to the whole chapter. To add properties to a smaller chunk of a Markdown file, specify the tag under a heading. The metadata will be applied to the text under the heading and all nested headings. # Specification < meta author = \"John Smith\" revision_date = \"17 August 2021\" ></ meta > Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aliquid neque, in, necessitatibus maxime repudiandae cum. ## Additional notes Lorem ipsum, dolor, sit amet consectetur adipisicing elit. Incidunt pariatur, vel voluptatum exercitationem quae cupiditate! In this example both Specification and Additional notes have the author and revision_date properties.","title":"Syntax"},{"location":"meta/#sections","text":"Section is a part of a Markdown file with defined metadata. Section begins with a Markdown heading ( ## Heading ) and ends before the next heading of the same or higher level ( ## Another heading or # Another heading ). A part of a Markdown document is only considered a section if the meta tag is defined in it, with one exception: the main section . The main section is defined implicitly for every chapter of your project, even if there's no meta tag or YFM in it. In other words, if the Markdown file is specified in the chapters in foliant.yml , it will appear in the meta registry, with or without meta properties. Here's an illustration of meta sections in a chapter:","title":"Sections"},{"location":"meta/#special-fields","text":"Most meta properties don't mean anything if no extension is using them. The only exception right now is the id property. It is the identifier of a section. IDs are used to distinguish meta sections in the project. They must me unique inside the project. By default IDs are generated by the Meta engine implicitly, but you may override them by defining the id property in the section's metadata. Just make sure that it is unique.","title":"Special fields"},{"location":"meta/#the-meta-registry","text":"All extensions that work with metadata have access to the Meta registry . It is a hierarchical mapping of all sections in the project with all meta properties defined for each section. To take a look at the Meta registry in your project run the meta generate command $ foliant meta generate Generating metadata... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: meta.yml The registry is saved into the meta.yml file.","title":"The Meta registry"},{"location":"meta/#additional-info","text":"Metadata works only for files, mentioned in the chapters section in foliant.yml. All other files in src dir are ignored and won't appear in the Meta registry. When using includes , all metadata from the included content is removed.","title":"Additional info"},{"location":"meta/#developers-guide","text":"You can use the powers of metadata in your preprocessors, backends and other extensions. You can define fields with special meaning for your tools and process sections based on the values in these fields.","title":"Developer's guide"},{"location":"meta/#getting-metadata","text":"Typical way to work with metadata is to run the load_meta function from the foliant.meta.generate module. load_meta(chapters: list, md_root: str or PosixPath = 'src') -> Meta This function returns the Meta registry in a Meta object, which gives access to all sections and meta-fields in the project. The required parameter for load_meta is chapters \u2014 list of chapters loaded from foliant.yml >>> from foliant.meta.generate import load_meta >>> meta = load_meta ([ 'index.md' ]) You can also specify the md_root parameter. If your tool is a CLI extension, md_root should point to the project's src dir. But if you are building a preprocessor or a backend, you would probably want to point it to the __folianttmp__ dir with the current state of the sources.","title":"Getting metadata"},{"location":"meta/#the-meta-class","text":"Meta class holds all project's metadata and offers few handy methods to work with it. load_meta_from_file(filename: str or PosixPath) This method allows you to load meta into the Meta class instance from previously generated yaml-file. Use it only with an empty Meta class: >>> from foliant.meta.classes import Meta >>> meta = Meta () >>> meta . load_meta_from_file ( 'meta.yml' ) iter_sections() This method returns an iterator which yields project's meta-sections ( Section objects) in the proper order from the first chapter to the last one. get_chapter(self, filename: str or PosixPath) -> Chapter Get chapter ( Chapter object) by its path. filename should be path to chapter relative to the Project dir (or an absolute path). get_by_id(self, id_: str) -> Section Get section ( Section object) by its id. chapters This property holds the list of chapters ( Chapter objects).","title":"The Meta class"},{"location":"meta/#the-chapter-class","text":"Chapter class represents a project's chapter. It has several important methods which may be useful for working with metadata. iter_sections() This method returns an iterator which yields chapter's meta-sections ( Section objects) in the proper order from the first chapter to the last one. get_section_by_offset(offset: int) -> Section: This method allows you to get section ( Section object) by just pointing to a place in text. Pointing is performed by specifying offset from the beginning of the file in offset parameter. important properties main_section A property which holds the main section of the chapter. name Chapter's name as stated in foliant.yml (e.g. 'chapter.md' ). filename Chapter's filepath string (e.g. 'src/chapter.md' ).","title":"The Chapter class"},{"location":"meta/#the-section-class","text":"Section represents a meta section. iter_children() This method returns an iterator which yields the section's child sections ( Section objects) in the proper order. get_source(self, without_meta=True) -> str Returns section's source. The section title is also included in the output. If without_meta is True , all meta tags are cut out from the text. is_main(self) -> bool Determine whether the section is a main section or not. important properties id Holds section's ID. title Section's title. chapter Holds a reference to the section's Chapter object. parent Holds a reference to the section's parent section ( Section object). Main sections have None in this property. children Holds list of section's children ( Section objects) in proper order. data Holds a dictionary with meta properties and their values, defined in the <meta> tag (or the YAML front matter if it is a main section). level Section's level. Main section has level 0 , section, defined inside the ### heading will have the level 3 . start and end Section's offsets from the beginning of the Markdown file. filename Holds a reference to section's chapter's filename for easy access.","title":"The Section class"},{"location":"quickstart/","tags":["tutorial"],"text":"Quickstart \u00b6 If you don't have Foliant installed, please follow the instructions first. Step 1. Create a new project $ foliant init Or with Docker $ docker run --rm -it --user $( id -u ) : $( id -g ) -v $( pwd ) :/usr/src/app -w /usr/src/app foliant/foliant init Step 2. cd into the folder created by command $ cd my-project Step 3. Edit the Markdown source of your documentation located in src/index.md . To build a static site with MkDocs , install the MkDocs backend (skip this step if you are using Docker) pip3 install foliantcontrib.mkdocs Step 4. Build the site with foliant make command $ foliant make site Or with Docker $ docker-compose run --rm foliant make site Done! Your site is generated in the My_Project-2020-05-25.mkdocs folder, crank up a webserver to take a look at it $ python3 -m http.server -d My_Project-2020-05-25.mkdocs Serving HTTP on 0 .0.0.0 port 8000 ( http://0.0.0.0:8000/ ) ... Now let's build a DOCX out of the same source. You will need Pandoc and Pandoc backend for that, the instructions for installing them are in the installation guide . Step 5. Build docx $ foliant make docx With Docker you will need to adjust the Dockerfile first, replace the first line with the following - FROM foliant/foliant + FROM foliant/foliant:pandoc and rebuild the image $ docker-compose build Finally, run the make command inside the container $ docker-compose run --rm foliant make docx Done! The My_Project-2020-05-25.docx is created in the project dir. If you want to know more about how Foliant works, check out the Architecture And Basic Design Concepts or just dive straight into Your First Foliant Project .","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"If you don't have Foliant installed, please follow the instructions first. Step 1. Create a new project $ foliant init Or with Docker $ docker run --rm -it --user $( id -u ) : $( id -g ) -v $( pwd ) :/usr/src/app -w /usr/src/app foliant/foliant init Step 2. cd into the folder created by command $ cd my-project Step 3. Edit the Markdown source of your documentation located in src/index.md . To build a static site with MkDocs , install the MkDocs backend (skip this step if you are using Docker) pip3 install foliantcontrib.mkdocs Step 4. Build the site with foliant make command $ foliant make site Or with Docker $ docker-compose run --rm foliant make site Done! Your site is generated in the My_Project-2020-05-25.mkdocs folder, crank up a webserver to take a look at it $ python3 -m http.server -d My_Project-2020-05-25.mkdocs Serving HTTP on 0 .0.0.0 port 8000 ( http://0.0.0.0:8000/ ) ... Now let's build a DOCX out of the same source. You will need Pandoc and Pandoc backend for that, the instructions for installing them are in the installation guide . Step 5. Build docx $ foliant make docx With Docker you will need to adjust the Dockerfile first, replace the first line with the following - FROM foliant/foliant + FROM foliant/foliant:pandoc and rebuild the image $ docker-compose build Finally, run the make command inside the container $ docker-compose run --rm foliant make docx Done! The My_Project-2020-05-25.docx is created in the project dir. If you want to know more about how Foliant works, check out the Architecture And Basic Design Concepts or just dive straight into Your First Foliant Project .","title":"Quickstart"},{"location":"releases/","tags":["changelog"],"text":"History of Releases \u00b6 Here is the single linear history of releases of Foliant and its extensions. It\u2019s also available as an RSS feed . [2022-12-12] foliantcontrib.mkdocs 1.0.15 \u00b6 Raise error if mkdocs build failed but exited with status code 0 [2022-12-11] foliantcontrib.dbmldoc 0.3.3 \u00b6 Update PyDBML version Update default template [2022-12-09] foliantcontrib.macros 1.0.5 \u00b6 Do not fail preprocessors run if no replacement for a macro is found. This case can occur if some undefined environment variable is passed to the macro. [2022-12-04] foliantcontrib.dbmldoc 0.3.2 \u00b6 Update PyDBML version Update default template [2022-11-10] foliantcontrib.init 1.0.10 \u00b6 Add Makefile to the base template [2022-10-31] foliantcontrib.imgcaptions 1.0.4 \u00b6 Fix: wrong captions were placed for figma-like images [2022-10-28] foliantcontrib.mkdocs 1.0.14 \u00b6 Fix _image_pattern not to match image refs with brackets in captions [2022-10-11] foliantcontrib.apireferences 1.0.7 \u00b6 Fix: small fix for proper work when input reference is a list item and have initial and last spaces inside [2022-09-21] foliantcontrib.apireferences 1.0.6 \u00b6 Fix: now the preprocessor works correctly with initial and last spaces in input references like ` Client-API: GET user/info ` [2022-09-01] foliantcontrib.history 1.0.9 \u00b6 The revision argument has been changed so that the default repository branch is used when generating the history. [2022-08-30] foliantcontrib.checksources 1.0.0 \u00b6 Initial release [2022-08-15] foliantcontrib.init 1.0.9 \u00b6 Add template download from got repository [2022-06-27] foliantcontrib.showcommits 1.0.3 \u00b6 Add multithread file processing [2022-06-22] foliantcontrib.apireferences 1.0.5 \u00b6 New: use_multiproject_mode option (default: True ) to use cached API registries in multiproject [2022-06-21] foliant 1.0.13 \u00b6 Add the clean_registry function to make . This function checks if multiproject and removes .apirefregistry files in .multiprojectache . [2022-06-15] foliantcontrib.apireferences 1.0.4 \u00b6 New: endpoint_prefix_list option (default: [] ) for every API class [2022-06-09] foliantcontrib.apireferences 1.0.3 \u00b6 New: trim_query option (default: True) for every API class [2022-05-29] foliantcontrib.imgcaptions 1.0.3 \u00b6 Fix: style was inserted before front matter [2022-05-29] foliantcontrib.mkdocs 1.0.13 \u00b6 Update to mkdocs 1.3.0 Replaced pages to nav in config generation due to github.com/mkdocs/mkdocs/pull/2652 [2021-12-12] foliantcontrib.confluence 0.6.20 \u00b6 Support for Confluence Cloud option to remove HTML formatting. Page URL is now taken from the properties. Article change is now detected by article body and title hash, stored in page properties. [2021-12-12] foliantcontrib.replace 2.0.0 \u00b6 Preprocessor rewritten. [2021-12-12] foliantcontrib.superlinks 1.0.12 \u00b6 Anchors added to beginning of files are not random anymore. [2021-10-07] foliantcontrib.pandoc 1.1.2 \u00b6 Add odt and epub targets basic support. [2021-08-17] foliantcontrib.dbdoc 0.1.8 \u00b6 DBMS python connectors are only imported on use. [2021-08-04] foliantcontrib.argdown 0.1.1 \u00b6 Embed dot and graphml formats with as_image=False . [2021-08-03] foliantcontrib.argdown 0.1.0 \u00b6 Initial release [2021-08-03] foliantcontrib.superlinks 1.0.11 \u00b6 Fix imports. [2021-08-02] foliantcontrib.bpmn 1.0.1 \u00b6 Initial release [2021-08-02] foliantcontrib.pgsqldoc 1.1.7 \u00b6 New utils module [2021-08-02] foliantcontrib.apilinks 1.2.6 \u00b6 New utils module [2021-08-02] foliantcontrib.utils 1.0.3 \u00b6 PreprocessorExt: add debug_msg param to _warning method. [2021-07-21] foliantcontrib.pandoc 1.1.1 \u00b6 Passing metadata parameters via config. Fix: images didn't render during separate sections build. [2021-07-21] foliantcontrib.meta 1.3.3 \u00b6 New utils module. [2021-07-21] foliantcontrib.csvtables 1.0.2 \u00b6 New utils module. [2021-07-21] foliantcontrib.mermaid 1.0.2 \u00b6 New utils module. [2021-07-21] foliantcontrib.ramldoc 1.0.2 \u00b6 New utils module. [2021-07-21] foliantcontrib.admonitions 1.0.1 \u00b6 New utils module. [2021-07-21] foliantcontrib.metagraph 0.1.3 \u00b6 New utils module. [2021-07-21] foliantcontrib.swaggerdoc 1.2.4 \u00b6 New utils module. [2021-07-20] foliantcontrib.apireferences 1.0.2 \u00b6 New utils module. [2021-07-20] foliantcontrib.dbdoc 0.1.7 \u00b6 New utils module. [2021-07-20] foliantcontrib.dbmldoc 0.3.1 \u00b6 New utils module. Update PyDBML parser to 0.4.1. [2021-07-20] foliantcontrib.plantuml 1.0.10 \u00b6 New utils module. [2021-07-20] foliantcontrib.graphviz 1.1.5 \u00b6 New utils module. Output syntax errors in stdout. [2021-07-20] foliantcontrib.templateparser 1.0.6 \u00b6 New utils module. [2021-07-20] foliantcontrib.alt_structure 0.2.1 \u00b6 New utils module. [2021-07-20] foliantcontrib.anchors 1.0.7 \u00b6 New utils module. [2021-07-20] foliantcontrib.confluence 0.6.19 \u00b6 New utils module. [2021-07-19] foliantcontrib.superlinks 1.0.10 \u00b6 New utils module. [2021-07-15] foliantcontrib.utils 1.0.2 \u00b6 Fix error in initial values for combined options classes. Combined options classes now clone input dicts and lists. Combined options: fix validate_in. Header Anchors: fix slate id generator. PreprocessorExt: allow_fail now supports methods without args. [2021-07-14] foliantcontrib.utils 1.0.1 \u00b6 All utils from separate repositories now reside here. [2021-06-18] foliantcontrib.plantuml 1.0.9 \u00b6 Diagrams with same options now generate in single PlantUML instance. Error tracebacks now are shown in console, error images are not generated . Markdown image tags for broken diagrams are not inserted so they won't crash the build of the project. [2021-05-20] foliantcontrib.dbmldoc 0.3.0 \u00b6 Update PyDBML parser to 0.4.0. This breaks backward compatibility with previous versions (reference cols are now lists). [2021-05-07] foliantcontrib.multiproject 1.0.15 \u00b6 Fix crash caused by YAML-tags in subproject config. [2021-05-07] foliantcontrib.yaml_include 1.0.1 \u00b6 Better logging. Improved paths handling. [2021-05-06] foliantcontrib.downloadfile 1.0.1 \u00b6 Better work with multiproject. fail_fast parameter. [2021-05-04] foliantcontrib.downloadfile 1.0.0 \u00b6 Initial release. [2021-04-20] foliantcontrib.anchors 1.0.6 \u00b6 Fix: missing dependency in setup.py [2021-04-01] foliantcontrib.confluence 0.6.18 \u00b6 Fix: external images didn't work. [2021-03-11] foliantcontrib.apilinks 1.2.5 \u00b6 APILinks is now deprecated. Use APIReferences instead. [2021-03-11] foliantcontrib.apireferences 1.0.1 \u00b6 Better logging and output. New: warning_level param. [2021-03-10] foliantcontrib.confluence 0.6.17 \u00b6 Fix: parent_id param didn't work. [2021-03-10] foliantcontrib.yaml_include 1.0.0 \u00b6 Initial release. [2021-03-09] foliantcontrib.apireferences 1.0.0 \u00b6 Initial release. [2021-02-18] foliantcontrib.confluence 0.6.16 \u00b6 New: attaching arbitrary files with help of attachments parameter. New: supply attachments implicitly using ac:image tag, without mentioning them in attachments parameter. Attachments and images which were referenced several times on a page will now only be uploaded once. Allow !path , !project_path modifiers inside ac:attachment param for ac:link , ac:image . [2021-02-03] foliantcontrib.apilinks 1.2.4 \u00b6 Better warning when there's error in API configuration Trailing slash is not enforced in generated urls. Previously didn't work with *.html sites [2021-02-01] foliantcontrib.plantuml 1.0.8 \u00b6 Config options now can be overriden in tag options. Add as_image option, which allows (when false ) to insert svg-code instead of image into the document. [2021-01-25] foliantcontrib.dbdoc 0.1.6 \u00b6 Templates now support imports and includes from the same folder. Fix: Remove TEXT_VC field from Oracle views query, which is absent on some versions. [2021-01-22] foliantcontrib.apilinks 1.2.3 \u00b6 Added options login and password for basic authentication on API sites. [2020-12-18] foliantcontrib.confluence 0.6.15 \u00b6 New: [experimental] raw_confluence tags are now not necessary for ac:... tags, they are escaped automatically. New: supply images with additional parameters using ac:image tag. New: verify_ssl parameter. [2020-12-04] foliantcontrib.templateparser 1.0.5 \u00b6 Config, backend name and target are now available under config , backend and target variables. All the above variables along with meta and meta_object are now moved from _foliant_context into _foliant_vars variable. Fix: external context was overriding meta variables. [2020-12-03] foliantcontrib.replace 1.0.5 \u00b6 Bug fixed with several replaceable items in one string. [2020-11-27] foliantcontrib.superlinks 1.0.9 \u00b6 Fix: BOF anchors bug Fix: common paths processing [2020-11-17] foliantcontrib.customids 1.0.7 \u00b6 Styles are now inserted after YAML Front Matter if that is present. [2020-11-16] foliantcontrib.utils 1.0.0 \u00b6 Initial release. [2020-11-10] foliantcontrib.dbdoc 0.1.5 \u00b6 New: trusted_connection option for Microsoft SQL Server [2020-11-02] foliantcontrib.apilinks 1.2.2 \u00b6 Fix: Endnpoint prefix was ignored in swagger and redoc site backends. Better logging. [2020-10-28] foliantcontrib.superlinks 1.0.8 \u00b6 Fix: proper relative path generation for links. Fix: multiple issues when !path modifier is used in the link tag. BOF anchors now won't be added for mkdocs backend. [2020-10-20] foliantcontrib.pandoc 1.1.0 \u00b6 Option to build separate chapters (sections) into separate files. [2020-10-16] foliantcontrib.confluence 0.6.14 \u00b6 Add code blocks processing for Confluence preprocessor. [2020-10-14] foliantcontrib.graphviz 1.1.4 \u00b6 Fix: issue with MkDocs: raw svgs are now wrapped in div tag. [2020-10-08] foliantcontrib.superlinks 1.0.7 \u00b6 If tag body it empty, superlinks will try to guess the right caption of the link: referenced title for links by title, meta section title for links by meta section, heading title for links by CustomIDs, title from config or first heading title in the file for links to file, anchor name for links by anchors. [2020-10-07] foliantcontrib.apilinks 1.2.1 \u00b6 Renamed spec_url to spec because it may also be a path to local file, Improved swagger.json parsing Added Redoc support ( redoc site backend) [2020-10-06] foliantcontrib.apilinks 1.2.0 \u00b6 Added Swagger UI support, Anchors are now generated properly, with header_anchors tool. Added site_backend optional param to determine for which backend the anchors should be generated. [2020-09-16] foliantcontrib.archeme 1.0.3 \u00b6 Add config_concat option. [2020-09-07] foliantcontrib.reindexer 1.0.1 \u00b6 Add the fulltext_config option. Fix web application example: mention the content field, not only title , in the query filter settings. [2020-08-26] foliantcontrib.superlinks 1.0.6 \u00b6 Improved Confluence links: if section is not uploaded to Confluence, reference to overall project (if it is uploaded to Confluence). [2020-08-25] foliantcontrib.superlinks 1.0.5 \u00b6 New: added Confluence backend support. Fix: links were corrupted when customids were used. Fix: several other bug fixes and optimizations. [2020-08-24] foliantcontrib.swaggerdoc 1.2.3 \u00b6 Fix: build failed when spec referenced to other files with $ref. [2020-08-21] foliantcontrib.confluence 0.6.13 \u00b6 Fix: cache dir for preprocessor was not created [2020-08-21] foliantcontrib.dbdoc 0.1.4 \u00b6 New: Added support for MySQL [2020-08-20] foliantcontrib.dbdoc 0.1.3 \u00b6 New: Added support for Microsoft SQL Server [2020-07-31] foliantcontrib.escapecode 1.0.4 \u00b6 Addition to normalization: remove BOM. [2020-07-29] foliantcontrib.includes 1.1.13 \u00b6 When getting the included content by URL, take into account the charset parameter of the Content-Type response header field. [2020-07-29] foliantcontrib.includes 1.1.12 \u00b6 Add the wrap_code and code_language attributes to mark up the included content as fence code block or inline code. Prevent to create cache directory when it\u2019s not needed. Improve code style. Refactor a little. [2020-07-22] foliant 1.0.12 \u00b6 Add the disable_implicit_unescape option. Remove warning when escape_code is not set. Support the !env YAML tag to use environment variables in the project config. Allow to specify custom directory to store logs with the --logs|-l command line option. Flush output to STDOUT in progress status messages and in the foliant.utils.output() method. Get and log the names and versions of all installed Foliant-related packages. Do not raise exception of the same type that is raised by a preprocessor, raise RuntimeError instead because some exceptions take more arguments than one. [2020-07-22] foliantcontrib.pandoc 1.0.11 \u00b6 Do not re-raise an exception of the same type as raised, raise RuntimeError instead, it\u2019s needed to avoid non-informative error messages. [2020-07-22] foliantcontrib.mkdocs 1.0.12 \u00b6 Do not re-raise an exception of the same type as raised, raise RuntimeError instead, it\u2019s needed to avoid non-informative error messages. [2020-07-20] foliantcontrib.multiproject 1.0.14 \u00b6 Support Foliant Core 1.0.12, write logs to the directory that is specified for the multiproject. [2020-07-19] foliantcontrib.escapecode 1.0.3 \u00b6 Do not fail the preprocessor if saved code is not found, show warning message instead. [2020-07-14] foliantcontrib.confluence 0.6.12 \u00b6 New: option to store passwords in passfile. New: nohead option to crop first title from the page. Fix: better error reporting after updated atlassian-python-api package. New: if you specified only space_key param in metadata and no title , section heading will be used as title. Fix: if hierarchy is created on the test run, missing parents by title are now ignored [2020-07-09] foliantcontrib.multilinetables 1.2.3 \u00b6 Problem with strings containing only hyphens fixed (critical for narrow columns with lists in grid tables). [2020-07-09] foliantcontrib.includes 1.1.11 \u00b6 Add the extensions config parameter to process file types different from .md . Add the url attribute to include content that is available by HTTP(S) URL. [2020-06-16] foliantcontrib.confluence 0.6.11 \u00b6 Fix: XML error in code block conversion. [2020-06-10] foliantcontrib.testrail 1.3.1 \u00b6 Now it's possible to use one image in several test-cases and process it correctly with move_imgs_from_text parameter. [2020-06-09] foliantcontrib.testrail 1.3.0 \u00b6 New parameter: move_imgs_from_text \u2014 converts image links in test cases to ordinary markdown-links, and adds all links to params variable to use in jinja template. Some readme.md bugs fixed. [2020-06-09] foliantcontrib.flatten 1.0.7 \u00b6 Fix: bug in rewrite local links regex. [2020-06-08] foliantcontrib.testrail 1.2.2 \u00b6 Processing of several images in one case-step fixed. [2020-06-05] foliantcontrib.dbdoc 0.1.2 \u00b6 Fix: schema filter in Oracle functions query [2020-06-05] foliantcontrib.swaggerdoc 1.2.2 \u00b6 Fix spec path issue. Fix: jinja mode default template wansn't copied. [2020-06-05] foliantcontrib.dbdoc 0.1.1 \u00b6 New: Add views query to components Fix: Oracle triggers query Fix: Fix both PostgreSQL and Oracle templates [2020-06-03] foliantcontrib.dbmldoc 0.2.4 \u00b6 Pydbml parser version updated to 0.3.2 Updated templates [2020-06-02] foliantcontrib.pgsqldoc 1.1.6 \u00b6 Preprocessor is now deprecated. Please, use DBDoc instead: https://github.com/foliant-docs/foliantcontrib.dbdoc [2020-06-02] foliantcontrib.dbdoc 0.1.0 \u00b6 Initial release [2020-05-28] foliantcontrib.testrail 1.2.1 \u00b6 Bug with copying nonexistent folder to source fixed. [2020-05-27] foliantcontrib.bindfigma 1.0.3 \u00b6 Fix bug in caching. [2020-05-27] foliantcontrib.bindfigma 1.0.2 \u00b6 Add api_caching option. Add source Markdown file path to the messages written to STDOUT. [2020-05-26] foliantcontrib.testrail 1.2.0 \u00b6 Downloading of images from test cases implemented. New parameter: img_folder \u2013 folder name to store downloaded images. Renamed parameters: rewrite_src_file -> rewrite_src_files, screenshots_ext -> img_ext. Paths processing fixed. [2020-05-22] foliantcontrib.templateparser 1.0.4 \u00b6 All variables, supplied in context, are also available inside the _foliant_context variable You can now supply a link to file on remote server in the ext_context parameter. External context yaml-file now may be not a dictionary. In this case it will be available under the context template variable. [2020-05-20] foliantcontrib.superlinks 1.0.4 \u00b6 Fix: bug with chapters. [2020-04-23] foliantcontrib.archeme 1.0.2 \u00b6 Fix the same bug in stronger way. [2020-04-23] foliantcontrib.archeme 1.0.1 \u00b6 Fix very strange bug with modules cache. [2020-04-22] foliantcontrib.dbmldoc 0.1 \u00b6 Initial release [2020-04-17] foliantcontrib.multiproject 1.0.13 \u00b6 Keep temporary directories of built subprojects. It is needed when local includes that rewrite image paths are used. [2020-04-14] foliantcontrib.elasticsearch 1.0.4 \u00b6 Add copy action. [2020-04-10] foliantcontrib.replace 1.0.4 \u00b6 Replace in links and images fixed. [2020-04-10] foliantcontrib.alt_structure 0.2.0 \u00b6 Preprocessor now doesn't read config file, which previously caused MultiProject to run second time. Registry is now flat dictionary. Structure is now supplied via dictionary. [2020-04-10] foliantcontrib.showcommits 1.0.2 \u00b6 Add try_default_path and escape_html options. [2020-04-09] foliantcontrib.elasticsearch 1.0.3 \u00b6 Add require_env option. [2020-04-06] foliantcontrib.meta 1.3.2 \u00b6 Cutomids are now cut out from titles. Added logging. Meta commands now support --debug -d and --quiet -q arguments. meta generate command now gives some verbose output after work. Fix: get_section_by_offset didn't count YFM. [2020-04-02] foliantcontrib.confluence 0.6.10 \u00b6 Disabled tabbed code blocks conversion because of conflicts. [2020-04-01] foliantcontrib.testcoverage 0.1.1 \u00b6 Support meta 1.3.0 [2020-04-01] foliantcontrib.testcoverage 0.1.0 \u00b6 Initial release. [2020-04-01] foliantcontrib.metagraph 0.1.2 \u00b6 Metadata is now taken from src_dir to minimize possible conflicts with other preprocessors. [2020-03-27] foliantcontrib.metagraph 0.1.1 \u00b6 New parameter: draw_all , which controls which sections are included. [2020-03-26] foliantcontrib.metagraph 0.1.0 \u00b6 Initial release [2020-03-26] foliantcontrib.templateparser 1.0.3 \u00b6 Now meta dictionary is available inside templates under meta variable. Project's meta object is available inside templates under meta_object variable. [2020-03-26] foliantcontrib.meta 1.3.1 \u00b6 remove_meta now also trims whitespaces in the beginning of the file after removing YFM Main section's title is now set to first heading, if: the first heading is a 1-level heading (#), the first heading doesn't have meta. Fix: YFM was not included in meta in some cases [2020-03-25] foliantcontrib.confluence 0.6.8 \u00b6 Now foliant-anchors are always added even for new pages [2020-03-25] foliantcontrib.confluence 0.6.9 \u00b6 Introducing import from confluence into Foliant with confluence tag Fix: solved conflicts between inline comments and macros (including anchors) Fix: backend crashed if new page content was empty Markdown code blocks are now converted into code-block macros Markdown task lists are now converted into task-list macros New test_run option [2020-03-12] foliantcontrib.testrail 1.1.11 \u00b6 Misprint fixed. [2020-03-12] foliantcontrib.testrail 1.1.10 \u00b6 Bug with template handling fixed. [2020-03-11] foliantcontrib.confluence 0.6.7 \u00b6 Fix another conflict with escapecode [2020-03-05] foliantcontrib.graphviz 1.1.3 \u00b6 Fix: as_image takes effect only with svg format. [2020-02-28] foliantcontrib.bindfigma 1.0.1 \u00b6 Add hyperlinks and multi_delimeter options. Output error messages to STDOUT. Minor improvements. [2020-02-12] foliantcontrib.alt_structure 0.1.2 \u00b6 Fix: Remove config check from init [2020-02-10] foliantcontrib.alt_structure 0.1.1 \u00b6 Initial release [2020-02-06] foliantcontrib.mkdocs 1.0.11 \u00b6 Get captions for pages from workingdir instead of src_dir [2020-02-04] foliantcontrib.slate 1.0.8 \u00b6 Support meta 1.3 [2020-02-04] foliantcontrib.superlinks 1.0.3 \u00b6 Support meta 1.3. [2020-02-04] foliantcontrib.includes 1.1.9 \u00b6 Support meta 1.3. [2020-02-04] foliantcontrib.meta 1.3.0 \u00b6 Restructure modules to aid import errors. Meta-related functions and classes are now available independantly from foliant.meta package. [2020-02-04] foliantcontrib.confluence 0.6.6 \u00b6 Support meta 1.3 Now foliant-anchors are always added around uploaded content Anchors are now case insensitive [2020-02-03] foliantcontrib.meta 1.2.3 \u00b6 Add get_chapter method to Meta class. Add Developer's guide to readme. [2020-01-31] foliantcontrib.elasticsearch 1.0.2 \u00b6 Add format option. Use escape_html only for format: plaintext . [2020-01-31] foliantcontrib.elasticsearch 1.0.1 \u00b6 Add escape_html option. Perform actions delete , create by default. Fix HTML markup in Web application example. [2020-01-22] foliantcontrib.confluence 0.6.5 \u00b6 Fix: build crashed when several resolved inline comments referred to same string [2019-12-24] foliantcontrib.superlinks 1.0.2 \u00b6 add dependencies order check. rename anchor parameter to id. add anchor parameter for possibly global anchor search. link to anchors in Confluence are now partly supported. [2019-12-24] foliantcontrib.anchors 1.0.4 \u00b6 Applied anchors are now checked from all chapters for flat backends. [2019-12-24] foliantcontrib.testrail 1.1.9 \u00b6 Function to get case data by id added. [2019-12-23] foliantcontrib.superlinks 1.0.1 \u00b6 Initial release. [2019-12-20] foliantcontrib.anchors 1.0.3 \u00b6 Better regex patterns. Conflicts are now determined for each backend separately. Add confluence anchors. [2019-12-20] foliantcontrib.meta 1.2.2 \u00b6 Don't require empty line between heading and meta tag. Allow comments in YFM. Better patterns for sections detection. [2019-12-12] foliantcontrib.showcommits 1.0.1 \u00b6 Fix template processing. Log repo path. [2019-12-12] foliantcontrib.flatten 1.0.6 \u00b6 Rewrite local links (e.g. some_file.md#some_id \u2192 #some_id ). [2019-12-04] foliantcontrib.slate 1.0.7 \u00b6 Fix: images are preserved in the output, even from subfolders. YAML Front Matter from the sources is now ignored. [2019-12-02] foliantcontrib.init 1.0.8 \u00b6 Add comment to Dockerfile with option to use Foliant full image. Remove slugs from docker-compose. Now the service is always named foliant . [2019-11-22] foliantcontrib.meta 1.2.1 \u00b6 Fix bug with imports. [2019-11-21] foliantcontrib.meta 1.2.0 \u00b6 Support sections meta.yml format restructure [2019-11-21] foliantcontrib.confluence 0.6.4 \u00b6 Support meta 1.2. Now you can publish sections to confluence. [2019-11-21] foliantcontrib.includes 1.1.8 \u00b6 Support meta 1.2. [2019-11-20] foliantcontrib.imgcaptions 1.0.2 \u00b6 Fix: stylesheet_path only worked with the !project_path modifier. Add the template parameter to customize the caption HTML tag. [2019-11-09] foliantcontrib.mdtopdf 1.0.0 \u00b6 Initial release. [2019-11-06] foliantcontrib.ramldoc 1.0.1 \u00b6 Initial release [2019-10-28] foliantcontrib.aglio 1.0.0 \u00b6 Initial release [2019-10-25] foliantcontrib.slate 1.0.6 \u00b6 Fix bug with error catching introduced in 1.0.5 [2019-10-25] foliantcontrib.slate 1.0.5 \u00b6 Better error reporting. Fixes for working with includes. [2019-10-16] foliantcontrib.escapecode 1.0.2 \u00b6 Improve flexibility: add new actions, allow to override defaults. [2019-10-16] foliantcontrib.multiproject 1.0.12 \u00b6 Take into account the quiet flag. Require Foliant 1.0.11 for this reason. [2019-10-16] foliantcontrib.includes 1.1.7 \u00b6 Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. [2019-10-16] foliant 1.0.11 \u00b6 Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. Pass the quiet flag to BaseParser() as an optional argument for using in config extensions. [2019-10-15] foliantcontrib.subset 1.0.9 \u00b6 Fix incompatibilities with newer versions of modules: Cliar, PyYAML. [2019-10-10] foliantcontrib.multiproject 1.0.11 \u00b6 Allow recursive processing of nested subprojects. Allow to specify type (HTML/Markdown) and location for repo links. Fix incompatibility with new Cliar: key names should not contain hyphens. [2019-10-07] foliantcontrib.confluence 0.6.3 \u00b6 Remove resolved inline comments as they mix up with unresolved. [2019-10-04] foliantcontrib.mermaid 1.0.1 \u00b6 Better error reporting [2019-10-01] foliantcontrib.confluence 0.6.2 \u00b6 Added parent_title parameter. Fix: images were not uploaded for new pages. [2019-10-01] foliantcontrib.multiproject 1.0.10 \u00b6 Allow the first heading to be located not in the beginning of a document. [2019-09-26] foliantcontrib.flatten 1.0.5 \u00b6 Add the keep_sources option to keep original files in the temporary working directory after flattening. [2019-09-25] foliantcontrib.confluence 0.6.0 \u00b6 Now content is put in place of foliant anchor or instead of foliant_start ... foliant_end anchors on the target page. If no anchors on page \u2014 content replaces the whole body. New modes (backwards compatibility is broken!). Now following files are available for debug in cache dir: 1. markdown before conversion to html. 2. Converted to HTML. 3. Final XHTML source which is uploaded to confluence. Working (but far from perfect) detection if file was changed. Only upload changed attachments. Updating attachments instead of deleting and uploading again. [2019-09-19] foliantcontrib.confluence 0.5.2 \u00b6 Completely rewrite restoring inline comments feature. Add restore_comments and resolve_if_changed emergency options. Allow insert raw confluence code (macros, etc) inside <raw_confluence> tag. [2019-09-19] foliantcontrib.history 1.0.8 \u00b6 Allow to ignore merge commits in from: commits mode. [2019-09-18] foliantcontrib.history 1.0.7 \u00b6 Allow to get repo names from README files. [2019-09-16] foliantcontrib.history 1.0.6 \u00b6 Fix some regex patterns. [2019-09-16] foliantcontrib.history 1.0.5 \u00b6 Allow to generate history based on tags and commits. [2019-09-13] foliantcontrib.history 1.0.4 \u00b6 Add templates for target Markdown headings and RSS items titles. [2019-09-13] foliantcontrib.history 1.0.3 \u00b6 Escape regex metacharacters in headings. [2019-09-10] foliantcontrib.epsconvert 1.0.7 \u00b6 Fix image reference detection pattern, other minor fixes. [2019-09-09] foliantcontrib.history 1.0.2 \u00b6 Do not generate common top-level heading of target Markdown content. [2019-09-06] foliantcontrib.history 1.0.1 \u00b6 Add RSS feed generation. [2019-08-28] foliantcontrib.includes 1.1.6 \u00b6 Escape regular expression metacharacters in starting and ending headings, IDs, modifiers. [2019-08-27] foliantcontrib.includes 1.1.5 \u00b6 Remove meta blocks from the included content. [2019-08-26] foliantcontrib.mkdocs 1.0.10 \u00b6 Fix pattern for heading detection. [2019-08-26] foliantcontrib.swaggerdoc 1.2.0 \u00b6 Add spec_path and spec_url parameters. All path tag parameters are now loaded relative to current file. Better logging and error reporting [2019-08-26] foliantcontrib.customids 1.0.6 \u00b6 Allow to define custom styles for headings of each level. [2019-08-26] foliantcontrib.confluence 0.4.1 \u00b6 Fix: conflict with escape_code [2019-08-23] foliantcontrib.includes 1.1.4 \u00b6 Allow for the starting and ending headings to be 1-character long. [2019-08-23] foliantcontrib.confluence 0.4.0 \u00b6 Fix: attachments were not uploaded for nonexistent pages Change confluence api wrapper to atlassian-python-api Rename backend to confluence Better error reporting [2019-08-23] foliantcontrib.mkdocs 1.0.9 \u00b6 Allow the first heading to be located not in the beginning of a document. [2019-08-23] foliantcontrib.epsconvert 1.0.6 \u00b6 Bug fix: update current directory path before processing of Markdown file content, not after. [2019-08-22] foliantcontrib.imagemagick 1.0.2 \u00b6 Bug fix: update current directory path before processing of Markdown file content, not after. [2019-08-22] foliantcontrib.meta 1.1.0 \u00b6 Remove the sections entity. Restructure code. [2019-08-22] foliantcontrib.confluence 0.3.0 \u00b6 Fix bug with images. Add multiple modes and mode parameter. Add toc parameter to automatically insert toc. Fix: upload attachments before text update (this caused images to disappear after manually editing). [2019-08-20] foliantcontrib.meta 1.0.3 \u00b6 Add span to meta [2019-08-16] foliantcontrib.confluence 0.2.0 \u00b6 Allow to input login and/or password during build Added pandoc_path option Better logging and error catching [2019-08-15] foliantcontrib.confluence 0.1.0 \u00b6 Initial release. [2019-08-14] foliantcontrib.includes 1.1.3 \u00b6 Allow to specify IDs of anchors in the from_id and to_id attributes. Support the to_end attribute. [2019-08-02] foliantcontrib.escapecode 1.0.1 \u00b6 Do not ignore diagram definitions. It should be possible to escape the tags used by diagram drawing preprocessors. If some preprocessors need to work with the content that is recognized as code, call UnescapeCode explicitly before them. [2019-08-01] foliantcontrib.replace 1.0.3 \u00b6 Fixed issue with PyYAML deprecated loader. [2019-08-01] foliantcontrib.mermaid 1.0.0 \u00b6 Initial release [2019-07-30] foliantcontrib.includes 1.1.2 \u00b6 Fix include statement regex pattern. Tags joined with | must be in non-capturing parentheses. [2019-07-30] foliant 1.0.10 \u00b6 Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed. [2019-07-30] foliantcontrib.includes 1.1.1 \u00b6 Support escape_code config option. Require Foliant 1.0.10 and escapecode preprocessor 1.0.0. Process sethead recursively. [2019-07-16] foliantcontrib.bindsympli 1.0.14 \u00b6 Add width attribute to <sympli> tag. Refactor a little. [2019-07-15] foliantcontrib.slugs 1.0.1 \u00b6 Add !version and !commit_count YAML tags. [2019-07-09] foliantcontrib.docus 0.2.0 \u00b6 More flexible chapters parsing. Lists are now not mandatory. [2019-07-09] foliantcontrib.docus 0.1.0 \u00b6 Initial release. [2019-07-05] foliantcontrib.runcommands 1.0.1 \u00b6 Capture the output of an external command and write it to STDOUT. [2019-07-01] foliantcontrib.meta 1.0.2 \u00b6 Fix: subsections title may be specified in YFM; Fix: in subsections title was being cropped out [2019-07-01] foliantcontrib.project_graph 1.0.1 \u00b6 Rename rel attributes: rel_path to path , rel_id to id Relation types now don't implicitly go to edge labels. Add label explicitly from now on. Fixed: relations to !project_path and !rel_path didn't work. [2019-07-01] foliantcontrib.meta 1.0.1 \u00b6 Fix: seeds for main sections were not processed. Add debug messages for seeds processing. [2019-06-28] foliantcontrib.project_graph 1.0.0 \u00b6 Initial release. [2019-06-28] foliantcontrib.meta 1.0.0 \u00b6 Initial release. [2019-06-28] foliantcontrib.includes 1.1.0 \u00b6 Support Foliant 1.0.9. Add processing of !path , !project_path , and !rel_path modifiers (i.e. YAML tags) in attribute values of pseudo-XML tags inside the included content. Replace the values that preceded by these modifiers with absolute paths resolved depending on current context. Allow to specify the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to, with optional project_root attribute of the <include> tag. This can be necessary to resolve the !path and the !project_path modifiers in the included content correctly. Allow to specify all necessary parameters of each include statement as attribute values of pseudo-XML tags. Keep legacy syntax for backward compatibility. Update README. [2019-06-17] foliant 1.0.9 \u00b6 Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags. [2019-06-14] foliantcontrib.templateparser 1.0.2 \u00b6 support PyYAML 5.1 [2019-06-14] foliantcontrib.bindsympli 1.0.13 \u00b6 Set 2-minutes timeout instead of default 30-seconds when launching Chromium. Use page.waitForSelector() instead of page.waitForNavigation() . Use custom sleep() function for intentional delays. [2019-06-13] foliantcontrib.badges 1.0.2 \u00b6 support params which alter badge look to be supplied in tag params [2019-06-11] foliantcontrib.badges 1.0.1 \u00b6 force img mode on pdf and docx add target parameter [2019-06-11] foliantcontrib.badges 1.0.0 \u00b6 Initial release [2019-06-10] foliantcontrib.admonitions 1.0.0 \u00b6 Initial release. [2019-05-20] foliantcontrib.graphviz 1.1.1 \u00b6 Remove src param. (Use includes instead) Allow separate tags fail. Preprocessor would issue warning and continue work. [2019-05-20] foliantcontrib.templateparser 1.0.1 \u00b6 add ext_context param for external file with context allow separate templates to fail, the preprocessor would issue warning and skip them [2019-05-17] foliantcontrib.blockdiag 1.0.5 \u00b6 Attributes of pseudo-XML tags have higher priority than config file options. [2019-05-17] foliantcontrib.plantuml 1.0.6 \u00b6 Attributes of <plantuml> tag have higher priority than config file options. [2019-05-14] foliantcontrib.templateparser 1.0.0 \u00b6 Initial release [2019-04-30] foliantcontrib.bindsympli 1.0.12 \u00b6 Capture the output of the Puppeter-based script and write it to STDOUT. [2019-04-15] foliantcontrib.swaggerdoc 1.1.3 \u00b6 Fix issues with json and yaml. All spec files are now loaded with yaml loader. Change PyYAML to ruamel.yaml jinja mode is deprecated, widdershins is the default mode [2019-04-10] foliantcontrib.mkdocs 1.0.8 \u00b6 Escape control characters (double quotation marks, dollar signs, backticks) that may be used in system shell commands. [2019-04-10] foliantcontrib.pandoc 1.0.10 \u00b6 Add backticks to the set of characters that should be escaped. [2019-04-10] foliantcontrib.pandoc 1.0.9 \u00b6 Escape double quotation marks ( \" ) and dollar signs ( $ ) which may be used in PDF, docx, and TeX generation commands as parts of filenames, variable values, etc. Enclose filenames that may be used in commands into double quotes. [2019-04-05] foliantcontrib.includes 1.0.11 \u00b6 Take into account the results of work of preprocessors that may be applied before includes within a single Foliant project. Rewrite the currently processed Markdown file path with the path of corresponding file that is located inside the project source directory only if the currently processed Markdown file is located inside the temporary working directory and the included file is located outside the temporary working directory. Keep all paths unchanged in all other cases. [2019-03-27] foliantcontrib.graphviz 1.0.6 \u00b6 Added as_image option. [2019-03-21] foliantcontrib.anchors 1.0.5 \u00b6 Anchor headings conflicts are now more accurate, because for flat backends are checked for all chapters. Anchors with illegal characters (list in readme) now will be removed. Preprocessor now can also work with custom ids. [2019-03-21] foliantcontrib.anchors 1.0.2 \u00b6 Added preprocessor_ext for better warnings (and better code) [2019-03-21] foliantcontrib.anchors 1.0.1 \u00b6 Added 'element' option to customize anchor span element. [2019-03-21] foliantcontrib.anchors 1.0.0 \u00b6 Initial release [2019-03-14] foliantcontrib.notifier 1.0.0 \u00b6 Initial release. [2019-02-21] foliantcontrib.testrail 1.1.8 \u00b6 Hardcoded section headers processing removed. [2019-02-18] foliantcontrib.replace 1.0.2 \u00b6 Now it's possible to pass the lambda function from dictionary file. with_confirmation parameter added. [2019-02-15] foliantcontrib.csvtables 1.0.1 \u00b6 setup.py fixed. [2019-02-14] foliantcontrib.graphviz 1.0.4 \u00b6 Moved combined_options out [2019-02-14] foliantcontrib.apilinks 1.1.3 \u00b6 Moved combined_options into a submodule [2019-02-14] foliantcontrib.pgsqldoc 1.1.5 \u00b6 Move combined_options into another module [2019-02-12] foliantcontrib.testrail 1.1.7 \u00b6 Sections exclusion fixed. [2019-02-08] foliantcontrib.testrail 1.1.6 \u00b6 Case structure output fixed if any problem occurs. [2019-02-01] foliantcontrib.testrail 1.1.5 \u00b6 Bug with test case table numbering when deleting empty objects fixed. Readme updated. [2019-01-21] foliantcontrib.apilinks 1.1.1 \u00b6 Added filename to warnings. [2019-01-10] foliantcontrib.bindsympli 1.0.11 \u00b6 Disable images downloading from design pages only, but not from login page. [2018-12-24] foliantcontrib.graphviz 1.0.2 \u00b6 Fixed external diagrams not reloading on change. Fixed external diagrams are not crashing preprocessor if the file is missing. [2018-12-20] foliantcontrib.bindsympli 1.0.10 \u00b6 Check if the design page exists and the image URL is valid. [2018-12-17] foliantcontrib.graphviz 1.0.1 \u00b6 Added 'src' tag option to load diagram source from external file. [2018-12-17] foliantcontrib.graphviz 1.0.0 \u00b6 Initial release [2018-12-13] foliantcontrib.apilinks 1.1.0 \u00b6 Prefixes are now case insensitive. Only prefixes which are defined are trimmed. New option only-defined-prefixes to ignore all prefixes which are not listed in config. Options renamed and regrouped. Breaks backward compatibility. Support of several reference pattern and properties (to catch models). Now search on API page for headers h1, h2, h3 and h4. [2018-12-06] foliantcontrib.subset 1.0.8 \u00b6 Remove forgotten unnecessary import. [2018-12-06] foliantcontrib.subset 1.0.7 \u00b6 Move the imports of the oyaml module directly into the methods that use it. [2018-12-06] foliantcontrib.bindsympli 1.0.9 \u00b6 Move the while loop from JavaScript code to Python code. Add the max_attempts config option. Require Foliant 1.0.8 because of using the utils.output() method. [2018-12-04] foliantcontrib.subset 1.0.6 \u00b6 Fix a bug: check if subset partial config contains chapters section correctly. Inherit the class Cli from BaseCli , not from Cliar . [2018-12-04] foliantcontrib.multiproject 1.0.9 \u00b6 Inherit the class Cli from BaseCli , not from Cliar . [2018-12-04] foliantcontrib.apilinks 1.0.5 \u00b6 Now both command and endpoint prefix are ensured to start from root (/). [2018-12-03] foliantcontrib.apilinks 1.0.4 \u00b6 Fix not catching errors from urllib. Added 'ignoring-prefix' option. Added 'endpoint-prefix' option into API->Name section. [2018-11-29] foliantcontrib.apilinks 1.0.3 \u00b6 Add require-prefix option. [2018-11-29] foliantcontrib.apilinks 1.0.2 \u00b6 Trim prefixes function. [2018-11-29] foliantcontrib.apilinks 1.0.1 \u00b6 Update docs, fix anchor error. Add all HTTP verbs to regular expression. [2018-11-27] foliantcontrib.apilinks 1.0.0 \u00b6 Initial release. [2018-11-23] foliantcontrib.templates.preprocessor 1.0.3 \u00b6 Fix packages value in setup.py of the template: use foliant.preprocessors instead of foliantcontrib.preprocessors . Require Foliant 1.0.8 in setup.py of the template. [2018-11-20] foliantcontrib.testrail 1.1.4 \u00b6 Another bug with multi-select parameter processing fixed. [2018-11-20] foliantcontrib.testrail 1.1.3 \u00b6 Jinja templates updated. Bug with multi-select parameter processing fixed. [2018-11-19] foliantcontrib.testrail 1.1.2 \u00b6 Now it's possible to use dropdown type parameters for test cases samplings. [2018-11-19] foliantcontrib.testrail 1.1.1 \u00b6 Readme updated. [2018-11-19] foliantcontrib.testrail 1.1.0 \u00b6 Removed parameters: platforms, platform_id, add_cases_without_platform, add_unpublished_cases. Added parameters: exclude_suite_ids \u2014 to exclude suites from final document by ID, exclude_section_ids \u2014 to exclude sections from final document by ID, exclude_case_ids \u2014 to exclude cases from final document by ID, add_case_id_to_std_table - to add column with case ID to the testing table, multi_param_name - name of custom TestRail multi-select parameter for cases sampling, multi_param_select - values of multi-select parameter for cases sampling, multi_param_select_type \u2014 sampling method, add_cases_without_multi_param - to add cases without any value of multi-select parameter, add_multi_param_to_case_header \u2014 to add values of multi-select parameter to the case headers, add_multi_param_to_std_table \u2014 to add column with values of multi-select parameter to the testing table, checkbox_param_name - name of custom TestRail checkbox parameter for cases sampling, checkbox_param_select_type \u2014 state of custom TestRail checkbox parameter for cases sampling, choose_priorities \u2014 selection of case priorities for cases sampling, add_priority_to_case_header - to add priority to the case header, add_priority_to_std_table \u2014 to add column with priority to the testing table. Renamed parameters: add_case_id_to_case_name -> add_case_id_to_case_header. Fixed config parsing. [2018-11-19] foliantcontrib.pgsqldoc 1.1.3 \u00b6 Add tests; refactor code Fix triggers and functions; add description to functions Fix template [2018-11-16] foliantcontrib.templates.preprocessor 1.0.2 \u00b6 Require foliantcontrib.init 1.0.7, import the output() method. Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.multiproject 1.0.8 \u00b6 Do not rewrite source Markdown file if an error occurs in RepoLink preprocessor. [2018-11-16] foliantcontrib.macros 1.0.4 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.includes 1.0.10 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.imgcaptions 1.0.1 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.imagemagick 1.0.1 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.flags 1.0.2 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.epsconvert 1.0.5 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.customids 1.0.5 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.bindsympli 1.0.8 \u00b6 Do not rewrite source Markdown file if an error occurs. [2018-11-16] foliantcontrib.gupload 1.1.5 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-16] foliantcontrib.slate 1.0.4 \u00b6 Provide compatibility with Foliant 1.0.8. Fix preprocessor: if error source won't be cleared. [2018-11-14] foliantcontrib.plantuml 1.0.5 \u00b6 Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8. [2018-11-14] foliantcontrib.blockdiag 1.0.4 \u00b6 Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8. [2018-11-14] foliantcontrib.mkdocs 1.0.7 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-14] foliantcontrib.pandoc 1.0.8 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-14] foliantcontrib.init 1.0.7 \u00b6 Provide compatibility with Foliant 1.0.8. [2018-11-14] foliant 1.0.8 \u00b6 Restore quiet mode. Add the output() method for using in preprocessors. [2018-11-14] foliantcontrib.pandoc 1.0.7 \u00b6 Provide compatibility with Foliant 1.0.7. [2018-11-14] foliantcontrib.mkdocs 1.0.6 \u00b6 Provide compatibility with Foliant 1.0.7. [2018-11-14] foliant 1.0.7 \u00b6 Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs. [2018-11-13] foliantcontrib.init 1.0.6 \u00b6 Provide compatibility with Foliant 1.0.7. [2018-11-12] foliantcontrib.multilinetables 1.2.2 \u00b6 Problem with deletion of table strings containing only spaces fixed (critical for lists in grid tables). [2018-11-09] foliantcontrib.subset 1.0.5 \u00b6 Do not use yaml alias for oyaml module to prevent possible influence of this overriding on other parts of code. [2018-11-09] foliantcontrib.plantuml 1.0.4 \u00b6 Additionally \u0441heck if diagram image is not saved. [2018-11-09] foliantcontrib.blockdiag 1.0.3 \u00b6 Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log. [2018-11-08] foliantcontrib.slate 1.0.3 \u00b6 Add slate preprocessor which copies the images outside src into the slate project. [2018-11-08] foliantcontrib.testrail 1.0.7 \u00b6 Minor fixes. [2018-11-08] foliantcontrib.plantuml 1.0.3 \u00b6 Add parse_raw option. Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log. [2018-11-08] foliantcontrib.testrail 1.0.6 \u00b6 Added: parameters to exclude suite and section headers from the final document. [2018-11-07] foliantcontrib.testrail 1.0.5 \u00b6 Minor fixes. [2018-11-07] foliantcontrib.testrail 1.0.4 \u00b6 Fixed: if there is only one suite in project, it's header not added to the contents. [2018-11-02] foliantcontrib.gupload 1.1.4 \u00b6 Code refactored. [2018-11-01] foliantcontrib.templates.preprocessor 1.0.1 \u00b6 Add package_data to setup.py . [2018-11-01] foliantcontrib.gupload 1.1.3 \u00b6 Logger bug fixed. [2018-10-31] foliantcontrib.swaggerdoc 1.1.2 \u00b6 Bug fixes All path parameters in config now accept either strings or !path strings [2018-10-31] foliantcontrib.swaggerdoc 1.1.1 \u00b6 Add 'additional_json_path' param for jinja mode Add support for several json_urls [2018-10-30] foliantcontrib.multilinetables 1.2.1 \u00b6 Possibility to rewrite source files added. [2018-10-30] foliantcontrib.testrail 1.0.3 \u00b6 Possibility to rewrite source file added. [2018-10-29] foliantcontrib.bindsympli 1.0.7 \u00b6 Use 60-seconds timeout instead of 30-seconds. Provide multiple attempts to open pages. [2018-10-29] foliantcontrib.testrail 1.0.2 \u00b6 Suites collecting fixed. [2018-10-29] foliantcontrib.multilinetables 1.2.0 \u00b6 Convertation th the grid format added for arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.). [2018-10-24] foliantcontrib.multiproject 1.0.7 \u00b6 Allow to override the edit_uri config option of RepoLink preprocessor with the FOLIANT_REPOLINK_EDIT_URI system environment variable. [2018-10-23] foliantcontrib.multiproject 1.0.6 \u00b6 Tidy up CLI arguments. [2018-10-23] foliantcontrib.subset 1.0.4 \u00b6 Tidy up command line arguments one more time. [2018-10-23] foliantcontrib.subset 1.0.3 \u00b6 Tidy up command line arguments. [2018-10-23] foliantcontrib.subset 1.0.2 \u00b6 Fix a bug with object names. [2018-10-22] foliantcontrib.subset 1.0.1 \u00b6 Parse YAML fairly. Merge config files recursively. [2018-10-19] foliantcontrib.swaggerdoc 1.1.0 \u00b6 Change parameter names and behavior uncompatible with 1.0.0 Add conversion to md with widdershins [2018-10-11] foliantcontrib.includes 1.0.9 \u00b6 Don\u2019t crash on failed repo sync (i.e. when you\u2019re offline). [2018-10-11] foliantcontrib.mkdocs 1.0.5 \u00b6 Require MkDocs 1.0.4. [2018-10-02] foliantcontrib.replace 1.0.1 \u00b6 Strings with image links are ignored. [2018-10-01] foliantcontrib.gupload 1.1.2 \u00b6 Convert to google docs format setting added. [2018-09-25] foliantcontrib.gupload 1.1.1 \u00b6 Unification of repository name, settings section name, and command. [2018-09-25] foliantcontrib.gupload 1.1.0 \u00b6 Backend was converted to CLI extension. [2018-09-25] foliantcontrib.multilinetables 1.1.3 \u00b6 'targets' option added to the preprocessor settings. [2018-09-21] foliantcontrib.slate 1.0.2 \u00b6 Rename shards_path param to shards. It now accepts string or list. Fix no header param. [2018-09-20] foliantcontrib.slate 1.0.1 \u00b6 Remove flatten. First chapter goes to index.html.md; all the rest go into the includes. [2018-09-18] foliantcontrib.gupload 1.0.1 \u00b6 Command line authentication was added, for example for Docker use. [2018-09-14] foliantcontrib.testrail 1.0.1 \u00b6 Preprocessor folder structure fixed. [2018-09-12] foliantcontrib.bindsympli 1.0.6 \u00b6 Do not disable images downloading. Use delays when filling email and password fields. Wait for idle network connections when loading pages. [2018-08-31] foliant 1.0.6 \u00b6 CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor. [2018-08-29] foliantcontrib.pgsqldoc 1.1.2 \u00b6 Queries are now ordered (not adjustable right now) Flexable filters instead of strict filtering by schema [2018-08-27] foliantcontrib.pgsqldoc 1.1.1 \u00b6 Fix scheme template (blank lines issue) Refactor queries code [2018-08-24] foliantcontrib.multilinetables 1.1.2 \u00b6 Now it's possible to break the text anywhere in multiline tables with custom tag. Fixed determination of columns number in tables with and without side lines. [2018-08-24] foliantcontrib.pgsqldoc 1.1.0 \u00b6 Docs and scheme structure is now defined by Jinja2 templates. [2018-08-22] foliantcontrib.multilinetables 1.1.1 \u00b6 Bug with regular expression fixed. 3+ code strings with || operator in a row are not perceived as a tables now. [2018-08-22] foliantcontrib.multilinetables 1.1.0 \u00b6 Code strings with || operator are not perceived as a tables now. [2018-07-31] foliantcontrib.bump 1.0.2 \u00b6 Declare semver as dependency. [2018-07-29] foliantcontrib.bump 1.0.1 \u00b6 Fix packaging with setup.py. Poetry doesn't quite do the trick \ud83d\ude14 [2018-07-28] foliantcontrib.bump 1.0.0 \u00b6 Initial release. [2018-07-24] foliantcontrib.mkdocs 1.0.4 \u00b6 Provide customizable default names for untitled nested groups of chapters. [2018-07-24] foliantcontrib.flatten 1.0.4 \u00b6 Skip empty headings of nested subsections. [2018-07-23] foliantcontrib.includes 1.0.8 \u00b6 Require at least one space after hashes in the beginning of each heading. Add inline option to the <include> tag. Fix the bug: do not ignore empty lines after headings when using sethead . Fix the bug: allow to use less than 3 characters in the heading content. Do not mark as headings the strings that contain more than 6 leading hashes. If shifted heading level is more than 6, mark the heading content as bold paragraph text, not as heading. [2018-06-08] foliantcontrib.multiproject 1.0.5 \u00b6 Provide Git submodules support. [2018-06-07] foliantcontrib.flatten 1.0.3 \u00b6 Use flattened file path in includes preprocessor call. Require includes preprocessor 1.0.7. [2018-06-06] foliantcontrib.includes 1.0.7 \u00b6 Fix paths resolving in case of recursive processing of include statements. Allow revision markers in repo aliases. [2018-06-04] foliantcontrib.includes 1.0.6 \u00b6 Fix logging in file search method. Fix top heading level calculation. [2018-06-04] foliantcontrib.multiproject 1.0.4 \u00b6 Provide compatibility with Foliant 1.0.5. Allow to use multiple config files. [2018-06-04] foliantcontrib.pandoc 1.0.6 \u00b6 Apply flatten after all preprocessors, not before them. This fixes incompatibility with foliantcontrib.includes 1.0.5. [2018-06-04] foliantcontrib.flatten 1.0.2 \u00b6 Fix incorrect includes preprocessor call. Require Foliant 1.0.5. [2018-06-04] foliantcontrib.init 1.0.5 \u00b6 Require Foliant 1.0.5 with prompt_toolkit^2.0.0. [2018-05-30] foliantcontrib.customids 1.0.4 \u00b6 Provide separate block-level HTML elements for the anchors. Allow to define custom stylesheets for these elements. [2018-05-25] foliantcontrib.includes 1.0.5 \u00b6 Use paths that are relative to the current processed Markdown file. Fix sethead behavior for headings that contains hashes ( # ). [2018-05-14] foliant 1.0.5 \u00b6 Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style. [2018-05-10] foliantcontrib.pandoc 1.0.5 \u00b6 Add slug config option. [2018-05-08] foliantcontrib.multiproject 1.0.3 \u00b6 Fix config loading. Other small fixes. [2018-04-25] foliantcontrib.multiproject 1.0.2 \u00b6 Fix bugs with the project directory path and Git repos syncronizing. [2018-04-23] foliantcontrib.multiproject 1.0.1 \u00b6 Fix logging. [2018-04-20] foliantcontrib.bindsympli 1.0.5 \u00b6 Add logging. [2018-04-20] foliantcontrib.plantuml 1.0.2 \u00b6 Fix logging in __init__ . [2018-04-20] foliantcontrib.plantuml 1.0.1 \u00b6 Add logging. [2018-04-20] foliantcontrib.flatten 1.0.1 \u00b6 Fix incorrect includes preprocessor call. Add logging. Require Foliant 1.0.4. [2018-04-19] foliantcontrib.epsconvert 1.0.4 \u00b6 Do not use image path when computing MD5 hash. Add targets config option. Add logging. [2018-04-19] foliantcontrib.templates.preprocessor 1.0.0 \u00b6 Initial release. [2018-04-18] foliantcontrib.customids 1.0.3 \u00b6 Add targets config option. Add logging. [2018-04-14] foliantcontrib.blockdiag 1.0.2 \u00b6 Add logging. Require Foliant 1.0.4. [2018-04-14] foliantcontrib.pandoc 1.0.4 \u00b6 Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4. [2018-04-14] foliantcontrib.mkdocs 1.0.3 \u00b6 Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4. [2018-04-14] foliantcontrib.init 1.0.4 \u00b6 Replace placeholders in file and directory names. Process *.py files. User Template strings instead of format strings for safer substitutions. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4. [2018-04-11] foliant 1.0.4 \u00b6 Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions. [2018-04-10] foliantcontrib.bindsympli 1.0.4 \u00b6 Describe the preprocessor usage in README.md . [2018-04-10] foliantcontrib.bindsympli 1.0.3 \u00b6 Eliminate external Perl scripts, rewrite the preprocessor code in Python. [2018-04-02] foliant 1.0.3 \u00b6 Fix critical issue when config parsing would fail if any config value contained non-latin characters. [2018-04-01] foliantcontrib.includes 1.0.4 \u00b6 Fix the pattern for headings detection. [2018-03-31] foliantcontrib.includes 1.0.3 \u00b6 Allow hashes ( # characters) in the content of headings. [2018-03-29] foliantcontrib.epsconvert 1.0.3 \u00b6 Take into account the content of image file when computing MD5 hash. [2018-03-29] foliantcontrib.epsconvert 1.0.2 \u00b6 Add support of any local paths. Add image cache. Remove mogrify_path and diagrams_cache_dir options, add convert_path and cache_dir instead. [2018-03-28] foliantcontrib.customids 1.0.2 \u00b6 Process first heading and all other headings separately. [2018-03-27] foliantcontrib.customids 1.0.1 \u00b6 Update README.md and docstrings. Update long description content type in setup.py [2018-03-27] foliantcontrib.bindsympli 1.0.2 \u00b6 Change the path for non-Python scripts once more. [2018-03-27] foliantcontrib.bindsympli 1.0.1 \u00b6 Change the path for non-Python scripts. [2018-03-21] foliantcontrib.includes 1.0.2 \u00b6 Fix inappropriate translation of image URLs into local paths. [2018-03-21] foliantcontrib.mkdocs 1.0.2 \u00b6 Add use_headings and slug options for MkDocs backend. Fix inappropriate translation of image URLs into local paths in MkDocs preprocessor. [2018-03-17] foliant 1.0.2 \u00b6 Use README.md as package description. [2018-03-13] foliantcontrib.epsconvert 1.0.1 \u00b6 Add diagrams_cache_dir option support. [2018-02-28] foliantcontrib.pandoc 1.0.3 \u00b6 Change Pandoc command line parameter --reference-docx to --reference-doc . [2018-02-25] foliant 1.0.1 \u00b6 Fix critical bug with CLI module caused by missing version definition in the root __init__.py file. [2018-02-23] foliant 1.0.0 \u00b6 Complete rewrite. [2018-02-16] foliantcontrib.blockdiag 1.0.1 \u00b6 Add pdf output format support. [2018-02-07] foliantcontrib.init 1.0.3 \u00b6 Upon creation, relative path to the created project directory is returned instead of an absolute one. Templates: basic: Foliant docs related content removed from README.md. Templates: basic: foliantcontrib.mkdocs added to requirements.txt. [2018-02-07] foliantcontrib.init 1.0.2 \u00b6 Add slug placeholder. Process placeholders in .yml , .txt , and .md files, not just foliant.yml . Templates: basic: Add Dockerfile , docker-compose.yml , requirements.txt , and README.md . [2018-02-07] foliantcontrib.init 1.0.1 \u00b6 Fix issue with init command missing after installation. Fix issue with missing templates after installation. [2018-02-01] foliantcontrib.macros 1.0.3 \u00b6 Add tag <m>...</m> . [2018-01-17] foliantcontrib.macros 1.0.2 \u00b6 Switch from unnamed to named parameters. Macro name is now defined in the tag body instead of \"name\" option. [2018-01-15] foliantcontrib.macros 1.0.1 \u00b6 Preserve param case. [2018-01-06] foliantcontrib.flags 1.0.1 \u00b6 Add targets and backends options to <if> tag. [2018-01-05] foliantcontrib.pandoc 1.0.2 \u00b6 Change default Markdown flavor from markdown_strict to markdown . [2017-12-17] foliantcontrib.pandoc 1.0.1 \u00b6 Add tex target. [2017-12-16] foliantcontrib.mkdocs 1.0.1 \u00b6 Add ghp target for GitHub Pages deploy with mkdocs gh-deploy . [2017-12-15] foliantcontrib.includes 1.0.1 \u00b6 Fix git repo name detection when the repo part contains full stops.","title":"History of Releases"},{"location":"releases/#history-of-releases","text":"Here is the single linear history of releases of Foliant and its extensions. It\u2019s also available as an RSS feed .","title":"History of Releases"},{"location":"releases/#2022-12-12-foliantcontribmkdocs-1015","text":"Raise error if mkdocs build failed but exited with status code 0","title":"[2022-12-12] foliantcontrib.mkdocs 1.0.15"},{"location":"releases/#2022-12-11-foliantcontribdbmldoc-033","text":"Update PyDBML version Update default template","title":"[2022-12-11] foliantcontrib.dbmldoc 0.3.3"},{"location":"releases/#2022-12-09-foliantcontribmacros-105","text":"Do not fail preprocessors run if no replacement for a macro is found. This case can occur if some undefined environment variable is passed to the macro.","title":"[2022-12-09] foliantcontrib.macros 1.0.5"},{"location":"releases/#2022-12-04-foliantcontribdbmldoc-032","text":"Update PyDBML version Update default template","title":"[2022-12-04] foliantcontrib.dbmldoc 0.3.2"},{"location":"releases/#2022-11-10-foliantcontribinit-1010","text":"Add Makefile to the base template","title":"[2022-11-10] foliantcontrib.init 1.0.10"},{"location":"releases/#2022-10-31-foliantcontribimgcaptions-104","text":"Fix: wrong captions were placed for figma-like images","title":"[2022-10-31] foliantcontrib.imgcaptions 1.0.4"},{"location":"releases/#2022-10-28-foliantcontribmkdocs-1014","text":"Fix _image_pattern not to match image refs with brackets in captions","title":"[2022-10-28] foliantcontrib.mkdocs 1.0.14"},{"location":"releases/#2022-10-11-foliantcontribapireferences-107","text":"Fix: small fix for proper work when input reference is a list item and have initial and last spaces inside","title":"[2022-10-11] foliantcontrib.apireferences 1.0.7"},{"location":"releases/#2022-09-21-foliantcontribapireferences-106","text":"Fix: now the preprocessor works correctly with initial and last spaces in input references like ` Client-API: GET user/info `","title":"[2022-09-21] foliantcontrib.apireferences 1.0.6"},{"location":"releases/#2022-09-01-foliantcontribhistory-109","text":"The revision argument has been changed so that the default repository branch is used when generating the history.","title":"[2022-09-01] foliantcontrib.history 1.0.9"},{"location":"releases/#2022-08-30-foliantcontribchecksources-100","text":"Initial release","title":"[2022-08-30] foliantcontrib.checksources 1.0.0"},{"location":"releases/#2022-08-15-foliantcontribinit-109","text":"Add template download from got repository","title":"[2022-08-15] foliantcontrib.init 1.0.9"},{"location":"releases/#2022-06-27-foliantcontribshowcommits-103","text":"Add multithread file processing","title":"[2022-06-27] foliantcontrib.showcommits 1.0.3"},{"location":"releases/#2022-06-22-foliantcontribapireferences-105","text":"New: use_multiproject_mode option (default: True ) to use cached API registries in multiproject","title":"[2022-06-22] foliantcontrib.apireferences 1.0.5"},{"location":"releases/#2022-06-21-foliant-1013","text":"Add the clean_registry function to make . This function checks if multiproject and removes .apirefregistry files in .multiprojectache .","title":"[2022-06-21] foliant 1.0.13"},{"location":"releases/#2022-06-15-foliantcontribapireferences-104","text":"New: endpoint_prefix_list option (default: [] ) for every API class","title":"[2022-06-15] foliantcontrib.apireferences 1.0.4"},{"location":"releases/#2022-06-09-foliantcontribapireferences-103","text":"New: trim_query option (default: True) for every API class","title":"[2022-06-09] foliantcontrib.apireferences 1.0.3"},{"location":"releases/#2022-05-29-foliantcontribimgcaptions-103","text":"Fix: style was inserted before front matter","title":"[2022-05-29] foliantcontrib.imgcaptions 1.0.3"},{"location":"releases/#2022-05-29-foliantcontribmkdocs-1013","text":"Update to mkdocs 1.3.0 Replaced pages to nav in config generation due to github.com/mkdocs/mkdocs/pull/2652","title":"[2022-05-29] foliantcontrib.mkdocs 1.0.13"},{"location":"releases/#2021-12-12-foliantcontribconfluence-0620","text":"Support for Confluence Cloud option to remove HTML formatting. Page URL is now taken from the properties. Article change is now detected by article body and title hash, stored in page properties.","title":"[2021-12-12] foliantcontrib.confluence 0.6.20"},{"location":"releases/#2021-12-12-foliantcontribreplace-200","text":"Preprocessor rewritten.","title":"[2021-12-12] foliantcontrib.replace 2.0.0"},{"location":"releases/#2021-12-12-foliantcontribsuperlinks-1012","text":"Anchors added to beginning of files are not random anymore.","title":"[2021-12-12] foliantcontrib.superlinks 1.0.12"},{"location":"releases/#2021-10-07-foliantcontribpandoc-112","text":"Add odt and epub targets basic support.","title":"[2021-10-07] foliantcontrib.pandoc 1.1.2"},{"location":"releases/#2021-08-17-foliantcontribdbdoc-018","text":"DBMS python connectors are only imported on use.","title":"[2021-08-17] foliantcontrib.dbdoc 0.1.8"},{"location":"releases/#2021-08-04-foliantcontribargdown-011","text":"Embed dot and graphml formats with as_image=False .","title":"[2021-08-04] foliantcontrib.argdown 0.1.1"},{"location":"releases/#2021-08-03-foliantcontribargdown-010","text":"Initial release","title":"[2021-08-03] foliantcontrib.argdown 0.1.0"},{"location":"releases/#2021-08-03-foliantcontribsuperlinks-1011","text":"Fix imports.","title":"[2021-08-03] foliantcontrib.superlinks 1.0.11"},{"location":"releases/#2021-08-02-foliantcontribbpmn-101","text":"Initial release","title":"[2021-08-02] foliantcontrib.bpmn 1.0.1"},{"location":"releases/#2021-08-02-foliantcontribpgsqldoc-117","text":"New utils module","title":"[2021-08-02] foliantcontrib.pgsqldoc 1.1.7"},{"location":"releases/#2021-08-02-foliantcontribapilinks-126","text":"New utils module","title":"[2021-08-02] foliantcontrib.apilinks 1.2.6"},{"location":"releases/#2021-08-02-foliantcontributils-103","text":"PreprocessorExt: add debug_msg param to _warning method.","title":"[2021-08-02] foliantcontrib.utils 1.0.3"},{"location":"releases/#2021-07-21-foliantcontribpandoc-111","text":"Passing metadata parameters via config. Fix: images didn't render during separate sections build.","title":"[2021-07-21] foliantcontrib.pandoc 1.1.1"},{"location":"releases/#2021-07-21-foliantcontribmeta-133","text":"New utils module.","title":"[2021-07-21] foliantcontrib.meta 1.3.3"},{"location":"releases/#2021-07-21-foliantcontribcsvtables-102","text":"New utils module.","title":"[2021-07-21] foliantcontrib.csvtables 1.0.2"},{"location":"releases/#2021-07-21-foliantcontribmermaid-102","text":"New utils module.","title":"[2021-07-21] foliantcontrib.mermaid 1.0.2"},{"location":"releases/#2021-07-21-foliantcontribramldoc-102","text":"New utils module.","title":"[2021-07-21] foliantcontrib.ramldoc 1.0.2"},{"location":"releases/#2021-07-21-foliantcontribadmonitions-101","text":"New utils module.","title":"[2021-07-21] foliantcontrib.admonitions 1.0.1"},{"location":"releases/#2021-07-21-foliantcontribmetagraph-013","text":"New utils module.","title":"[2021-07-21] foliantcontrib.metagraph 0.1.3"},{"location":"releases/#2021-07-21-foliantcontribswaggerdoc-124","text":"New utils module.","title":"[2021-07-21] foliantcontrib.swaggerdoc 1.2.4"},{"location":"releases/#2021-07-20-foliantcontribapireferences-102","text":"New utils module.","title":"[2021-07-20] foliantcontrib.apireferences 1.0.2"},{"location":"releases/#2021-07-20-foliantcontribdbdoc-017","text":"New utils module.","title":"[2021-07-20] foliantcontrib.dbdoc 0.1.7"},{"location":"releases/#2021-07-20-foliantcontribdbmldoc-031","text":"New utils module. Update PyDBML parser to 0.4.1.","title":"[2021-07-20] foliantcontrib.dbmldoc 0.3.1"},{"location":"releases/#2021-07-20-foliantcontribplantuml-1010","text":"New utils module.","title":"[2021-07-20] foliantcontrib.plantuml 1.0.10"},{"location":"releases/#2021-07-20-foliantcontribgraphviz-115","text":"New utils module. Output syntax errors in stdout.","title":"[2021-07-20] foliantcontrib.graphviz 1.1.5"},{"location":"releases/#2021-07-20-foliantcontribtemplateparser-106","text":"New utils module.","title":"[2021-07-20] foliantcontrib.templateparser 1.0.6"},{"location":"releases/#2021-07-20-foliantcontribalt_structure-021","text":"New utils module.","title":"[2021-07-20] foliantcontrib.alt_structure 0.2.1"},{"location":"releases/#2021-07-20-foliantcontribanchors-107","text":"New utils module.","title":"[2021-07-20] foliantcontrib.anchors 1.0.7"},{"location":"releases/#2021-07-20-foliantcontribconfluence-0619","text":"New utils module.","title":"[2021-07-20] foliantcontrib.confluence 0.6.19"},{"location":"releases/#2021-07-19-foliantcontribsuperlinks-1010","text":"New utils module.","title":"[2021-07-19] foliantcontrib.superlinks 1.0.10"},{"location":"releases/#2021-07-15-foliantcontributils-102","text":"Fix error in initial values for combined options classes. Combined options classes now clone input dicts and lists. Combined options: fix validate_in. Header Anchors: fix slate id generator. PreprocessorExt: allow_fail now supports methods without args.","title":"[2021-07-15] foliantcontrib.utils 1.0.2"},{"location":"releases/#2021-07-14-foliantcontributils-101","text":"All utils from separate repositories now reside here.","title":"[2021-07-14] foliantcontrib.utils 1.0.1"},{"location":"releases/#2021-06-18-foliantcontribplantuml-109","text":"Diagrams with same options now generate in single PlantUML instance. Error tracebacks now are shown in console, error images are not generated . Markdown image tags for broken diagrams are not inserted so they won't crash the build of the project.","title":"[2021-06-18] foliantcontrib.plantuml 1.0.9"},{"location":"releases/#2021-05-20-foliantcontribdbmldoc-030","text":"Update PyDBML parser to 0.4.0. This breaks backward compatibility with previous versions (reference cols are now lists).","title":"[2021-05-20] foliantcontrib.dbmldoc 0.3.0"},{"location":"releases/#2021-05-07-foliantcontribmultiproject-1015","text":"Fix crash caused by YAML-tags in subproject config.","title":"[2021-05-07] foliantcontrib.multiproject 1.0.15"},{"location":"releases/#2021-05-07-foliantcontribyaml_include-101","text":"Better logging. Improved paths handling.","title":"[2021-05-07] foliantcontrib.yaml_include 1.0.1"},{"location":"releases/#2021-05-06-foliantcontribdownloadfile-101","text":"Better work with multiproject. fail_fast parameter.","title":"[2021-05-06] foliantcontrib.downloadfile 1.0.1"},{"location":"releases/#2021-05-04-foliantcontribdownloadfile-100","text":"Initial release.","title":"[2021-05-04] foliantcontrib.downloadfile 1.0.0"},{"location":"releases/#2021-04-20-foliantcontribanchors-106","text":"Fix: missing dependency in setup.py","title":"[2021-04-20] foliantcontrib.anchors 1.0.6"},{"location":"releases/#2021-04-01-foliantcontribconfluence-0618","text":"Fix: external images didn't work.","title":"[2021-04-01] foliantcontrib.confluence 0.6.18"},{"location":"releases/#2021-03-11-foliantcontribapilinks-125","text":"APILinks is now deprecated. Use APIReferences instead.","title":"[2021-03-11] foliantcontrib.apilinks 1.2.5"},{"location":"releases/#2021-03-11-foliantcontribapireferences-101","text":"Better logging and output. New: warning_level param.","title":"[2021-03-11] foliantcontrib.apireferences 1.0.1"},{"location":"releases/#2021-03-10-foliantcontribconfluence-0617","text":"Fix: parent_id param didn't work.","title":"[2021-03-10] foliantcontrib.confluence 0.6.17"},{"location":"releases/#2021-03-10-foliantcontribyaml_include-100","text":"Initial release.","title":"[2021-03-10] foliantcontrib.yaml_include 1.0.0"},{"location":"releases/#2021-03-09-foliantcontribapireferences-100","text":"Initial release.","title":"[2021-03-09] foliantcontrib.apireferences 1.0.0"},{"location":"releases/#2021-02-18-foliantcontribconfluence-0616","text":"New: attaching arbitrary files with help of attachments parameter. New: supply attachments implicitly using ac:image tag, without mentioning them in attachments parameter. Attachments and images which were referenced several times on a page will now only be uploaded once. Allow !path , !project_path modifiers inside ac:attachment param for ac:link , ac:image .","title":"[2021-02-18] foliantcontrib.confluence 0.6.16"},{"location":"releases/#2021-02-03-foliantcontribapilinks-124","text":"Better warning when there's error in API configuration Trailing slash is not enforced in generated urls. Previously didn't work with *.html sites","title":"[2021-02-03] foliantcontrib.apilinks 1.2.4"},{"location":"releases/#2021-02-01-foliantcontribplantuml-108","text":"Config options now can be overriden in tag options. Add as_image option, which allows (when false ) to insert svg-code instead of image into the document.","title":"[2021-02-01] foliantcontrib.plantuml 1.0.8"},{"location":"releases/#2021-01-25-foliantcontribdbdoc-016","text":"Templates now support imports and includes from the same folder. Fix: Remove TEXT_VC field from Oracle views query, which is absent on some versions.","title":"[2021-01-25] foliantcontrib.dbdoc 0.1.6"},{"location":"releases/#2021-01-22-foliantcontribapilinks-123","text":"Added options login and password for basic authentication on API sites.","title":"[2021-01-22] foliantcontrib.apilinks 1.2.3"},{"location":"releases/#2020-12-18-foliantcontribconfluence-0615","text":"New: [experimental] raw_confluence tags are now not necessary for ac:... tags, they are escaped automatically. New: supply images with additional parameters using ac:image tag. New: verify_ssl parameter.","title":"[2020-12-18] foliantcontrib.confluence 0.6.15"},{"location":"releases/#2020-12-04-foliantcontribtemplateparser-105","text":"Config, backend name and target are now available under config , backend and target variables. All the above variables along with meta and meta_object are now moved from _foliant_context into _foliant_vars variable. Fix: external context was overriding meta variables.","title":"[2020-12-04] foliantcontrib.templateparser 1.0.5"},{"location":"releases/#2020-12-03-foliantcontribreplace-105","text":"Bug fixed with several replaceable items in one string.","title":"[2020-12-03] foliantcontrib.replace 1.0.5"},{"location":"releases/#2020-11-27-foliantcontribsuperlinks-109","text":"Fix: BOF anchors bug Fix: common paths processing","title":"[2020-11-27] foliantcontrib.superlinks 1.0.9"},{"location":"releases/#2020-11-17-foliantcontribcustomids-107","text":"Styles are now inserted after YAML Front Matter if that is present.","title":"[2020-11-17] foliantcontrib.customids 1.0.7"},{"location":"releases/#2020-11-16-foliantcontributils-100","text":"Initial release.","title":"[2020-11-16] foliantcontrib.utils 1.0.0"},{"location":"releases/#2020-11-10-foliantcontribdbdoc-015","text":"New: trusted_connection option for Microsoft SQL Server","title":"[2020-11-10] foliantcontrib.dbdoc 0.1.5"},{"location":"releases/#2020-11-02-foliantcontribapilinks-122","text":"Fix: Endnpoint prefix was ignored in swagger and redoc site backends. Better logging.","title":"[2020-11-02] foliantcontrib.apilinks 1.2.2"},{"location":"releases/#2020-10-28-foliantcontribsuperlinks-108","text":"Fix: proper relative path generation for links. Fix: multiple issues when !path modifier is used in the link tag. BOF anchors now won't be added for mkdocs backend.","title":"[2020-10-28] foliantcontrib.superlinks 1.0.8"},{"location":"releases/#2020-10-20-foliantcontribpandoc-110","text":"Option to build separate chapters (sections) into separate files.","title":"[2020-10-20] foliantcontrib.pandoc 1.1.0"},{"location":"releases/#2020-10-16-foliantcontribconfluence-0614","text":"Add code blocks processing for Confluence preprocessor.","title":"[2020-10-16] foliantcontrib.confluence 0.6.14"},{"location":"releases/#2020-10-14-foliantcontribgraphviz-114","text":"Fix: issue with MkDocs: raw svgs are now wrapped in div tag.","title":"[2020-10-14] foliantcontrib.graphviz 1.1.4"},{"location":"releases/#2020-10-08-foliantcontribsuperlinks-107","text":"If tag body it empty, superlinks will try to guess the right caption of the link: referenced title for links by title, meta section title for links by meta section, heading title for links by CustomIDs, title from config or first heading title in the file for links to file, anchor name for links by anchors.","title":"[2020-10-08] foliantcontrib.superlinks 1.0.7"},{"location":"releases/#2020-10-07-foliantcontribapilinks-121","text":"Renamed spec_url to spec because it may also be a path to local file, Improved swagger.json parsing Added Redoc support ( redoc site backend)","title":"[2020-10-07] foliantcontrib.apilinks 1.2.1"},{"location":"releases/#2020-10-06-foliantcontribapilinks-120","text":"Added Swagger UI support, Anchors are now generated properly, with header_anchors tool. Added site_backend optional param to determine for which backend the anchors should be generated.","title":"[2020-10-06] foliantcontrib.apilinks 1.2.0"},{"location":"releases/#2020-09-16-foliantcontribarcheme-103","text":"Add config_concat option.","title":"[2020-09-16] foliantcontrib.archeme 1.0.3"},{"location":"releases/#2020-09-07-foliantcontribreindexer-101","text":"Add the fulltext_config option. Fix web application example: mention the content field, not only title , in the query filter settings.","title":"[2020-09-07] foliantcontrib.reindexer 1.0.1"},{"location":"releases/#2020-08-26-foliantcontribsuperlinks-106","text":"Improved Confluence links: if section is not uploaded to Confluence, reference to overall project (if it is uploaded to Confluence).","title":"[2020-08-26] foliantcontrib.superlinks 1.0.6"},{"location":"releases/#2020-08-25-foliantcontribsuperlinks-105","text":"New: added Confluence backend support. Fix: links were corrupted when customids were used. Fix: several other bug fixes and optimizations.","title":"[2020-08-25] foliantcontrib.superlinks 1.0.5"},{"location":"releases/#2020-08-24-foliantcontribswaggerdoc-123","text":"Fix: build failed when spec referenced to other files with $ref.","title":"[2020-08-24] foliantcontrib.swaggerdoc 1.2.3"},{"location":"releases/#2020-08-21-foliantcontribconfluence-0613","text":"Fix: cache dir for preprocessor was not created","title":"[2020-08-21] foliantcontrib.confluence 0.6.13"},{"location":"releases/#2020-08-21-foliantcontribdbdoc-014","text":"New: Added support for MySQL","title":"[2020-08-21] foliantcontrib.dbdoc 0.1.4"},{"location":"releases/#2020-08-20-foliantcontribdbdoc-013","text":"New: Added support for Microsoft SQL Server","title":"[2020-08-20] foliantcontrib.dbdoc 0.1.3"},{"location":"releases/#2020-07-31-foliantcontribescapecode-104","text":"Addition to normalization: remove BOM.","title":"[2020-07-31] foliantcontrib.escapecode 1.0.4"},{"location":"releases/#2020-07-29-foliantcontribincludes-1113","text":"When getting the included content by URL, take into account the charset parameter of the Content-Type response header field.","title":"[2020-07-29] foliantcontrib.includes 1.1.13"},{"location":"releases/#2020-07-29-foliantcontribincludes-1112","text":"Add the wrap_code and code_language attributes to mark up the included content as fence code block or inline code. Prevent to create cache directory when it\u2019s not needed. Improve code style. Refactor a little.","title":"[2020-07-29] foliantcontrib.includes 1.1.12"},{"location":"releases/#2020-07-22-foliant-1012","text":"Add the disable_implicit_unescape option. Remove warning when escape_code is not set. Support the !env YAML tag to use environment variables in the project config. Allow to specify custom directory to store logs with the --logs|-l command line option. Flush output to STDOUT in progress status messages and in the foliant.utils.output() method. Get and log the names and versions of all installed Foliant-related packages. Do not raise exception of the same type that is raised by a preprocessor, raise RuntimeError instead because some exceptions take more arguments than one.","title":"[2020-07-22] foliant 1.0.12"},{"location":"releases/#2020-07-22-foliantcontribpandoc-1011","text":"Do not re-raise an exception of the same type as raised, raise RuntimeError instead, it\u2019s needed to avoid non-informative error messages.","title":"[2020-07-22] foliantcontrib.pandoc 1.0.11"},{"location":"releases/#2020-07-22-foliantcontribmkdocs-1012","text":"Do not re-raise an exception of the same type as raised, raise RuntimeError instead, it\u2019s needed to avoid non-informative error messages.","title":"[2020-07-22] foliantcontrib.mkdocs 1.0.12"},{"location":"releases/#2020-07-20-foliantcontribmultiproject-1014","text":"Support Foliant Core 1.0.12, write logs to the directory that is specified for the multiproject.","title":"[2020-07-20] foliantcontrib.multiproject 1.0.14"},{"location":"releases/#2020-07-19-foliantcontribescapecode-103","text":"Do not fail the preprocessor if saved code is not found, show warning message instead.","title":"[2020-07-19] foliantcontrib.escapecode 1.0.3"},{"location":"releases/#2020-07-14-foliantcontribconfluence-0612","text":"New: option to store passwords in passfile. New: nohead option to crop first title from the page. Fix: better error reporting after updated atlassian-python-api package. New: if you specified only space_key param in metadata and no title , section heading will be used as title. Fix: if hierarchy is created on the test run, missing parents by title are now ignored","title":"[2020-07-14] foliantcontrib.confluence 0.6.12"},{"location":"releases/#2020-07-09-foliantcontribmultilinetables-123","text":"Problem with strings containing only hyphens fixed (critical for narrow columns with lists in grid tables).","title":"[2020-07-09] foliantcontrib.multilinetables 1.2.3"},{"location":"releases/#2020-07-09-foliantcontribincludes-1111","text":"Add the extensions config parameter to process file types different from .md . Add the url attribute to include content that is available by HTTP(S) URL.","title":"[2020-07-09] foliantcontrib.includes 1.1.11"},{"location":"releases/#2020-06-16-foliantcontribconfluence-0611","text":"Fix: XML error in code block conversion.","title":"[2020-06-16] foliantcontrib.confluence 0.6.11"},{"location":"releases/#2020-06-10-foliantcontribtestrail-131","text":"Now it's possible to use one image in several test-cases and process it correctly with move_imgs_from_text parameter.","title":"[2020-06-10] foliantcontrib.testrail 1.3.1"},{"location":"releases/#2020-06-09-foliantcontribtestrail-130","text":"New parameter: move_imgs_from_text \u2014 converts image links in test cases to ordinary markdown-links, and adds all links to params variable to use in jinja template. Some readme.md bugs fixed.","title":"[2020-06-09] foliantcontrib.testrail 1.3.0"},{"location":"releases/#2020-06-09-foliantcontribflatten-107","text":"Fix: bug in rewrite local links regex.","title":"[2020-06-09] foliantcontrib.flatten 1.0.7"},{"location":"releases/#2020-06-08-foliantcontribtestrail-122","text":"Processing of several images in one case-step fixed.","title":"[2020-06-08] foliantcontrib.testrail 1.2.2"},{"location":"releases/#2020-06-05-foliantcontribdbdoc-012","text":"Fix: schema filter in Oracle functions query","title":"[2020-06-05] foliantcontrib.dbdoc 0.1.2"},{"location":"releases/#2020-06-05-foliantcontribswaggerdoc-122","text":"Fix spec path issue. Fix: jinja mode default template wansn't copied.","title":"[2020-06-05] foliantcontrib.swaggerdoc 1.2.2"},{"location":"releases/#2020-06-05-foliantcontribdbdoc-011","text":"New: Add views query to components Fix: Oracle triggers query Fix: Fix both PostgreSQL and Oracle templates","title":"[2020-06-05] foliantcontrib.dbdoc 0.1.1"},{"location":"releases/#2020-06-03-foliantcontribdbmldoc-024","text":"Pydbml parser version updated to 0.3.2 Updated templates","title":"[2020-06-03] foliantcontrib.dbmldoc 0.2.4"},{"location":"releases/#2020-06-02-foliantcontribpgsqldoc-116","text":"Preprocessor is now deprecated. Please, use DBDoc instead: https://github.com/foliant-docs/foliantcontrib.dbdoc","title":"[2020-06-02] foliantcontrib.pgsqldoc 1.1.6"},{"location":"releases/#2020-06-02-foliantcontribdbdoc-010","text":"Initial release","title":"[2020-06-02] foliantcontrib.dbdoc 0.1.0"},{"location":"releases/#2020-05-28-foliantcontribtestrail-121","text":"Bug with copying nonexistent folder to source fixed.","title":"[2020-05-28] foliantcontrib.testrail 1.2.1"},{"location":"releases/#2020-05-27-foliantcontribbindfigma-103","text":"Fix bug in caching.","title":"[2020-05-27] foliantcontrib.bindfigma 1.0.3"},{"location":"releases/#2020-05-27-foliantcontribbindfigma-102","text":"Add api_caching option. Add source Markdown file path to the messages written to STDOUT.","title":"[2020-05-27] foliantcontrib.bindfigma 1.0.2"},{"location":"releases/#2020-05-26-foliantcontribtestrail-120","text":"Downloading of images from test cases implemented. New parameter: img_folder \u2013 folder name to store downloaded images. Renamed parameters: rewrite_src_file -> rewrite_src_files, screenshots_ext -> img_ext. Paths processing fixed.","title":"[2020-05-26] foliantcontrib.testrail 1.2.0"},{"location":"releases/#2020-05-22-foliantcontribtemplateparser-104","text":"All variables, supplied in context, are also available inside the _foliant_context variable You can now supply a link to file on remote server in the ext_context parameter. External context yaml-file now may be not a dictionary. In this case it will be available under the context template variable.","title":"[2020-05-22] foliantcontrib.templateparser 1.0.4"},{"location":"releases/#2020-05-20-foliantcontribsuperlinks-104","text":"Fix: bug with chapters.","title":"[2020-05-20] foliantcontrib.superlinks 1.0.4"},{"location":"releases/#2020-04-23-foliantcontribarcheme-102","text":"Fix the same bug in stronger way.","title":"[2020-04-23] foliantcontrib.archeme 1.0.2"},{"location":"releases/#2020-04-23-foliantcontribarcheme-101","text":"Fix very strange bug with modules cache.","title":"[2020-04-23] foliantcontrib.archeme 1.0.1"},{"location":"releases/#2020-04-22-foliantcontribdbmldoc-01","text":"Initial release","title":"[2020-04-22] foliantcontrib.dbmldoc 0.1"},{"location":"releases/#2020-04-17-foliantcontribmultiproject-1013","text":"Keep temporary directories of built subprojects. It is needed when local includes that rewrite image paths are used.","title":"[2020-04-17] foliantcontrib.multiproject 1.0.13"},{"location":"releases/#2020-04-14-foliantcontribelasticsearch-104","text":"Add copy action.","title":"[2020-04-14] foliantcontrib.elasticsearch 1.0.4"},{"location":"releases/#2020-04-10-foliantcontribreplace-104","text":"Replace in links and images fixed.","title":"[2020-04-10] foliantcontrib.replace 1.0.4"},{"location":"releases/#2020-04-10-foliantcontribalt_structure-020","text":"Preprocessor now doesn't read config file, which previously caused MultiProject to run second time. Registry is now flat dictionary. Structure is now supplied via dictionary.","title":"[2020-04-10] foliantcontrib.alt_structure 0.2.0"},{"location":"releases/#2020-04-10-foliantcontribshowcommits-102","text":"Add try_default_path and escape_html options.","title":"[2020-04-10] foliantcontrib.showcommits 1.0.2"},{"location":"releases/#2020-04-09-foliantcontribelasticsearch-103","text":"Add require_env option.","title":"[2020-04-09] foliantcontrib.elasticsearch 1.0.3"},{"location":"releases/#2020-04-06-foliantcontribmeta-132","text":"Cutomids are now cut out from titles. Added logging. Meta commands now support --debug -d and --quiet -q arguments. meta generate command now gives some verbose output after work. Fix: get_section_by_offset didn't count YFM.","title":"[2020-04-06] foliantcontrib.meta 1.3.2"},{"location":"releases/#2020-04-02-foliantcontribconfluence-0610","text":"Disabled tabbed code blocks conversion because of conflicts.","title":"[2020-04-02] foliantcontrib.confluence 0.6.10"},{"location":"releases/#2020-04-01-foliantcontribtestcoverage-011","text":"Support meta 1.3.0","title":"[2020-04-01] foliantcontrib.testcoverage 0.1.1"},{"location":"releases/#2020-04-01-foliantcontribtestcoverage-010","text":"Initial release.","title":"[2020-04-01] foliantcontrib.testcoverage 0.1.0"},{"location":"releases/#2020-04-01-foliantcontribmetagraph-012","text":"Metadata is now taken from src_dir to minimize possible conflicts with other preprocessors.","title":"[2020-04-01] foliantcontrib.metagraph 0.1.2"},{"location":"releases/#2020-03-27-foliantcontribmetagraph-011","text":"New parameter: draw_all , which controls which sections are included.","title":"[2020-03-27] foliantcontrib.metagraph 0.1.1"},{"location":"releases/#2020-03-26-foliantcontribmetagraph-010","text":"Initial release","title":"[2020-03-26] foliantcontrib.metagraph 0.1.0"},{"location":"releases/#2020-03-26-foliantcontribtemplateparser-103","text":"Now meta dictionary is available inside templates under meta variable. Project's meta object is available inside templates under meta_object variable.","title":"[2020-03-26] foliantcontrib.templateparser 1.0.3"},{"location":"releases/#2020-03-26-foliantcontribmeta-131","text":"remove_meta now also trims whitespaces in the beginning of the file after removing YFM Main section's title is now set to first heading, if: the first heading is a 1-level heading (#), the first heading doesn't have meta. Fix: YFM was not included in meta in some cases","title":"[2020-03-26] foliantcontrib.meta 1.3.1"},{"location":"releases/#2020-03-25-foliantcontribconfluence-068","text":"Now foliant-anchors are always added even for new pages","title":"[2020-03-25] foliantcontrib.confluence 0.6.8"},{"location":"releases/#2020-03-25-foliantcontribconfluence-069","text":"Introducing import from confluence into Foliant with confluence tag Fix: solved conflicts between inline comments and macros (including anchors) Fix: backend crashed if new page content was empty Markdown code blocks are now converted into code-block macros Markdown task lists are now converted into task-list macros New test_run option","title":"[2020-03-25] foliantcontrib.confluence 0.6.9"},{"location":"releases/#2020-03-12-foliantcontribtestrail-1111","text":"Misprint fixed.","title":"[2020-03-12] foliantcontrib.testrail 1.1.11"},{"location":"releases/#2020-03-12-foliantcontribtestrail-1110","text":"Bug with template handling fixed.","title":"[2020-03-12] foliantcontrib.testrail 1.1.10"},{"location":"releases/#2020-03-11-foliantcontribconfluence-067","text":"Fix another conflict with escapecode","title":"[2020-03-11] foliantcontrib.confluence 0.6.7"},{"location":"releases/#2020-03-05-foliantcontribgraphviz-113","text":"Fix: as_image takes effect only with svg format.","title":"[2020-03-05] foliantcontrib.graphviz 1.1.3"},{"location":"releases/#2020-02-28-foliantcontribbindfigma-101","text":"Add hyperlinks and multi_delimeter options. Output error messages to STDOUT. Minor improvements.","title":"[2020-02-28] foliantcontrib.bindfigma 1.0.1"},{"location":"releases/#2020-02-12-foliantcontribalt_structure-012","text":"Fix: Remove config check from init","title":"[2020-02-12] foliantcontrib.alt_structure 0.1.2"},{"location":"releases/#2020-02-10-foliantcontribalt_structure-011","text":"Initial release","title":"[2020-02-10] foliantcontrib.alt_structure 0.1.1"},{"location":"releases/#2020-02-06-foliantcontribmkdocs-1011","text":"Get captions for pages from workingdir instead of src_dir","title":"[2020-02-06] foliantcontrib.mkdocs 1.0.11"},{"location":"releases/#2020-02-04-foliantcontribslate-108","text":"Support meta 1.3","title":"[2020-02-04] foliantcontrib.slate 1.0.8"},{"location":"releases/#2020-02-04-foliantcontribsuperlinks-103","text":"Support meta 1.3.","title":"[2020-02-04] foliantcontrib.superlinks 1.0.3"},{"location":"releases/#2020-02-04-foliantcontribincludes-119","text":"Support meta 1.3.","title":"[2020-02-04] foliantcontrib.includes 1.1.9"},{"location":"releases/#2020-02-04-foliantcontribmeta-130","text":"Restructure modules to aid import errors. Meta-related functions and classes are now available independantly from foliant.meta package.","title":"[2020-02-04] foliantcontrib.meta 1.3.0"},{"location":"releases/#2020-02-04-foliantcontribconfluence-066","text":"Support meta 1.3 Now foliant-anchors are always added around uploaded content Anchors are now case insensitive","title":"[2020-02-04] foliantcontrib.confluence 0.6.6"},{"location":"releases/#2020-02-03-foliantcontribmeta-123","text":"Add get_chapter method to Meta class. Add Developer's guide to readme.","title":"[2020-02-03] foliantcontrib.meta 1.2.3"},{"location":"releases/#2020-01-31-foliantcontribelasticsearch-102","text":"Add format option. Use escape_html only for format: plaintext .","title":"[2020-01-31] foliantcontrib.elasticsearch 1.0.2"},{"location":"releases/#2020-01-31-foliantcontribelasticsearch-101","text":"Add escape_html option. Perform actions delete , create by default. Fix HTML markup in Web application example.","title":"[2020-01-31] foliantcontrib.elasticsearch 1.0.1"},{"location":"releases/#2020-01-22-foliantcontribconfluence-065","text":"Fix: build crashed when several resolved inline comments referred to same string","title":"[2020-01-22] foliantcontrib.confluence 0.6.5"},{"location":"releases/#2019-12-24-foliantcontribsuperlinks-102","text":"add dependencies order check. rename anchor parameter to id. add anchor parameter for possibly global anchor search. link to anchors in Confluence are now partly supported.","title":"[2019-12-24] foliantcontrib.superlinks 1.0.2"},{"location":"releases/#2019-12-24-foliantcontribanchors-104","text":"Applied anchors are now checked from all chapters for flat backends.","title":"[2019-12-24] foliantcontrib.anchors 1.0.4"},{"location":"releases/#2019-12-24-foliantcontribtestrail-119","text":"Function to get case data by id added.","title":"[2019-12-24] foliantcontrib.testrail 1.1.9"},{"location":"releases/#2019-12-23-foliantcontribsuperlinks-101","text":"Initial release.","title":"[2019-12-23] foliantcontrib.superlinks 1.0.1"},{"location":"releases/#2019-12-20-foliantcontribanchors-103","text":"Better regex patterns. Conflicts are now determined for each backend separately. Add confluence anchors.","title":"[2019-12-20] foliantcontrib.anchors 1.0.3"},{"location":"releases/#2019-12-20-foliantcontribmeta-122","text":"Don't require empty line between heading and meta tag. Allow comments in YFM. Better patterns for sections detection.","title":"[2019-12-20] foliantcontrib.meta 1.2.2"},{"location":"releases/#2019-12-12-foliantcontribshowcommits-101","text":"Fix template processing. Log repo path.","title":"[2019-12-12] foliantcontrib.showcommits 1.0.1"},{"location":"releases/#2019-12-12-foliantcontribflatten-106","text":"Rewrite local links (e.g. some_file.md#some_id \u2192 #some_id ).","title":"[2019-12-12] foliantcontrib.flatten 1.0.6"},{"location":"releases/#2019-12-04-foliantcontribslate-107","text":"Fix: images are preserved in the output, even from subfolders. YAML Front Matter from the sources is now ignored.","title":"[2019-12-04] foliantcontrib.slate 1.0.7"},{"location":"releases/#2019-12-02-foliantcontribinit-108","text":"Add comment to Dockerfile with option to use Foliant full image. Remove slugs from docker-compose. Now the service is always named foliant .","title":"[2019-12-02] foliantcontrib.init 1.0.8"},{"location":"releases/#2019-11-22-foliantcontribmeta-121","text":"Fix bug with imports.","title":"[2019-11-22] foliantcontrib.meta 1.2.1"},{"location":"releases/#2019-11-21-foliantcontribmeta-120","text":"Support sections meta.yml format restructure","title":"[2019-11-21] foliantcontrib.meta 1.2.0"},{"location":"releases/#2019-11-21-foliantcontribconfluence-064","text":"Support meta 1.2. Now you can publish sections to confluence.","title":"[2019-11-21] foliantcontrib.confluence 0.6.4"},{"location":"releases/#2019-11-21-foliantcontribincludes-118","text":"Support meta 1.2.","title":"[2019-11-21] foliantcontrib.includes 1.1.8"},{"location":"releases/#2019-11-20-foliantcontribimgcaptions-102","text":"Fix: stylesheet_path only worked with the !project_path modifier. Add the template parameter to customize the caption HTML tag.","title":"[2019-11-20] foliantcontrib.imgcaptions 1.0.2"},{"location":"releases/#2019-11-09-foliantcontribmdtopdf-100","text":"Initial release.","title":"[2019-11-09] foliantcontrib.mdtopdf 1.0.0"},{"location":"releases/#2019-11-06-foliantcontribramldoc-101","text":"Initial release","title":"[2019-11-06] foliantcontrib.ramldoc 1.0.1"},{"location":"releases/#2019-10-28-foliantcontribaglio-100","text":"Initial release","title":"[2019-10-28] foliantcontrib.aglio 1.0.0"},{"location":"releases/#2019-10-25-foliantcontribslate-106","text":"Fix bug with error catching introduced in 1.0.5","title":"[2019-10-25] foliantcontrib.slate 1.0.6"},{"location":"releases/#2019-10-25-foliantcontribslate-105","text":"Better error reporting. Fixes for working with includes.","title":"[2019-10-25] foliantcontrib.slate 1.0.5"},{"location":"releases/#2019-10-16-foliantcontribescapecode-102","text":"Improve flexibility: add new actions, allow to override defaults.","title":"[2019-10-16] foliantcontrib.escapecode 1.0.2"},{"location":"releases/#2019-10-16-foliantcontribmultiproject-1012","text":"Take into account the quiet flag. Require Foliant 1.0.11 for this reason.","title":"[2019-10-16] foliantcontrib.multiproject 1.0.12"},{"location":"releases/#2019-10-16-foliantcontribincludes-117","text":"Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value.","title":"[2019-10-16] foliantcontrib.includes 1.1.7"},{"location":"releases/#2019-10-16-foliant-1011","text":"Allow to specify custom options for EscapeCode preprocessor as the escape_code.options config parameter value. Pass the quiet flag to BaseParser() as an optional argument for using in config extensions.","title":"[2019-10-16] foliant 1.0.11"},{"location":"releases/#2019-10-15-foliantcontribsubset-109","text":"Fix incompatibilities with newer versions of modules: Cliar, PyYAML.","title":"[2019-10-15] foliantcontrib.subset 1.0.9"},{"location":"releases/#2019-10-10-foliantcontribmultiproject-1011","text":"Allow recursive processing of nested subprojects. Allow to specify type (HTML/Markdown) and location for repo links. Fix incompatibility with new Cliar: key names should not contain hyphens.","title":"[2019-10-10] foliantcontrib.multiproject 1.0.11"},{"location":"releases/#2019-10-07-foliantcontribconfluence-063","text":"Remove resolved inline comments as they mix up with unresolved.","title":"[2019-10-07] foliantcontrib.confluence 0.6.3"},{"location":"releases/#2019-10-04-foliantcontribmermaid-101","text":"Better error reporting","title":"[2019-10-04] foliantcontrib.mermaid 1.0.1"},{"location":"releases/#2019-10-01-foliantcontribconfluence-062","text":"Added parent_title parameter. Fix: images were not uploaded for new pages.","title":"[2019-10-01] foliantcontrib.confluence 0.6.2"},{"location":"releases/#2019-10-01-foliantcontribmultiproject-1010","text":"Allow the first heading to be located not in the beginning of a document.","title":"[2019-10-01] foliantcontrib.multiproject 1.0.10"},{"location":"releases/#2019-09-26-foliantcontribflatten-105","text":"Add the keep_sources option to keep original files in the temporary working directory after flattening.","title":"[2019-09-26] foliantcontrib.flatten 1.0.5"},{"location":"releases/#2019-09-25-foliantcontribconfluence-060","text":"Now content is put in place of foliant anchor or instead of foliant_start ... foliant_end anchors on the target page. If no anchors on page \u2014 content replaces the whole body. New modes (backwards compatibility is broken!). Now following files are available for debug in cache dir: 1. markdown before conversion to html. 2. Converted to HTML. 3. Final XHTML source which is uploaded to confluence. Working (but far from perfect) detection if file was changed. Only upload changed attachments. Updating attachments instead of deleting and uploading again.","title":"[2019-09-25] foliantcontrib.confluence 0.6.0"},{"location":"releases/#2019-09-19-foliantcontribconfluence-052","text":"Completely rewrite restoring inline comments feature. Add restore_comments and resolve_if_changed emergency options. Allow insert raw confluence code (macros, etc) inside <raw_confluence> tag.","title":"[2019-09-19] foliantcontrib.confluence 0.5.2"},{"location":"releases/#2019-09-19-foliantcontribhistory-108","text":"Allow to ignore merge commits in from: commits mode.","title":"[2019-09-19] foliantcontrib.history 1.0.8"},{"location":"releases/#2019-09-18-foliantcontribhistory-107","text":"Allow to get repo names from README files.","title":"[2019-09-18] foliantcontrib.history 1.0.7"},{"location":"releases/#2019-09-16-foliantcontribhistory-106","text":"Fix some regex patterns.","title":"[2019-09-16] foliantcontrib.history 1.0.6"},{"location":"releases/#2019-09-16-foliantcontribhistory-105","text":"Allow to generate history based on tags and commits.","title":"[2019-09-16] foliantcontrib.history 1.0.5"},{"location":"releases/#2019-09-13-foliantcontribhistory-104","text":"Add templates for target Markdown headings and RSS items titles.","title":"[2019-09-13] foliantcontrib.history 1.0.4"},{"location":"releases/#2019-09-13-foliantcontribhistory-103","text":"Escape regex metacharacters in headings.","title":"[2019-09-13] foliantcontrib.history 1.0.3"},{"location":"releases/#2019-09-10-foliantcontribepsconvert-107","text":"Fix image reference detection pattern, other minor fixes.","title":"[2019-09-10] foliantcontrib.epsconvert 1.0.7"},{"location":"releases/#2019-09-09-foliantcontribhistory-102","text":"Do not generate common top-level heading of target Markdown content.","title":"[2019-09-09] foliantcontrib.history 1.0.2"},{"location":"releases/#2019-09-06-foliantcontribhistory-101","text":"Add RSS feed generation.","title":"[2019-09-06] foliantcontrib.history 1.0.1"},{"location":"releases/#2019-08-28-foliantcontribincludes-116","text":"Escape regular expression metacharacters in starting and ending headings, IDs, modifiers.","title":"[2019-08-28] foliantcontrib.includes 1.1.6"},{"location":"releases/#2019-08-27-foliantcontribincludes-115","text":"Remove meta blocks from the included content.","title":"[2019-08-27] foliantcontrib.includes 1.1.5"},{"location":"releases/#2019-08-26-foliantcontribmkdocs-1010","text":"Fix pattern for heading detection.","title":"[2019-08-26] foliantcontrib.mkdocs 1.0.10"},{"location":"releases/#2019-08-26-foliantcontribswaggerdoc-120","text":"Add spec_path and spec_url parameters. All path tag parameters are now loaded relative to current file. Better logging and error reporting","title":"[2019-08-26] foliantcontrib.swaggerdoc 1.2.0"},{"location":"releases/#2019-08-26-foliantcontribcustomids-106","text":"Allow to define custom styles for headings of each level.","title":"[2019-08-26] foliantcontrib.customids 1.0.6"},{"location":"releases/#2019-08-26-foliantcontribconfluence-041","text":"Fix: conflict with escape_code","title":"[2019-08-26] foliantcontrib.confluence 0.4.1"},{"location":"releases/#2019-08-23-foliantcontribincludes-114","text":"Allow for the starting and ending headings to be 1-character long.","title":"[2019-08-23] foliantcontrib.includes 1.1.4"},{"location":"releases/#2019-08-23-foliantcontribconfluence-040","text":"Fix: attachments were not uploaded for nonexistent pages Change confluence api wrapper to atlassian-python-api Rename backend to confluence Better error reporting","title":"[2019-08-23] foliantcontrib.confluence 0.4.0"},{"location":"releases/#2019-08-23-foliantcontribmkdocs-109","text":"Allow the first heading to be located not in the beginning of a document.","title":"[2019-08-23] foliantcontrib.mkdocs 1.0.9"},{"location":"releases/#2019-08-23-foliantcontribepsconvert-106","text":"Bug fix: update current directory path before processing of Markdown file content, not after.","title":"[2019-08-23] foliantcontrib.epsconvert 1.0.6"},{"location":"releases/#2019-08-22-foliantcontribimagemagick-102","text":"Bug fix: update current directory path before processing of Markdown file content, not after.","title":"[2019-08-22] foliantcontrib.imagemagick 1.0.2"},{"location":"releases/#2019-08-22-foliantcontribmeta-110","text":"Remove the sections entity. Restructure code.","title":"[2019-08-22] foliantcontrib.meta 1.1.0"},{"location":"releases/#2019-08-22-foliantcontribconfluence-030","text":"Fix bug with images. Add multiple modes and mode parameter. Add toc parameter to automatically insert toc. Fix: upload attachments before text update (this caused images to disappear after manually editing).","title":"[2019-08-22] foliantcontrib.confluence 0.3.0"},{"location":"releases/#2019-08-20-foliantcontribmeta-103","text":"Add span to meta","title":"[2019-08-20] foliantcontrib.meta 1.0.3"},{"location":"releases/#2019-08-16-foliantcontribconfluence-020","text":"Allow to input login and/or password during build Added pandoc_path option Better logging and error catching","title":"[2019-08-16] foliantcontrib.confluence 0.2.0"},{"location":"releases/#2019-08-15-foliantcontribconfluence-010","text":"Initial release.","title":"[2019-08-15] foliantcontrib.confluence 0.1.0"},{"location":"releases/#2019-08-14-foliantcontribincludes-113","text":"Allow to specify IDs of anchors in the from_id and to_id attributes. Support the to_end attribute.","title":"[2019-08-14] foliantcontrib.includes 1.1.3"},{"location":"releases/#2019-08-02-foliantcontribescapecode-101","text":"Do not ignore diagram definitions. It should be possible to escape the tags used by diagram drawing preprocessors. If some preprocessors need to work with the content that is recognized as code, call UnescapeCode explicitly before them.","title":"[2019-08-02] foliantcontrib.escapecode 1.0.1"},{"location":"releases/#2019-08-01-foliantcontribreplace-103","text":"Fixed issue with PyYAML deprecated loader.","title":"[2019-08-01] foliantcontrib.replace 1.0.3"},{"location":"releases/#2019-08-01-foliantcontribmermaid-100","text":"Initial release","title":"[2019-08-01] foliantcontrib.mermaid 1.0.0"},{"location":"releases/#2019-07-30-foliantcontribincludes-112","text":"Fix include statement regex pattern. Tags joined with | must be in non-capturing parentheses.","title":"[2019-07-30] foliantcontrib.includes 1.1.2"},{"location":"releases/#2019-07-30-foliant-1010","text":"Add escape_code config option. To use it, escapecode and unescapecode preprocessors must be installed.","title":"[2019-07-30] foliant 1.0.10"},{"location":"releases/#2019-07-30-foliantcontribincludes-111","text":"Support escape_code config option. Require Foliant 1.0.10 and escapecode preprocessor 1.0.0. Process sethead recursively.","title":"[2019-07-30] foliantcontrib.includes 1.1.1"},{"location":"releases/#2019-07-16-foliantcontribbindsympli-1014","text":"Add width attribute to <sympli> tag. Refactor a little.","title":"[2019-07-16] foliantcontrib.bindsympli 1.0.14"},{"location":"releases/#2019-07-15-foliantcontribslugs-101","text":"Add !version and !commit_count YAML tags.","title":"[2019-07-15] foliantcontrib.slugs 1.0.1"},{"location":"releases/#2019-07-09-foliantcontribdocus-020","text":"More flexible chapters parsing. Lists are now not mandatory.","title":"[2019-07-09] foliantcontrib.docus 0.2.0"},{"location":"releases/#2019-07-09-foliantcontribdocus-010","text":"Initial release.","title":"[2019-07-09] foliantcontrib.docus 0.1.0"},{"location":"releases/#2019-07-05-foliantcontribruncommands-101","text":"Capture the output of an external command and write it to STDOUT.","title":"[2019-07-05] foliantcontrib.runcommands 1.0.1"},{"location":"releases/#2019-07-01-foliantcontribmeta-102","text":"Fix: subsections title may be specified in YFM; Fix: in subsections title was being cropped out","title":"[2019-07-01] foliantcontrib.meta 1.0.2"},{"location":"releases/#2019-07-01-foliantcontribproject_graph-101","text":"Rename rel attributes: rel_path to path , rel_id to id Relation types now don't implicitly go to edge labels. Add label explicitly from now on. Fixed: relations to !project_path and !rel_path didn't work.","title":"[2019-07-01] foliantcontrib.project_graph 1.0.1"},{"location":"releases/#2019-07-01-foliantcontribmeta-101","text":"Fix: seeds for main sections were not processed. Add debug messages for seeds processing.","title":"[2019-07-01] foliantcontrib.meta 1.0.1"},{"location":"releases/#2019-06-28-foliantcontribproject_graph-100","text":"Initial release.","title":"[2019-06-28] foliantcontrib.project_graph 1.0.0"},{"location":"releases/#2019-06-28-foliantcontribmeta-100","text":"Initial release.","title":"[2019-06-28] foliantcontrib.meta 1.0.0"},{"location":"releases/#2019-06-28-foliantcontribincludes-110","text":"Support Foliant 1.0.9. Add processing of !path , !project_path , and !rel_path modifiers (i.e. YAML tags) in attribute values of pseudo-XML tags inside the included content. Replace the values that preceded by these modifiers with absolute paths resolved depending on current context. Allow to specify the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to, with optional project_root attribute of the <include> tag. This can be necessary to resolve the !path and the !project_path modifiers in the included content correctly. Allow to specify all necessary parameters of each include statement as attribute values of pseudo-XML tags. Keep legacy syntax for backward compatibility. Update README.","title":"[2019-06-28] foliantcontrib.includes 1.1.0"},{"location":"releases/#2019-06-17-foliant-109","text":"Process attribute values of pseudo-XML tags as YAML. Allow single quotes for enclosing attribute values of pseudo-XML tags. Add !project_path and !rel_path YAML tags.","title":"[2019-06-17] foliant 1.0.9"},{"location":"releases/#2019-06-14-foliantcontribtemplateparser-102","text":"support PyYAML 5.1","title":"[2019-06-14] foliantcontrib.templateparser 1.0.2"},{"location":"releases/#2019-06-14-foliantcontribbindsympli-1013","text":"Set 2-minutes timeout instead of default 30-seconds when launching Chromium. Use page.waitForSelector() instead of page.waitForNavigation() . Use custom sleep() function for intentional delays.","title":"[2019-06-14] foliantcontrib.bindsympli 1.0.13"},{"location":"releases/#2019-06-13-foliantcontribbadges-102","text":"support params which alter badge look to be supplied in tag params","title":"[2019-06-13] foliantcontrib.badges 1.0.2"},{"location":"releases/#2019-06-11-foliantcontribbadges-101","text":"force img mode on pdf and docx add target parameter","title":"[2019-06-11] foliantcontrib.badges 1.0.1"},{"location":"releases/#2019-06-11-foliantcontribbadges-100","text":"Initial release","title":"[2019-06-11] foliantcontrib.badges 1.0.0"},{"location":"releases/#2019-06-10-foliantcontribadmonitions-100","text":"Initial release.","title":"[2019-06-10] foliantcontrib.admonitions 1.0.0"},{"location":"releases/#2019-05-20-foliantcontribgraphviz-111","text":"Remove src param. (Use includes instead) Allow separate tags fail. Preprocessor would issue warning and continue work.","title":"[2019-05-20] foliantcontrib.graphviz 1.1.1"},{"location":"releases/#2019-05-20-foliantcontribtemplateparser-101","text":"add ext_context param for external file with context allow separate templates to fail, the preprocessor would issue warning and skip them","title":"[2019-05-20] foliantcontrib.templateparser 1.0.1"},{"location":"releases/#2019-05-17-foliantcontribblockdiag-105","text":"Attributes of pseudo-XML tags have higher priority than config file options.","title":"[2019-05-17] foliantcontrib.blockdiag 1.0.5"},{"location":"releases/#2019-05-17-foliantcontribplantuml-106","text":"Attributes of <plantuml> tag have higher priority than config file options.","title":"[2019-05-17] foliantcontrib.plantuml 1.0.6"},{"location":"releases/#2019-05-14-foliantcontribtemplateparser-100","text":"Initial release","title":"[2019-05-14] foliantcontrib.templateparser 1.0.0"},{"location":"releases/#2019-04-30-foliantcontribbindsympli-1012","text":"Capture the output of the Puppeter-based script and write it to STDOUT.","title":"[2019-04-30] foliantcontrib.bindsympli 1.0.12"},{"location":"releases/#2019-04-15-foliantcontribswaggerdoc-113","text":"Fix issues with json and yaml. All spec files are now loaded with yaml loader. Change PyYAML to ruamel.yaml jinja mode is deprecated, widdershins is the default mode","title":"[2019-04-15] foliantcontrib.swaggerdoc 1.1.3"},{"location":"releases/#2019-04-10-foliantcontribmkdocs-108","text":"Escape control characters (double quotation marks, dollar signs, backticks) that may be used in system shell commands.","title":"[2019-04-10] foliantcontrib.mkdocs 1.0.8"},{"location":"releases/#2019-04-10-foliantcontribpandoc-1010","text":"Add backticks to the set of characters that should be escaped.","title":"[2019-04-10] foliantcontrib.pandoc 1.0.10"},{"location":"releases/#2019-04-10-foliantcontribpandoc-109","text":"Escape double quotation marks ( \" ) and dollar signs ( $ ) which may be used in PDF, docx, and TeX generation commands as parts of filenames, variable values, etc. Enclose filenames that may be used in commands into double quotes.","title":"[2019-04-10] foliantcontrib.pandoc 1.0.9"},{"location":"releases/#2019-04-05-foliantcontribincludes-1011","text":"Take into account the results of work of preprocessors that may be applied before includes within a single Foliant project. Rewrite the currently processed Markdown file path with the path of corresponding file that is located inside the project source directory only if the currently processed Markdown file is located inside the temporary working directory and the included file is located outside the temporary working directory. Keep all paths unchanged in all other cases.","title":"[2019-04-05] foliantcontrib.includes 1.0.11"},{"location":"releases/#2019-03-27-foliantcontribgraphviz-106","text":"Added as_image option.","title":"[2019-03-27] foliantcontrib.graphviz 1.0.6"},{"location":"releases/#2019-03-21-foliantcontribanchors-105","text":"Anchor headings conflicts are now more accurate, because for flat backends are checked for all chapters. Anchors with illegal characters (list in readme) now will be removed. Preprocessor now can also work with custom ids.","title":"[2019-03-21] foliantcontrib.anchors 1.0.5"},{"location":"releases/#2019-03-21-foliantcontribanchors-102","text":"Added preprocessor_ext for better warnings (and better code)","title":"[2019-03-21] foliantcontrib.anchors 1.0.2"},{"location":"releases/#2019-03-21-foliantcontribanchors-101","text":"Added 'element' option to customize anchor span element.","title":"[2019-03-21] foliantcontrib.anchors 1.0.1"},{"location":"releases/#2019-03-21-foliantcontribanchors-100","text":"Initial release","title":"[2019-03-21] foliantcontrib.anchors 1.0.0"},{"location":"releases/#2019-03-14-foliantcontribnotifier-100","text":"Initial release.","title":"[2019-03-14] foliantcontrib.notifier 1.0.0"},{"location":"releases/#2019-02-21-foliantcontribtestrail-118","text":"Hardcoded section headers processing removed.","title":"[2019-02-21] foliantcontrib.testrail 1.1.8"},{"location":"releases/#2019-02-18-foliantcontribreplace-102","text":"Now it's possible to pass the lambda function from dictionary file. with_confirmation parameter added.","title":"[2019-02-18] foliantcontrib.replace 1.0.2"},{"location":"releases/#2019-02-15-foliantcontribcsvtables-101","text":"setup.py fixed.","title":"[2019-02-15] foliantcontrib.csvtables 1.0.1"},{"location":"releases/#2019-02-14-foliantcontribgraphviz-104","text":"Moved combined_options out","title":"[2019-02-14] foliantcontrib.graphviz 1.0.4"},{"location":"releases/#2019-02-14-foliantcontribapilinks-113","text":"Moved combined_options into a submodule","title":"[2019-02-14] foliantcontrib.apilinks 1.1.3"},{"location":"releases/#2019-02-14-foliantcontribpgsqldoc-115","text":"Move combined_options into another module","title":"[2019-02-14] foliantcontrib.pgsqldoc 1.1.5"},{"location":"releases/#2019-02-12-foliantcontribtestrail-117","text":"Sections exclusion fixed.","title":"[2019-02-12] foliantcontrib.testrail 1.1.7"},{"location":"releases/#2019-02-08-foliantcontribtestrail-116","text":"Case structure output fixed if any problem occurs.","title":"[2019-02-08] foliantcontrib.testrail 1.1.6"},{"location":"releases/#2019-02-01-foliantcontribtestrail-115","text":"Bug with test case table numbering when deleting empty objects fixed. Readme updated.","title":"[2019-02-01] foliantcontrib.testrail 1.1.5"},{"location":"releases/#2019-01-21-foliantcontribapilinks-111","text":"Added filename to warnings.","title":"[2019-01-21] foliantcontrib.apilinks 1.1.1"},{"location":"releases/#2019-01-10-foliantcontribbindsympli-1011","text":"Disable images downloading from design pages only, but not from login page.","title":"[2019-01-10] foliantcontrib.bindsympli 1.0.11"},{"location":"releases/#2018-12-24-foliantcontribgraphviz-102","text":"Fixed external diagrams not reloading on change. Fixed external diagrams are not crashing preprocessor if the file is missing.","title":"[2018-12-24] foliantcontrib.graphviz 1.0.2"},{"location":"releases/#2018-12-20-foliantcontribbindsympli-1010","text":"Check if the design page exists and the image URL is valid.","title":"[2018-12-20] foliantcontrib.bindsympli 1.0.10"},{"location":"releases/#2018-12-17-foliantcontribgraphviz-101","text":"Added 'src' tag option to load diagram source from external file.","title":"[2018-12-17] foliantcontrib.graphviz 1.0.1"},{"location":"releases/#2018-12-17-foliantcontribgraphviz-100","text":"Initial release","title":"[2018-12-17] foliantcontrib.graphviz 1.0.0"},{"location":"releases/#2018-12-13-foliantcontribapilinks-110","text":"Prefixes are now case insensitive. Only prefixes which are defined are trimmed. New option only-defined-prefixes to ignore all prefixes which are not listed in config. Options renamed and regrouped. Breaks backward compatibility. Support of several reference pattern and properties (to catch models). Now search on API page for headers h1, h2, h3 and h4.","title":"[2018-12-13] foliantcontrib.apilinks 1.1.0"},{"location":"releases/#2018-12-06-foliantcontribsubset-108","text":"Remove forgotten unnecessary import.","title":"[2018-12-06] foliantcontrib.subset 1.0.8"},{"location":"releases/#2018-12-06-foliantcontribsubset-107","text":"Move the imports of the oyaml module directly into the methods that use it.","title":"[2018-12-06] foliantcontrib.subset 1.0.7"},{"location":"releases/#2018-12-06-foliantcontribbindsympli-109","text":"Move the while loop from JavaScript code to Python code. Add the max_attempts config option. Require Foliant 1.0.8 because of using the utils.output() method.","title":"[2018-12-06] foliantcontrib.bindsympli 1.0.9"},{"location":"releases/#2018-12-04-foliantcontribsubset-106","text":"Fix a bug: check if subset partial config contains chapters section correctly. Inherit the class Cli from BaseCli , not from Cliar .","title":"[2018-12-04] foliantcontrib.subset 1.0.6"},{"location":"releases/#2018-12-04-foliantcontribmultiproject-109","text":"Inherit the class Cli from BaseCli , not from Cliar .","title":"[2018-12-04] foliantcontrib.multiproject 1.0.9"},{"location":"releases/#2018-12-04-foliantcontribapilinks-105","text":"Now both command and endpoint prefix are ensured to start from root (/).","title":"[2018-12-04] foliantcontrib.apilinks 1.0.5"},{"location":"releases/#2018-12-03-foliantcontribapilinks-104","text":"Fix not catching errors from urllib. Added 'ignoring-prefix' option. Added 'endpoint-prefix' option into API->Name section.","title":"[2018-12-03] foliantcontrib.apilinks 1.0.4"},{"location":"releases/#2018-11-29-foliantcontribapilinks-103","text":"Add require-prefix option.","title":"[2018-11-29] foliantcontrib.apilinks 1.0.3"},{"location":"releases/#2018-11-29-foliantcontribapilinks-102","text":"Trim prefixes function.","title":"[2018-11-29] foliantcontrib.apilinks 1.0.2"},{"location":"releases/#2018-11-29-foliantcontribapilinks-101","text":"Update docs, fix anchor error. Add all HTTP verbs to regular expression.","title":"[2018-11-29] foliantcontrib.apilinks 1.0.1"},{"location":"releases/#2018-11-27-foliantcontribapilinks-100","text":"Initial release.","title":"[2018-11-27] foliantcontrib.apilinks 1.0.0"},{"location":"releases/#2018-11-23-foliantcontribtemplatespreprocessor-103","text":"Fix packages value in setup.py of the template: use foliant.preprocessors instead of foliantcontrib.preprocessors . Require Foliant 1.0.8 in setup.py of the template.","title":"[2018-11-23] foliantcontrib.templates.preprocessor 1.0.3"},{"location":"releases/#2018-11-20-foliantcontribtestrail-114","text":"Another bug with multi-select parameter processing fixed.","title":"[2018-11-20] foliantcontrib.testrail 1.1.4"},{"location":"releases/#2018-11-20-foliantcontribtestrail-113","text":"Jinja templates updated. Bug with multi-select parameter processing fixed.","title":"[2018-11-20] foliantcontrib.testrail 1.1.3"},{"location":"releases/#2018-11-19-foliantcontribtestrail-112","text":"Now it's possible to use dropdown type parameters for test cases samplings.","title":"[2018-11-19] foliantcontrib.testrail 1.1.2"},{"location":"releases/#2018-11-19-foliantcontribtestrail-111","text":"Readme updated.","title":"[2018-11-19] foliantcontrib.testrail 1.1.1"},{"location":"releases/#2018-11-19-foliantcontribtestrail-110","text":"Removed parameters: platforms, platform_id, add_cases_without_platform, add_unpublished_cases. Added parameters: exclude_suite_ids \u2014 to exclude suites from final document by ID, exclude_section_ids \u2014 to exclude sections from final document by ID, exclude_case_ids \u2014 to exclude cases from final document by ID, add_case_id_to_std_table - to add column with case ID to the testing table, multi_param_name - name of custom TestRail multi-select parameter for cases sampling, multi_param_select - values of multi-select parameter for cases sampling, multi_param_select_type \u2014 sampling method, add_cases_without_multi_param - to add cases without any value of multi-select parameter, add_multi_param_to_case_header \u2014 to add values of multi-select parameter to the case headers, add_multi_param_to_std_table \u2014 to add column with values of multi-select parameter to the testing table, checkbox_param_name - name of custom TestRail checkbox parameter for cases sampling, checkbox_param_select_type \u2014 state of custom TestRail checkbox parameter for cases sampling, choose_priorities \u2014 selection of case priorities for cases sampling, add_priority_to_case_header - to add priority to the case header, add_priority_to_std_table \u2014 to add column with priority to the testing table. Renamed parameters: add_case_id_to_case_name -> add_case_id_to_case_header. Fixed config parsing.","title":"[2018-11-19] foliantcontrib.testrail 1.1.0"},{"location":"releases/#2018-11-19-foliantcontribpgsqldoc-113","text":"Add tests; refactor code Fix triggers and functions; add description to functions Fix template","title":"[2018-11-19] foliantcontrib.pgsqldoc 1.1.3"},{"location":"releases/#2018-11-16-foliantcontribtemplatespreprocessor-102","text":"Require foliantcontrib.init 1.0.7, import the output() method. Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.templates.preprocessor 1.0.2"},{"location":"releases/#2018-11-16-foliantcontribmultiproject-108","text":"Do not rewrite source Markdown file if an error occurs in RepoLink preprocessor.","title":"[2018-11-16] foliantcontrib.multiproject 1.0.8"},{"location":"releases/#2018-11-16-foliantcontribmacros-104","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.macros 1.0.4"},{"location":"releases/#2018-11-16-foliantcontribincludes-1010","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.includes 1.0.10"},{"location":"releases/#2018-11-16-foliantcontribimgcaptions-101","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.imgcaptions 1.0.1"},{"location":"releases/#2018-11-16-foliantcontribimagemagick-101","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.imagemagick 1.0.1"},{"location":"releases/#2018-11-16-foliantcontribflags-102","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.flags 1.0.2"},{"location":"releases/#2018-11-16-foliantcontribepsconvert-105","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.epsconvert 1.0.5"},{"location":"releases/#2018-11-16-foliantcontribcustomids-105","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.customids 1.0.5"},{"location":"releases/#2018-11-16-foliantcontribbindsympli-108","text":"Do not rewrite source Markdown file if an error occurs.","title":"[2018-11-16] foliantcontrib.bindsympli 1.0.8"},{"location":"releases/#2018-11-16-foliantcontribgupload-115","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-16] foliantcontrib.gupload 1.1.5"},{"location":"releases/#2018-11-16-foliantcontribslate-104","text":"Provide compatibility with Foliant 1.0.8. Fix preprocessor: if error source won't be cleared.","title":"[2018-11-16] foliantcontrib.slate 1.0.4"},{"location":"releases/#2018-11-14-foliantcontribplantuml-105","text":"Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.plantuml 1.0.5"},{"location":"releases/#2018-11-14-foliantcontribblockdiag-104","text":"Do not rewrite source Markdown file if an error occurs. Use output() method and Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.blockdiag 1.0.4"},{"location":"releases/#2018-11-14-foliantcontribmkdocs-107","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.mkdocs 1.0.7"},{"location":"releases/#2018-11-14-foliantcontribpandoc-108","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.pandoc 1.0.8"},{"location":"releases/#2018-11-14-foliantcontribinit-107","text":"Provide compatibility with Foliant 1.0.8.","title":"[2018-11-14] foliantcontrib.init 1.0.7"},{"location":"releases/#2018-11-14-foliant-108","text":"Restore quiet mode. Add the output() method for using in preprocessors.","title":"[2018-11-14] foliant 1.0.8"},{"location":"releases/#2018-11-14-foliantcontribpandoc-107","text":"Provide compatibility with Foliant 1.0.7.","title":"[2018-11-14] foliantcontrib.pandoc 1.0.7"},{"location":"releases/#2018-11-14-foliantcontribmkdocs-106","text":"Provide compatibility with Foliant 1.0.7.","title":"[2018-11-14] foliantcontrib.mkdocs 1.0.6"},{"location":"releases/#2018-11-14-foliant-107","text":"Remove spinner made with Halo. Abolish quiet mode because it is useless if extensions are allowed to write anything to STDOUT. Show full tracebacks in debug mode; write full tracebacks into logs.","title":"[2018-11-14] foliant 1.0.7"},{"location":"releases/#2018-11-13-foliantcontribinit-106","text":"Provide compatibility with Foliant 1.0.7.","title":"[2018-11-13] foliantcontrib.init 1.0.6"},{"location":"releases/#2018-11-12-foliantcontribmultilinetables-122","text":"Problem with deletion of table strings containing only spaces fixed (critical for lists in grid tables).","title":"[2018-11-12] foliantcontrib.multilinetables 1.2.2"},{"location":"releases/#2018-11-09-foliantcontribsubset-105","text":"Do not use yaml alias for oyaml module to prevent possible influence of this overriding on other parts of code.","title":"[2018-11-09] foliantcontrib.subset 1.0.5"},{"location":"releases/#2018-11-09-foliantcontribplantuml-104","text":"Additionally \u0441heck if diagram image is not saved.","title":"[2018-11-09] foliantcontrib.plantuml 1.0.4"},{"location":"releases/#2018-11-09-foliantcontribblockdiag-103","text":"Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log.","title":"[2018-11-09] foliantcontrib.blockdiag 1.0.3"},{"location":"releases/#2018-11-08-foliantcontribslate-103","text":"Add slate preprocessor which copies the images outside src into the slate project.","title":"[2018-11-08] foliantcontrib.slate 1.0.3"},{"location":"releases/#2018-11-08-foliantcontribtestrail-107","text":"Minor fixes.","title":"[2018-11-08] foliantcontrib.testrail 1.0.7"},{"location":"releases/#2018-11-08-foliantcontribplantuml-103","text":"Add parse_raw option. Do not fail the preprocessor if some diagrams contain errors. Write error messages into the log.","title":"[2018-11-08] foliantcontrib.plantuml 1.0.3"},{"location":"releases/#2018-11-08-foliantcontribtestrail-106","text":"Added: parameters to exclude suite and section headers from the final document.","title":"[2018-11-08] foliantcontrib.testrail 1.0.6"},{"location":"releases/#2018-11-07-foliantcontribtestrail-105","text":"Minor fixes.","title":"[2018-11-07] foliantcontrib.testrail 1.0.5"},{"location":"releases/#2018-11-07-foliantcontribtestrail-104","text":"Fixed: if there is only one suite in project, it's header not added to the contents.","title":"[2018-11-07] foliantcontrib.testrail 1.0.4"},{"location":"releases/#2018-11-02-foliantcontribgupload-114","text":"Code refactored.","title":"[2018-11-02] foliantcontrib.gupload 1.1.4"},{"location":"releases/#2018-11-01-foliantcontribtemplatespreprocessor-101","text":"Add package_data to setup.py .","title":"[2018-11-01] foliantcontrib.templates.preprocessor 1.0.1"},{"location":"releases/#2018-11-01-foliantcontribgupload-113","text":"Logger bug fixed.","title":"[2018-11-01] foliantcontrib.gupload 1.1.3"},{"location":"releases/#2018-10-31-foliantcontribswaggerdoc-112","text":"Bug fixes All path parameters in config now accept either strings or !path strings","title":"[2018-10-31] foliantcontrib.swaggerdoc 1.1.2"},{"location":"releases/#2018-10-31-foliantcontribswaggerdoc-111","text":"Add 'additional_json_path' param for jinja mode Add support for several json_urls","title":"[2018-10-31] foliantcontrib.swaggerdoc 1.1.1"},{"location":"releases/#2018-10-30-foliantcontribmultilinetables-121","text":"Possibility to rewrite source files added.","title":"[2018-10-30] foliantcontrib.multilinetables 1.2.1"},{"location":"releases/#2018-10-30-foliantcontribtestrail-103","text":"Possibility to rewrite source file added.","title":"[2018-10-30] foliantcontrib.testrail 1.0.3"},{"location":"releases/#2018-10-29-foliantcontribbindsympli-107","text":"Use 60-seconds timeout instead of 30-seconds. Provide multiple attempts to open pages.","title":"[2018-10-29] foliantcontrib.bindsympli 1.0.7"},{"location":"releases/#2018-10-29-foliantcontribtestrail-102","text":"Suites collecting fixed.","title":"[2018-10-29] foliantcontrib.testrail 1.0.2"},{"location":"releases/#2018-10-29-foliantcontribmultilinetables-120","text":"Convertation th the grid format added for arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.).","title":"[2018-10-29] foliantcontrib.multilinetables 1.2.0"},{"location":"releases/#2018-10-24-foliantcontribmultiproject-107","text":"Allow to override the edit_uri config option of RepoLink preprocessor with the FOLIANT_REPOLINK_EDIT_URI system environment variable.","title":"[2018-10-24] foliantcontrib.multiproject 1.0.7"},{"location":"releases/#2018-10-23-foliantcontribmultiproject-106","text":"Tidy up CLI arguments.","title":"[2018-10-23] foliantcontrib.multiproject 1.0.6"},{"location":"releases/#2018-10-23-foliantcontribsubset-104","text":"Tidy up command line arguments one more time.","title":"[2018-10-23] foliantcontrib.subset 1.0.4"},{"location":"releases/#2018-10-23-foliantcontribsubset-103","text":"Tidy up command line arguments.","title":"[2018-10-23] foliantcontrib.subset 1.0.3"},{"location":"releases/#2018-10-23-foliantcontribsubset-102","text":"Fix a bug with object names.","title":"[2018-10-23] foliantcontrib.subset 1.0.2"},{"location":"releases/#2018-10-22-foliantcontribsubset-101","text":"Parse YAML fairly. Merge config files recursively.","title":"[2018-10-22] foliantcontrib.subset 1.0.1"},{"location":"releases/#2018-10-19-foliantcontribswaggerdoc-110","text":"Change parameter names and behavior uncompatible with 1.0.0 Add conversion to md with widdershins","title":"[2018-10-19] foliantcontrib.swaggerdoc 1.1.0"},{"location":"releases/#2018-10-11-foliantcontribincludes-109","text":"Don\u2019t crash on failed repo sync (i.e. when you\u2019re offline).","title":"[2018-10-11] foliantcontrib.includes 1.0.9"},{"location":"releases/#2018-10-11-foliantcontribmkdocs-105","text":"Require MkDocs 1.0.4.","title":"[2018-10-11] foliantcontrib.mkdocs 1.0.5"},{"location":"releases/#2018-10-02-foliantcontribreplace-101","text":"Strings with image links are ignored.","title":"[2018-10-02] foliantcontrib.replace 1.0.1"},{"location":"releases/#2018-10-01-foliantcontribgupload-112","text":"Convert to google docs format setting added.","title":"[2018-10-01] foliantcontrib.gupload 1.1.2"},{"location":"releases/#2018-09-25-foliantcontribgupload-111","text":"Unification of repository name, settings section name, and command.","title":"[2018-09-25] foliantcontrib.gupload 1.1.1"},{"location":"releases/#2018-09-25-foliantcontribgupload-110","text":"Backend was converted to CLI extension.","title":"[2018-09-25] foliantcontrib.gupload 1.1.0"},{"location":"releases/#2018-09-25-foliantcontribmultilinetables-113","text":"'targets' option added to the preprocessor settings.","title":"[2018-09-25] foliantcontrib.multilinetables 1.1.3"},{"location":"releases/#2018-09-21-foliantcontribslate-102","text":"Rename shards_path param to shards. It now accepts string or list. Fix no header param.","title":"[2018-09-21] foliantcontrib.slate 1.0.2"},{"location":"releases/#2018-09-20-foliantcontribslate-101","text":"Remove flatten. First chapter goes to index.html.md; all the rest go into the includes.","title":"[2018-09-20] foliantcontrib.slate 1.0.1"},{"location":"releases/#2018-09-18-foliantcontribgupload-101","text":"Command line authentication was added, for example for Docker use.","title":"[2018-09-18] foliantcontrib.gupload 1.0.1"},{"location":"releases/#2018-09-14-foliantcontribtestrail-101","text":"Preprocessor folder structure fixed.","title":"[2018-09-14] foliantcontrib.testrail 1.0.1"},{"location":"releases/#2018-09-12-foliantcontribbindsympli-106","text":"Do not disable images downloading. Use delays when filling email and password fields. Wait for idle network connections when loading pages.","title":"[2018-09-12] foliantcontrib.bindsympli 1.0.6"},{"location":"releases/#2018-08-31-foliant-106","text":"CLI: If no args are provided, print help. Fix tags searching pattern in _unescape preprocessor.","title":"[2018-08-31] foliant 1.0.6"},{"location":"releases/#2018-08-29-foliantcontribpgsqldoc-112","text":"Queries are now ordered (not adjustable right now) Flexable filters instead of strict filtering by schema","title":"[2018-08-29] foliantcontrib.pgsqldoc 1.1.2"},{"location":"releases/#2018-08-27-foliantcontribpgsqldoc-111","text":"Fix scheme template (blank lines issue) Refactor queries code","title":"[2018-08-27] foliantcontrib.pgsqldoc 1.1.1"},{"location":"releases/#2018-08-24-foliantcontribmultilinetables-112","text":"Now it's possible to break the text anywhere in multiline tables with custom tag. Fixed determination of columns number in tables with and without side lines.","title":"[2018-08-24] foliantcontrib.multilinetables 1.1.2"},{"location":"releases/#2018-08-24-foliantcontribpgsqldoc-110","text":"Docs and scheme structure is now defined by Jinja2 templates.","title":"[2018-08-24] foliantcontrib.pgsqldoc 1.1.0"},{"location":"releases/#2018-08-22-foliantcontribmultilinetables-111","text":"Bug with regular expression fixed. 3+ code strings with || operator in a row are not perceived as a tables now.","title":"[2018-08-22] foliantcontrib.multilinetables 1.1.1"},{"location":"releases/#2018-08-22-foliantcontribmultilinetables-110","text":"Code strings with || operator are not perceived as a tables now.","title":"[2018-08-22] foliantcontrib.multilinetables 1.1.0"},{"location":"releases/#2018-07-31-foliantcontribbump-102","text":"Declare semver as dependency.","title":"[2018-07-31] foliantcontrib.bump 1.0.2"},{"location":"releases/#2018-07-29-foliantcontribbump-101","text":"Fix packaging with setup.py. Poetry doesn't quite do the trick \ud83d\ude14","title":"[2018-07-29] foliantcontrib.bump 1.0.1"},{"location":"releases/#2018-07-28-foliantcontribbump-100","text":"Initial release.","title":"[2018-07-28] foliantcontrib.bump 1.0.0"},{"location":"releases/#2018-07-24-foliantcontribmkdocs-104","text":"Provide customizable default names for untitled nested groups of chapters.","title":"[2018-07-24] foliantcontrib.mkdocs 1.0.4"},{"location":"releases/#2018-07-24-foliantcontribflatten-104","text":"Skip empty headings of nested subsections.","title":"[2018-07-24] foliantcontrib.flatten 1.0.4"},{"location":"releases/#2018-07-23-foliantcontribincludes-108","text":"Require at least one space after hashes in the beginning of each heading. Add inline option to the <include> tag. Fix the bug: do not ignore empty lines after headings when using sethead . Fix the bug: allow to use less than 3 characters in the heading content. Do not mark as headings the strings that contain more than 6 leading hashes. If shifted heading level is more than 6, mark the heading content as bold paragraph text, not as heading.","title":"[2018-07-23] foliantcontrib.includes 1.0.8"},{"location":"releases/#2018-06-08-foliantcontribmultiproject-105","text":"Provide Git submodules support.","title":"[2018-06-08] foliantcontrib.multiproject 1.0.5"},{"location":"releases/#2018-06-07-foliantcontribflatten-103","text":"Use flattened file path in includes preprocessor call. Require includes preprocessor 1.0.7.","title":"[2018-06-07] foliantcontrib.flatten 1.0.3"},{"location":"releases/#2018-06-06-foliantcontribincludes-107","text":"Fix paths resolving in case of recursive processing of include statements. Allow revision markers in repo aliases.","title":"[2018-06-06] foliantcontrib.includes 1.0.7"},{"location":"releases/#2018-06-04-foliantcontribincludes-106","text":"Fix logging in file search method. Fix top heading level calculation.","title":"[2018-06-04] foliantcontrib.includes 1.0.6"},{"location":"releases/#2018-06-04-foliantcontribmultiproject-104","text":"Provide compatibility with Foliant 1.0.5. Allow to use multiple config files.","title":"[2018-06-04] foliantcontrib.multiproject 1.0.4"},{"location":"releases/#2018-06-04-foliantcontribpandoc-106","text":"Apply flatten after all preprocessors, not before them. This fixes incompatibility with foliantcontrib.includes 1.0.5.","title":"[2018-06-04] foliantcontrib.pandoc 1.0.6"},{"location":"releases/#2018-06-04-foliantcontribflatten-102","text":"Fix incorrect includes preprocessor call. Require Foliant 1.0.5.","title":"[2018-06-04] foliantcontrib.flatten 1.0.2"},{"location":"releases/#2018-06-04-foliantcontribinit-105","text":"Require Foliant 1.0.5 with prompt_toolkit^2.0.0.","title":"[2018-06-04] foliantcontrib.init 1.0.5"},{"location":"releases/#2018-05-30-foliantcontribcustomids-104","text":"Provide separate block-level HTML elements for the anchors. Allow to define custom stylesheets for these elements.","title":"[2018-05-30] foliantcontrib.customids 1.0.4"},{"location":"releases/#2018-05-25-foliantcontribincludes-105","text":"Use paths that are relative to the current processed Markdown file. Fix sethead behavior for headings that contains hashes ( # ).","title":"[2018-05-25] foliantcontrib.includes 1.0.5"},{"location":"releases/#2018-05-14-foliant-105","text":"Allow to override default config file name in CLI. Allow multiline tags. Process true and false attribute values as boolean, not as integer. Add tests. Improve code style.","title":"[2018-05-14] foliant 1.0.5"},{"location":"releases/#2018-05-10-foliantcontribpandoc-105","text":"Add slug config option.","title":"[2018-05-10] foliantcontrib.pandoc 1.0.5"},{"location":"releases/#2018-05-08-foliantcontribmultiproject-103","text":"Fix config loading. Other small fixes.","title":"[2018-05-08] foliantcontrib.multiproject 1.0.3"},{"location":"releases/#2018-04-25-foliantcontribmultiproject-102","text":"Fix bugs with the project directory path and Git repos syncronizing.","title":"[2018-04-25] foliantcontrib.multiproject 1.0.2"},{"location":"releases/#2018-04-23-foliantcontribmultiproject-101","text":"Fix logging.","title":"[2018-04-23] foliantcontrib.multiproject 1.0.1"},{"location":"releases/#2018-04-20-foliantcontribbindsympli-105","text":"Add logging.","title":"[2018-04-20] foliantcontrib.bindsympli 1.0.5"},{"location":"releases/#2018-04-20-foliantcontribplantuml-102","text":"Fix logging in __init__ .","title":"[2018-04-20] foliantcontrib.plantuml 1.0.2"},{"location":"releases/#2018-04-20-foliantcontribplantuml-101","text":"Add logging.","title":"[2018-04-20] foliantcontrib.plantuml 1.0.1"},{"location":"releases/#2018-04-20-foliantcontribflatten-101","text":"Fix incorrect includes preprocessor call. Add logging. Require Foliant 1.0.4.","title":"[2018-04-20] foliantcontrib.flatten 1.0.1"},{"location":"releases/#2018-04-19-foliantcontribepsconvert-104","text":"Do not use image path when computing MD5 hash. Add targets config option. Add logging.","title":"[2018-04-19] foliantcontrib.epsconvert 1.0.4"},{"location":"releases/#2018-04-19-foliantcontribtemplatespreprocessor-100","text":"Initial release.","title":"[2018-04-19] foliantcontrib.templates.preprocessor 1.0.0"},{"location":"releases/#2018-04-18-foliantcontribcustomids-103","text":"Add targets config option. Add logging.","title":"[2018-04-18] foliantcontrib.customids 1.0.3"},{"location":"releases/#2018-04-14-foliantcontribblockdiag-102","text":"Add logging. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.blockdiag 1.0.2"},{"location":"releases/#2018-04-14-foliantcontribpandoc-104","text":"Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.pandoc 1.0.4"},{"location":"releases/#2018-04-14-foliantcontribmkdocs-103","text":"Add logs. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.mkdocs 1.0.3"},{"location":"releases/#2018-04-14-foliantcontribinit-104","text":"Replace placeholders in file and directory names. Process *.py files. User Template strings instead of format strings for safer substitutions. Update for Foliant 1.0.4: Pass logger to spinner. Require Foliant 1.0.4.","title":"[2018-04-14] foliantcontrib.init 1.0.4"},{"location":"releases/#2018-04-11-foliant-104","text":"Breaking change. Add logging to all stages of building a project. Config parser extensions, CLI extensions, backends, and preprocessors can now access self.logger and create child loggers with self.logger = self.logger.getChild('newbackend') . Add pre backend with pre target that applies the preprocessors from the config and returns a Foliant project that doesn't require any preprocessing. make now returns its result, which makes is easier to call it from extensions.","title":"[2018-04-11] foliant 1.0.4"},{"location":"releases/#2018-04-10-foliantcontribbindsympli-104","text":"Describe the preprocessor usage in README.md .","title":"[2018-04-10] foliantcontrib.bindsympli 1.0.4"},{"location":"releases/#2018-04-10-foliantcontribbindsympli-103","text":"Eliminate external Perl scripts, rewrite the preprocessor code in Python.","title":"[2018-04-10] foliantcontrib.bindsympli 1.0.3"},{"location":"releases/#2018-04-02-foliant-103","text":"Fix critical issue when config parsing would fail if any config value contained non-latin characters.","title":"[2018-04-02] foliant 1.0.3"},{"location":"releases/#2018-04-01-foliantcontribincludes-104","text":"Fix the pattern for headings detection.","title":"[2018-04-01] foliantcontrib.includes 1.0.4"},{"location":"releases/#2018-03-31-foliantcontribincludes-103","text":"Allow hashes ( # characters) in the content of headings.","title":"[2018-03-31] foliantcontrib.includes 1.0.3"},{"location":"releases/#2018-03-29-foliantcontribepsconvert-103","text":"Take into account the content of image file when computing MD5 hash.","title":"[2018-03-29] foliantcontrib.epsconvert 1.0.3"},{"location":"releases/#2018-03-29-foliantcontribepsconvert-102","text":"Add support of any local paths. Add image cache. Remove mogrify_path and diagrams_cache_dir options, add convert_path and cache_dir instead.","title":"[2018-03-29] foliantcontrib.epsconvert 1.0.2"},{"location":"releases/#2018-03-28-foliantcontribcustomids-102","text":"Process first heading and all other headings separately.","title":"[2018-03-28] foliantcontrib.customids 1.0.2"},{"location":"releases/#2018-03-27-foliantcontribcustomids-101","text":"Update README.md and docstrings. Update long description content type in setup.py","title":"[2018-03-27] foliantcontrib.customids 1.0.1"},{"location":"releases/#2018-03-27-foliantcontribbindsympli-102","text":"Change the path for non-Python scripts once more.","title":"[2018-03-27] foliantcontrib.bindsympli 1.0.2"},{"location":"releases/#2018-03-27-foliantcontribbindsympli-101","text":"Change the path for non-Python scripts.","title":"[2018-03-27] foliantcontrib.bindsympli 1.0.1"},{"location":"releases/#2018-03-21-foliantcontribincludes-102","text":"Fix inappropriate translation of image URLs into local paths.","title":"[2018-03-21] foliantcontrib.includes 1.0.2"},{"location":"releases/#2018-03-21-foliantcontribmkdocs-102","text":"Add use_headings and slug options for MkDocs backend. Fix inappropriate translation of image URLs into local paths in MkDocs preprocessor.","title":"[2018-03-21] foliantcontrib.mkdocs 1.0.2"},{"location":"releases/#2018-03-17-foliant-102","text":"Use README.md as package description.","title":"[2018-03-17] foliant 1.0.2"},{"location":"releases/#2018-03-13-foliantcontribepsconvert-101","text":"Add diagrams_cache_dir option support.","title":"[2018-03-13] foliantcontrib.epsconvert 1.0.1"},{"location":"releases/#2018-02-28-foliantcontribpandoc-103","text":"Change Pandoc command line parameter --reference-docx to --reference-doc .","title":"[2018-02-28] foliantcontrib.pandoc 1.0.3"},{"location":"releases/#2018-02-25-foliant-101","text":"Fix critical bug with CLI module caused by missing version definition in the root __init__.py file.","title":"[2018-02-25] foliant 1.0.1"},{"location":"releases/#2018-02-23-foliant-100","text":"Complete rewrite.","title":"[2018-02-23] foliant 1.0.0"},{"location":"releases/#2018-02-16-foliantcontribblockdiag-101","text":"Add pdf output format support.","title":"[2018-02-16] foliantcontrib.blockdiag 1.0.1"},{"location":"releases/#2018-02-07-foliantcontribinit-103","text":"Upon creation, relative path to the created project directory is returned instead of an absolute one. Templates: basic: Foliant docs related content removed from README.md. Templates: basic: foliantcontrib.mkdocs added to requirements.txt.","title":"[2018-02-07] foliantcontrib.init 1.0.3"},{"location":"releases/#2018-02-07-foliantcontribinit-102","text":"Add slug placeholder. Process placeholders in .yml , .txt , and .md files, not just foliant.yml . Templates: basic: Add Dockerfile , docker-compose.yml , requirements.txt , and README.md .","title":"[2018-02-07] foliantcontrib.init 1.0.2"},{"location":"releases/#2018-02-07-foliantcontribinit-101","text":"Fix issue with init command missing after installation. Fix issue with missing templates after installation.","title":"[2018-02-07] foliantcontrib.init 1.0.1"},{"location":"releases/#2018-02-01-foliantcontribmacros-103","text":"Add tag <m>...</m> .","title":"[2018-02-01] foliantcontrib.macros 1.0.3"},{"location":"releases/#2018-01-17-foliantcontribmacros-102","text":"Switch from unnamed to named parameters. Macro name is now defined in the tag body instead of \"name\" option.","title":"[2018-01-17] foliantcontrib.macros 1.0.2"},{"location":"releases/#2018-01-15-foliantcontribmacros-101","text":"Preserve param case.","title":"[2018-01-15] foliantcontrib.macros 1.0.1"},{"location":"releases/#2018-01-06-foliantcontribflags-101","text":"Add targets and backends options to <if> tag.","title":"[2018-01-06] foliantcontrib.flags 1.0.1"},{"location":"releases/#2018-01-05-foliantcontribpandoc-102","text":"Change default Markdown flavor from markdown_strict to markdown .","title":"[2018-01-05] foliantcontrib.pandoc 1.0.2"},{"location":"releases/#2017-12-17-foliantcontribpandoc-101","text":"Add tex target.","title":"[2017-12-17] foliantcontrib.pandoc 1.0.1"},{"location":"releases/#2017-12-16-foliantcontribmkdocs-101","text":"Add ghp target for GitHub Pages deploy with mkdocs gh-deploy .","title":"[2017-12-16] foliantcontrib.mkdocs 1.0.1"},{"location":"releases/#2017-12-15-foliantcontribincludes-101","text":"Fix git repo name detection when the repo part contains full stops.","title":"[2017-12-15] foliantcontrib.includes 1.0.1"},{"location":"tags/","text":"Tags \u00b6 API \u00b6 Aglio Slate APIReferences RAMLDoc SwaggerDoc Documenting API with Foliant SSG \u00b6 Aglio MkDocs Slate architecture \u00b6 Architecture And Basic Design Concepts backend \u00b6 Aglio Confluence MdToPdf MkDocs Pandoc Slate backup \u00b6 Src changelog \u00b6 Welcome to Foliant! History of Releases chapters \u00b6 AltStructure Slugs cli extension \u00b6 Bump Gupload Meta Generate Src Subset Init config \u00b6 Project Configuration Metadata Subset CheckSources General Notes RemoveExcess config extension \u00b6 AltStructure DownloadFile MultiProject Slugs YAMLInclude confluence \u00b6 Confluence Confluence database \u00b6 DBDoc DBMLDoc Pgsqldoc Introduction Documenting DBML schema Documenting Oracle Database Documenting PostgreSQL Database debug \u00b6 Debugging Builds deprecated \u00b6 Pgsqldoc design \u00b6 BindFigma BindSympli ImagineUI developing \u00b6 Developer\u2019s Reference diagram \u00b6 Archeme Argdown Blockdiag BPMN Graphviz Mermaid MetaGraph Plantuml docx \u00b6 Pandoc epub \u00b6 Pandoc git \u00b6 Badges History Includes RepoLink ShowCommits google drive \u00b6 Gupload image \u00b6 BindFigma BindSympli Epsconvert ImageMagick ImagineUI ImgCaptions ImgConvert include \u00b6 YAMLInclude install \u00b6 Installation jinja \u00b6 TemplateParser markdown \u00b6 Admonitions Anchors CustomIDs EscapeCode and UnescapeCode Flags Macros Replace SuperLinks mkdocs \u00b6 MkDocs RepoLink multiproject \u00b6 Src MultiProject odt \u00b6 Pandoc overview \u00b6 Architecture And Basic Design Concepts Project Configuration Debugging Builds Developer\u2019s Reference Metadata pandoc \u00b6 Pandoc Flatten Glossary pdf \u00b6 MdToPdf Pandoc preprocessor \u00b6 Preprocessor Admonitions Anchors APIReferences Archeme Argdown Badges BindFigma BindSympli Blockdiag BPMN CheckSources Confluence CSVTables CustomIDs DBDoc DBMLDoc Elasticsearch Epsconvert EscapeCode and UnescapeCode Flags Flatten General Notes Glossary Graphviz History ImageMagick ImagineUI ImgCaptions ImgConvert Includes Macros Mermaid MetaGraph MultilineTables Pgsqldoc Plantuml RAMLDoc Reindexer RemoveExcess Replace RepoLink RunCommands ShowCommits SuperLinks SwaggerDoc TemplateParser Testrail Creating the Gibberish Generator Installing and Testing Introduction Formalizing the Preprocessor search \u00b6 Elasticsearch Reindexer shell \u00b6 RunCommands site \u00b6 Aglio MkDocs Slate table \u00b6 CSVTables MultilineTables template \u00b6 Init Preprocessor tex \u00b6 Pandoc tutorial \u00b6 Installation Quickstart Documenting API with Foliant Running Foliant in Docker Your First Foliant Project Introduction Documenting DBML schema Documenting Oracle Database Documenting PostgreSQL Database Creating the Gibberish Generator Installing and Testing Introduction Formalizing the Preprocessor version \u00b6 Bump yaml \u00b6 Project Configuration Metadata Meta Generate CheckSources General Notes RemoveExcess","title":"Tags"},{"location":"tags/#tags","text":"","title":"Tags"},{"location":"tags/#api","text":"Aglio Slate APIReferences RAMLDoc SwaggerDoc Documenting API with Foliant","title":"API"},{"location":"tags/#ssg","text":"Aglio MkDocs Slate","title":"SSG"},{"location":"tags/#architecture","text":"Architecture And Basic Design Concepts","title":"architecture"},{"location":"tags/#backend","text":"Aglio Confluence MdToPdf MkDocs Pandoc Slate","title":"backend"},{"location":"tags/#backup","text":"Src","title":"backup"},{"location":"tags/#changelog","text":"Welcome to Foliant! History of Releases","title":"changelog"},{"location":"tags/#chapters","text":"AltStructure Slugs","title":"chapters"},{"location":"tags/#cli-extension","text":"Bump Gupload Meta Generate Src Subset Init","title":"cli extension"},{"location":"tags/#config","text":"Project Configuration Metadata Subset CheckSources General Notes RemoveExcess","title":"config"},{"location":"tags/#config-extension","text":"AltStructure DownloadFile MultiProject Slugs YAMLInclude","title":"config extension"},{"location":"tags/#confluence","text":"Confluence Confluence","title":"confluence"},{"location":"tags/#database","text":"DBDoc DBMLDoc Pgsqldoc Introduction Documenting DBML schema Documenting Oracle Database Documenting PostgreSQL Database","title":"database"},{"location":"tags/#debug","text":"Debugging Builds","title":"debug"},{"location":"tags/#deprecated","text":"Pgsqldoc","title":"deprecated"},{"location":"tags/#design","text":"BindFigma BindSympli ImagineUI","title":"design"},{"location":"tags/#developing","text":"Developer\u2019s Reference","title":"developing"},{"location":"tags/#diagram","text":"Archeme Argdown Blockdiag BPMN Graphviz Mermaid MetaGraph Plantuml","title":"diagram"},{"location":"tags/#docx","text":"Pandoc","title":"docx"},{"location":"tags/#epub","text":"Pandoc","title":"epub"},{"location":"tags/#git","text":"Badges History Includes RepoLink ShowCommits","title":"git"},{"location":"tags/#google-drive","text":"Gupload","title":"google drive"},{"location":"tags/#image","text":"BindFigma BindSympli Epsconvert ImageMagick ImagineUI ImgCaptions ImgConvert","title":"image"},{"location":"tags/#include","text":"YAMLInclude","title":"include"},{"location":"tags/#install","text":"Installation","title":"install"},{"location":"tags/#jinja","text":"TemplateParser","title":"jinja"},{"location":"tags/#markdown","text":"Admonitions Anchors CustomIDs EscapeCode and UnescapeCode Flags Macros Replace SuperLinks","title":"markdown"},{"location":"tags/#mkdocs","text":"MkDocs RepoLink","title":"mkdocs"},{"location":"tags/#multiproject","text":"Src MultiProject","title":"multiproject"},{"location":"tags/#odt","text":"Pandoc","title":"odt"},{"location":"tags/#overview","text":"Architecture And Basic Design Concepts Project Configuration Debugging Builds Developer\u2019s Reference Metadata","title":"overview"},{"location":"tags/#pandoc","text":"Pandoc Flatten Glossary","title":"pandoc"},{"location":"tags/#pdf","text":"MdToPdf Pandoc","title":"pdf"},{"location":"tags/#preprocessor","text":"Preprocessor Admonitions Anchors APIReferences Archeme Argdown Badges BindFigma BindSympli Blockdiag BPMN CheckSources Confluence CSVTables CustomIDs DBDoc DBMLDoc Elasticsearch Epsconvert EscapeCode and UnescapeCode Flags Flatten General Notes Glossary Graphviz History ImageMagick ImagineUI ImgCaptions ImgConvert Includes Macros Mermaid MetaGraph MultilineTables Pgsqldoc Plantuml RAMLDoc Reindexer RemoveExcess Replace RepoLink RunCommands ShowCommits SuperLinks SwaggerDoc TemplateParser Testrail Creating the Gibberish Generator Installing and Testing Introduction Formalizing the Preprocessor","title":"preprocessor"},{"location":"tags/#search","text":"Elasticsearch Reindexer","title":"search"},{"location":"tags/#shell","text":"RunCommands","title":"shell"},{"location":"tags/#site","text":"Aglio MkDocs Slate","title":"site"},{"location":"tags/#table","text":"CSVTables MultilineTables","title":"table"},{"location":"tags/#template","text":"Init Preprocessor","title":"template"},{"location":"tags/#tex","text":"Pandoc","title":"tex"},{"location":"tags/#tutorial","text":"Installation Quickstart Documenting API with Foliant Running Foliant in Docker Your First Foliant Project Introduction Documenting DBML schema Documenting Oracle Database Documenting PostgreSQL Database Creating the Gibberish Generator Installing and Testing Introduction Formalizing the Preprocessor","title":"tutorial"},{"location":"tags/#version","text":"Bump","title":"version"},{"location":"tags/#yaml","text":"Project Configuration Metadata Meta Generate CheckSources General Notes RemoveExcess","title":"yaml"},{"location":"backends/aglio/","tags":["backend","site","API","SSG"],"text":"Aglio \u00b6 Aglio Backend for Foliant \u00b6 Aglio backend generates API documentation from API Blueprint using aglio renderer . This backend operates the site target. Note, that aglio is designed to render API Blueprint documents. Blueprint syntax is very close to that of Markdown and you may be tempted to use this backend as a general purpose static site generator. It may work in some cases, but is not guaranteed to work in all of them. Installation \u00b6 $ pip install foliantcontrib.aglio To use this backend Aglio should be installed on your system: $ npm install -g aglio To test if you've installed aglio properly run the aglio -h command, which should return you a list of options. Usage \u00b6 To generate a static website from your Foliant project run the following command: $ foliant make site --with aglio Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Awesome_Project.aglio Config \u00b6 You don't have to put anything in the config to use aglio backend. If it's installed, Foliant detects it. To customize the output, use options in backend_config.aglio section: backend_config : aglio : aglio_path : aglio params : theme-variables : flatly fullWidth : True aglio_path Path to the aglio binary. Default: aglio params Parameters which will be supplied to the aglio command. To get the list of possible parameters, run aglio -h or check the official docs . Customizing output \u00b6 Templates \u00b6 You can customize the appearance of the static website build by aglio with Jade templates. Aglio has two built-in templates: default \u2014 two-column web-page; triple \u2014 three-column web-page. To add your own template, follow the instructions in the official docs. To specify the template add the theme-template field to the params option: backend_config : aglio : params : theme-template : triple Color scheme \u00b6 You can customize the color scheme of the website by specifying the color scheme name in theme-variables param. Available built-in color schemes: default , cyborg , flatly , slate , streak . You can also specify your own scheme in a LESS or CSS file. backend_config : aglio : params : theme-variables : flatly Stylesheets \u00b6 Finally, you can provide custom stylesheets in a LESS or CSS file in theme-style param: backend_config : aglio : params : theme-style : !path my-style.less","title":"Aglio"},{"location":"backends/aglio/#aglio","text":"","title":"Aglio"},{"location":"backends/aglio/#aglio-backend-for-foliant","text":"Aglio backend generates API documentation from API Blueprint using aglio renderer . This backend operates the site target. Note, that aglio is designed to render API Blueprint documents. Blueprint syntax is very close to that of Markdown and you may be tempted to use this backend as a general purpose static site generator. It may work in some cases, but is not guaranteed to work in all of them.","title":"Aglio Backend for Foliant"},{"location":"backends/aglio/#installation","text":"$ pip install foliantcontrib.aglio To use this backend Aglio should be installed on your system: $ npm install -g aglio To test if you've installed aglio properly run the aglio -h command, which should return you a list of options.","title":"Installation"},{"location":"backends/aglio/#usage","text":"To generate a static website from your Foliant project run the following command: $ foliant make site --with aglio Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Awesome_Project.aglio","title":"Usage"},{"location":"backends/aglio/#config","text":"You don't have to put anything in the config to use aglio backend. If it's installed, Foliant detects it. To customize the output, use options in backend_config.aglio section: backend_config : aglio : aglio_path : aglio params : theme-variables : flatly fullWidth : True aglio_path Path to the aglio binary. Default: aglio params Parameters which will be supplied to the aglio command. To get the list of possible parameters, run aglio -h or check the official docs .","title":"Config"},{"location":"backends/aglio/#customizing-output","text":"","title":"Customizing output"},{"location":"backends/aglio/#templates","text":"You can customize the appearance of the static website build by aglio with Jade templates. Aglio has two built-in templates: default \u2014 two-column web-page; triple \u2014 three-column web-page. To add your own template, follow the instructions in the official docs. To specify the template add the theme-template field to the params option: backend_config : aglio : params : theme-template : triple","title":"Templates"},{"location":"backends/aglio/#color-scheme","text":"You can customize the color scheme of the website by specifying the color scheme name in theme-variables param. Available built-in color schemes: default , cyborg , flatly , slate , streak . You can also specify your own scheme in a LESS or CSS file. backend_config : aglio : params : theme-variables : flatly","title":"Color scheme"},{"location":"backends/aglio/#stylesheets","text":"Finally, you can provide custom stylesheets in a LESS or CSS file in theme-style param: backend_config : aglio : params : theme-style : !path my-style.less","title":"Stylesheets"},{"location":"backends/confluence/","tags":["backend","confluence"],"text":"Confluence \u00b6 Confluence backend generates confluence articles and uploads them on your confluence server. It can create and edit pages in Confluence with content based on your Foliant project. It also has a feature of restoring the user inline comments, added for the article, even after the commented fragment was changed. This backend adds the confluence target for your Foliant make command. Installation \u00b6 $ pip install foliantcontrib.confluence The backend requires Pandoc to be installed on your system. Pandoc is needed to convert Markdown into HTML. Usage \u00b6 To upload a Foliant project to Confluence server use make confluence command: $ foliant make confluence Parsing config... Done Making confluence... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: https://my_confluence_server.org/pages/viewpage.action?pageId = 123 ( Page Title ) Config \u00b6 You have to set up the correct config for this backend to work properly. Specify all options in backend_config.confluence section: backend_config : confluence : passfile : confluence_secrets.yml host : 'https://my_confluence_server.org' login : user password : user_password id : 124443 title : Title of the page space_key : \"~user\" parent_id : 124442 parent_title : Parent test_run : false notify_watchers : false toc : false nohead : false restore_comments : true resolve_if_changed : false pandoc_path : pandoc verify_ssl : true cloud : false attachments : - license.txt - project.pdf codeblocks : ... passfile Path to YAML-file holding credentials. See details in Supplying Credentials section. Default: confluence_secrets.yml host Required Host of your confluence server. login Login of the user who has permissions to create and update pages. If login is not supplied, it will be prompted during the build. password Password of the user. If the password is not supplied, it will be prompted during the build. id ID of the page where the content will be uploaded. Only for already existing pages title Title of the page to be created or updated. Remember that page titles in one space must be unique. space_key The space key where the page(s) will be created/edited. Only for not yet existing pages . parent_id ID of the parent page under which the new one(s) should be created. Only for not yet existing pages . parent_title Another way to define the parent of the page. Lower priority than paren_di . Title of the parent page under which the new one(s) should be created. The parent should exist under the space_key specified. Only for not yet existing pages . test_run If this option is true, Foliant will prepare the files for uploading to Confluence, but won't actually upload them. Use this option for testing your content before upload. The prepared files can be found in .confluencecache/debug folder. Default: false notify_watchers If true \u2014 watchers will be notified that the page has changed. Default: false toc Set to true to add a table of contents to the beginning of the document. Default: false nohead If set to true , first title will be removed from the page. Use it if you are experiencing duplicate titles. Default: false restore_comments Attempt to restore inline comments near the same places after updating the page. Default: true resolve_if_changed Delete inline comment from the source if the commented text was changed. This will automatically mark the comment as resolved. Default: false pandoc_path Path to Pandoc binary (Pandoc is used to convert Markdown into HTML). verify_ssl If false , SSL verification will be turned off. Sometimes when dealing with Confluence servers in Intranets it's easier to turn this option off rather than fight with admins. Not recommended to turn off for public servers in production. Default: true cloud If true , foliant will try to publish content without HTML code formatting, which introduces unwanted spaces and newlines when working with Confluence Cloud. attachments List of files (relative to project root) which should be attached to the Confluence page. codeblocks Configuration for converting Markdown code blocks into code-block macros. See details in Code blocks processing sections. User's guide \u00b6 Uploading articles \u00b6 By default, if you specify id or space_key and title in foliant.yml, the whole project will be built and uploaded to this page. If you wish to upload separate chapters into separate articles, you need to specify the respective id or space_key and title in meta section of the chapter. Meta section is a YAML-formatted field-value section in the beginning of the document, which is defined like this: --- field : value field2 : value --- Your chapter md-content or like this: < meta field = \"value\" field2 = \"value\" > </ meta > Your chapter md-content The result of the above examples will be exactly the same. Just remember that first syntax, with three dashes --- will only work if it is in the beginning of the document. For all other cases use the meta-tag syntax. If you want to upload a chapter into confluence, add its properties under the confluence key like this: --- confluence : title : My confluence page space_key : \"~user\" --- You chapter md-content Important notice! Both modes work together. If you specify the id1 in foliant.yml and id2 in chapter's meta \u2014 the whole project will be uploaded to the page with id1 , and the specific chapter will also be uploaded to the page with id2 . Notice You can omit title param in metadata. In this case section heading will be used as a title. If you want to upload just a part of the chapter, specify meta tag under the heading, which you want to upload, like this: # My document Lorem ipsum dolor sit amet, consectetur adipisicing elit. Explicabo quod omnis ipsam necessitatibus, enim voluptatibus. ## Components < meta confluence = \" title: 'System components' space_key: '~user' \" > </ meta > Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vel, atque! ... In this example, only the Components section with all its content will be uploaded to Confluence. The My document heading will be ignored. Creating pages \u00b6 If you want a new page to be created for content in your Foliant project, just supply in foliant.yml the space key and a title that does not yet exist in this space. Remember that in Confluence page titles are unique inside one space. If you use a title of an already existing page, the backend will attempt to edit it and replace its content with your project. Example config for this situation is: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass title : My unique title space_key : \"~user\" Now if you change the title in your config, confluence will create a new page with the new title , leaving the old one intact. If you want to change the title of your page, the answer is in the following section. Updating pages \u00b6 Generally to update the page contents you may use the same config you used to create it (see the previous section). If the page with a specified title exists, it will be updated. Also, you can just specify the id of an existing page. After build its contents will be updated. backend_config : confluence : host : https://my_confluence_server.org login : user password : pass id : 124443 This is also the only way to edit a page title. If title param is specified, the backend will attempt to change the page's title to the new one: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass id : 124443 title : New unique title Updating part of a page \u00b6 Confluence backend can also upload an article into the middle of a Confluence page, leaving all the rest of it intact. To do this you need to add an Anchor into your page in the place where you want Foliant content to appear. Go to Confluence web interface and open the article. Go to Edit mode. Put the cursor in the position where you want your Foliant content to be inserted and start typing {anchor to open the macros menu and locate the Anchor macro. Add an anchor with the name foliant . Save the page. Now if you upload content into this page (see two previous sections), Confluence backend will leave all text which was before and after the anchor intact, and add your Foliant content in the middle. You can also add two anchors: foliant_start and foliant_end . In this case, all text between these anchors will be replaced by your Foliant content. Known issue: right now this mode doesn't work with layout sections . If you are using sections, whole content will be overwritten. Inserting raw confluence tags \u00b6 If you want to supplement your page with confluence macros or any other storage-specific HTML, you may do it by wrapping them in the <raw_confluence></raw_confluence> tag. For example, if you wish to add a table of contents into the middle of the document for some reason, you can do something like this: Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit dolorem nulla quam doloribus delectus voluptate. < raw_confluence >< ac:structured-macro ac:macro-id = \"1\" ac:name = \"toc\" ac:schema-version = \"1\" /></ raw_confluence > Lorem ipsum dolor sit amet, consectetur adipisicing elit. Officiis, laboriosam cumque soluta sequi blanditiis, voluptatibus quaerat similique nihil debitis repellendus. In version 0.6.15 we've added an experimental feature of automatically escaping <ac:...></ac:...> tags for you. So if you want to insert, say, an image with native Confluence tag ac:image , you don't have to wrap it in raw_confluence tag, but keep in mind following caveats: singleton ac:... tags are not supported, so <ac:emoticon ac:name=\"cross\" /> will not work, you will have to provide the closing tag: <ac:emoticon ac:name=\"cross\"></ac:emoticon> , only ac:... tags are escaped right now, other confluence tags like ri:... or at:... are left as is. If these tags appear inside ac:... tag, it's ok. If otherwise, ac:... tag appears inside at:... or ri:... tag, everything will break. Attaching files \u00b6 To attach an arbitrary file to Confluence page simply put path to this file in the attachments parameter in foliant.yml or in meta section. This will just tell Foliant to attach this file to the page, but if you want to reference it in text, use the other approach: Insert Confluence ac:link tag to attachment right inside your Markdown document and put local path to your file in the ri:filename parameter like this: Presentation in PDF: <ac:link> <ri:attachment ri:filename=\"presentation.pdf\"/> </ac:link> In this case Foliant will upload the presentation.pdf to the Confluence page and make a link to it in the text. The path in ri:filename parameter should be relative to current Markdown file, but you can use !path , !project_path modifiers to reference images relative to project root. Advanced images \u00b6 Confluence has an ac:image tag which allows you to transform and format your attached images: resize, set alignment, add borders, etc. Since version 0.6.15 you have access to all these features. Now instead of plain Markdown-image syntax you can use native Confluence image syntax. Add an ac:image tag as if you were editing page source in Confluence interface and use local relative path to the image as if you were inserting Markdown-image. For example, if you have an image defined like this: ![My image](img/picture.png) and you want to resize it to 600px and align to center, replace it with following tag: <ac:image ac:height=\"600\" ac:align=\"center\"> <ri:attachment ri:filename=\"img/picture.png\" /> </ac:image> As you noticed, you should put path to your image right inside the ri:filename param. This path should be relative to current Markdown file, but you can (since 0.6.16) use !path , !project_path modifiers to reference images relative to project root. Here's a link to Confluence docs about ac:image tag and all possible options. If you want to upload an external image, you can also use this approach, just insert that proper ac:image tag, no need for raw_confluence : External image: <ac:image> <ri:url ri:value=\"http://confluence.atlassian.com/images/logo/confluence_48_trans.png\" /></ac:image> Code blocks processing \u00b6 Since 0.6.9 backend converts Markdown code blocks into Confluence code-block macros. You can tune the macros appearance by specifying some options in codeblocks config section of Confluence backend backend_config : confluence : codeblocks : # all are optional theme : django title : Code example linenumbers : false collapse : false theme Color theme of the code blocks. Should be one of: emacs , django , fadetogrey , midnight , rdark , eclipse , confluence . title Title of the code block. linenumbers Show line numbers in code blocks. Default: false collapse Collapse code blocks into a clickable bar. Default: false Right now Foliant only converts code blocks by backticks/tildes (tabbed code blocks are ignored for now): This code block will be converted: ```python def test2(): pass ``` And this: ~~~ def test3(): pass ~~~ Syntax name, defined after backticks/tildes is converted into its Confluence counterpart. Right now following syntaxes are supported: actionscript , applescript , bash , c , c , coldfusion , cpp , cs , css , delphi , diff , erlang , groovy , html , java , javascript , js , perl , php , powershell , python , xml , yaml . Supplying Credentials \u00b6 There are several ways to supply credentials for your confluence server. 1. In foliant.yml The most basic way is just to put credentials in foliant.yml: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass It's not very secure because foliant.yml is usually visible to everybody in your project's git repository. 2. Omit credentials in config A slightly more secure way is to remove password or both login and password from config: backend_config : confluence : host : https://my_confluence_server.org login : user In this case Foliant will prompt for missing credentials during each build: $ foliant make confluence Parsing config... Done Applying preprocessor confluence_final... Done Making confluence... !!! User input required !!! Please input password for user: $ 3. Using environment variables Foliant 1.0.12 can access environment variables inside config files with !env modifier. backend_config : confluence : host : https://my_confluence_server.org login : !env CONFLUENCE_USER password : !env CONFLUENCE_PASS Now you can add these variables into your command: CONFLUENCE_USER = user CONFLUENCE_PASS = pass foliant make confluence Or, if you are using docker: docker-compose run --rm -e CONFLUENCE_USER = user -e CONFLUENCE_PASS = pass foliant make confluence 4. Using passfile Finally, you can use a passfile. Passfile is a yaml-file which holds all your passwords. You can keep it out from git-repository by storing it only on your local machine and production server. To use passfile, add a passfile option to foliant.yml: backend_config : confluence : host : https://my_confluence_server.org passfile : confluence_secrets.yaml The syntax of the passfile is the following: hostname : login : password For example: https://my_confluence_server.org : user1 : wFwG34uK user2 : MEUeU3b4 https://another_confluence_server.org : admin : adminpass If there are several records for a specified host in passfile (like in the example above), Foliant will pick the first one. If you want specific one of them, add the login parameter to your foliant.yml: backend_config : confluence : host : https://my_confluence_server.org passfile : confluence_secrets.yaml login : user2 Credits \u00b6 The following wonderful tools and libraries are used in foliantcontrib.confluence: Atlassian Python API wrapper , BeautifulSoup , PyParsing , Pandoc .","title":"Confluence"},{"location":"backends/confluence/#confluence","text":"Confluence backend generates confluence articles and uploads them on your confluence server. It can create and edit pages in Confluence with content based on your Foliant project. It also has a feature of restoring the user inline comments, added for the article, even after the commented fragment was changed. This backend adds the confluence target for your Foliant make command.","title":"Confluence"},{"location":"backends/confluence/#installation","text":"$ pip install foliantcontrib.confluence The backend requires Pandoc to be installed on your system. Pandoc is needed to convert Markdown into HTML.","title":"Installation"},{"location":"backends/confluence/#usage","text":"To upload a Foliant project to Confluence server use make confluence command: $ foliant make confluence Parsing config... Done Making confluence... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: https://my_confluence_server.org/pages/viewpage.action?pageId = 123 ( Page Title )","title":"Usage"},{"location":"backends/confluence/#config","text":"You have to set up the correct config for this backend to work properly. Specify all options in backend_config.confluence section: backend_config : confluence : passfile : confluence_secrets.yml host : 'https://my_confluence_server.org' login : user password : user_password id : 124443 title : Title of the page space_key : \"~user\" parent_id : 124442 parent_title : Parent test_run : false notify_watchers : false toc : false nohead : false restore_comments : true resolve_if_changed : false pandoc_path : pandoc verify_ssl : true cloud : false attachments : - license.txt - project.pdf codeblocks : ... passfile Path to YAML-file holding credentials. See details in Supplying Credentials section. Default: confluence_secrets.yml host Required Host of your confluence server. login Login of the user who has permissions to create and update pages. If login is not supplied, it will be prompted during the build. password Password of the user. If the password is not supplied, it will be prompted during the build. id ID of the page where the content will be uploaded. Only for already existing pages title Title of the page to be created or updated. Remember that page titles in one space must be unique. space_key The space key where the page(s) will be created/edited. Only for not yet existing pages . parent_id ID of the parent page under which the new one(s) should be created. Only for not yet existing pages . parent_title Another way to define the parent of the page. Lower priority than paren_di . Title of the parent page under which the new one(s) should be created. The parent should exist under the space_key specified. Only for not yet existing pages . test_run If this option is true, Foliant will prepare the files for uploading to Confluence, but won't actually upload them. Use this option for testing your content before upload. The prepared files can be found in .confluencecache/debug folder. Default: false notify_watchers If true \u2014 watchers will be notified that the page has changed. Default: false toc Set to true to add a table of contents to the beginning of the document. Default: false nohead If set to true , first title will be removed from the page. Use it if you are experiencing duplicate titles. Default: false restore_comments Attempt to restore inline comments near the same places after updating the page. Default: true resolve_if_changed Delete inline comment from the source if the commented text was changed. This will automatically mark the comment as resolved. Default: false pandoc_path Path to Pandoc binary (Pandoc is used to convert Markdown into HTML). verify_ssl If false , SSL verification will be turned off. Sometimes when dealing with Confluence servers in Intranets it's easier to turn this option off rather than fight with admins. Not recommended to turn off for public servers in production. Default: true cloud If true , foliant will try to publish content without HTML code formatting, which introduces unwanted spaces and newlines when working with Confluence Cloud. attachments List of files (relative to project root) which should be attached to the Confluence page. codeblocks Configuration for converting Markdown code blocks into code-block macros. See details in Code blocks processing sections.","title":"Config"},{"location":"backends/confluence/#users-guide","text":"","title":"User's guide"},{"location":"backends/confluence/#uploading-articles","text":"By default, if you specify id or space_key and title in foliant.yml, the whole project will be built and uploaded to this page. If you wish to upload separate chapters into separate articles, you need to specify the respective id or space_key and title in meta section of the chapter. Meta section is a YAML-formatted field-value section in the beginning of the document, which is defined like this: --- field : value field2 : value --- Your chapter md-content or like this: < meta field = \"value\" field2 = \"value\" > </ meta > Your chapter md-content The result of the above examples will be exactly the same. Just remember that first syntax, with three dashes --- will only work if it is in the beginning of the document. For all other cases use the meta-tag syntax. If you want to upload a chapter into confluence, add its properties under the confluence key like this: --- confluence : title : My confluence page space_key : \"~user\" --- You chapter md-content Important notice! Both modes work together. If you specify the id1 in foliant.yml and id2 in chapter's meta \u2014 the whole project will be uploaded to the page with id1 , and the specific chapter will also be uploaded to the page with id2 . Notice You can omit title param in metadata. In this case section heading will be used as a title. If you want to upload just a part of the chapter, specify meta tag under the heading, which you want to upload, like this: # My document Lorem ipsum dolor sit amet, consectetur adipisicing elit. Explicabo quod omnis ipsam necessitatibus, enim voluptatibus. ## Components < meta confluence = \" title: 'System components' space_key: '~user' \" > </ meta > Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vel, atque! ... In this example, only the Components section with all its content will be uploaded to Confluence. The My document heading will be ignored.","title":"Uploading articles"},{"location":"backends/confluence/#creating-pages","text":"If you want a new page to be created for content in your Foliant project, just supply in foliant.yml the space key and a title that does not yet exist in this space. Remember that in Confluence page titles are unique inside one space. If you use a title of an already existing page, the backend will attempt to edit it and replace its content with your project. Example config for this situation is: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass title : My unique title space_key : \"~user\" Now if you change the title in your config, confluence will create a new page with the new title , leaving the old one intact. If you want to change the title of your page, the answer is in the following section.","title":"Creating pages"},{"location":"backends/confluence/#updating-pages","text":"Generally to update the page contents you may use the same config you used to create it (see the previous section). If the page with a specified title exists, it will be updated. Also, you can just specify the id of an existing page. After build its contents will be updated. backend_config : confluence : host : https://my_confluence_server.org login : user password : pass id : 124443 This is also the only way to edit a page title. If title param is specified, the backend will attempt to change the page's title to the new one: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass id : 124443 title : New unique title","title":"Updating pages"},{"location":"backends/confluence/#updating-part-of-a-page","text":"Confluence backend can also upload an article into the middle of a Confluence page, leaving all the rest of it intact. To do this you need to add an Anchor into your page in the place where you want Foliant content to appear. Go to Confluence web interface and open the article. Go to Edit mode. Put the cursor in the position where you want your Foliant content to be inserted and start typing {anchor to open the macros menu and locate the Anchor macro. Add an anchor with the name foliant . Save the page. Now if you upload content into this page (see two previous sections), Confluence backend will leave all text which was before and after the anchor intact, and add your Foliant content in the middle. You can also add two anchors: foliant_start and foliant_end . In this case, all text between these anchors will be replaced by your Foliant content. Known issue: right now this mode doesn't work with layout sections . If you are using sections, whole content will be overwritten.","title":"Updating part of a page"},{"location":"backends/confluence/#inserting-raw-confluence-tags","text":"If you want to supplement your page with confluence macros or any other storage-specific HTML, you may do it by wrapping them in the <raw_confluence></raw_confluence> tag. For example, if you wish to add a table of contents into the middle of the document for some reason, you can do something like this: Lorem ipsum dolor sit amet, consectetur adipisicing elit. Odit dolorem nulla quam doloribus delectus voluptate. < raw_confluence >< ac:structured-macro ac:macro-id = \"1\" ac:name = \"toc\" ac:schema-version = \"1\" /></ raw_confluence > Lorem ipsum dolor sit amet, consectetur adipisicing elit. Officiis, laboriosam cumque soluta sequi blanditiis, voluptatibus quaerat similique nihil debitis repellendus. In version 0.6.15 we've added an experimental feature of automatically escaping <ac:...></ac:...> tags for you. So if you want to insert, say, an image with native Confluence tag ac:image , you don't have to wrap it in raw_confluence tag, but keep in mind following caveats: singleton ac:... tags are not supported, so <ac:emoticon ac:name=\"cross\" /> will not work, you will have to provide the closing tag: <ac:emoticon ac:name=\"cross\"></ac:emoticon> , only ac:... tags are escaped right now, other confluence tags like ri:... or at:... are left as is. If these tags appear inside ac:... tag, it's ok. If otherwise, ac:... tag appears inside at:... or ri:... tag, everything will break.","title":"Inserting raw confluence tags"},{"location":"backends/confluence/#attaching-files","text":"To attach an arbitrary file to Confluence page simply put path to this file in the attachments parameter in foliant.yml or in meta section. This will just tell Foliant to attach this file to the page, but if you want to reference it in text, use the other approach: Insert Confluence ac:link tag to attachment right inside your Markdown document and put local path to your file in the ri:filename parameter like this: Presentation in PDF: <ac:link> <ri:attachment ri:filename=\"presentation.pdf\"/> </ac:link> In this case Foliant will upload the presentation.pdf to the Confluence page and make a link to it in the text. The path in ri:filename parameter should be relative to current Markdown file, but you can use !path , !project_path modifiers to reference images relative to project root.","title":"Attaching files"},{"location":"backends/confluence/#advanced-images","text":"Confluence has an ac:image tag which allows you to transform and format your attached images: resize, set alignment, add borders, etc. Since version 0.6.15 you have access to all these features. Now instead of plain Markdown-image syntax you can use native Confluence image syntax. Add an ac:image tag as if you were editing page source in Confluence interface and use local relative path to the image as if you were inserting Markdown-image. For example, if you have an image defined like this: ![My image](img/picture.png) and you want to resize it to 600px and align to center, replace it with following tag: <ac:image ac:height=\"600\" ac:align=\"center\"> <ri:attachment ri:filename=\"img/picture.png\" /> </ac:image> As you noticed, you should put path to your image right inside the ri:filename param. This path should be relative to current Markdown file, but you can (since 0.6.16) use !path , !project_path modifiers to reference images relative to project root. Here's a link to Confluence docs about ac:image tag and all possible options. If you want to upload an external image, you can also use this approach, just insert that proper ac:image tag, no need for raw_confluence : External image: <ac:image> <ri:url ri:value=\"http://confluence.atlassian.com/images/logo/confluence_48_trans.png\" /></ac:image>","title":"Advanced images"},{"location":"backends/confluence/#code-blocks-processing","text":"Since 0.6.9 backend converts Markdown code blocks into Confluence code-block macros. You can tune the macros appearance by specifying some options in codeblocks config section of Confluence backend backend_config : confluence : codeblocks : # all are optional theme : django title : Code example linenumbers : false collapse : false theme Color theme of the code blocks. Should be one of: emacs , django , fadetogrey , midnight , rdark , eclipse , confluence . title Title of the code block. linenumbers Show line numbers in code blocks. Default: false collapse Collapse code blocks into a clickable bar. Default: false Right now Foliant only converts code blocks by backticks/tildes (tabbed code blocks are ignored for now): This code block will be converted: ```python def test2(): pass ``` And this: ~~~ def test3(): pass ~~~ Syntax name, defined after backticks/tildes is converted into its Confluence counterpart. Right now following syntaxes are supported: actionscript , applescript , bash , c , c , coldfusion , cpp , cs , css , delphi , diff , erlang , groovy , html , java , javascript , js , perl , php , powershell , python , xml , yaml .","title":"Code blocks processing"},{"location":"backends/confluence/#supplying-credentials","text":"There are several ways to supply credentials for your confluence server. 1. In foliant.yml The most basic way is just to put credentials in foliant.yml: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass It's not very secure because foliant.yml is usually visible to everybody in your project's git repository. 2. Omit credentials in config A slightly more secure way is to remove password or both login and password from config: backend_config : confluence : host : https://my_confluence_server.org login : user In this case Foliant will prompt for missing credentials during each build: $ foliant make confluence Parsing config... Done Applying preprocessor confluence_final... Done Making confluence... !!! User input required !!! Please input password for user: $ 3. Using environment variables Foliant 1.0.12 can access environment variables inside config files with !env modifier. backend_config : confluence : host : https://my_confluence_server.org login : !env CONFLUENCE_USER password : !env CONFLUENCE_PASS Now you can add these variables into your command: CONFLUENCE_USER = user CONFLUENCE_PASS = pass foliant make confluence Or, if you are using docker: docker-compose run --rm -e CONFLUENCE_USER = user -e CONFLUENCE_PASS = pass foliant make confluence 4. Using passfile Finally, you can use a passfile. Passfile is a yaml-file which holds all your passwords. You can keep it out from git-repository by storing it only on your local machine and production server. To use passfile, add a passfile option to foliant.yml: backend_config : confluence : host : https://my_confluence_server.org passfile : confluence_secrets.yaml The syntax of the passfile is the following: hostname : login : password For example: https://my_confluence_server.org : user1 : wFwG34uK user2 : MEUeU3b4 https://another_confluence_server.org : admin : adminpass If there are several records for a specified host in passfile (like in the example above), Foliant will pick the first one. If you want specific one of them, add the login parameter to your foliant.yml: backend_config : confluence : host : https://my_confluence_server.org passfile : confluence_secrets.yaml login : user2","title":"Supplying Credentials"},{"location":"backends/confluence/#credits","text":"The following wonderful tools and libraries are used in foliantcontrib.confluence: Atlassian Python API wrapper , BeautifulSoup , PyParsing , Pandoc .","title":"Credits"},{"location":"backends/mdtopdf/","tags":["backend","pdf"],"text":"MdToPdf \u00b6 MdToPdf backend for Foliant \u00b6 This backend generates a single PDF document from your Foliant project. It uses md-to-pdf library under the hood. md-to-pdf supports styling with CSS, automatic syntax highlighting by highlight.js , and PDF generation with Puppeteer . MdToPdf backend for Foliant operates the pdf target. Installation \u00b6 First install md-to-pdf on your machine: $ npm install -g md-to-pdf Then install the backend: $ pip install foliantcontrib.mdtopdf Usage \u00b6 $ foliant make pdf --with mdtopdf Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor mdtopdf... Done Applying preprocessor _unescape... Done Making pdf with md-to-pdf... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: MyProject.pdf Config \u00b6 You don't have to put anything in the config to use MdToPdf backend. If it's installed, Foliant will detect it. You can however customize the backend with options in backend_config.mdtopdf section: backend_config : mdtopdf : mdtopdf_path : md-to-pdf options : stylesheet : https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.min.css body_class : markdown-body css : |- .page-break { page-break-after: always; } .markdown-body { font-size: 11px; } .markdown-body pre > code { white-space: pre-wrap; } mdtopdf_path is the path to md-to-pdf executable. Default: md-to-pdf options is a mapping of options which then will be converted into JSON and fed to the md-to-pdf command. For all possible options consult the md-to-pdf documentation .","title":"MdToPdf"},{"location":"backends/mdtopdf/#mdtopdf","text":"","title":"MdToPdf"},{"location":"backends/mdtopdf/#mdtopdf-backend-for-foliant","text":"This backend generates a single PDF document from your Foliant project. It uses md-to-pdf library under the hood. md-to-pdf supports styling with CSS, automatic syntax highlighting by highlight.js , and PDF generation with Puppeteer . MdToPdf backend for Foliant operates the pdf target.","title":"MdToPdf backend for Foliant"},{"location":"backends/mdtopdf/#installation","text":"First install md-to-pdf on your machine: $ npm install -g md-to-pdf Then install the backend: $ pip install foliantcontrib.mdtopdf","title":"Installation"},{"location":"backends/mdtopdf/#usage","text":"$ foliant make pdf --with mdtopdf Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor mdtopdf... Done Applying preprocessor _unescape... Done Making pdf with md-to-pdf... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: MyProject.pdf","title":"Usage"},{"location":"backends/mdtopdf/#config","text":"You don't have to put anything in the config to use MdToPdf backend. If it's installed, Foliant will detect it. You can however customize the backend with options in backend_config.mdtopdf section: backend_config : mdtopdf : mdtopdf_path : md-to-pdf options : stylesheet : https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.min.css body_class : markdown-body css : |- .page-break { page-break-after: always; } .markdown-body { font-size: 11px; } .markdown-body pre > code { white-space: pre-wrap; } mdtopdf_path is the path to md-to-pdf executable. Default: md-to-pdf options is a mapping of options which then will be converted into JSON and fed to the md-to-pdf command. For all possible options consult the md-to-pdf documentation .","title":"Config"},{"location":"backends/mkdocs/","tags":["backend","site","SSG","mkdocs"],"text":"MkDocs \u00b6 MkDocs Backend for Foliant \u00b6 MkDocs backend lets you build websites from Foliant projects using MkDocs static site generator. The backend adds three targets: mkdocs , site , and ghp . The first one converts a Foliant project into a MkDocs project without building any html files. The second one builds a standalone website. The last one deploys the website to GitHub Pages. Installation \u00b6 $ pip install foliantcontrib.mkdocs Usage \u00b6 Convert Foliant project to MkDocs: $ foliant make mkdocs -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making mkdocs with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.mkdocs.src Build a standalone website: $ foliant make site -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.mkdocs Deploy to GitHub Pages: $ foliant make ghp -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making ghp with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: https://account-name.github.io/my-project/ Config \u00b6 You don't have to put anything in the config to use MkDocs backend. If it's installed, Foliant detects it. To customize the output, use options in backend_config.mkdocs section: backend_config : mkdocs : mkdocs_path : mkdocs slug : my_awesome_project use_title : true use_chapters : true use_headings : true default_subsection_title : Expand mkdocs.yml : site_name : Custom Title site_url : http://example.com site_author : John Smith mkdocs_path Path to the MkDocs executable. By default, mkdocs command is run, which implies it's somewhere in your PATH . slug Result directory name without suffix (e.g. .mkdocs ). Overrides top-level config option slug . use_title If true , use title value from foliant.yml as site_name in mkdocs.yml . It this case, you don't have to specify site_name in mkdocs.yml section. If you do, the value from mkdocs.yml section has higher priority. If false , you must specify site_name manually, otherwise MkDocs will not be able to build the site. Default is true . use_chapters Similar to use_title , but for pages . If true , chapters value from foliant.yml is used as pages in mkdocs.yml . use_headings If true , the resulting data of pages section in mkdocs.yml will be updated with the content of top-level headings of source Markdown files. default_subsection_title Default title of a subsection, i.e. a group of nested chapters, in case the title is specified as an empty string. If default_subsection_title is not set in the config, \u2026 will be used. mkdocs.yml Params to be copied into mkdocs.yml file. The params are passed \u201cas is,\u201d so you should consult with the MkDocs configuration docs . Preprocessor \u00b6 MkDocs backend ships with a preprocessor that transforms a Foliant project into a MkDocs one. Basically, foliant make mkdocs just applies the preprocessor. The preprocessor is invoked automatically when you run MkDocs backend, so you don't have to add it in preprocessors section manually. However, it's just a regular preprocessor like any other, so you can call it manually if necessary: preprocessors : - mkdocs : mkdocs_project_dir_name : mkdocs mkdocs_project_dir_name Name of the directory for the generated MkDocs project within the tmp directory. Troubleshooting \u00b6 Fenced Code Is Not Rendered in List Items or Blockquotes \u00b6 MkDocs can't handle fenced code blocks in blockquotes or list items due to an issue in Python Markdown . Unfortunately, nothing can be done about it, either on MkDocs's or Foliant's part. As a workaround, use indented code blocks . Paragraphs Inside List Items Are Rendered on the Root Level \u00b6 Check if you use four-space indentation . Python Markdown is stern about this point .","title":"MkDocs"},{"location":"backends/mkdocs/#mkdocs","text":"","title":"MkDocs"},{"location":"backends/mkdocs/#mkdocs-backend-for-foliant","text":"MkDocs backend lets you build websites from Foliant projects using MkDocs static site generator. The backend adds three targets: mkdocs , site , and ghp . The first one converts a Foliant project into a MkDocs project without building any html files. The second one builds a standalone website. The last one deploys the website to GitHub Pages.","title":"MkDocs Backend for Foliant"},{"location":"backends/mkdocs/#installation","text":"$ pip install foliantcontrib.mkdocs","title":"Installation"},{"location":"backends/mkdocs/#usage","text":"Convert Foliant project to MkDocs: $ foliant make mkdocs -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making mkdocs with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.mkdocs.src Build a standalone website: $ foliant make site -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making site with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2017-12-04.mkdocs Deploy to GitHub Pages: $ foliant make ghp -p my-project \u2714 Parsing config \u2714 Applying preprocessor mkdocs \u2714 Making ghp with MkDocs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: https://account-name.github.io/my-project/","title":"Usage"},{"location":"backends/mkdocs/#config","text":"You don't have to put anything in the config to use MkDocs backend. If it's installed, Foliant detects it. To customize the output, use options in backend_config.mkdocs section: backend_config : mkdocs : mkdocs_path : mkdocs slug : my_awesome_project use_title : true use_chapters : true use_headings : true default_subsection_title : Expand mkdocs.yml : site_name : Custom Title site_url : http://example.com site_author : John Smith mkdocs_path Path to the MkDocs executable. By default, mkdocs command is run, which implies it's somewhere in your PATH . slug Result directory name without suffix (e.g. .mkdocs ). Overrides top-level config option slug . use_title If true , use title value from foliant.yml as site_name in mkdocs.yml . It this case, you don't have to specify site_name in mkdocs.yml section. If you do, the value from mkdocs.yml section has higher priority. If false , you must specify site_name manually, otherwise MkDocs will not be able to build the site. Default is true . use_chapters Similar to use_title , but for pages . If true , chapters value from foliant.yml is used as pages in mkdocs.yml . use_headings If true , the resulting data of pages section in mkdocs.yml will be updated with the content of top-level headings of source Markdown files. default_subsection_title Default title of a subsection, i.e. a group of nested chapters, in case the title is specified as an empty string. If default_subsection_title is not set in the config, \u2026 will be used. mkdocs.yml Params to be copied into mkdocs.yml file. The params are passed \u201cas is,\u201d so you should consult with the MkDocs configuration docs .","title":"Config"},{"location":"backends/mkdocs/#preprocessor","text":"MkDocs backend ships with a preprocessor that transforms a Foliant project into a MkDocs one. Basically, foliant make mkdocs just applies the preprocessor. The preprocessor is invoked automatically when you run MkDocs backend, so you don't have to add it in preprocessors section manually. However, it's just a regular preprocessor like any other, so you can call it manually if necessary: preprocessors : - mkdocs : mkdocs_project_dir_name : mkdocs mkdocs_project_dir_name Name of the directory for the generated MkDocs project within the tmp directory.","title":"Preprocessor"},{"location":"backends/mkdocs/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"backends/mkdocs/#fenced-code-is-not-rendered-in-list-items-or-blockquotes","text":"MkDocs can't handle fenced code blocks in blockquotes or list items due to an issue in Python Markdown . Unfortunately, nothing can be done about it, either on MkDocs's or Foliant's part. As a workaround, use indented code blocks .","title":"Fenced Code Is Not Rendered in List Items or Blockquotes"},{"location":"backends/mkdocs/#paragraphs-inside-list-items-are-rendered-on-the-root-level","text":"Check if you use four-space indentation . Python Markdown is stern about this point .","title":"Paragraphs Inside List Items Are Rendered on the Root Level"},{"location":"backends/pandoc/","tags":["backend","docx","pdf","odt","epub","tex","pandoc"],"text":"Pandoc \u00b6 Pandoc Backend for Foliant \u00b6 Pandoc is a Swiss-army knife document converter. It converts almost any format to any other format: md to pdf, rst to html, adoc to docx, and so on and so on. Pandoc backend for Foliant adds pdf , docx , odt , epub and tex targets. Installation \u00b6 $ pip install foliantcontrib.pandoc You also need to install Pandoc and TeXLive distribution for your platform. Usage \u00b6 Build pdf: $ foliant make pdf -p my-project Parsing config... Done Applying preprocessor flatten... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.pdf Build docx: $ foliant make docx -p my-project Parsing config... Done Applying preprocessor flatten... Done Making docx with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.docx Build odt: $ foliant make odt -p my-project Parsing config... Done Applying preprocessor flatten... Done Making odt with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.odt Build epub: $ foliant make epub -p my-project Parsing config... Done Applying preprocessor flatten... Done Making epub with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.epub Build tex (mostly for pdf debugging): $ foliant make tex -p my-project Parsing config... Done Applying preprocessor flatten... Done Making docx with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.tex Config \u00b6 You don't have to put anything in the config to use Pandoc backend. If it's installed, Foliant will detect it. You can however customize the backend with options in backend_config.pandoc section: backend_config : pandoc : pandoc_path : pandoc build_whole_project : true template : !path template.tex vars : ... meta : ... reference_docx : !path reference.docx reference_odt : !path reference.odt css : !path epub.css params : ... filters : ... markdown_flavor : markdown markdown_extensions : ... slug : My_Awesome_Custom_Slug pandoc_path is the path to pandoc executable. By default, it's assumed to be in the PATH . build_whole_project added in 1.1.0 If true , whole project will be built into a single flat document. Default: true . template is the path to the TeX template to use when building pdf and tex (see \u201cTemplates\u201d in the Pandoc documentation). Tip Use !path tag to ensure the value is converted into a valid path relative to the project directory. vars is a mapping of template variables and their values. They will be added to pandoc command as --variable key[=val] . meta is a mapping of document metadata properties and their values. They will be added to pandoc command as --metadata key[=val] . reference_docx is the path to the reference document to be used when building docx (see --reference-doc option info in the Pandoc Options documentation). reference_odt is the path to the reference document to be used when building odt (see --reference-doc option info in the Pandoc Options documentation). css is the path to the stylesheets to be used when building epub (see --css option info in the Pandoc Options documentation). params are passed to the pandoc command. Params should be defined by their long names, with dashes replaced with underscores (e.g. --pdf-engine is defined as pdf_engine ). filters is a list of Pandoc filters to be applied during build. markdown_flavor is the Markdown flavor assumed in the source. Default is markdown , Pandoc's extended Markdown . See \u201cMarkdown Variants\u201d in the Pandoc documentation. markdown_extensions is a list of Markdown extensions applied to the Markdown source. See Pandoc\u2019s Markdown in the Pandoc documentation. slug is the result file name without suffix (e.g. .pdf ). Overrides top-level config option slug . Example config: backend_config : pandoc : template : !path templates/basic.tex vars : toc : true title : This Is a Title second_title : This Is a Subtitle logo : !path templates/logo.png year : 2020 params : pdf_engine : xelatex listings : true number_sections : true markdown_extensions : - simple_tables - fenced_code_blocks - strikeout Build modes \u00b6 Since 1.1.0 you can build parts of your project into separate PDFs, along with the main PDF of the whole project. If the build_whole_project parameter of Pandoc backend config is true , the whole project will be built in to a flat document as usual. You can disable it by switching build_whole_project to false. You can also build parts of your project into separate documents. To configure such behavior we will be adding Metadata to chapters or even smaller sections. To build a chapter into a separate document, add the following meta tag to your chapter's source: <meta pandoc=\" vars: toc: true title: Our Awesome Product second_title: Specifications logo: templates/logo.png year: 2020 \"></meta> # Specifications size: 15 weight: 59 lifespan: 9 In the example above we have added a meta tag with pandoc field, in which we have overriden the vars mapping. The pandoc field is essential in this case. This is how backend determines that we want this chapter built separately. If you don't want to override any parameters, you can just add pandoc=\"true\" field. All parameters which are not overriden in the meta tag will be taken from main config foliant.yml . Now, as the pandoc field is present in one of the meta tags in the project, Pandoc backend should build not one but two documents. Let's check if it's true: $ foliant make pdf Parsing config... Done Applying preprocessor flatten... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.pdf Specifications-2020-12-04.pdf That's right, we've got the main PDF with whole project and another pdf, with just the Specifications chapter. If you wish to build even smaller piece of the project into separate file, add meta tag under the heading which you want to build: # Specifications size: 15 weight: 59 lifespan: 9 ## Additional info <meta pandoc=\" slug: additional vars: toc: true title: Our Awesome Product second_title: Additional info logo: templates/logo.png year: 2020 \"></meta> Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti quos provident dolores eligendi nam quia sequi et tempore enim blanditiis, consequatur nostrum nulla dolor laborum quasi molestiae perspiciatis magni error consectetur nesciunt eaque veritatis voluptates! Cupiditate illum enim id recusandae assumenda excepturi odit tempore incidunt, amet soluta necessitatibus corrupti, aliquam. In this example only the Additional info section will be built into a separate document. Notice that we've also given it its own slug. Let's build again and look at the results: $ foliant make pdf Parsing config... Done Applying preprocessor flatten... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.pdf additional.pdf Troubleshooting \u00b6 Could not convert image ...: check that rsvg2pdf is in path \u00b6 In order to use svg images in pdf, you need to have rsvg-convert executable in PATH . On macOS, brew install librsvg does the trick. On Ubuntu, apt install librsvg2-bin . On Windows, download rsvg-convert.7z (without fontconfig support), unpack rsvg-convert.exe , and put it anywhere in PATH . For example, you can put it in the same directory where you run foliant make . LaTeX listings package does not work correctly with non-ASCII characters, e.g. Cyrillic letters \u00b6 If you use non-ASCII characters inside backticks in your document, you can see an error like this: Error producing PDF. ! Undefined control sequence. \\l st@arg ->git clone [ SSH-\u043a \u043b\u044e\u0447 ] l.627 ...through { \\l stinline!git clone [ SSH-\u043a\u043b\u044e\u0447 ] ! } To fix it, set listings parameter to false : backend_config : pandoc : ... params : pdf_engine : xelatex listings : false number_sections : true ...","title":"Pandoc"},{"location":"backends/pandoc/#pandoc","text":"","title":"Pandoc"},{"location":"backends/pandoc/#pandoc-backend-for-foliant","text":"Pandoc is a Swiss-army knife document converter. It converts almost any format to any other format: md to pdf, rst to html, adoc to docx, and so on and so on. Pandoc backend for Foliant adds pdf , docx , odt , epub and tex targets.","title":"Pandoc Backend for Foliant"},{"location":"backends/pandoc/#installation","text":"$ pip install foliantcontrib.pandoc You also need to install Pandoc and TeXLive distribution for your platform.","title":"Installation"},{"location":"backends/pandoc/#usage","text":"Build pdf: $ foliant make pdf -p my-project Parsing config... Done Applying preprocessor flatten... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.pdf Build docx: $ foliant make docx -p my-project Parsing config... Done Applying preprocessor flatten... Done Making docx with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.docx Build odt: $ foliant make odt -p my-project Parsing config... Done Applying preprocessor flatten... Done Making odt with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.odt Build epub: $ foliant make epub -p my-project Parsing config... Done Applying preprocessor flatten... Done Making epub with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.epub Build tex (mostly for pdf debugging): $ foliant make tex -p my-project Parsing config... Done Applying preprocessor flatten... Done Making docx with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.tex","title":"Usage"},{"location":"backends/pandoc/#config","text":"You don't have to put anything in the config to use Pandoc backend. If it's installed, Foliant will detect it. You can however customize the backend with options in backend_config.pandoc section: backend_config : pandoc : pandoc_path : pandoc build_whole_project : true template : !path template.tex vars : ... meta : ... reference_docx : !path reference.docx reference_odt : !path reference.odt css : !path epub.css params : ... filters : ... markdown_flavor : markdown markdown_extensions : ... slug : My_Awesome_Custom_Slug pandoc_path is the path to pandoc executable. By default, it's assumed to be in the PATH . build_whole_project added in 1.1.0 If true , whole project will be built into a single flat document. Default: true . template is the path to the TeX template to use when building pdf and tex (see \u201cTemplates\u201d in the Pandoc documentation). Tip Use !path tag to ensure the value is converted into a valid path relative to the project directory. vars is a mapping of template variables and their values. They will be added to pandoc command as --variable key[=val] . meta is a mapping of document metadata properties and their values. They will be added to pandoc command as --metadata key[=val] . reference_docx is the path to the reference document to be used when building docx (see --reference-doc option info in the Pandoc Options documentation). reference_odt is the path to the reference document to be used when building odt (see --reference-doc option info in the Pandoc Options documentation). css is the path to the stylesheets to be used when building epub (see --css option info in the Pandoc Options documentation). params are passed to the pandoc command. Params should be defined by their long names, with dashes replaced with underscores (e.g. --pdf-engine is defined as pdf_engine ). filters is a list of Pandoc filters to be applied during build. markdown_flavor is the Markdown flavor assumed in the source. Default is markdown , Pandoc's extended Markdown . See \u201cMarkdown Variants\u201d in the Pandoc documentation. markdown_extensions is a list of Markdown extensions applied to the Markdown source. See Pandoc\u2019s Markdown in the Pandoc documentation. slug is the result file name without suffix (e.g. .pdf ). Overrides top-level config option slug . Example config: backend_config : pandoc : template : !path templates/basic.tex vars : toc : true title : This Is a Title second_title : This Is a Subtitle logo : !path templates/logo.png year : 2020 params : pdf_engine : xelatex listings : true number_sections : true markdown_extensions : - simple_tables - fenced_code_blocks - strikeout","title":"Config"},{"location":"backends/pandoc/#build-modes","text":"Since 1.1.0 you can build parts of your project into separate PDFs, along with the main PDF of the whole project. If the build_whole_project parameter of Pandoc backend config is true , the whole project will be built in to a flat document as usual. You can disable it by switching build_whole_project to false. You can also build parts of your project into separate documents. To configure such behavior we will be adding Metadata to chapters or even smaller sections. To build a chapter into a separate document, add the following meta tag to your chapter's source: <meta pandoc=\" vars: toc: true title: Our Awesome Product second_title: Specifications logo: templates/logo.png year: 2020 \"></meta> # Specifications size: 15 weight: 59 lifespan: 9 In the example above we have added a meta tag with pandoc field, in which we have overriden the vars mapping. The pandoc field is essential in this case. This is how backend determines that we want this chapter built separately. If you don't want to override any parameters, you can just add pandoc=\"true\" field. All parameters which are not overriden in the meta tag will be taken from main config foliant.yml . Now, as the pandoc field is present in one of the meta tags in the project, Pandoc backend should build not one but two documents. Let's check if it's true: $ foliant make pdf Parsing config... Done Applying preprocessor flatten... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.pdf Specifications-2020-12-04.pdf That's right, we've got the main PDF with whole project and another pdf, with just the Specifications chapter. If you wish to build even smaller piece of the project into separate file, add meta tag under the heading which you want to build: # Specifications size: 15 weight: 59 lifespan: 9 ## Additional info <meta pandoc=\" slug: additional vars: toc: true title: Our Awesome Product second_title: Additional info logo: templates/logo.png year: 2020 \"></meta> Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti quos provident dolores eligendi nam quia sequi et tempore enim blanditiis, consequatur nostrum nulla dolor laborum quasi molestiae perspiciatis magni error consectetur nesciunt eaque veritatis voluptates! Cupiditate illum enim id recusandae assumenda excepturi odit tempore incidunt, amet soluta necessitatibus corrupti, aliquam. In this example only the Additional info section will be built into a separate document. Notice that we've also given it its own slug. Let's build again and look at the results: $ foliant make pdf Parsing config... Done Applying preprocessor flatten... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2020-12-04.pdf additional.pdf","title":"Build modes"},{"location":"backends/pandoc/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"backends/pandoc/#could-not-convert-image-check-that-rsvg2pdf-is-in-path","text":"In order to use svg images in pdf, you need to have rsvg-convert executable in PATH . On macOS, brew install librsvg does the trick. On Ubuntu, apt install librsvg2-bin . On Windows, download rsvg-convert.7z (without fontconfig support), unpack rsvg-convert.exe , and put it anywhere in PATH . For example, you can put it in the same directory where you run foliant make .","title":"Could not convert image ...: check that rsvg2pdf is in path"},{"location":"backends/pandoc/#latex-listings-package-does-not-work-correctly-with-non-ascii-characters-eg-cyrillic-letters","text":"If you use non-ASCII characters inside backticks in your document, you can see an error like this: Error producing PDF. ! Undefined control sequence. \\l st@arg ->git clone [ SSH-\u043a \u043b\u044e\u0447 ] l.627 ...through { \\l stinline!git clone [ SSH-\u043a\u043b\u044e\u0447 ] ! } To fix it, set listings parameter to false : backend_config : pandoc : ... params : pdf_engine : xelatex listings : false number_sections : true ...","title":"LaTeX listings package does not work correctly with non-ASCII characters, e.g. Cyrillic letters"},{"location":"backends/slate/","tags":["backend","site","API","SSG"],"text":"Slate \u00b6 Slate Backend for Foliant \u00b6 Slate backend generates API documentation from Markdown using Slate docs generator . This backend operates two targets: site \u2014 build a standalone website; slate \u2014 generate a slate project out from your Foliant project. Installation \u00b6 $ pip install foliantcontrib.slate To use this backend Slate should be installed in your system. Follow the instruction in Slate repo. To test if you've installed Slate properly head to the cloned Slate repo in your terminal and try the command below. You should get similar response. $ bundle exec middleman == The Middleman is loading == View your site at ... == Inspect your site configuration at ... Usage \u00b6 To convert Foliant project to Slate: $ foliant make slate Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making slate... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2018-09-19.src/ Build a standalone website: $ foliant make site -w slate Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2018-09-19.slate/ Config \u00b6 You don't have to put anything in the config to use Slate backend. If it is installed, Foliant detects it. To customize the output, use options in backend_config.slate section: backend_config : slate : shards : data/shards header : title : My API documentation language_tabs : - xml : Response example search : true shards Path to the shards directory relative to Foliant project dir or list of such paths. Shards allow you to customize Slate's layout, add scripts etc. More info on shards in the following section. Default: shards header Params to be copied into the beginning of Slate main Markdown file index.html.md . They allow you to change the title of the website, toggle search and add language tabs. More info in Slate Wiki . About shards \u00b6 Shards is just a folder with files which will be copied into the generated Slate project replacing all files in there. If you follow the Slate project structure you can replace stylesheets, scripts, images, layouts etc to customize the view of the resulting site. If shards is a string \u2014 it is considered a path to single shards directory relative to Foliant project dir: slate: shards: 'data/shards' If shards is a list \u2014 each list item is considered as a shards dir. They will be copied into the Slate project subsequently with replace. slate: shards: - 'common/shards' - 'custom/shards' - 'new_design' For example, I want to customize standard Slate stylesheets. I look at the Slate repo and see that they lie in the folder <slate>/source/stylesheets . I create new stylesheets with the same names as the original ones and put them into my shards dir like that: shards\\ source\\ stylesheets\\ _variables.scss screen.css.scss These stylesheets will replace the original ones in the Slate project just before the website is be baked. So the page will have my styles in the end.","title":"Slate"},{"location":"backends/slate/#slate","text":"","title":"Slate"},{"location":"backends/slate/#slate-backend-for-foliant","text":"Slate backend generates API documentation from Markdown using Slate docs generator . This backend operates two targets: site \u2014 build a standalone website; slate \u2014 generate a slate project out from your Foliant project.","title":"Slate Backend for Foliant"},{"location":"backends/slate/#installation","text":"$ pip install foliantcontrib.slate To use this backend Slate should be installed in your system. Follow the instruction in Slate repo. To test if you've installed Slate properly head to the cloned Slate repo in your terminal and try the command below. You should get similar response. $ bundle exec middleman == The Middleman is loading == View your site at ... == Inspect your site configuration at ...","title":"Installation"},{"location":"backends/slate/#usage","text":"To convert Foliant project to Slate: $ foliant make slate Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making slate... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2018-09-19.src/ Build a standalone website: $ foliant make site -w slate Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: My_Project-2018-09-19.slate/","title":"Usage"},{"location":"backends/slate/#config","text":"You don't have to put anything in the config to use Slate backend. If it is installed, Foliant detects it. To customize the output, use options in backend_config.slate section: backend_config : slate : shards : data/shards header : title : My API documentation language_tabs : - xml : Response example search : true shards Path to the shards directory relative to Foliant project dir or list of such paths. Shards allow you to customize Slate's layout, add scripts etc. More info on shards in the following section. Default: shards header Params to be copied into the beginning of Slate main Markdown file index.html.md . They allow you to change the title of the website, toggle search and add language tabs. More info in Slate Wiki .","title":"Config"},{"location":"backends/slate/#about-shards","text":"Shards is just a folder with files which will be copied into the generated Slate project replacing all files in there. If you follow the Slate project structure you can replace stylesheets, scripts, images, layouts etc to customize the view of the resulting site. If shards is a string \u2014 it is considered a path to single shards directory relative to Foliant project dir: slate: shards: 'data/shards' If shards is a list \u2014 each list item is considered as a shards dir. They will be copied into the Slate project subsequently with replace. slate: shards: - 'common/shards' - 'custom/shards' - 'new_design' For example, I want to customize standard Slate stylesheets. I look at the Slate repo and see that they lie in the folder <slate>/source/stylesheets . I create new stylesheets with the same names as the original ones and put them into my shards dir like that: shards\\ source\\ stylesheets\\ _variables.scss screen.css.scss These stylesheets will replace the original ones in the Slate project just before the website is be baked. So the page will have my styles in the end.","title":"About shards"},{"location":"cli/bump/","tags":["cli extension","version"],"text":"Bump \u00b6 This CLI extension adds bump command that lets you bump Foliant project semantic version without editing the config manually. Installation \u00b6 $ pip install foliantcontrib.bump Usage \u00b6 Bump version from \"1.0.0\" to \"1.0.1\": $ foliant bump Version bumped from 1 .0.0 to 1 .0.1. Bump major version: $ foliant bump -v major Version bumped from 1 .0.1 to 2 .0.0. To see all available options, run foliant bump --help : $ foliant bump --help usage: foliant bump [ -h ] [ -v VERSION_PART ] [ -p PATH ] [ -c CONFIG ] Bump Foliant project version. optional arguments: -h, --help show this help message and exit -v VERSION_PART, --version-part VERSION_PART Part of the version to bump: major, minor, patch, prerelease, or build ( default: patch ) . -p PATH, --path PATH Path to the directory with the config file ( default: \".\" ) . -c CONFIG, --config CONFIG Name of the config file ( default: \"foliant.yml\" ) .","title":"Bump"},{"location":"cli/bump/#bump","text":"This CLI extension adds bump command that lets you bump Foliant project semantic version without editing the config manually.","title":"Bump"},{"location":"cli/bump/#installation","text":"$ pip install foliantcontrib.bump","title":"Installation"},{"location":"cli/bump/#usage","text":"Bump version from \"1.0.0\" to \"1.0.1\": $ foliant bump Version bumped from 1 .0.0 to 1 .0.1. Bump major version: $ foliant bump -v major Version bumped from 1 .0.1 to 2 .0.0. To see all available options, run foliant bump --help : $ foliant bump --help usage: foliant bump [ -h ] [ -v VERSION_PART ] [ -p PATH ] [ -c CONFIG ] Bump Foliant project version. optional arguments: -h, --help show this help message and exit -v VERSION_PART, --version-part VERSION_PART Part of the version to bump: major, minor, patch, prerelease, or build ( default: patch ) . -p PATH, --path PATH Path to the directory with the config file ( default: \".\" ) . -c CONFIG, --config CONFIG Name of the config file ( default: \"foliant.yml\" ) .","title":"Usage"},{"location":"cli/gupload/","tags":["cli extension","google drive"],"text":"Gupload \u00b6 Gupload is the Foliant CLI extension, it's used to upload created documents to Google Drive. Gupload adds gupload command to Foliant. Installation \u00b6 $ pip install foliantcontrib.gupload Config \u00b6 To config the CLI extension, add gupload section in the project config. As gupload needs document to upload, appropriate backend settings also have to be here. CLI extension has a number of options (all fields are required but can have no values): gupload : gdrive_folder_name : Foliant upload gdrive_folder_id : gdoc_title : gdoc_id : convert_file : com_line_auth : false gdrive_folder_name Folder with this name will be created on Google Drive to upload file. gdrive_folder_id This field is necessary to upload files to previously created folder. gdoc_title Uploaded file will have this title. If empty, real filename will be used. gdoc_id This field is necessary to rewrite previously uploaded file and keep the link to it. convert_file Convert uploaded files to google docs format or not. com_line_auth In some cases it's impossible to authenticate automatically (for example, with Docker), so you can set True and use command line authentication procedure. Usage \u00b6 At first you have to get Google Drive authentication file. Go to APIs Console and make your own project. Go to library , search for \u2018Google Drive API\u2019, select the entry, and click \u2018Enable\u2019. Select \u2018Credentials\u2019 from the left menu, click \u2018Create Credentials\u2019, select \u2018OAuth client ID\u2019. Now, the product name and consent screen need to be set -> click \u2018Configure consent screen\u2019 and follow the instructions. Once finished: Select \u2018Application type\u2019 to be Other types . Enter an appropriate name. Input http://localhost:8080 for \u2018Authorized JavaScript origins\u2019. Input http://localhost:8080/ for \u2018Authorized redirect URIs\u2019. Click \u2018Save\u2019. Click \u2018Download JSON\u2019 on the right side of Client ID to download client_secret_ .json. The downloaded file has all authentication information of your application. Rename the file to \u201cclient_secrets.json\u201d and place it in your working directory near foliant.yml. Now add the CLI extension to the project config with all settings strings. At this moment you have no data to set Google Drive folder ID and google doc ID so keep it empty. Run Foliant with gupload command: $ foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Your browser has been opened to visit: https://accounts.google.com/o/oauth2/auth?... Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Authentication form will be opened. Choose account to log in. With command line authentication procedure differs little bit: $ docker-compose run --rm foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?... Enter verification code: 4/XgBllTXpxv8kKjsiTxLc Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp=drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Copy link from terminal to your browser, choose account to log in and copy generated code back to the terminal. After that the document will be uploaded to Google Drive and opened in new browser tab. Now you can use Google Drive folder ID to upload files to the same folder and google doc ID to rewrite document (also you can IDs in folder and file links). Notes \u00b6 If you set up google doc ID without Google Drive folder ID file will be moved to the new folder with the same link.","title":"Gupload"},{"location":"cli/gupload/#gupload","text":"Gupload is the Foliant CLI extension, it's used to upload created documents to Google Drive. Gupload adds gupload command to Foliant.","title":"Gupload"},{"location":"cli/gupload/#installation","text":"$ pip install foliantcontrib.gupload","title":"Installation"},{"location":"cli/gupload/#config","text":"To config the CLI extension, add gupload section in the project config. As gupload needs document to upload, appropriate backend settings also have to be here. CLI extension has a number of options (all fields are required but can have no values): gupload : gdrive_folder_name : Foliant upload gdrive_folder_id : gdoc_title : gdoc_id : convert_file : com_line_auth : false gdrive_folder_name Folder with this name will be created on Google Drive to upload file. gdrive_folder_id This field is necessary to upload files to previously created folder. gdoc_title Uploaded file will have this title. If empty, real filename will be used. gdoc_id This field is necessary to rewrite previously uploaded file and keep the link to it. convert_file Convert uploaded files to google docs format or not. com_line_auth In some cases it's impossible to authenticate automatically (for example, with Docker), so you can set True and use command line authentication procedure.","title":"Config"},{"location":"cli/gupload/#usage","text":"At first you have to get Google Drive authentication file. Go to APIs Console and make your own project. Go to library , search for \u2018Google Drive API\u2019, select the entry, and click \u2018Enable\u2019. Select \u2018Credentials\u2019 from the left menu, click \u2018Create Credentials\u2019, select \u2018OAuth client ID\u2019. Now, the product name and consent screen need to be set -> click \u2018Configure consent screen\u2019 and follow the instructions. Once finished: Select \u2018Application type\u2019 to be Other types . Enter an appropriate name. Input http://localhost:8080 for \u2018Authorized JavaScript origins\u2019. Input http://localhost:8080/ for \u2018Authorized redirect URIs\u2019. Click \u2018Save\u2019. Click \u2018Download JSON\u2019 on the right side of Client ID to download client_secret_ .json. The downloaded file has all authentication information of your application. Rename the file to \u201cclient_secrets.json\u201d and place it in your working directory near foliant.yml. Now add the CLI extension to the project config with all settings strings. At this moment you have no data to set Google Drive folder ID and google doc ID so keep it empty. Run Foliant with gupload command: $ foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Your browser has been opened to visit: https://accounts.google.com/o/oauth2/auth?... Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp = drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Authentication form will be opened. Choose account to log in. With command line authentication procedure differs little bit: $ docker-compose run --rm foliant gupload docx \u2714 Parsing config \u2714 Applying preprocessor flatten \u2714 Making docx with Pandoc \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: filename.docx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2714 Parsing config Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?... Enter verification code: 4/XgBllTXpxv8kKjsiTxLc Authentication successful. \u2714 Uploading 'filename.docx' to Google Drive \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Doc link: https://docs.google.com/document/d/1GPvNSMJ4ZutZJwhUYM1xxCKWMU5Sg/edit?usp=drivesdk Google drive folder ID: 1AaiWMNIYlq9639P30R3T9 Google document ID: 1GPvNSMJ4Z19YM1xCKWMU5Sg Copy link from terminal to your browser, choose account to log in and copy generated code back to the terminal. After that the document will be uploaded to Google Drive and opened in new browser tab. Now you can use Google Drive folder ID to upload files to the same folder and google doc ID to rewrite document (also you can IDs in folder and file links).","title":"Usage"},{"location":"cli/gupload/#notes","text":"If you set up google doc ID without Google Drive folder ID file will be moved to the new folder with the same link.","title":"Notes"},{"location":"cli/meta_generate/","tags":["cli extension","yaml"],"text":"Meta Generate \u00b6 meta generate command collects metadata from the Foliant project and saves it into a YAML-file. Usage \u00b6 To generate meta file run the meta generate command: $ foliant meta generate Metadata for the document will appear in the meta.yml file. Config \u00b6 Meta generate command has just one option right now. It is specified under meta section in config: meta : filename : meta.yml filename name of the YAML-file with generated project metadata.","title":"Meta Generate"},{"location":"cli/meta_generate/#meta-generate","text":"meta generate command collects metadata from the Foliant project and saves it into a YAML-file.","title":"Meta Generate"},{"location":"cli/meta_generate/#usage","text":"To generate meta file run the meta generate command: $ foliant meta generate Metadata for the document will appear in the meta.yml file.","title":"Usage"},{"location":"cli/meta_generate/#config","text":"Meta generate command has just one option right now. It is specified under meta section in config: meta : filename : meta.yml filename name of the YAML-file with generated project metadata.","title":"Config"},{"location":"cli/src/","tags":["cli extension","backup","multiproject"],"text":"Src \u00b6 Installation \u00b6 To enable the src command, install MultiProject extension: Usage \u00b6 To make a backup of the source directory, use the command: $ foliant src backup To restore the source directory from the backup, use the command: $ foliant src restore You may use the --config option to specify custom config file name of your Foliant project. By default, the name foliant.yml is used: $ foliant src backup --config alternative_config.yml Also you may specify the root directory of your Foliant project by using the --path option. If not specified, current directory will be used.","title":"Src"},{"location":"cli/src/#src","text":"","title":"Src"},{"location":"cli/src/#installation","text":"To enable the src command, install MultiProject extension:","title":"Installation"},{"location":"cli/src/#usage","text":"To make a backup of the source directory, use the command: $ foliant src backup To restore the source directory from the backup, use the command: $ foliant src restore You may use the --config option to specify custom config file name of your Foliant project. By default, the name foliant.yml is used: $ foliant src backup --config alternative_config.yml Also you may specify the root directory of your Foliant project by using the --path option. If not specified, current directory will be used.","title":"Usage"},{"location":"cli/subset/","tags":["cli extension","config"],"text":"Subset \u00b6 This CLI extension adds the command subset that generates a config file for a subset (i.e. a detached part) of the Foliant project. The command uses: the common (i.e. default, single) config file for the whole Foliant project; the part of config that is individual for each subset. The Foliant project may include multiple subsets that are defined by their own partial config files. The command subset takes a path to the subset directory as a mandatory command line parameter. The command subset : reads the partial config of the subset; optionally rewrites the paths of Markdown files that specified there in the chapters section; merges the result with the default config of the whole Foliant project config; finally, writes a new config file that allows to build a certain subset of the Foliant project with the make command. Installation \u00b6 To install the extension, use the command: $ pip install foliantcontrib.subset Usage \u00b6 To get the list of all necessary parameters and available options, run foliant subset --help : $ foliant subset --help usage: foliant subset [ -h ] [ -p PROJECT_DIR_PATH ] [ -c CONFIG ] [ -n ] [ -d ] SUBPATH Generate the config file to build the project subset from SUBPATH. positional arguments: SUBPATH Path to the subset of the Foliant project optional arguments: -h, --help show this help message and exit -p PROJECT_DIR, --path PROJECT_DIR Path to the Foliant project -c CONFIG, --config CONFIG Name of config file of the Foliant project, default 'foliant.yml' -n, --norewrite Do not rewrite the paths of Markdown files in the subset partial config -d, --debug Log all events during build. If not set, only warnings and errors are logged In most cases it\u2019s enough to use the default values of optional parameters. You need to specify only the SUBPATH \u2014the directory that should be located inside the Foliant project source directory. Suppose you use the default settings. Then you have to prepare: the common (default) config file foliant.yml in the Foliant project root directory; partial config files for each subset. They also must be named foliant.yml , and they must be located in the directories of the subsets. Your Foliant project tree may look so: $ tree . \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 src \u251c\u2500\u2500 group_1 \u2502 \u251c\u2500\u2500 product_1 \u2502 \u2502 \u2514\u2500\u2500 feature_1 \u2502 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 product_2 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2514\u2500\u2500 main.md \u2514\u2500\u2500 group_2 \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 intro.md The command foliant subset group_1/product_1/feautre_1 will merge the files ./src/group_1/product_1/feautre_1/foliant.yml and ./foliant.yml , and write the result into the file ./foliant.yml.subset . After that you may use the command like the following to build your Foliant project: $ foliant make pdf --config foliant.yml.subset Let\u2019s look at some examples. The content of the common (default) file ./foliant.yml : title : &title Default Title subtitle : &subtitle Default Subtitle version : &version 0.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2018 params : pdf_engine : xelatex The content of the partial config file ./src/group_1/product_1/feautre_1/foliant.yml : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 chapters : - index.md backend_config : pandoc : vars : year : 2019 The content of newly generated file ./foliant.yml.subset : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2019 params : pdf_engine : xelatex chapters : - b2b/order_1/feature_1/index.md If the option --no-rewrite is not set, the paths of Markdown files that are specified in the chapters section of the file ./src/group_1/product_1/feautre_1/foliant.yml , will be rewritten as if these paths were relative to the directory ./src/group_1/product_1/feautre_1/ . Otherwise, the Subset CLI extension will not rewrite the paths of Markdown files as if they were relative to ./src/ directory. Note that the Subset CLI Extension merges the data of the config files recursively, so any subkeys of default config may be overridden by the settings of partial config.","title":"Subset"},{"location":"cli/subset/#subset","text":"This CLI extension adds the command subset that generates a config file for a subset (i.e. a detached part) of the Foliant project. The command uses: the common (i.e. default, single) config file for the whole Foliant project; the part of config that is individual for each subset. The Foliant project may include multiple subsets that are defined by their own partial config files. The command subset takes a path to the subset directory as a mandatory command line parameter. The command subset : reads the partial config of the subset; optionally rewrites the paths of Markdown files that specified there in the chapters section; merges the result with the default config of the whole Foliant project config; finally, writes a new config file that allows to build a certain subset of the Foliant project with the make command.","title":"Subset"},{"location":"cli/subset/#installation","text":"To install the extension, use the command: $ pip install foliantcontrib.subset","title":"Installation"},{"location":"cli/subset/#usage","text":"To get the list of all necessary parameters and available options, run foliant subset --help : $ foliant subset --help usage: foliant subset [ -h ] [ -p PROJECT_DIR_PATH ] [ -c CONFIG ] [ -n ] [ -d ] SUBPATH Generate the config file to build the project subset from SUBPATH. positional arguments: SUBPATH Path to the subset of the Foliant project optional arguments: -h, --help show this help message and exit -p PROJECT_DIR, --path PROJECT_DIR Path to the Foliant project -c CONFIG, --config CONFIG Name of config file of the Foliant project, default 'foliant.yml' -n, --norewrite Do not rewrite the paths of Markdown files in the subset partial config -d, --debug Log all events during build. If not set, only warnings and errors are logged In most cases it\u2019s enough to use the default values of optional parameters. You need to specify only the SUBPATH \u2014the directory that should be located inside the Foliant project source directory. Suppose you use the default settings. Then you have to prepare: the common (default) config file foliant.yml in the Foliant project root directory; partial config files for each subset. They also must be named foliant.yml , and they must be located in the directories of the subsets. Your Foliant project tree may look so: $ tree . \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 src \u251c\u2500\u2500 group_1 \u2502 \u251c\u2500\u2500 product_1 \u2502 \u2502 \u2514\u2500\u2500 feature_1 \u2502 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 product_2 \u2502 \u251c\u2500\u2500 foliant.yml \u2502 \u2514\u2500\u2500 main.md \u2514\u2500\u2500 group_2 \u251c\u2500\u2500 foliant.yml \u2514\u2500\u2500 intro.md The command foliant subset group_1/product_1/feautre_1 will merge the files ./src/group_1/product_1/feautre_1/foliant.yml and ./foliant.yml , and write the result into the file ./foliant.yml.subset . After that you may use the command like the following to build your Foliant project: $ foliant make pdf --config foliant.yml.subset Let\u2019s look at some examples. The content of the common (default) file ./foliant.yml : title : &title Default Title subtitle : &subtitle Default Subtitle version : &version 0.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2018 params : pdf_engine : xelatex The content of the partial config file ./src/group_1/product_1/feautre_1/foliant.yml : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 chapters : - index.md backend_config : pandoc : vars : year : 2019 The content of newly generated file ./foliant.yml.subset : title : &title Group 1, Product 1, Feature 1 subtitle : &subtitle Technical Specification version : &version 1.0 backend_config : pandoc : template : !path /somewhere/template.tex reference_docx : !path /somewhere/reference.docx vars : title : *title version : *version subtitle : *subtitle year : 2019 params : pdf_engine : xelatex chapters : - b2b/order_1/feature_1/index.md If the option --no-rewrite is not set, the paths of Markdown files that are specified in the chapters section of the file ./src/group_1/product_1/feautre_1/foliant.yml , will be rewritten as if these paths were relative to the directory ./src/group_1/product_1/feautre_1/ . Otherwise, the Subset CLI extension will not rewrite the paths of Markdown files as if they were relative to ./src/ directory. Note that the Subset CLI Extension merges the data of the config files recursively, so any subkeys of default config may be overridden by the settings of partial config.","title":"Usage"},{"location":"cli/init/","tags":["cli extension","template"],"text":"Init \u00b6 Project Initializer for Foliant \u00b6 This CLI extension add init command that lets you create Foliant projects from templates. Installation \u00b6 $ pip install foliantcontrib.init Usage \u00b6 You can create a project from the default base template or from a custom template Base template \u00b6 Create project from the default base template: $ foliant init Enter the project name: Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Custom template \u00b6 You can load a custom template from a local path or from a git repo Custom template from a local path \u00b6 $ foliant init --template /path/to/custom/template Enter the project name: Awesome Customized Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Customized Docs\" created in awesome-customized-docs Custom template from a git repository \u00b6 $ foliant init --template https://github.com/path/to/custom/template Enter the project name: Awesome Docs from git \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs from git\" created in awesome-docs-from-git Other options \u00b6 You can provide the project name without user prompt: $ foliant init --name Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Another useful option is --quiet , which hides all output except for the path to the generated project: $ foliant init --name Awesome Docs --quiet awesome-docs To see all available options, run foliant init --help : $ foliant init --help usage: foliant init [ -h ] [ -n NAME ] [ -t NAME, PATH or git-repo ] [ -q ] [ -d ] Generate a new Foliant project. optional arguments: -h, --help show this help message and exit -n NAME, --name NAME Name of the Foliant project. -t NAME, PATH or git-repo, --template NAME, PATH or git-repo Name of a built-in project template or path to custom one. -q, --quiet Hide all output accept for the result. Useful for piping. -d, --debug Log all events during project creation. If not set, only warnings and errors are logged. Project Templates \u00b6 A project template is a regular Foliant project but maybe containing placeholders in files. When the project is generated, the placeholders are replaced with the values you provide. Currently, there are two placeholders: $title and $slug . There is a built-in template called base . It's used by default if no template is specified.","title":"Init"},{"location":"cli/init/#init","text":"","title":"Init"},{"location":"cli/init/#project-initializer-for-foliant","text":"This CLI extension add init command that lets you create Foliant projects from templates.","title":"Project Initializer for Foliant"},{"location":"cli/init/#installation","text":"$ pip install foliantcontrib.init","title":"Installation"},{"location":"cli/init/#usage","text":"You can create a project from the default base template or from a custom template","title":"Usage"},{"location":"cli/init/#base-template","text":"Create project from the default base template: $ foliant init Enter the project name: Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs","title":"Base template"},{"location":"cli/init/#custom-template","text":"You can load a custom template from a local path or from a git repo","title":"Custom template"},{"location":"cli/init/#custom-template-from-a-local-path","text":"$ foliant init --template /path/to/custom/template Enter the project name: Awesome Customized Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Customized Docs\" created in awesome-customized-docs","title":"Custom template from a local path"},{"location":"cli/init/#custom-template-from-a-git-repository","text":"$ foliant init --template https://github.com/path/to/custom/template Enter the project name: Awesome Docs from git \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs from git\" created in awesome-docs-from-git","title":"Custom template from a git repository"},{"location":"cli/init/#other-options","text":"You can provide the project name without user prompt: $ foliant init --name Awesome Docs \u2714 Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Docs\" created in awesome-docs Another useful option is --quiet , which hides all output except for the path to the generated project: $ foliant init --name Awesome Docs --quiet awesome-docs To see all available options, run foliant init --help : $ foliant init --help usage: foliant init [ -h ] [ -n NAME ] [ -t NAME, PATH or git-repo ] [ -q ] [ -d ] Generate a new Foliant project. optional arguments: -h, --help show this help message and exit -n NAME, --name NAME Name of the Foliant project. -t NAME, PATH or git-repo, --template NAME, PATH or git-repo Name of a built-in project template or path to custom one. -q, --quiet Hide all output accept for the result. Useful for piping. -d, --debug Log all events during project creation. If not set, only warnings and errors are logged.","title":"Other options"},{"location":"cli/init/#project-templates","text":"A project template is a regular Foliant project but maybe containing placeholders in files. When the project is generated, the placeholders are replaced with the values you provide. Currently, there are two placeholders: $title and $slug . There is a built-in template called base . It's used by default if no template is specified.","title":"Project Templates"},{"location":"cli/init/templates/preprocessor/","tags":["template","preprocessor"],"text":"Preprocessor \u00b6 Template for a Foliant preprocessor. Instead of looking for an existing preprocessor, cloning it, and modifying its source, install this package and generate a preprocessor directory. As simple as: $ foliant init -t preprocessor Installation \u00b6 $ pip install --no-compile foliantcontrib.templates.preprocessor Usage \u00b6 $ foliant init -t preprocessor Enter the project name: Awesome Preprocessor \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Or: $ foliant init -t preprocessor -n \"Awesome Preprocessor\" \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Result: $ tree awesome-preprocessor . \u251c\u2500\u2500 changelog.md \u251c\u2500\u2500 foliant \u2502 \u2514\u2500\u2500 preprocessors \u2502 \u2514\u2500\u2500 awesome-preprocessor.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u2514\u2500\u2500 setup.py 2 directories, 5 files","title":"Preprocessor"},{"location":"cli/init/templates/preprocessor/#preprocessor","text":"Template for a Foliant preprocessor. Instead of looking for an existing preprocessor, cloning it, and modifying its source, install this package and generate a preprocessor directory. As simple as: $ foliant init -t preprocessor","title":"Preprocessor"},{"location":"cli/init/templates/preprocessor/#installation","text":"$ pip install --no-compile foliantcontrib.templates.preprocessor","title":"Installation"},{"location":"cli/init/templates/preprocessor/#usage","text":"$ foliant init -t preprocessor Enter the project name: Awesome Preprocessor \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Or: $ foliant init -t preprocessor -n \"Awesome Preprocessor\" \u2714 Generating project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Awesome Preprocessor\" created in awesome-preprocessor Result: $ tree awesome-preprocessor . \u251c\u2500\u2500 changelog.md \u251c\u2500\u2500 foliant \u2502 \u2514\u2500\u2500 preprocessors \u2502 \u2514\u2500\u2500 awesome-preprocessor.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u2514\u2500\u2500 setup.py 2 directories, 5 files","title":"Usage"},{"location":"config/alt_structure/","tags":["config extension","chapters"],"text":"AltStructure \u00b6 AltStructure Extension \u00b6 AltStructure is a config extension for Foliant to generate alternative chapter structure based on metadata. It adds an alt_structure preprocessor and resolves !alt_structure YAML tags in the project config. Installation \u00b6 $ pip install foliantcontrib.alt_structure Configuration \u00b6 Config extension Options for AltStructure are specified in the alt_structure section at the root of Foliant config file: alt_structure : structure : topic : entity : additional : add_unmatched_to_root : false registry : auth : \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f weather : \u041f\u043e\u0433\u043e\u0434\u0430 test_case : \u0422\u0435\u0441\u0442 \u043a\u0435\u0439\u0441\u044b spec : \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 structure (required) A mapping tree, representing alternative structure. add_unmatched_to_root if true , all chapters that weren't matched to structure in metadata will be added to root of the chapter tree. If false \u2014 they will be ignored. Default: false registry A dictionary which defines aliases for chapter tree categories. Preprocessor Preprocessor has just one option: preprocessors : - alt_structure : create_subfolders : true create_subfolders If true , preprocessor will create a full copy of the working_dir and add it to the beginning of all filepaths in the generated structure. If false \u2014 preprocessor doesn't do anything. Default: true Usage \u00b6 Step 1 Add !alt_structure tag to your chapters in the place where you expect new structure to be generated. It accepts one argument: list of chapters, which will be scanned. chapters : - basic : # <-- this is _chapter tree category_ - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md - Alternative : !alt_structure - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md AltStructure extension introduces a lot of new notions, so let's agree on some terms to make sure we are on the same page. Chapter tree category is a mapping with single key which you add to your chapter list to create hierarchy. basic: and Alternative: are categories in this example. You can also utilize YAML anchors and aliases, but in this case, because of language limitation you need to supply alias inside a list. Let's use it to get the same result as the above, but in a more compact way: chapters : - basic : &basic - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md - Alternative : !alt_structure [ *basic ] Step 2 Next you need to define the structure in structure parameter of extension config. It is defined by a mapping tree of node types . For example: alt_structure : structure : topic : # topic is the upmost node type entity : # nodes with type \"entity\" will be nested in \"topic\" additional : glossaries : These names of the node types are arbitrary, you can use any words you like except root and subfolder . Step 3 Open your source md-files and edit their main meta sections . Main meta section is a section, defined before the first heading in the document (check metadata documentation for more info). Add a mapping with nodes for this chapter under the key structure . file auth_spec.md --- structure : topic : auth # <-- node type: node name entity : spec --- # Specification for authorization Here topic and entity are node types, which are part of our structure (step 2). auth and spec are node names . After applying !alt_structure tag nodes will be converted into chapter tree categories. Node type defines the level of the category and node name defines the caption of the category. We've added two nodes to the structure field of chapter metadata: topic: auth and entity: spec . In the structure that we've defined on step 2 the topic goes first and entity \u2014 second. So after applying the tag, this chapter will appear in config like this: - auth : - spec : - auth_spec.md If we'd stated only topic key in metadata, then it would look like this: - auth : - auth_spec.md Step 4 Now let's fill up registry. We used spec and auth in our metadata for node names, but these words don't look pretty in the documents. Registry allows us to set verbose captions for node names in config: alt_structure : structure : - [ 'topic' , 'entity' ] - 'additional/glossaries' registry : auth : Authentication and Authorization spec : Specifications With such registry now our new structure will look like this: - Authentication and Authorization : - Specifications : - auth_spec.md Special node types \u00b6 In the step 2 of the user guide above we've mentioned that you may choose any node names in the structure except root and subfolder . These are special note types and here's how you can use them. root For example, if our structure looks like this: alt_structure : structure : topic : entity : and our chapter's metadata looks like this: --- structure : foo : bar --- The node foo: bar is not part of the structure, so applying the !alt_structure tag it will just be ignored (unless add_unmatched_to_root is set to true in config). But what if you want to add it to the root of your chapter tree? To do that \u2014 add the root node to your metadata: --- structure : foo : bar root : true # the value of the key `root` is ignored, we use `true` for clarity --- subfolder By defining subfolder node in chapter's metadata you can manually add another chapter tree category to any chapter. For example: file auth_spec.md --- structure : topic : auth entity : spec subfolder : Main specifications --- After applying tag the new structure will look like this: - auth : - spec : - Main specifications : - auth_spec.md Using preprocessor \u00b6 By default the !alt_structure tag only affects the chapters section of your foliant.yml. This may lead to situation when the same file is mentioned several times in the chapters section. While most backends are fine with that \u2014 they will just publish the file two times, MkDocs does not handle this situation well. That's where you will need to add the preprocessor alt_structure to your preprocessors list. Preprocessor creates a subfolder in the working_dir and copies the entier working_dir contents into it. Then it inserts the subfolder name into the beginning of all chapters paths in the alternative structure. Important: It is recommended to add this preprocessor to the end of the preprocessors list. preprocessors : ... alt_structure : create_subfolders : true Note, that the parameter create_subfolders is not necessary, it is true by default. But we recommend to state it anyway for clarity. After applying the tag, your new structure will now look like this: - Authentication and Authorization : - Specifications : - alt1/auth_spec.md The contents of the working_dir were copied into a subdir alt1 , and new structure refers to the files in this subdir.","title":"AltStructure"},{"location":"config/alt_structure/#altstructure","text":"","title":"AltStructure"},{"location":"config/alt_structure/#altstructure-extension","text":"AltStructure is a config extension for Foliant to generate alternative chapter structure based on metadata. It adds an alt_structure preprocessor and resolves !alt_structure YAML tags in the project config.","title":"AltStructure Extension"},{"location":"config/alt_structure/#installation","text":"$ pip install foliantcontrib.alt_structure","title":"Installation"},{"location":"config/alt_structure/#configuration","text":"Config extension Options for AltStructure are specified in the alt_structure section at the root of Foliant config file: alt_structure : structure : topic : entity : additional : add_unmatched_to_root : false registry : auth : \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f weather : \u041f\u043e\u0433\u043e\u0434\u0430 test_case : \u0422\u0435\u0441\u0442 \u043a\u0435\u0439\u0441\u044b spec : \u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 structure (required) A mapping tree, representing alternative structure. add_unmatched_to_root if true , all chapters that weren't matched to structure in metadata will be added to root of the chapter tree. If false \u2014 they will be ignored. Default: false registry A dictionary which defines aliases for chapter tree categories. Preprocessor Preprocessor has just one option: preprocessors : - alt_structure : create_subfolders : true create_subfolders If true , preprocessor will create a full copy of the working_dir and add it to the beginning of all filepaths in the generated structure. If false \u2014 preprocessor doesn't do anything. Default: true","title":"Configuration"},{"location":"config/alt_structure/#usage","text":"Step 1 Add !alt_structure tag to your chapters in the place where you expect new structure to be generated. It accepts one argument: list of chapters, which will be scanned. chapters : - basic : # <-- this is _chapter tree category_ - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md - Alternative : !alt_structure - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md AltStructure extension introduces a lot of new notions, so let's agree on some terms to make sure we are on the same page. Chapter tree category is a mapping with single key which you add to your chapter list to create hierarchy. basic: and Alternative: are categories in this example. You can also utilize YAML anchors and aliases, but in this case, because of language limitation you need to supply alias inside a list. Let's use it to get the same result as the above, but in a more compact way: chapters : - basic : &basic - auth/auth.md - index.md - auth/test_auth.md - auth/test_auth_aux.md - weather.md - glossary.md - auth/spec_auth.md - test_weather.md - Alternative : !alt_structure [ *basic ] Step 2 Next you need to define the structure in structure parameter of extension config. It is defined by a mapping tree of node types . For example: alt_structure : structure : topic : # topic is the upmost node type entity : # nodes with type \"entity\" will be nested in \"topic\" additional : glossaries : These names of the node types are arbitrary, you can use any words you like except root and subfolder . Step 3 Open your source md-files and edit their main meta sections . Main meta section is a section, defined before the first heading in the document (check metadata documentation for more info). Add a mapping with nodes for this chapter under the key structure . file auth_spec.md --- structure : topic : auth # <-- node type: node name entity : spec --- # Specification for authorization Here topic and entity are node types, which are part of our structure (step 2). auth and spec are node names . After applying !alt_structure tag nodes will be converted into chapter tree categories. Node type defines the level of the category and node name defines the caption of the category. We've added two nodes to the structure field of chapter metadata: topic: auth and entity: spec . In the structure that we've defined on step 2 the topic goes first and entity \u2014 second. So after applying the tag, this chapter will appear in config like this: - auth : - spec : - auth_spec.md If we'd stated only topic key in metadata, then it would look like this: - auth : - auth_spec.md Step 4 Now let's fill up registry. We used spec and auth in our metadata for node names, but these words don't look pretty in the documents. Registry allows us to set verbose captions for node names in config: alt_structure : structure : - [ 'topic' , 'entity' ] - 'additional/glossaries' registry : auth : Authentication and Authorization spec : Specifications With such registry now our new structure will look like this: - Authentication and Authorization : - Specifications : - auth_spec.md","title":"Usage"},{"location":"config/alt_structure/#special-node-types","text":"In the step 2 of the user guide above we've mentioned that you may choose any node names in the structure except root and subfolder . These are special note types and here's how you can use them. root For example, if our structure looks like this: alt_structure : structure : topic : entity : and our chapter's metadata looks like this: --- structure : foo : bar --- The node foo: bar is not part of the structure, so applying the !alt_structure tag it will just be ignored (unless add_unmatched_to_root is set to true in config). But what if you want to add it to the root of your chapter tree? To do that \u2014 add the root node to your metadata: --- structure : foo : bar root : true # the value of the key `root` is ignored, we use `true` for clarity --- subfolder By defining subfolder node in chapter's metadata you can manually add another chapter tree category to any chapter. For example: file auth_spec.md --- structure : topic : auth entity : spec subfolder : Main specifications --- After applying tag the new structure will look like this: - auth : - spec : - Main specifications : - auth_spec.md","title":"Special node types"},{"location":"config/alt_structure/#using-preprocessor","text":"By default the !alt_structure tag only affects the chapters section of your foliant.yml. This may lead to situation when the same file is mentioned several times in the chapters section. While most backends are fine with that \u2014 they will just publish the file two times, MkDocs does not handle this situation well. That's where you will need to add the preprocessor alt_structure to your preprocessors list. Preprocessor creates a subfolder in the working_dir and copies the entier working_dir contents into it. Then it inserts the subfolder name into the beginning of all chapters paths in the alternative structure. Important: It is recommended to add this preprocessor to the end of the preprocessors list. preprocessors : ... alt_structure : create_subfolders : true Note, that the parameter create_subfolders is not necessary, it is true by default. But we recommend to state it anyway for clarity. After applying the tag, your new structure will now look like this: - Authentication and Authorization : - Specifications : - alt1/auth_spec.md The contents of the working_dir were copied into a subdir alt1 , and new structure refers to the files in this subdir.","title":"Using preprocessor"},{"location":"config/downloadfile/","tags":["config extension"],"text":"DownloadFile \u00b6 DownloadFile Extension \u00b6 DownloadFile is a configuration extension for Foliant which downloads external files to use in your project. It also resolves !download YAML tag in the project config and inside XML-tags parameters. Installation \u00b6 $ pip install foliantcontrib.downloadfile Usage \u00b6 To configure DownloadFile add the following section to your foliant.yml file: downloadfile : fail_fast : true ignore_ssl_errors : false queue : - url : https://example.com/image.png # required save_to : images/img1.png login : john password : qwerty123 - ... fail_fast When true , build will be stopped if any file can't be downloaded. If false \u00ad\u2014 unavailable files will be just skipped. Doesn't affect !download tag, this one will always break the build on errors. Default: true . ignore_ssl_errors Switch to true to skip SSL certificate check. Default: false . queue list of files to download. Each file is represented by a dictionary with the following fields: url (requried) URL to the file which should be downloaded. save_to path where the downloaded file should be saved, relative to the project root. If not supplied, file will be saved in the project root with the name from url. login login for basic authentication. password password for basic authentication. Warning: don't store plain text passwords in foliant.yml. Use environment variables . !download YAML tag \u00b6 Another way to use DownloadFile is by specifying !download YAML tag. This is the quickest and the simplest way, but it comes with a few disadvantages. Insert the !download tag, followed by file URL, in any place in foliant.yml or tag parameters, where file path is expected: preprocessors : - swaggerdoc : spec_path : !download https://example.com/swagger.json mode : widdershins Generated template: < template engine = \"jinja2\" ext_context = \"!download https://example.com/mycontext.yml\" > ... </ template > The downloaded file will be saved in the .downloadfilecache directory under a hashed name, and the !download tag will be replaced by absolute path to this file. The cons of this method are that you can't change the saved file path nor other parameters. Also if you reference the same file twice with !download tag, it will be downloaded two times.","title":"DownloadFile"},{"location":"config/downloadfile/#downloadfile","text":"","title":"DownloadFile"},{"location":"config/downloadfile/#downloadfile-extension","text":"DownloadFile is a configuration extension for Foliant which downloads external files to use in your project. It also resolves !download YAML tag in the project config and inside XML-tags parameters.","title":"DownloadFile Extension"},{"location":"config/downloadfile/#installation","text":"$ pip install foliantcontrib.downloadfile","title":"Installation"},{"location":"config/downloadfile/#usage","text":"To configure DownloadFile add the following section to your foliant.yml file: downloadfile : fail_fast : true ignore_ssl_errors : false queue : - url : https://example.com/image.png # required save_to : images/img1.png login : john password : qwerty123 - ... fail_fast When true , build will be stopped if any file can't be downloaded. If false \u00ad\u2014 unavailable files will be just skipped. Doesn't affect !download tag, this one will always break the build on errors. Default: true . ignore_ssl_errors Switch to true to skip SSL certificate check. Default: false . queue list of files to download. Each file is represented by a dictionary with the following fields: url (requried) URL to the file which should be downloaded. save_to path where the downloaded file should be saved, relative to the project root. If not supplied, file will be saved in the project root with the name from url. login login for basic authentication. password password for basic authentication. Warning: don't store plain text passwords in foliant.yml. Use environment variables .","title":"Usage"},{"location":"config/downloadfile/#download-yaml-tag","text":"Another way to use DownloadFile is by specifying !download YAML tag. This is the quickest and the simplest way, but it comes with a few disadvantages. Insert the !download tag, followed by file URL, in any place in foliant.yml or tag parameters, where file path is expected: preprocessors : - swaggerdoc : spec_path : !download https://example.com/swagger.json mode : widdershins Generated template: < template engine = \"jinja2\" ext_context = \"!download https://example.com/mycontext.yml\" > ... </ template > The downloaded file will be saved in the .downloadfilecache directory under a hashed name, and the !download tag will be replaced by absolute path to this file. The cons of this method are that you can't change the saved file path nor other parameters. Also if you reference the same file twice with !download tag, it will be downloaded two times.","title":"!download YAML tag"},{"location":"config/from/","tags":["config extension","multiproject"],"text":"MultiProject \u00b6 This extension resolves the !from YAML tag in the project config and replaces the value of the tag with chaptres section of related subproject. Nested subprojects are processed recursively. Installation \u00b6 $ pip install foliantcontrib.multiproject Usage \u00b6 The subproject location may be specified as a local path, or as a Git repository with optional revision (branch name, commit hash or another reference). Example of chapters section in the project config: chapters : - index.md - !from local_dir - !from https://github.com/foliant-docs/docs.git - !from https://github.com/some_other_group/some_other_repo.git#develop Before building the documentation superproject, Multiproject extension calls Foliant to build each subproject into pre target, and then moves the directories of built subprojects into the source directory of the superproject (usually called as src ). Limitations: directory names of subprojects of the same level should be unique; source directories of the multiproject and of all the subprojects should have the same names; also they should be located inside the \u201croot\u201d directories of corresponding projects; config files of the multiproject and of all the subprojects should have the same names; subprojects from remote Git repositories do not need to be newly cloned before each build, but local subprojects are copied into cache before each build; it\u2019s undesirable if the path of the \u201croot\u201d directory of the top-level project contains .multiprojectcache directory as its some part.","title":"MultiProject"},{"location":"config/from/#multiproject","text":"This extension resolves the !from YAML tag in the project config and replaces the value of the tag with chaptres section of related subproject. Nested subprojects are processed recursively.","title":"MultiProject"},{"location":"config/from/#installation","text":"$ pip install foliantcontrib.multiproject","title":"Installation"},{"location":"config/from/#usage","text":"The subproject location may be specified as a local path, or as a Git repository with optional revision (branch name, commit hash or another reference). Example of chapters section in the project config: chapters : - index.md - !from local_dir - !from https://github.com/foliant-docs/docs.git - !from https://github.com/some_other_group/some_other_repo.git#develop Before building the documentation superproject, Multiproject extension calls Foliant to build each subproject into pre target, and then moves the directories of built subprojects into the source directory of the superproject (usually called as src ). Limitations: directory names of subprojects of the same level should be unique; source directories of the multiproject and of all the subprojects should have the same names; also they should be located inside the \u201croot\u201d directories of corresponding projects; config files of the multiproject and of all the subprojects should have the same names; subprojects from remote Git repositories do not need to be newly cloned before each build, but local subprojects are copied into cache before each build; it\u2019s undesirable if the path of the \u201croot\u201d directory of the top-level project contains .multiprojectcache directory as its some part.","title":"Usage"},{"location":"config/slugs/","tags":["config extension","chapters"],"text":"Slugs \u00b6 Slugs is an extension for Foliant to generate custom slugs from arbitrary lists of values. It resolves !slug , !date , !version , and !commit_count YAML tags in the project config. The list of values after the !slug tag is replaced with the string that joins these values using - delimeter. Spaces ( ) in the values are replaced with underscores ( _ ). The value of the node that contains the !date tag is replaced with the current local date. The list of values after the !version tag is replaced with the string that joins these values using . delimeter. The value of the node that contains the !commit_count tag is replaced by the number of commits in the current Git repository. Installation \u00b6 $ pip install foliantcontrib.slugs Usage \u00b6 Slug \u00b6 Config example: title : &title My Awesome Project version : &version 1.0 slug : !slug - *title - *version - !date Example of the resulting slug: My_Awesome_Project-1.0-2018-05-10 Note that backends allow to override the top-level slug, so you may define different custom slugs for each backend: backend_config : pandoc : slug : !slug - *title - *version - !date mkdocs : slug : my_awesome_project Version \u00b6 Config example: version : !version [ 1 , 0 , 5 ] Resulting version: 1.0.5 If you wish to use the number of commits in the current branch as a part of your version, add the !commit_count tag: version : !version - 1 - !commit_count Resulting version: 1.85 The !commit_count tag accepts two arguments: name of the branch to count commits in; correction\u2014a positive or negative number to adjust the commit count. Suppose you want to bump the major version and start counting commits from the beginning. Also you want to use only number of commits in the master branch. So your config will look like this: version : !version - 2 - !commit_count master -85 Result: 2.0","title":"Slugs"},{"location":"config/slugs/#slugs","text":"Slugs is an extension for Foliant to generate custom slugs from arbitrary lists of values. It resolves !slug , !date , !version , and !commit_count YAML tags in the project config. The list of values after the !slug tag is replaced with the string that joins these values using - delimeter. Spaces ( ) in the values are replaced with underscores ( _ ). The value of the node that contains the !date tag is replaced with the current local date. The list of values after the !version tag is replaced with the string that joins these values using . delimeter. The value of the node that contains the !commit_count tag is replaced by the number of commits in the current Git repository.","title":"Slugs"},{"location":"config/slugs/#installation","text":"$ pip install foliantcontrib.slugs","title":"Installation"},{"location":"config/slugs/#usage","text":"","title":"Usage"},{"location":"config/slugs/#slug","text":"Config example: title : &title My Awesome Project version : &version 1.0 slug : !slug - *title - *version - !date Example of the resulting slug: My_Awesome_Project-1.0-2018-05-10 Note that backends allow to override the top-level slug, so you may define different custom slugs for each backend: backend_config : pandoc : slug : !slug - *title - *version - !date mkdocs : slug : my_awesome_project","title":"Slug"},{"location":"config/slugs/#version","text":"Config example: version : !version [ 1 , 0 , 5 ] Resulting version: 1.0.5 If you wish to use the number of commits in the current branch as a part of your version, add the !commit_count tag: version : !version - 1 - !commit_count Resulting version: 1.85 The !commit_count tag accepts two arguments: name of the branch to count commits in; correction\u2014a positive or negative number to adjust the commit count. Suppose you want to bump the major version and start counting commits from the beginning. Also you want to use only number of commits in the master branch. So your config will look like this: version : !version - 2 - !commit_count master -85 Result: 2.0","title":"Version"},{"location":"config/yaml_include/","tags":["config extension","include"],"text":"YAMLInclude \u00b6 YAMLInclude Extension \u00b6 YAMLInclude is a configuration extension for Foliant to include parts of configuration from YAML-files. It resolves !include YAML tag in the project config and inside XML-tags parameters. Installation \u00b6 $ pip install foliantcontrib.yaml_include Usage \u00b6 The syntax of the !include YAML tag is: !include <file>[#<key>] Where file may be path to local file in Foliant project root, direct link to a file on remote server. An optional #<key> part is used to get a key from the mapping stored inside <file> . Including a local file Config example: chapters : !include chapters.yml In this example the chapters.yml file should be placed in your Foliant project root. if the contents of chapters.yml are as follows: # chapters.yml - index.md - description.md then the resulting config after applying the extension will be: chapters : - index.md - description.md Including part of a local file Config example: chapters : !include chapters.yml#chapters_for_pdf In this example the chapters.yml file should be placed in your Foliant project root. if the contents of chapters.yml are as follows: # chapters.yml chapters_for_site : - index_site.md - description_site.md chapters_for_pdf : - index.md - description.md then the resulting config after applying the extension will be: chapters : - index.md - description.md Including a remote file Config example: chapters : !include http://example.com/chapters.yml In this example the chapters.yml file is stored on the website http://example.com/ . if the contents of chapters.yml are as follows: # chapters.yml - index.md - description.md then the resulting config after applying the extension will be: chapters : - index.md - description.md Including part of a remote file Config example: chapters : !include http://example.com/chapters.yml#chapters_for_pdf In this example the chapters.yml file is stored on the website http://example.com/ . if the contents of chapters.yml are as follows: # chapters.yml chapters_for_site : - index_site.md - description_site.md chapters_for_pdf : - index.md - description.md then the resulting config after applying the extension will be: chapters : - index.md - description.md","title":"YAMLInclude"},{"location":"config/yaml_include/#yamlinclude","text":"","title":"YAMLInclude"},{"location":"config/yaml_include/#yamlinclude-extension","text":"YAMLInclude is a configuration extension for Foliant to include parts of configuration from YAML-files. It resolves !include YAML tag in the project config and inside XML-tags parameters.","title":"YAMLInclude Extension"},{"location":"config/yaml_include/#installation","text":"$ pip install foliantcontrib.yaml_include","title":"Installation"},{"location":"config/yaml_include/#usage","text":"The syntax of the !include YAML tag is: !include <file>[#<key>] Where file may be path to local file in Foliant project root, direct link to a file on remote server. An optional #<key> part is used to get a key from the mapping stored inside <file> . Including a local file Config example: chapters : !include chapters.yml In this example the chapters.yml file should be placed in your Foliant project root. if the contents of chapters.yml are as follows: # chapters.yml - index.md - description.md then the resulting config after applying the extension will be: chapters : - index.md - description.md Including part of a local file Config example: chapters : !include chapters.yml#chapters_for_pdf In this example the chapters.yml file should be placed in your Foliant project root. if the contents of chapters.yml are as follows: # chapters.yml chapters_for_site : - index_site.md - description_site.md chapters_for_pdf : - index.md - description.md then the resulting config after applying the extension will be: chapters : - index.md - description.md Including a remote file Config example: chapters : !include http://example.com/chapters.yml In this example the chapters.yml file is stored on the website http://example.com/ . if the contents of chapters.yml are as follows: # chapters.yml - index.md - description.md then the resulting config after applying the extension will be: chapters : - index.md - description.md Including part of a remote file Config example: chapters : !include http://example.com/chapters.yml#chapters_for_pdf In this example the chapters.yml file is stored on the website http://example.com/ . if the contents of chapters.yml are as follows: # chapters.yml chapters_for_site : - index_site.md - description_site.md chapters_for_pdf : - index.md - description.md then the resulting config after applying the extension will be: chapters : - index.md - description.md","title":"Usage"},{"location":"preprocessors/admonitions/","tags":["preprocessor","markdown"],"text":"Admonitions \u00b6 Admonitions preprocessor for Foliant \u00b6 Preprocessor which tries to make admonitions syntax available for most backends. Admonitions are decorated fragments of text which indicate a warning, notice, tip, etc. We use rST-style syntax for admonitions which is already supported by mkdocs backend with admonition extension turned on. This preprocessor makes this syntax work for pandoc and slate backends. Installation \u00b6 $ pip install foliantcontrib.admonitions Config \u00b6 Just add admonitions into your preprocessors list. Right now the preprocessor doesn't have any options: preprocessors : - admonitions Usage \u00b6 Add an admonition to your Markdown file: !!! warning \"optional admonition title\" Admonition text. May be several paragraphs. Currently supported backends: pandoc mkdocs * slate * for admonitions to work in mkdocs, add admonition to the markdown_extensions section of your mkdocs.yml config: backend_config : mkdocs : mkdocs.yml : markdown_extensions : - admonition Notes for slate \u00b6 Slate has its own admonitions syntax of three types: notice (blue notes), warning (red warnings) and success (green notes). If another type is supplied, slate draws a blue note but without the \"i\" icon. Admonitions preprocessor transforms some of the general admonition types into slate's for convenience (so you could use error type to display same kind of note in both slate and mkdocs). These translations are indicated in the table below: original type translates to error warning danger warning caution warning info notice note notice tip notice hint notice","title":"Admonitions"},{"location":"preprocessors/admonitions/#admonitions","text":"","title":"Admonitions"},{"location":"preprocessors/admonitions/#admonitions-preprocessor-for-foliant","text":"Preprocessor which tries to make admonitions syntax available for most backends. Admonitions are decorated fragments of text which indicate a warning, notice, tip, etc. We use rST-style syntax for admonitions which is already supported by mkdocs backend with admonition extension turned on. This preprocessor makes this syntax work for pandoc and slate backends.","title":"Admonitions preprocessor for Foliant"},{"location":"preprocessors/admonitions/#installation","text":"$ pip install foliantcontrib.admonitions","title":"Installation"},{"location":"preprocessors/admonitions/#config","text":"Just add admonitions into your preprocessors list. Right now the preprocessor doesn't have any options: preprocessors : - admonitions","title":"Config"},{"location":"preprocessors/admonitions/#usage","text":"Add an admonition to your Markdown file: !!! warning \"optional admonition title\" Admonition text. May be several paragraphs. Currently supported backends: pandoc mkdocs * slate * for admonitions to work in mkdocs, add admonition to the markdown_extensions section of your mkdocs.yml config: backend_config : mkdocs : mkdocs.yml : markdown_extensions : - admonition","title":"Usage"},{"location":"preprocessors/admonitions/#notes-for-slate","text":"Slate has its own admonitions syntax of three types: notice (blue notes), warning (red warnings) and success (green notes). If another type is supplied, slate draws a blue note but without the \"i\" icon. Admonitions preprocessor transforms some of the general admonition types into slate's for convenience (so you could use error type to display same kind of note in both slate and mkdocs). These translations are indicated in the table below: original type translates to error warning danger warning caution warning info notice note notice tip notice hint notice","title":"Notes for slate"},{"location":"preprocessors/anchors/","tags":["preprocessor","markdown"],"text":"Anchors \u00b6 Anchors \u00b6 Preprocessor which allows to use arbitrary anchors in Foliant documents. Installation \u00b6 $ pip install foliantcontrib.anchors Config \u00b6 To enable the preprocessor, add anchors to preprocessors section in the project config: preprocessors : - anchors The preprocessor has some options, but most probably you won't need any of them: preprocessors : - anchors : element : '<span id=\"{anchor}\"></span>' tex : False anchors : True custom_ids : False element Template of an HTML-element which will be placed instead of the <anchor> tag. In this template {anchor} will be replaced with the tag contents. Ignored when tex is True . Default: '<span id=\"{anchor}\"></span>' tex If this option is True , preprocessor will try to use TeX-language anchors: \\hypertarget{anchor}{} . Default: False Notice, this option will work only with pdf target. For all other targets it is set to False . anchors If this options is True , anchors tag will be processed. Turn off if you only want to process custom IDs. Default: True custom_ids Since version 1.0.5 preprocessor Anchors can also process Pandoc-style custom IDs. Set this option to True to do that. Default: False . Usage \u00b6 anchors Just add an anchor tag to some place and then use an ordinary Markdown-link to this anchor: ... < anchor > limitation </ anchor > Some important notice about system limitation. ... Don't forget about [limitation](#limitation)! You can also place anchors in the middle of paragraph: Lorem ipsum dolor sit amet, consectetur adipisicing elit. < anchor > middle </ anchor > Molestiae illum iusto, sequi magnam consequatur porro iste facere at fugiat est corrupti dolorum quidem sapiente pariatur rem, alias unde! Iste, aliquam. [Go to the middle of the paragraph](#middle) You can place anchors inside tables: Name | Age | Weight ---- | --- | ------ Max | 17 | 60 Jane | 98 | 12 John | 10 | 40 Katy | 54 | 54 Mike < anchor > Mike </ anchor > | 22 | 299 Cinty| 25 | 42 ... Something's wrong with Mike, [look](#Mike)! custom IDs Since version 1.0.5 preprocessor Anchors can also process Pandoc-style custom heading identifiers (previously you had to use CustomIDs preprocessor for that purpose). To use this function, turn on the custom_ids option in your foliant.yml: preprocessors : anchors : ... custom_ids : True Then add custom identifiers to your headings: # My heading {#foo} Lorem ipsum, dolor sit amet consectetur adipisicing elit. Omnis non vitae placeat sapiente reprehenderit officia. After processing your text will be look like this: <span id=\"custom_id\"></span> # My heading Lorem ipsum, dolor sit amet consectetur adipisicing elit. Omnis non vitae placeat sapiente reprehenderit officia. Additional info \u00b6 1. Anchors are case sensitive Markdown and MarkDown are two different anchors. 2. Anchors should be unique You can't use two anchors with the same name in one document. If preprocessor notices repeating anchors in one md-file it will throw you a warning. If you are building a flat document (e.g. PDF or docx with Pandoc), you will receive the warning even if anchor repeats in different md-files. 3. Anchors may conflict with headers Headers are usually assigned anchors of their own. Be careful, your anchors may conflict with them. Preprocessor will try to detect if you are using anchor which is already taken by the header and warn you in console. 4. Some symbols are restricted You can't use these symbols in anchors: []<>\\\" Also you can't use space. 5. But a lot of other symbols are available All these are valid anchors: <anchor>!important!</anchor> <anchor>_anchor_</anchor> <anchor>section(1)</anchor> <anchor>section/1/</anchor> <anchor>anchor$1$</anchor> <anchor>about:info</anchor> <anchor>test'1';</anchor> <anchor>\u044f\u043a\u043e\u0440\u044c</anchor> <anchor>\ud83d\udc40</anchor> Notice for Mkdocs \u00b6 In many Mkdocs themes the top menu lays over the text with absolute position. In this situation all anchors will be hidden by the menu. Possible solution is to change the element option for your anchors to have a vertical offset. Example config: preprocessors : - anchors : element : '<span style=\"display:block; margin:-3.1rem; padding:3.1rem;\" id=\"{anchor}\"></span>' Or, even better, you can assign your anchor a class in element and add these rules to your custom mkdocs styles.","title":"Anchors"},{"location":"preprocessors/anchors/#anchors","text":"","title":"Anchors"},{"location":"preprocessors/anchors/#anchors_1","text":"Preprocessor which allows to use arbitrary anchors in Foliant documents.","title":"Anchors"},{"location":"preprocessors/anchors/#installation","text":"$ pip install foliantcontrib.anchors","title":"Installation"},{"location":"preprocessors/anchors/#config","text":"To enable the preprocessor, add anchors to preprocessors section in the project config: preprocessors : - anchors The preprocessor has some options, but most probably you won't need any of them: preprocessors : - anchors : element : '<span id=\"{anchor}\"></span>' tex : False anchors : True custom_ids : False element Template of an HTML-element which will be placed instead of the <anchor> tag. In this template {anchor} will be replaced with the tag contents. Ignored when tex is True . Default: '<span id=\"{anchor}\"></span>' tex If this option is True , preprocessor will try to use TeX-language anchors: \\hypertarget{anchor}{} . Default: False Notice, this option will work only with pdf target. For all other targets it is set to False . anchors If this options is True , anchors tag will be processed. Turn off if you only want to process custom IDs. Default: True custom_ids Since version 1.0.5 preprocessor Anchors can also process Pandoc-style custom IDs. Set this option to True to do that. Default: False .","title":"Config"},{"location":"preprocessors/anchors/#usage","text":"anchors Just add an anchor tag to some place and then use an ordinary Markdown-link to this anchor: ... < anchor > limitation </ anchor > Some important notice about system limitation. ... Don't forget about [limitation](#limitation)! You can also place anchors in the middle of paragraph: Lorem ipsum dolor sit amet, consectetur adipisicing elit. < anchor > middle </ anchor > Molestiae illum iusto, sequi magnam consequatur porro iste facere at fugiat est corrupti dolorum quidem sapiente pariatur rem, alias unde! Iste, aliquam. [Go to the middle of the paragraph](#middle) You can place anchors inside tables: Name | Age | Weight ---- | --- | ------ Max | 17 | 60 Jane | 98 | 12 John | 10 | 40 Katy | 54 | 54 Mike < anchor > Mike </ anchor > | 22 | 299 Cinty| 25 | 42 ... Something's wrong with Mike, [look](#Mike)! custom IDs Since version 1.0.5 preprocessor Anchors can also process Pandoc-style custom heading identifiers (previously you had to use CustomIDs preprocessor for that purpose). To use this function, turn on the custom_ids option in your foliant.yml: preprocessors : anchors : ... custom_ids : True Then add custom identifiers to your headings: # My heading {#foo} Lorem ipsum, dolor sit amet consectetur adipisicing elit. Omnis non vitae placeat sapiente reprehenderit officia. After processing your text will be look like this: <span id=\"custom_id\"></span> # My heading Lorem ipsum, dolor sit amet consectetur adipisicing elit. Omnis non vitae placeat sapiente reprehenderit officia.","title":"Usage"},{"location":"preprocessors/anchors/#additional-info","text":"1. Anchors are case sensitive Markdown and MarkDown are two different anchors. 2. Anchors should be unique You can't use two anchors with the same name in one document. If preprocessor notices repeating anchors in one md-file it will throw you a warning. If you are building a flat document (e.g. PDF or docx with Pandoc), you will receive the warning even if anchor repeats in different md-files. 3. Anchors may conflict with headers Headers are usually assigned anchors of their own. Be careful, your anchors may conflict with them. Preprocessor will try to detect if you are using anchor which is already taken by the header and warn you in console. 4. Some symbols are restricted You can't use these symbols in anchors: []<>\\\" Also you can't use space. 5. But a lot of other symbols are available All these are valid anchors: <anchor>!important!</anchor> <anchor>_anchor_</anchor> <anchor>section(1)</anchor> <anchor>section/1/</anchor> <anchor>anchor$1$</anchor> <anchor>about:info</anchor> <anchor>test'1';</anchor> <anchor>\u044f\u043a\u043e\u0440\u044c</anchor> <anchor>\ud83d\udc40</anchor>","title":"Additional info"},{"location":"preprocessors/anchors/#notice-for-mkdocs","text":"In many Mkdocs themes the top menu lays over the text with absolute position. In this situation all anchors will be hidden by the menu. Possible solution is to change the element option for your anchors to have a vertical offset. Example config: preprocessors : - anchors : element : '<span style=\"display:block; margin:-3.1rem; padding:3.1rem;\" id=\"{anchor}\"></span>' Or, even better, you can assign your anchor a class in element and add these rules to your custom mkdocs styles.","title":"Notice for Mkdocs"},{"location":"preprocessors/apireferences/","tags":["preprocessor","API"],"text":"APIReferences \u00b6 APIReferences Preprocessor for Foliant \u00b6 APIReferences is a successor of APILinks preprocessor with slightly changed configuration syntax and completely rewritten insides. APILinks is now deprecated, please use APIReferences instead. Preprocessor replaces API reference s in markdown files with links to the corresponding method description on the API documentation web-page. What is it for? \u00b6 Say, you have API documentation hosted at the url http://example.com/api-docs It may be a Swagger UI website or just some static one-page site (like Slate ). If you have a site with API docs, you probably reference them from time in your other documents: To authenticate user use API method `POST /user/authenticate`. We thought, how cool it'd be if this fragment: `POST /user/authenticate` automatically transformed into a URL of this method's description on your API docs website: To authenticate user use API method [POST user/authenticate](http://example.com/api-docs/#post-user-authenticate). That's exactly what APIReferences does. How does it work? \u00b6 The purpose of APIReferences is to convert references into links. In the example above ` POST /user/authenticate ` is a reference, and [POST user/authenticate](http://example.com/api-docs/#post-user-authenticate) is a Markdown link, the result of APIReferences' work. The resulting link URL (http://example.com/api-docs/#get-user-authenticate) always consists of two parts: {url}{anchor} . url is static and is set in config, but anchor differs for each method. Open your API documentation website and look for HTML elements with id attribute near method description sections. When you add this id to the website's URL with number sign # (we call this combination an anchor ), your browser scrolls the page to this exact element. The tricky part is to determine which anchor should be added to the website's URL for each method. APIReferences offers several ways to do that, we call these ways modes (which are supplied in the mode parameter). It's up to you to choose the most suitable mode for your API website. Here are available modes with their short descriptions. Detailed descriptions and examples are in the User Guide below. 1. Generating anchors Mode option: generate_anchor Convert reference into an anchor without checking the website. 2. Find anchor Mode option: find_by_anchor Parse API website and collect all ids from specific tags. Then convert reference into an anchor and check whether the converted anchor is present among these ids. 3. Find tag content Mode option: find_by_tag_content This mode searches not by tag ids but by tag content ( <tag id=\"id\">content</tag> ) Parse API website and collect all tags from the specified list, which have ids and text content. The content to search is constructed from the reference. If the tag is found, return a link to its id. 4. Find method in swagger spec for SwaggerUI Mode option: find_for_swagger Parse the swagger spec file and find the referenced method. The anchor is then constructed by a template. This mode will work for SwaggerUI websites. 5. Find method in swagger spec for Redoc Mode option: find_for_redoc Parse the swagger spec file and find the referenced method. The anchor is then constructed by a template. This mode will work for Redoc websites. APIReferences is a highly customizable preprocessor. You can tune almost anything about reference conversion. For details look through the following sections. Glossary: reference \u2014 reference to an API method in the source file. The one to be replaced with the link, e.g. GET user/config verb \u2014 HTTP method, e.g. GET , POST , etc. command \u2014 resource used to represent method on the API documentation webpage, e.g. /service/healthcheck . endpoint prefix \u2014 A prefix from server root to the command. If the command is /user/status and full resource is /api/v0/user/status then the endpoint prefix should be stated /api/v0 . In references, you can use either full resource ( {endpoint_prefix}/{command} ) or just the command. APIReferences will sort it out for you. output \u2014 string, which will replace the reference . tag content \u2014 plain text between the tags, for example <tag>Tag content</tag> . anchor \u2014 web-element id with leading number sign, for example #get-user-config . Adding the anchor to the end of the web URL will make a browser scroll to the specified web element. mode \u2014 the way APIReferences will determine correct anchors to add to website URLs. Quick Recipes \u00b6 Recipe 1: find by tag content \u00b6 We want reference ` GET /user/status ` to be pointed at this element on our API website: < h2 id = \"get-user-status\" > Operation GET /user/status </ h2 > Minimal sufficient foliant.yml: preprocessors : apireferences : API : My-API : mode : find_by_tag_content url : http://example.com/api # path to your API website content_template : 'Operation {verb} {command}' ` GET /user/status ` -> GET /user/status Recipe 2: find by tag id \u00b6 The task is the same as in Recipe 1. We want reference ` GET /user/status ` to be pointed at this element on our API website: < h2 id = \"get-user-status\" > Operation GET /user/status </ h2 > Minimal sufficient foliant.yml: preprocessors : apireferences : API : My-API : mode : find_by_anchor url : http://example.com/api # path to your API website anchor_template : '{verb} {command}' anchor_converter : slate ` GET /user/status ` -> GET /user/status Recipe 3: generate tag id \u00b6 The task is the same as in Recipes 1 and 2, but this time you don't have access to API website at the time of building foliant project. We want reference ` GET /user/status ` to be pointed at this element on our API website: < h2 id = \"get-user-status\" > Operation GET /user/status </ h2 > Minimal sufficient foliant.yml: preprocessors : apireferences : API : My-API : mode : generate_anchor url : http://example.com/api # path to your API website anchor_template : '{verb} {command}' anchor_converter : slate ` GET /user/status ` -> GET /user/status Recipe 4: find link for SwaggerUI \u00b6 We have a SwaggerUI website, and we need to find the link to the method by reference ` GET /user/status ``. Method anchors on SwaggerUI consist of tag and operationId, both of which are not present in our reference. APIReferences can find them for you in the spec file. Let's assume that correct tag and operationId are usertag and getStatus . Minimal sufficient foliant.yml: preprocessors : apireferences : API : My-API : mode : generate_for_swagger url : http://example.com/swagger_ui # path to your API website spec : !path swagger.json # path or direct url to OpenAPI spec ` GET /user/status ` -> GET /user/status Installation \u00b6 $ pip install foliantcontrib.apireferences Config \u00b6 To enable the preprocessor, add apireferences to preprocessors section in the project config: preprocessors : - apireferences The preprocessor has a lot of options. For your convenience, the required options are marked (required) ; and those options which are used in customization are marked (optional) . Most likely you will need just one or two of the latter. preprocessors : - apireferences : targets : # optional. default: [] - site trim_if_targets : # optional. default: [] - pdf prefix_to_ignore : Ignore # optional warning_level : 2 # optional reference : # optional - regex : *ref_pattern only_with_prefixes : false only_defined_prefixes : false output_template : '[{verb} {command}]({url})' trim_template : '`{verb} {command}`' - regex : *another_ref_pattern # second reference config. Unlisted options are default output_template : '**{verb} {command}**' API : # below are examples for each mode Client-API : # reference prefix mode : generate_anchor url : http://example.com/api/client anchor_template : '{verb} {command}' anchor_converter : pandoc # optional endpoint_prefix : /api/v1 # optional endpoint_prefix_list : [ /api/v1/ , /api/v2/ , /api/v3/ ] Admin-API : mode : find_by_anchor url : http://example.com/api/admin anchor_template : '{verb} {command}' anchor_converter : pandoc # optional endpoint_prefix : /api/v1 # optional tags : [ 'h1' , 'h2' , 'h3' , 'h4' ] # optional login : login # optional password : password # optional External-API : mode : find_by_tag_content url : http://example.com/api/external content_template : '{verb} {command}' endpoint_prefix : /api/v1 # optional tags : [ 'h1' , 'h2' , 'h3' , 'h4' ] # optional login : login # optional password : password # optional Inernal-API : mode : find_for_swagger url : http://example.com/api/swagger-ui anchor_template : '/{tag}/{operation_id}' anchor_converter : no-transform endpoint_prefix : /api/v1 # optional login : login # optional password : password # optional targets (optional) List of supported targets for foliant make command. If target is not listed here \u2014 preprocessor won't be applied. If the list is an empty \u2014 preprocessor will be applied for any target. Default: [] trim_if_targets (optional) List of targets for foliant make command for which the prefixes from all references in the text will be cut out. Default: [] Only those references whose prefixes are defined in the API section (described below) are affected by this option. All references with unlisted prefixes will not be trimmed. prefix_to_ignore (optional) A default prefix for ignoring references. If APIReferences meets a reference with this prefix, it leaves it unchanged. Default: Ignore warning_level (optional) 2 \u2014 show all warnings for not found references; 1 \u2014 show only warnings for not found prefixed references; 0 \u2014 don't show warnings about not found references. Default: 2 use_multiproject_mode (optional) - Use cached API registries in case of multiproject. Default: True reference (optional) List of dictionaries. A subsection for listing all the types of references you are going to catch in the text, and their properties. Options for this section are listed below. All reference properties have defaults. If any of them are missing in the config, the defaults will be used. If reference section is omitted, APIReferences will use default values. Reference options regex (optional) regular expression used to catch references in the source. Look for details in the Capturing References section. Default: `\\s*((?P<prefix>[\\w-]+):\\s*)?(?P<verb>OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT|PATCH|LINK|UNLINK)\\s+(?P<command>[^`]+)\\s*` only_with_prefixes (optional) if this is true , only references with prefix will be transformed. Ordinary links like GET user/info will be ignored. Default: false only_defined_prefixes (optional) if this is true all references whose prefix is not listed in the API section (described below) will be ignored. References without prefixes are not affected by this option. Default: false . output_template (optional) A template string describing the output which will replace the reference . More info in the Customizing Output section. Default: '[{verb} {command}]({url})' trim_template (optional) Only for targets listed in trim_if_targets option. Tune this template if you want to customize how APIReferences cuts out prefixes. The reference will be replaced with a text based on this template. Default: '`{verb} {command}`' API (required) A subsection for listing APIs and their properties. Define a separate subsection for each API here. The section name represents the API name and, at the same time, the prefix used in the references. You need to add at least one API subsection for the preprocessor to work. API properties The list of options and some default values differ for each mode. mode (required) API mode, which determines how references are collected. Available modes: generate_anchor , find_by_anchor , find_by_tag_content , find_for_swagger , find_for_redoc . generate_anchor mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. anchor_template (required) A template string describing the format of the anchors in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups from the reference regex. Example: 'user-content {verb} {command}' . anchor_converter (optional) anchor converter from this list . Determines how string GET /user/status is converted into get-userstatus or get-user-status etc. List of available converters . Default: pandoc endpoint_prefix (optional) The endpoint prefix from the server root to API methods. If is stated \u2014 APIReferences can divide the command into the reference and search for it more accurately. Also, you could use it in templates. More info in the Commands and Endpoint Prefixes section. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True find_by_anchor mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. In this mode, it is also being parsed to check whether the generated anchor is present on the page. anchor_template (required) A template string describing the format of the anchors in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups in the reference regex. Example: 'user-content {verb} {command}' . anchor_converter (optional) anchor converter from this list . Determines how string GET /user/status is converted into get-userstatus or get-user-status etc. Default: pandoc endpoint_prefix (optional) The endpoint prefix from the server root to API methods. If is stated \u2014 APIReferences can divide the command into the reference and search for it more accurately. Also, you could use it in templates. More info in the Commands and Endpoint Prefixes section. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] tags (optional) list of HTML tags which will be parsed out from the page and searched for ids. Default: ['h1', 'h2', 'h3', 'h4'] login (optional) Login for basic authentication if present on your API site. password (optional) Password for basic authentication if present on your API site. trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True find_by_tag_content mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. In this mode, it is also being parsed to check whether the generated anchor is present on the page. content_template (required) A template string describing the format of the tag content in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups in the reference regex. Example: '{verb} {command}' . endpoint_prefix (optional) The endpoint prefix from the server root to API methods. If is stated \u2014 APIReferences can divide the command into the reference and search for it more accurately. Also, you could use it in templates. More info in the Commands and Endpoint Prefixes section. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] tags (optional) list of HTML tags which will be parsed out from the page and searched for ids. Default: ['h1', 'h2', 'h3', 'h4'] login (optional) Login for basic authentication if present on your API site. password (optional) Password for basic authentication if present on your API site. trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True find_for_swagger mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. spec (required) URL or local path to OpenAPI specification file. anchor_template (optional) A template string describing the format of the anchors in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups in the reference regex. In this mode, you can also use two additional placeholders: {tag} and {operation_id} . Default: '/{tag}/{operation_id}' . endpoint_prefix (optional) The endpoint prefix from the server root to API methods. You may use it in output template. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] login (optional) Login for basic authentication if present on your API site. password (optional) Password for basic authentication if present on your API site. trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True find_for_redoc mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. spec (required) URL or local path to OpenAPI specification file. anchor_template (optional) A template string describing the format of the anchors in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups in the reference regex. In this mode, you can also use two additional placeholders: {tag} and {operation_id} . Default: 'operation/{operation_id}' . endpoint_prefix (optional) The endpoint prefix from the server root to API methods. You may use it in output template. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] login (optional) Login for basic authentication if present on your API site. password (optional) Password for basic authentication if present on your API site. trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True User guide \u00b6 The purpose of APIReferences is to convert references into Markdown links. Reference is a chunk of text in your Markdown source which will be parsed by APIReferences, separated into groups, and converted into a link. An example of a reference is ` GET /user/authenticate `. APIReferences uses Regular Expressions to find the reference and split into groups. You can supply your own regular expression in reference -> regex param (details in Capturing References section below). If you are using the default one, the reference from the example above will be split into two groups: verb : GET , command : /user/authenticate . These groups then will be used to find the referenced method on the API website and also to construct an output string . For example, with find_by_tag_content mode (see the detailed description of all modes below) APIReferences will use content_template from API configuration to construct a tag content and search for it on the API website. If the content template is '{verb} {command}' , then the constructed content, for the example above, will be GET /user/authenticate . APIReferences will search for a tag with such content on the page and get its id. The found tag may be <h2 id=\"get-userauthenticate\">GET /user/authenticate</h2> . APIReferences will take the id from this tag and use it as an anchor to the link: #get-userauthenticate . Then it will add the API website path and here's your url: http://example.com/api/#get-userauthenticate . Now, when APILink has the url of the method description, it can construct an output string. The output string is formed by a template, stated in reference output_template param. This template contains placeholders, which correspond to the reference groups with an addition of {url} placeholder, which contains the url formed above. If the output template is '[{verb} {command}]({url})' , then the output string, for our example, will be: [GET /user/authenticate](http://example.com/api/#get-userauthenticate) . That's it, we've turned our reference into a Markdown link: ` GET /user/authenticate ` -> [GET /user/authenticate](http://example.com/api/#get-userauthenticate) . That's the big picture. Now let's start with exploring different modes by means of which APIReferences captures references on API websites and transforms them into links. API Modes \u00b6 As mentioned above, APIReferences takes a reference from your markdown source and splits it into groups. It then uses these groups to find the correct id on the API website. How this search is performed is determined by API Mode . It can search for a specific tag on the page by tag content or by its id; it can also search for the operation in an OpenAPI specification file or just construct an id without any checks, depending on the mode you've chosen. The mode is specified in API -> <api name> -> mode config option. generate_anchor mode \u00b6 generate_anchor is the simplest mode. It just generates the anchor basing on the anchor_template parameter. It doesn't perform any checks on the API website and doesn't even require the website to be reachable at the time of building your Foliant project. Let's assume that your API website code looks like this: ... < h2 id = \"user-content-get-userlogin\" > GET /user/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > < h2 id = \"user-content-get-apiv2adminstatus\" > GET /api/v2/admin/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > ... APIReferences config in your foliant.yml in this case may look like this: preprocessors : apireferences : API : My-API : mode : generate_anchor url : http://example.com/api anchor_template : 'user content {verb} {command}' anchor_converter : pandoc As you may have noticed, there's no reference section in the example above. That's because we will be using default values for the reference. Now let's reference a GET /user/status method in our Markdown source: To find out user's status use `My-API: GET /user/status` method. Note that for generate_anchor mode, the API prefix ( My-API in our case) is required in the reference. More info about prefixes in Handling Multiple APIs section. APIReferences will notice a reference mentioned in our markdown: ` My-API: GET /user/status `. It will capture it and split into three groups: prefix : My-API , verb : GET , command : /user/status . Then it will pass it to the anchor template 'user content {verb} {command}' which we've stated in our config, and this will result in a string: 'user content GET /user/status' After that, APIReferences will convert this string into an id with an anchor converter. We've chosen pandoc converter in our config, which will turn the string into this: user-content-getuserstatus . That's exactly the id we needed, look at the webpage source: < h2 id = \"user-content-get-userstatus\" > GET /user/status </ h2 > APIReferences will add this id to our API url (which we've stated in config) to form a link: http://example.com/api#user-content-get-userstatus . Finally, it's time to construct a Markdown link. APIReferences takes an output_template from the reference config (which is omitted in our example foliant.yml because we are using defaults): '[{verb} {command}]({url})' . Placeholders in the output template are replaced by groups from our reference, except {url} placeholder which is replaced with the url constructed above: [GET /user/status](http://example.com/api#user-content-get-userstatus) The conversion is done. Our Markdown content will now look like this: To find out user's status use [GET /user/status](http://example.com/api#user-content-get-userstatus) method. find_by_anchor mode \u00b6 find_by_anchor generates the id by anchor_template parameter and searches for this id on the API web page. If an element with such id is found, the reference is converted into a Markdown link. If not \u2014 the reference is skipped. Let's assume that your API website code looks like this: ... < h2 id = \"api-method-get-userstatus\" > GET /user/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > < h2 id = \"api-method-get-apiv2adminstatus\" > GET /api/v2/admin/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > ... APIReferences config in your foliant.yml in this case may look like this: preprocessors : apireferences : reference : output_template : '**[{verb} {command}]({url})**' # other reference properties are default API : My-API : mode : find_by_anchor url : http://example.com/api tags : [ 'h1' , 'h2' ] anchor_template : 'api-method {verb} {command}' anchor_converter : pandoc Now let's reference a GET /user/status method in our Markdown source: To find out user's status use `GET /user/status` method. APIReferences will notice a reference mentioned in our markdown: ` GET /user/status `. It will capture it and split into two groups: verb : GET , command : /user/status . Then it will pass it to the anchor template 'api-method {verb} {command}' which we've stated in our config, and this will result in a string: 'user content GET /user/status' After that, APIReferences will convert this string into an id with an anchor converter. We've used pandoc converter in our config, which will turn the string into this: api-method-getuserstatus . Now APIReferences will parse the web page and look for all h1 and h2 tags (as specified in tags parameter) that have ids and compare these ids to our generated id. One of the elements satisfies the requirement: < h2 id = \"api-method-get-userstatus\" > GET /user/status </ h2 > It means that referenced method is present on API web page, so APIReferences will add this id to our API url (which we've stated in config) to form a link: http://example.com/api#api-method-get-userstatus . Finally, it's time to construct a Markdown link. APIReferences takes an output_template from the reference config: '**[{verb} {command}]({url})**' . Placeholders in the output template are replaced by groups from our reference, except {url} placeholder which is replaced with the url constructed above: **[GET /user/status](http://example.com/api#api-method-get-userstatus)** The conversion is done. Our Markdown content will now look like this: To find out user's status use **[GET /user/status](http://example.com/api#api-method-get-userstatus)** method. find_by_tag_content mode \u00b6 find_by_tag_content generates tag content by the content_template and searches for an HTML element with such content on the API web page. If an element is found, the reference is converted into a Markdown link. If not \u2014 the reference is skipped. This mode is convenient when there's no way to determine tag ID based on the reference, for example, when ids are random strings. Let's assume that your API website code looks like this: ... < h2 id = \"o1egwb7agw\" > GET /user/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > < h2 id = \"y3yn8ewg32\" > GET /api/v2/admin/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > ... APIReferences config in your foliant.yml in this case may look like this: preprocessors : apireferences : reference : output_template : '[{prefix}: {verb} {command}]({url})' # other reference properties are default API : My-API : mode : find_by_tag_content url : http://example.com/api tags : [ 'h1' , 'h2' ] content_template : '{verb} {command}' Now let's reference a GET /user/status method in our Markdown source: To find out user's status use `My-API: GET /user/status` method. APIReferences will notice a reference mentioned in our markdown: ` My-API: GET /user/status `. The reference has the prefix My-API , which means that My-API from the API section should be used. It will capture it and split into three groups: prefix : My-API , verb : GET , command : /user/status . Then it will pass it to the header template '{verb} {command}' which we've stated in our config, and this will result in a string: 'GET /user/status' Now APIReferences will parse the web page and look for all h1 and h2 tags (as specified in the tags parameter) whose content equals to our generated content. One of the elements satisfies the requirement: < h2 id = \"o1egwb7agw\" > GET /user/status </ h2 > It means that referenced method is present on the API web page, so APIReferences will take an id o1egwb7agw from it and add it to our API url (which we've stated in config) to form a link: http://example.com/api#o1egwb7agw . Finally, it's time to construct a Markdown link. APIReferences takes an output_template from the reference config: '[{prefix}: {verb} {command}]({url})' . Placeholders in the output template are replaced by groups from our reference, except {url} placeholder which is replaced with the url constructed above: [My-API: GET /user/status](http://example.com/api#api-method-get-userstatus) The conversion is done. Our Markdown content will now look like this: To find out user's status use [My-API: GET /user/status](http://example.com/api#api-method-get-userstatus) method. find_for_swagger mode \u00b6 find_for_swagger mode parses the OpenAPI spec file and looks for the referenced method in it. It then generates an anchor for SwaggerUI website based on data from the reference and the operation properties in the spec. Let's assume that your OpenAPI specification looks like this: { \"swagger\" : \"2.0\" , ... \"paths\" : { \"/user/status\" : { \"GET\" : { \"tags\" : [ \"userauth\" ], \"summary\" : \"Returns user auth status\" , \"operationId\" : \"checkStatus\" , ... }, } ... On the default SwaggerUI website the anchor to this method will be #/userauth/checkStatus . It consists of the first tag from the operation properties and the operationId. So to generate the proper anchor APIReferences, will need to get those parts from the spec. APIReferences config in your foliant.yml in this case may look like this: preprocessors : apireferences : # reference options are default in this example API : My-API : mode : find_for_swagger url : http://example.com/api spec : !path swagger.json anchor_template : '/{tag}/{operation_id}' # you can omit this line because it's the default value Now let's reference a GET /user/status method in our Markdown source: To find out user's status use `GET /user/login` method. APIReferences will notice a reference mentioned in our markdown: ` GET /user/login `. It will capture it and split into two groups: verb : GET , command : /user/login . Note that verb and command groups are required for this mode if you are to redefine default reference regex. Now, when we have a verb and a command, we can search for it in the OpenAPI spec. APIReferences parses the spec and searches the paths section for our operation. From the operation properties APIReferences takes two values: tag : first element from the tags list, operationId . These values are then passed to the anchor template '/{tag}/{operation_id}' , along with groups from our reference, this will result in a string: '/userauth/checkStatus' That's the ID we were looking for. APIReferences will add it to our API url (which we've stated in config) to form a link: http://example.com/api#/userauth/checkStatus . Finally, it's time to construct a Markdown link. APIReferences takes an output_template from the reference config, which is default: '[{verb} {command}]({url})' . Placeholders in the output template are replaced by groups from our reference, except {url} placeholder which is replaced with the url constructed above: [GET /user/login](http://example.com/api#/userauth/checkStatus) The conversion is done. Our Markdown content will now look like this: To find out user's status use [GET /user/login](http://example.com/api#/userauth/checkStatus) method. find_for_redoc mode \u00b6 find_for_redoc is similar to find_for_swagger mode, except that default anchor template is 'operation/{operation_id}' . Handling Multiple APIs \u00b6 APIReferences can work with several APIs at once, and honestly, it's very good at this. Let's consider an example foliant.yml: preprocessors : apireferences : API : Client-API : mode : find_by_tag_content url : http://example.com/api/client content_template : '{verb} {command}' Admin-API : mode : find_by_anchor url : http://example.com/api/admin content_template : '{verb} {command}' In this example we've defined two APIs: Client-API and Admin-API , these are just names, they may be anything you want. Now we can reference both APIs: When user clicks \"LOGIN\" button, the app sends a request `POST /user/login`. To restrict user from logging in run `PUT /admin/ban_user/{id}`. After applying the preprocessor, this source will turn into: When user clicks \"LOGIN\" button, the app sends a request [POST /user/login](http://example.com/api/client#post-userlogin). To restrict user from logging in run [PUT /admin/ban_user/{id}](](http://example.com/api/admin#put-adminbanuser-id). As you see, APIReferences determined, which reference corresponds to which API. That is possible because when APIReferences meets a non-prefixed reference, it goes through each defined API and searches for the mentioned method. But what happens if we reference a method which is present in both APIs? Run `GET /system/healthcheck` for debug information. You have to understand that, even though APIReferences is very powerful, it doesn't understand the concept of free will. It can't make the choice for you, so instead, it will show a warning and skip this reference: WARNING: [index.md] Failed to process reference. Skipping. `GET /system/healthcheck` is present in several APIs (Client-API, Admin-API). Please, use prefix. In the warning text, there's a suggestion to use a prefix . A prefix is a way to make your reference more specific and point APIReferences to the correct API. The value of the prefix is the API name as defined in the config. So for Client API, the prefix would be Client-API , for Admin \u2014 Admin-API . Let's fix our example: Run `Admin-API: GET /system/healthcheck` to get debug information about the Admin API service. Run `Client-API: GET /system/healthcheck` to get debug information about the Client API service. If you don't like the format in which we supply prefix ( <prefix>: <verb> <command> ), you can change it by tweaking reference regex. More info in Capturing References section. It's recommended to always use prefixes for unambiguity. The generate_anchor mode won't work at all for references without prefixes, because it doesn't perform any checks and almost always returns a link. Handling Multiple Reference Configuration \u00b6 You can not only make APIReferences work with different APIs but also with different reference configurations. reference parameter is a list for a reason. And because output_template is part of reference configuration, you can make different references transform into different values. Here's an example config: preprocessors : apireferences : reference : - only_with_prefixes : true output_template : '**[{verb} {command}]({url})**' - only_with_prefixes : false output_template : '[{verb} {command}]({url})' API : ... With such config references with prefixes will be transformed into bold links , while non-prefixed references will remain regular links. Commands and Endpoint Prefixes \u00b6 APIReferences treats the command part of your reference in a special way. While searching for it on the API website, it will try to substitute the command placeholder: with and without leading slash ( /user/login and user/login ), with and without endpoint prefix, if one is defined ( /api/v1/user/login and /user/login ). Here's an example config to illustrate this feature: preprocessors : apireferences : reference : - only_with_prefixes : true output_template : '**[{verb} {command}]({url})**' - only_with_prefixes : false output_template : '[{verb} {command}]({url})' API : My-API : mode : find_by_tag_content url : http://example.com/api content_template : '{verb} {command}' endpoint_prefix : /api/v1 Considering that the API website source looks like this: < h2 id = \"asoi17uo\" > GET /api/v1/user/status </ h2 > Which of these references, do you think, will give us the desired result? `GET /user/status` `GET user/status` `GET /api/v2/user/status` If you were reading carefully, you already know the answer \u2014 all of these references will result in the same link: [GET /user/status](http://example.com/api#asoi17uo) [GET /user/status](http://example.com/api#asoi17uo) [GET /user/status](http://example.com/api#asoi17uo) Capturing References \u00b6 APIReferences uses regular expressions to capture references to API methods in Markdown files. The default reg-ex is: `\\s*((?P<prefix>[\\w-]+):\\s*)?(?P<verb>OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT|PATCH|LINK|UNLINK)\\s+(?P<command>[^`]+)\\s*` This expression accepts references like these: Client-API: GET user/info UPDATE user/details Notice that the default expression uses Named Capturing Groups . You have to use them too, if you are to redefine the expression. You can name these groups as you like and have as many or as few as you wish, but it's recommended to include the prefix group for API prefix logic to work. It is also required for all groups which are in the output_template also to be present in the regex. To redefine the regular expression, add an option regex to the reference config. For example, if you want to capture ONLY references with prefixes, you may use the following: preprocessors : - apireferences : reference : - regex : '\\s*((?P<prefix>[\\w-]+):\\s*)(?P<verb>POST|GET|PUT|UPDATE|DELETE)\\s+(?P<command>[^`]+)`\\s*' This example is for illustrative purposes only. You can achieve the same goal by just switching on the only_with_prefixes option. Now the references without prefix ( UPDATE user/details ) will be ignored. Customizing Output \u00b6 You can customize the output -string which will replace the reference string. To do that add a template into your reference configuration. A template is a string that may contain placeholders, surrounded by curly braces. These placeholders will be replaced with the values, and all the rest will remain unchanged. For example, look at the default template: preprocessors : - apireferences : reference : - output_template : '[{verb} {command}]({url})' , Don't forget the single quotes around the template. These braces and parenthesis easily make YAML think that it is an embedded dictionary or list. With the default template, the reference string will be replaced by something like that: [ GET user/info ]( http://example.com/api/#get-user-info ) If you want references to be transformed into something else, create your own template. You can use placeholders from the reference regular expression along with some additional: placeholder description example source Full original reference string ` Client-API: GET user/info ` url Full url to the method description http://example.com/api/#get-user-info endpoint_prefix API endpoint prefix from API configuration /api/v2 Placeholders from the default regex are: placeholder description example prefix API Prefix used in the reference Client-API verb HTTP verb used in the reference GET command API command being referenced with endpoint prefix removed /user/info","title":"APIReferences"},{"location":"preprocessors/apireferences/#apireferences","text":"","title":"APIReferences"},{"location":"preprocessors/apireferences/#apireferences-preprocessor-for-foliant","text":"APIReferences is a successor of APILinks preprocessor with slightly changed configuration syntax and completely rewritten insides. APILinks is now deprecated, please use APIReferences instead. Preprocessor replaces API reference s in markdown files with links to the corresponding method description on the API documentation web-page.","title":"APIReferences Preprocessor for Foliant"},{"location":"preprocessors/apireferences/#what-is-it-for","text":"Say, you have API documentation hosted at the url http://example.com/api-docs It may be a Swagger UI website or just some static one-page site (like Slate ). If you have a site with API docs, you probably reference them from time in your other documents: To authenticate user use API method `POST /user/authenticate`. We thought, how cool it'd be if this fragment: `POST /user/authenticate` automatically transformed into a URL of this method's description on your API docs website: To authenticate user use API method [POST user/authenticate](http://example.com/api-docs/#post-user-authenticate). That's exactly what APIReferences does.","title":"What is it for?"},{"location":"preprocessors/apireferences/#how-does-it-work","text":"The purpose of APIReferences is to convert references into links. In the example above ` POST /user/authenticate ` is a reference, and [POST user/authenticate](http://example.com/api-docs/#post-user-authenticate) is a Markdown link, the result of APIReferences' work. The resulting link URL (http://example.com/api-docs/#get-user-authenticate) always consists of two parts: {url}{anchor} . url is static and is set in config, but anchor differs for each method. Open your API documentation website and look for HTML elements with id attribute near method description sections. When you add this id to the website's URL with number sign # (we call this combination an anchor ), your browser scrolls the page to this exact element. The tricky part is to determine which anchor should be added to the website's URL for each method. APIReferences offers several ways to do that, we call these ways modes (which are supplied in the mode parameter). It's up to you to choose the most suitable mode for your API website. Here are available modes with their short descriptions. Detailed descriptions and examples are in the User Guide below. 1. Generating anchors Mode option: generate_anchor Convert reference into an anchor without checking the website. 2. Find anchor Mode option: find_by_anchor Parse API website and collect all ids from specific tags. Then convert reference into an anchor and check whether the converted anchor is present among these ids. 3. Find tag content Mode option: find_by_tag_content This mode searches not by tag ids but by tag content ( <tag id=\"id\">content</tag> ) Parse API website and collect all tags from the specified list, which have ids and text content. The content to search is constructed from the reference. If the tag is found, return a link to its id. 4. Find method in swagger spec for SwaggerUI Mode option: find_for_swagger Parse the swagger spec file and find the referenced method. The anchor is then constructed by a template. This mode will work for SwaggerUI websites. 5. Find method in swagger spec for Redoc Mode option: find_for_redoc Parse the swagger spec file and find the referenced method. The anchor is then constructed by a template. This mode will work for Redoc websites. APIReferences is a highly customizable preprocessor. You can tune almost anything about reference conversion. For details look through the following sections. Glossary: reference \u2014 reference to an API method in the source file. The one to be replaced with the link, e.g. GET user/config verb \u2014 HTTP method, e.g. GET , POST , etc. command \u2014 resource used to represent method on the API documentation webpage, e.g. /service/healthcheck . endpoint prefix \u2014 A prefix from server root to the command. If the command is /user/status and full resource is /api/v0/user/status then the endpoint prefix should be stated /api/v0 . In references, you can use either full resource ( {endpoint_prefix}/{command} ) or just the command. APIReferences will sort it out for you. output \u2014 string, which will replace the reference . tag content \u2014 plain text between the tags, for example <tag>Tag content</tag> . anchor \u2014 web-element id with leading number sign, for example #get-user-config . Adding the anchor to the end of the web URL will make a browser scroll to the specified web element. mode \u2014 the way APIReferences will determine correct anchors to add to website URLs.","title":"How does it work?"},{"location":"preprocessors/apireferences/#quick-recipes","text":"","title":"Quick Recipes"},{"location":"preprocessors/apireferences/#recipe-1-find-by-tag-content","text":"We want reference ` GET /user/status ` to be pointed at this element on our API website: < h2 id = \"get-user-status\" > Operation GET /user/status </ h2 > Minimal sufficient foliant.yml: preprocessors : apireferences : API : My-API : mode : find_by_tag_content url : http://example.com/api # path to your API website content_template : 'Operation {verb} {command}' ` GET /user/status ` -> GET /user/status","title":"Recipe 1: find by tag content"},{"location":"preprocessors/apireferences/#recipe-2-find-by-tag-id","text":"The task is the same as in Recipe 1. We want reference ` GET /user/status ` to be pointed at this element on our API website: < h2 id = \"get-user-status\" > Operation GET /user/status </ h2 > Minimal sufficient foliant.yml: preprocessors : apireferences : API : My-API : mode : find_by_anchor url : http://example.com/api # path to your API website anchor_template : '{verb} {command}' anchor_converter : slate ` GET /user/status ` -> GET /user/status","title":"Recipe 2: find by tag id"},{"location":"preprocessors/apireferences/#recipe-3-generate-tag-id","text":"The task is the same as in Recipes 1 and 2, but this time you don't have access to API website at the time of building foliant project. We want reference ` GET /user/status ` to be pointed at this element on our API website: < h2 id = \"get-user-status\" > Operation GET /user/status </ h2 > Minimal sufficient foliant.yml: preprocessors : apireferences : API : My-API : mode : generate_anchor url : http://example.com/api # path to your API website anchor_template : '{verb} {command}' anchor_converter : slate ` GET /user/status ` -> GET /user/status","title":"Recipe 3: generate tag id"},{"location":"preprocessors/apireferences/#recipe-4-find-link-for-swaggerui","text":"We have a SwaggerUI website, and we need to find the link to the method by reference ` GET /user/status ``. Method anchors on SwaggerUI consist of tag and operationId, both of which are not present in our reference. APIReferences can find them for you in the spec file. Let's assume that correct tag and operationId are usertag and getStatus . Minimal sufficient foliant.yml: preprocessors : apireferences : API : My-API : mode : generate_for_swagger url : http://example.com/swagger_ui # path to your API website spec : !path swagger.json # path or direct url to OpenAPI spec ` GET /user/status ` -> GET /user/status","title":"Recipe 4: find link for SwaggerUI"},{"location":"preprocessors/apireferences/#installation","text":"$ pip install foliantcontrib.apireferences","title":"Installation"},{"location":"preprocessors/apireferences/#config","text":"To enable the preprocessor, add apireferences to preprocessors section in the project config: preprocessors : - apireferences The preprocessor has a lot of options. For your convenience, the required options are marked (required) ; and those options which are used in customization are marked (optional) . Most likely you will need just one or two of the latter. preprocessors : - apireferences : targets : # optional. default: [] - site trim_if_targets : # optional. default: [] - pdf prefix_to_ignore : Ignore # optional warning_level : 2 # optional reference : # optional - regex : *ref_pattern only_with_prefixes : false only_defined_prefixes : false output_template : '[{verb} {command}]({url})' trim_template : '`{verb} {command}`' - regex : *another_ref_pattern # second reference config. Unlisted options are default output_template : '**{verb} {command}**' API : # below are examples for each mode Client-API : # reference prefix mode : generate_anchor url : http://example.com/api/client anchor_template : '{verb} {command}' anchor_converter : pandoc # optional endpoint_prefix : /api/v1 # optional endpoint_prefix_list : [ /api/v1/ , /api/v2/ , /api/v3/ ] Admin-API : mode : find_by_anchor url : http://example.com/api/admin anchor_template : '{verb} {command}' anchor_converter : pandoc # optional endpoint_prefix : /api/v1 # optional tags : [ 'h1' , 'h2' , 'h3' , 'h4' ] # optional login : login # optional password : password # optional External-API : mode : find_by_tag_content url : http://example.com/api/external content_template : '{verb} {command}' endpoint_prefix : /api/v1 # optional tags : [ 'h1' , 'h2' , 'h3' , 'h4' ] # optional login : login # optional password : password # optional Inernal-API : mode : find_for_swagger url : http://example.com/api/swagger-ui anchor_template : '/{tag}/{operation_id}' anchor_converter : no-transform endpoint_prefix : /api/v1 # optional login : login # optional password : password # optional targets (optional) List of supported targets for foliant make command. If target is not listed here \u2014 preprocessor won't be applied. If the list is an empty \u2014 preprocessor will be applied for any target. Default: [] trim_if_targets (optional) List of targets for foliant make command for which the prefixes from all references in the text will be cut out. Default: [] Only those references whose prefixes are defined in the API section (described below) are affected by this option. All references with unlisted prefixes will not be trimmed. prefix_to_ignore (optional) A default prefix for ignoring references. If APIReferences meets a reference with this prefix, it leaves it unchanged. Default: Ignore warning_level (optional) 2 \u2014 show all warnings for not found references; 1 \u2014 show only warnings for not found prefixed references; 0 \u2014 don't show warnings about not found references. Default: 2 use_multiproject_mode (optional) - Use cached API registries in case of multiproject. Default: True reference (optional) List of dictionaries. A subsection for listing all the types of references you are going to catch in the text, and their properties. Options for this section are listed below. All reference properties have defaults. If any of them are missing in the config, the defaults will be used. If reference section is omitted, APIReferences will use default values. Reference options regex (optional) regular expression used to catch references in the source. Look for details in the Capturing References section. Default: `\\s*((?P<prefix>[\\w-]+):\\s*)?(?P<verb>OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT|PATCH|LINK|UNLINK)\\s+(?P<command>[^`]+)\\s*` only_with_prefixes (optional) if this is true , only references with prefix will be transformed. Ordinary links like GET user/info will be ignored. Default: false only_defined_prefixes (optional) if this is true all references whose prefix is not listed in the API section (described below) will be ignored. References without prefixes are not affected by this option. Default: false . output_template (optional) A template string describing the output which will replace the reference . More info in the Customizing Output section. Default: '[{verb} {command}]({url})' trim_template (optional) Only for targets listed in trim_if_targets option. Tune this template if you want to customize how APIReferences cuts out prefixes. The reference will be replaced with a text based on this template. Default: '`{verb} {command}`' API (required) A subsection for listing APIs and their properties. Define a separate subsection for each API here. The section name represents the API name and, at the same time, the prefix used in the references. You need to add at least one API subsection for the preprocessor to work. API properties The list of options and some default values differ for each mode. mode (required) API mode, which determines how references are collected. Available modes: generate_anchor , find_by_anchor , find_by_tag_content , find_for_swagger , find_for_redoc . generate_anchor mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. anchor_template (required) A template string describing the format of the anchors in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups from the reference regex. Example: 'user-content {verb} {command}' . anchor_converter (optional) anchor converter from this list . Determines how string GET /user/status is converted into get-userstatus or get-user-status etc. List of available converters . Default: pandoc endpoint_prefix (optional) The endpoint prefix from the server root to API methods. If is stated \u2014 APIReferences can divide the command into the reference and search for it more accurately. Also, you could use it in templates. More info in the Commands and Endpoint Prefixes section. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True find_by_anchor mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. In this mode, it is also being parsed to check whether the generated anchor is present on the page. anchor_template (required) A template string describing the format of the anchors in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups in the reference regex. Example: 'user-content {verb} {command}' . anchor_converter (optional) anchor converter from this list . Determines how string GET /user/status is converted into get-userstatus or get-user-status etc. Default: pandoc endpoint_prefix (optional) The endpoint prefix from the server root to API methods. If is stated \u2014 APIReferences can divide the command into the reference and search for it more accurately. Also, you could use it in templates. More info in the Commands and Endpoint Prefixes section. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] tags (optional) list of HTML tags which will be parsed out from the page and searched for ids. Default: ['h1', 'h2', 'h3', 'h4'] login (optional) Login for basic authentication if present on your API site. password (optional) Password for basic authentication if present on your API site. trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True find_by_tag_content mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. In this mode, it is also being parsed to check whether the generated anchor is present on the page. content_template (required) A template string describing the format of the tag content in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups in the reference regex. Example: '{verb} {command}' . endpoint_prefix (optional) The endpoint prefix from the server root to API methods. If is stated \u2014 APIReferences can divide the command into the reference and search for it more accurately. Also, you could use it in templates. More info in the Commands and Endpoint Prefixes section. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] tags (optional) list of HTML tags which will be parsed out from the page and searched for ids. Default: ['h1', 'h2', 'h3', 'h4'] login (optional) Login for basic authentication if present on your API site. password (optional) Password for basic authentication if present on your API site. trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True find_for_swagger mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. spec (required) URL or local path to OpenAPI specification file. anchor_template (optional) A template string describing the format of the anchors in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups in the reference regex. In this mode, you can also use two additional placeholders: {tag} and {operation_id} . Default: '/{tag}/{operation_id}' . endpoint_prefix (optional) The endpoint prefix from the server root to API methods. You may use it in output template. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] login (optional) Login for basic authentication if present on your API site. password (optional) Password for basic authentication if present on your API site. trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True find_for_redoc mode url (required) An API documentation web-page URL. It will be used to construct the full link to the method. spec (required) URL or local path to OpenAPI specification file. anchor_template (optional) A template string describing the format of the anchors in the API documentation web-page. You can use placeholders in {curly braces}, with names of the groups in the reference regex. In this mode, you can also use two additional placeholders: {tag} and {operation_id} . Default: 'operation/{operation_id}' . endpoint_prefix (optional) The endpoint prefix from the server root to API methods. You may use it in output template. Default: '' endpoint_prefix_list (optional) The list of available endpoint prefixes which could be added to output. Default: [] login (optional) Login for basic authentication if present on your API site. password (optional) Password for basic authentication if present on your API site. trim_query (optional) Cut a query part after ? character from command while searching for an API link. Default: True","title":"Config"},{"location":"preprocessors/apireferences/#user-guide","text":"The purpose of APIReferences is to convert references into Markdown links. Reference is a chunk of text in your Markdown source which will be parsed by APIReferences, separated into groups, and converted into a link. An example of a reference is ` GET /user/authenticate `. APIReferences uses Regular Expressions to find the reference and split into groups. You can supply your own regular expression in reference -> regex param (details in Capturing References section below). If you are using the default one, the reference from the example above will be split into two groups: verb : GET , command : /user/authenticate . These groups then will be used to find the referenced method on the API website and also to construct an output string . For example, with find_by_tag_content mode (see the detailed description of all modes below) APIReferences will use content_template from API configuration to construct a tag content and search for it on the API website. If the content template is '{verb} {command}' , then the constructed content, for the example above, will be GET /user/authenticate . APIReferences will search for a tag with such content on the page and get its id. The found tag may be <h2 id=\"get-userauthenticate\">GET /user/authenticate</h2> . APIReferences will take the id from this tag and use it as an anchor to the link: #get-userauthenticate . Then it will add the API website path and here's your url: http://example.com/api/#get-userauthenticate . Now, when APILink has the url of the method description, it can construct an output string. The output string is formed by a template, stated in reference output_template param. This template contains placeholders, which correspond to the reference groups with an addition of {url} placeholder, which contains the url formed above. If the output template is '[{verb} {command}]({url})' , then the output string, for our example, will be: [GET /user/authenticate](http://example.com/api/#get-userauthenticate) . That's it, we've turned our reference into a Markdown link: ` GET /user/authenticate ` -> [GET /user/authenticate](http://example.com/api/#get-userauthenticate) . That's the big picture. Now let's start with exploring different modes by means of which APIReferences captures references on API websites and transforms them into links.","title":"User guide"},{"location":"preprocessors/apireferences/#api-modes","text":"As mentioned above, APIReferences takes a reference from your markdown source and splits it into groups. It then uses these groups to find the correct id on the API website. How this search is performed is determined by API Mode . It can search for a specific tag on the page by tag content or by its id; it can also search for the operation in an OpenAPI specification file or just construct an id without any checks, depending on the mode you've chosen. The mode is specified in API -> <api name> -> mode config option.","title":"API Modes"},{"location":"preprocessors/apireferences/#generate_anchor-mode","text":"generate_anchor is the simplest mode. It just generates the anchor basing on the anchor_template parameter. It doesn't perform any checks on the API website and doesn't even require the website to be reachable at the time of building your Foliant project. Let's assume that your API website code looks like this: ... < h2 id = \"user-content-get-userlogin\" > GET /user/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > < h2 id = \"user-content-get-apiv2adminstatus\" > GET /api/v2/admin/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > ... APIReferences config in your foliant.yml in this case may look like this: preprocessors : apireferences : API : My-API : mode : generate_anchor url : http://example.com/api anchor_template : 'user content {verb} {command}' anchor_converter : pandoc As you may have noticed, there's no reference section in the example above. That's because we will be using default values for the reference. Now let's reference a GET /user/status method in our Markdown source: To find out user's status use `My-API: GET /user/status` method. Note that for generate_anchor mode, the API prefix ( My-API in our case) is required in the reference. More info about prefixes in Handling Multiple APIs section. APIReferences will notice a reference mentioned in our markdown: ` My-API: GET /user/status `. It will capture it and split into three groups: prefix : My-API , verb : GET , command : /user/status . Then it will pass it to the anchor template 'user content {verb} {command}' which we've stated in our config, and this will result in a string: 'user content GET /user/status' After that, APIReferences will convert this string into an id with an anchor converter. We've chosen pandoc converter in our config, which will turn the string into this: user-content-getuserstatus . That's exactly the id we needed, look at the webpage source: < h2 id = \"user-content-get-userstatus\" > GET /user/status </ h2 > APIReferences will add this id to our API url (which we've stated in config) to form a link: http://example.com/api#user-content-get-userstatus . Finally, it's time to construct a Markdown link. APIReferences takes an output_template from the reference config (which is omitted in our example foliant.yml because we are using defaults): '[{verb} {command}]({url})' . Placeholders in the output template are replaced by groups from our reference, except {url} placeholder which is replaced with the url constructed above: [GET /user/status](http://example.com/api#user-content-get-userstatus) The conversion is done. Our Markdown content will now look like this: To find out user's status use [GET /user/status](http://example.com/api#user-content-get-userstatus) method.","title":"generate_anchor mode"},{"location":"preprocessors/apireferences/#find_by_anchor-mode","text":"find_by_anchor generates the id by anchor_template parameter and searches for this id on the API web page. If an element with such id is found, the reference is converted into a Markdown link. If not \u2014 the reference is skipped. Let's assume that your API website code looks like this: ... < h2 id = \"api-method-get-userstatus\" > GET /user/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > < h2 id = \"api-method-get-apiv2adminstatus\" > GET /api/v2/admin/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > ... APIReferences config in your foliant.yml in this case may look like this: preprocessors : apireferences : reference : output_template : '**[{verb} {command}]({url})**' # other reference properties are default API : My-API : mode : find_by_anchor url : http://example.com/api tags : [ 'h1' , 'h2' ] anchor_template : 'api-method {verb} {command}' anchor_converter : pandoc Now let's reference a GET /user/status method in our Markdown source: To find out user's status use `GET /user/status` method. APIReferences will notice a reference mentioned in our markdown: ` GET /user/status `. It will capture it and split into two groups: verb : GET , command : /user/status . Then it will pass it to the anchor template 'api-method {verb} {command}' which we've stated in our config, and this will result in a string: 'user content GET /user/status' After that, APIReferences will convert this string into an id with an anchor converter. We've used pandoc converter in our config, which will turn the string into this: api-method-getuserstatus . Now APIReferences will parse the web page and look for all h1 and h2 tags (as specified in tags parameter) that have ids and compare these ids to our generated id. One of the elements satisfies the requirement: < h2 id = \"api-method-get-userstatus\" > GET /user/status </ h2 > It means that referenced method is present on API web page, so APIReferences will add this id to our API url (which we've stated in config) to form a link: http://example.com/api#api-method-get-userstatus . Finally, it's time to construct a Markdown link. APIReferences takes an output_template from the reference config: '**[{verb} {command}]({url})**' . Placeholders in the output template are replaced by groups from our reference, except {url} placeholder which is replaced with the url constructed above: **[GET /user/status](http://example.com/api#api-method-get-userstatus)** The conversion is done. Our Markdown content will now look like this: To find out user's status use **[GET /user/status](http://example.com/api#api-method-get-userstatus)** method.","title":"find_by_anchor mode"},{"location":"preprocessors/apireferences/#find_by_tag_content-mode","text":"find_by_tag_content generates tag content by the content_template and searches for an HTML element with such content on the API web page. If an element is found, the reference is converted into a Markdown link. If not \u2014 the reference is skipped. This mode is convenient when there's no way to determine tag ID based on the reference, for example, when ids are random strings. Let's assume that your API website code looks like this: ... < h2 id = \"o1egwb7agw\" > GET /user/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > < h2 id = \"y3yn8ewg32\" > GET /api/v2/admin/status </ h2 > < p > Lorem ipsum dolor sit amet, consectetur adipisicing elit. </ p > ... APIReferences config in your foliant.yml in this case may look like this: preprocessors : apireferences : reference : output_template : '[{prefix}: {verb} {command}]({url})' # other reference properties are default API : My-API : mode : find_by_tag_content url : http://example.com/api tags : [ 'h1' , 'h2' ] content_template : '{verb} {command}' Now let's reference a GET /user/status method in our Markdown source: To find out user's status use `My-API: GET /user/status` method. APIReferences will notice a reference mentioned in our markdown: ` My-API: GET /user/status `. The reference has the prefix My-API , which means that My-API from the API section should be used. It will capture it and split into three groups: prefix : My-API , verb : GET , command : /user/status . Then it will pass it to the header template '{verb} {command}' which we've stated in our config, and this will result in a string: 'GET /user/status' Now APIReferences will parse the web page and look for all h1 and h2 tags (as specified in the tags parameter) whose content equals to our generated content. One of the elements satisfies the requirement: < h2 id = \"o1egwb7agw\" > GET /user/status </ h2 > It means that referenced method is present on the API web page, so APIReferences will take an id o1egwb7agw from it and add it to our API url (which we've stated in config) to form a link: http://example.com/api#o1egwb7agw . Finally, it's time to construct a Markdown link. APIReferences takes an output_template from the reference config: '[{prefix}: {verb} {command}]({url})' . Placeholders in the output template are replaced by groups from our reference, except {url} placeholder which is replaced with the url constructed above: [My-API: GET /user/status](http://example.com/api#api-method-get-userstatus) The conversion is done. Our Markdown content will now look like this: To find out user's status use [My-API: GET /user/status](http://example.com/api#api-method-get-userstatus) method.","title":"find_by_tag_content mode"},{"location":"preprocessors/apireferences/#find_for_swagger-mode","text":"find_for_swagger mode parses the OpenAPI spec file and looks for the referenced method in it. It then generates an anchor for SwaggerUI website based on data from the reference and the operation properties in the spec. Let's assume that your OpenAPI specification looks like this: { \"swagger\" : \"2.0\" , ... \"paths\" : { \"/user/status\" : { \"GET\" : { \"tags\" : [ \"userauth\" ], \"summary\" : \"Returns user auth status\" , \"operationId\" : \"checkStatus\" , ... }, } ... On the default SwaggerUI website the anchor to this method will be #/userauth/checkStatus . It consists of the first tag from the operation properties and the operationId. So to generate the proper anchor APIReferences, will need to get those parts from the spec. APIReferences config in your foliant.yml in this case may look like this: preprocessors : apireferences : # reference options are default in this example API : My-API : mode : find_for_swagger url : http://example.com/api spec : !path swagger.json anchor_template : '/{tag}/{operation_id}' # you can omit this line because it's the default value Now let's reference a GET /user/status method in our Markdown source: To find out user's status use `GET /user/login` method. APIReferences will notice a reference mentioned in our markdown: ` GET /user/login `. It will capture it and split into two groups: verb : GET , command : /user/login . Note that verb and command groups are required for this mode if you are to redefine default reference regex. Now, when we have a verb and a command, we can search for it in the OpenAPI spec. APIReferences parses the spec and searches the paths section for our operation. From the operation properties APIReferences takes two values: tag : first element from the tags list, operationId . These values are then passed to the anchor template '/{tag}/{operation_id}' , along with groups from our reference, this will result in a string: '/userauth/checkStatus' That's the ID we were looking for. APIReferences will add it to our API url (which we've stated in config) to form a link: http://example.com/api#/userauth/checkStatus . Finally, it's time to construct a Markdown link. APIReferences takes an output_template from the reference config, which is default: '[{verb} {command}]({url})' . Placeholders in the output template are replaced by groups from our reference, except {url} placeholder which is replaced with the url constructed above: [GET /user/login](http://example.com/api#/userauth/checkStatus) The conversion is done. Our Markdown content will now look like this: To find out user's status use [GET /user/login](http://example.com/api#/userauth/checkStatus) method.","title":"find_for_swagger mode"},{"location":"preprocessors/apireferences/#find_for_redoc-mode","text":"find_for_redoc is similar to find_for_swagger mode, except that default anchor template is 'operation/{operation_id}' .","title":"find_for_redoc mode"},{"location":"preprocessors/apireferences/#handling-multiple-apis","text":"APIReferences can work with several APIs at once, and honestly, it's very good at this. Let's consider an example foliant.yml: preprocessors : apireferences : API : Client-API : mode : find_by_tag_content url : http://example.com/api/client content_template : '{verb} {command}' Admin-API : mode : find_by_anchor url : http://example.com/api/admin content_template : '{verb} {command}' In this example we've defined two APIs: Client-API and Admin-API , these are just names, they may be anything you want. Now we can reference both APIs: When user clicks \"LOGIN\" button, the app sends a request `POST /user/login`. To restrict user from logging in run `PUT /admin/ban_user/{id}`. After applying the preprocessor, this source will turn into: When user clicks \"LOGIN\" button, the app sends a request [POST /user/login](http://example.com/api/client#post-userlogin). To restrict user from logging in run [PUT /admin/ban_user/{id}](](http://example.com/api/admin#put-adminbanuser-id). As you see, APIReferences determined, which reference corresponds to which API. That is possible because when APIReferences meets a non-prefixed reference, it goes through each defined API and searches for the mentioned method. But what happens if we reference a method which is present in both APIs? Run `GET /system/healthcheck` for debug information. You have to understand that, even though APIReferences is very powerful, it doesn't understand the concept of free will. It can't make the choice for you, so instead, it will show a warning and skip this reference: WARNING: [index.md] Failed to process reference. Skipping. `GET /system/healthcheck` is present in several APIs (Client-API, Admin-API). Please, use prefix. In the warning text, there's a suggestion to use a prefix . A prefix is a way to make your reference more specific and point APIReferences to the correct API. The value of the prefix is the API name as defined in the config. So for Client API, the prefix would be Client-API , for Admin \u2014 Admin-API . Let's fix our example: Run `Admin-API: GET /system/healthcheck` to get debug information about the Admin API service. Run `Client-API: GET /system/healthcheck` to get debug information about the Client API service. If you don't like the format in which we supply prefix ( <prefix>: <verb> <command> ), you can change it by tweaking reference regex. More info in Capturing References section. It's recommended to always use prefixes for unambiguity. The generate_anchor mode won't work at all for references without prefixes, because it doesn't perform any checks and almost always returns a link.","title":"Handling Multiple APIs"},{"location":"preprocessors/apireferences/#handling-multiple-reference-configuration","text":"You can not only make APIReferences work with different APIs but also with different reference configurations. reference parameter is a list for a reason. And because output_template is part of reference configuration, you can make different references transform into different values. Here's an example config: preprocessors : apireferences : reference : - only_with_prefixes : true output_template : '**[{verb} {command}]({url})**' - only_with_prefixes : false output_template : '[{verb} {command}]({url})' API : ... With such config references with prefixes will be transformed into bold links , while non-prefixed references will remain regular links.","title":"Handling Multiple Reference Configuration"},{"location":"preprocessors/apireferences/#commands-and-endpoint-prefixes","text":"APIReferences treats the command part of your reference in a special way. While searching for it on the API website, it will try to substitute the command placeholder: with and without leading slash ( /user/login and user/login ), with and without endpoint prefix, if one is defined ( /api/v1/user/login and /user/login ). Here's an example config to illustrate this feature: preprocessors : apireferences : reference : - only_with_prefixes : true output_template : '**[{verb} {command}]({url})**' - only_with_prefixes : false output_template : '[{verb} {command}]({url})' API : My-API : mode : find_by_tag_content url : http://example.com/api content_template : '{verb} {command}' endpoint_prefix : /api/v1 Considering that the API website source looks like this: < h2 id = \"asoi17uo\" > GET /api/v1/user/status </ h2 > Which of these references, do you think, will give us the desired result? `GET /user/status` `GET user/status` `GET /api/v2/user/status` If you were reading carefully, you already know the answer \u2014 all of these references will result in the same link: [GET /user/status](http://example.com/api#asoi17uo) [GET /user/status](http://example.com/api#asoi17uo) [GET /user/status](http://example.com/api#asoi17uo)","title":"Commands and Endpoint Prefixes"},{"location":"preprocessors/apireferences/#capturing-references","text":"APIReferences uses regular expressions to capture references to API methods in Markdown files. The default reg-ex is: `\\s*((?P<prefix>[\\w-]+):\\s*)?(?P<verb>OPTIONS|GET|HEAD|POST|PUT|DELETE|TRACE|CONNECT|PATCH|LINK|UNLINK)\\s+(?P<command>[^`]+)\\s*` This expression accepts references like these: Client-API: GET user/info UPDATE user/details Notice that the default expression uses Named Capturing Groups . You have to use them too, if you are to redefine the expression. You can name these groups as you like and have as many or as few as you wish, but it's recommended to include the prefix group for API prefix logic to work. It is also required for all groups which are in the output_template also to be present in the regex. To redefine the regular expression, add an option regex to the reference config. For example, if you want to capture ONLY references with prefixes, you may use the following: preprocessors : - apireferences : reference : - regex : '\\s*((?P<prefix>[\\w-]+):\\s*)(?P<verb>POST|GET|PUT|UPDATE|DELETE)\\s+(?P<command>[^`]+)`\\s*' This example is for illustrative purposes only. You can achieve the same goal by just switching on the only_with_prefixes option. Now the references without prefix ( UPDATE user/details ) will be ignored.","title":"Capturing References"},{"location":"preprocessors/apireferences/#customizing-output","text":"You can customize the output -string which will replace the reference string. To do that add a template into your reference configuration. A template is a string that may contain placeholders, surrounded by curly braces. These placeholders will be replaced with the values, and all the rest will remain unchanged. For example, look at the default template: preprocessors : - apireferences : reference : - output_template : '[{verb} {command}]({url})' , Don't forget the single quotes around the template. These braces and parenthesis easily make YAML think that it is an embedded dictionary or list. With the default template, the reference string will be replaced by something like that: [ GET user/info ]( http://example.com/api/#get-user-info ) If you want references to be transformed into something else, create your own template. You can use placeholders from the reference regular expression along with some additional: placeholder description example source Full original reference string ` Client-API: GET user/info ` url Full url to the method description http://example.com/api/#get-user-info endpoint_prefix API endpoint prefix from API configuration /api/v2 Placeholders from the default regex are: placeholder description example prefix API Prefix used in the reference Client-API verb HTTP verb used in the reference GET command API command being referenced with endpoint prefix removed /user/info","title":"Customizing Output"},{"location":"preprocessors/archeme/","tags":["preprocessor","diagram"],"text":"Archeme \u00b6 Archeme \u00b6 Archeme preprocessor allows to integrate Foliant with Archeme , a tool for describing and visualizing schemes and diagrams, primarily architectural. Archeme requires Graphviz to be installed. Archeme preprocessor finds diagram definitions that are described with Archeme DSL, in source Markdown content, then calls Archeme and Graphviz to draw diagrams, and then replaces the diagram definitions with image references. Installation \u00b6 $ pip install foliantcontrib.archeme Config \u00b6 To enable the preprocessor, add archeme to preprocessors section in the project config: preprocessors : - archeme The preprocessor has a number of options with the following default values: preprocessors : - archeme : cache_dir : !path .archemecache graphviz_paths : dot : dot neato : neato fdp : fdp config_concat : false config_file : null action : generate format : png targets : [] Some values of options specified in the project config may be overridden by tag attributes, see below. cache_dir Directory to store generated Graphviz sources and drawn diagram images. graphviz_paths Paths to binaries of Graphviz engines to be used in external commands: dot , neato , and fdp . config_concat Flag that tells the preprocessor to read the config file and the diagram definition as YAML strings, concatenate these strings, and then load the concatenation result, i.e. single YAML string, as an object. If this option is not set (by default), config and diagram definition will be loaded as separate objects, and then merged. This option may be useful when some aliases are defined in the config, and you would like to use their values in the diagram definition. config_file Path to default config file. May be overridden with the value of the respective config_file tag attribute, see below. Config file usually defines common settings of multiple diagrams, it\u2019s recommended but not strictly required. By default, no config file is used. action Default action. Used when the respective action tag attribute is not specified explicitly, see below. Available values are: generate (default), and merge ( see descriptions in Archeme documentation ). format Format of the output image. May take any value supported by Graphviz, but note that drawn images are used within Markdown content that will be rendered by one or another backend. Preferred values are: png (default), and svg . The value of this option may be overridden by the respective format tag attribute. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Limitation of available targets may be useful when it\u2019s needed to build a certain Foliant project in different ways with various settings, e.g. as a stand-alone documentation (for example, with the site target), and as a part of a documentation that combines several Foliant projects (in this case the pre target is usually used). Usage \u00b6 To insert an Archeme diagram definition into your Markdown source, enclose it between <archeme>...</archeme> tags: <archeme> structure: - node: id: first - node: id: second edges: - tail: first head: second </archeme> You may use optional tag attributes: caption \u2014to set an alternative text description of the diagram that may be rendered as image caption by some backends; module_id \u2014to specify an unique ID of the diagram that may be used for merging multiple diagram definitions; action \u2014action that should be applied to the diagram definition; the available values are generate and merge ; this attribute overrides the respective action config option; config_file \u2014path to a specific config file for the certain diagram definition; this attribute overrides the respective config_file config option; format \u2014output image format for the certain diagram definition; this attribute overrides the respective format config option. Examples \u00b6 Diagram definition with explicitly specified ID, config file, and output format: <archeme module_id=\"one\" caption=\"Module 1\" config_file=\"!project_path another_config.yml\" format=\"svg\"> structure: - node: id: first - node: id: second edges: - tail: first head: second </archeme> Archeme DSL definition that prescribes to combine two modules with explicitly specified IDs: <archeme action=\"merge\"> structure: - module: id: one - module: id: two </archeme> Note that the file and description module parameters in Archeme DSL work as usual. If you need to combine the diagrams that are identified within the current Foliant project by using <archeme module_id=\"...\"> tags, you should to omit the file and description module parameters in your combined diagrams definitions.","title":"Archeme"},{"location":"preprocessors/archeme/#archeme","text":"","title":"Archeme"},{"location":"preprocessors/archeme/#archeme_1","text":"Archeme preprocessor allows to integrate Foliant with Archeme , a tool for describing and visualizing schemes and diagrams, primarily architectural. Archeme requires Graphviz to be installed. Archeme preprocessor finds diagram definitions that are described with Archeme DSL, in source Markdown content, then calls Archeme and Graphviz to draw diagrams, and then replaces the diagram definitions with image references.","title":"Archeme"},{"location":"preprocessors/archeme/#installation","text":"$ pip install foliantcontrib.archeme","title":"Installation"},{"location":"preprocessors/archeme/#config","text":"To enable the preprocessor, add archeme to preprocessors section in the project config: preprocessors : - archeme The preprocessor has a number of options with the following default values: preprocessors : - archeme : cache_dir : !path .archemecache graphviz_paths : dot : dot neato : neato fdp : fdp config_concat : false config_file : null action : generate format : png targets : [] Some values of options specified in the project config may be overridden by tag attributes, see below. cache_dir Directory to store generated Graphviz sources and drawn diagram images. graphviz_paths Paths to binaries of Graphviz engines to be used in external commands: dot , neato , and fdp . config_concat Flag that tells the preprocessor to read the config file and the diagram definition as YAML strings, concatenate these strings, and then load the concatenation result, i.e. single YAML string, as an object. If this option is not set (by default), config and diagram definition will be loaded as separate objects, and then merged. This option may be useful when some aliases are defined in the config, and you would like to use their values in the diagram definition. config_file Path to default config file. May be overridden with the value of the respective config_file tag attribute, see below. Config file usually defines common settings of multiple diagrams, it\u2019s recommended but not strictly required. By default, no config file is used. action Default action. Used when the respective action tag attribute is not specified explicitly, see below. Available values are: generate (default), and merge ( see descriptions in Archeme documentation ). format Format of the output image. May take any value supported by Graphviz, but note that drawn images are used within Markdown content that will be rendered by one or another backend. Preferred values are: png (default), and svg . The value of this option may be overridden by the respective format tag attribute. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Limitation of available targets may be useful when it\u2019s needed to build a certain Foliant project in different ways with various settings, e.g. as a stand-alone documentation (for example, with the site target), and as a part of a documentation that combines several Foliant projects (in this case the pre target is usually used).","title":"Config"},{"location":"preprocessors/archeme/#usage","text":"To insert an Archeme diagram definition into your Markdown source, enclose it between <archeme>...</archeme> tags: <archeme> structure: - node: id: first - node: id: second edges: - tail: first head: second </archeme> You may use optional tag attributes: caption \u2014to set an alternative text description of the diagram that may be rendered as image caption by some backends; module_id \u2014to specify an unique ID of the diagram that may be used for merging multiple diagram definitions; action \u2014action that should be applied to the diagram definition; the available values are generate and merge ; this attribute overrides the respective action config option; config_file \u2014path to a specific config file for the certain diagram definition; this attribute overrides the respective config_file config option; format \u2014output image format for the certain diagram definition; this attribute overrides the respective format config option.","title":"Usage"},{"location":"preprocessors/archeme/#examples","text":"Diagram definition with explicitly specified ID, config file, and output format: <archeme module_id=\"one\" caption=\"Module 1\" config_file=\"!project_path another_config.yml\" format=\"svg\"> structure: - node: id: first - node: id: second edges: - tail: first head: second </archeme> Archeme DSL definition that prescribes to combine two modules with explicitly specified IDs: <archeme action=\"merge\"> structure: - module: id: one - module: id: two </archeme> Note that the file and description module parameters in Archeme DSL work as usual. If you need to combine the diagrams that are identified within the current Foliant project by using <archeme module_id=\"...\"> tags, you should to omit the file and description module parameters in your combined diagrams definitions.","title":"Examples"},{"location":"preprocessors/argdown/","tags":["preprocessor","diagram"],"text":"Argdown \u00b6 Argdown Diagrams Preprocessor for Foliant \u00b6 Argdown is a modeling language for creating argument maps. This preprocessor takes Argdown diagram definitions in source markdown files and converts them into images on the fly during project build. This preprocessor uses Argdown Image Export package tool by Christian Voigt to convert diagrams into images. Installation \u00b6 $ pip install foliantcontrib.argdown You will also need to install Argdown CLI and the Image Export package: $ npm install -g @argdown/cli $ npm install -g @argdown/image-export Config \u00b6 To enable the preprocessor, add argdown to preprocessors section in the project config: preprocessors : - argdown The preprocessor has a number of options: preprocessors : - argdown : cache_dir : !path .diagramscache/argdown converter_path : argdown format : png as_image : true params : no-title : true fix_svg_size : false cache_dir Path to the cache directory for the generated diagrams. It can be a path relative to the project root or a global one. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. converter_path Path to Argdown CLI. By default, it is assumed that you have the argdown command in your PATH , but if it is not the case you can define it here. Default: argdown format Output format of the diagram image. Available formats at the time of writing: dot , graphml , svg , pdf , png , jpg , webp . Default: png as_image If true \u2014 inserts the diagram into the document as Markdown-image. If false \u2014 inserts the source code of the diagram directly into the document (works only for svg , dot and graphml formats). Default: true params Params passed to the Argdown CLI map tool. Value of this option must be a YAML-mapping. Params which require values should be specified as param: value ; params which don't require values should be specified as param: true . To see the full list of available params, run argdown map --help . fix_svg_size Works only with svg format and as_image: false . By default svg is embedded with hardcoded width and height so they may exceed the boundaries of your HTML page. If this option is set to true the svg width and height will be set to 100% which will make it fit inside your content container. Default: false . Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <argdown>...</argdown> tags: Here\u2019s the diagram: < argdown > === title: The Core Argument of Populism author: David Lanius date: 27/10/2018 === This is a recontruction of right-wing populist argumentation based on the electoral platform of the German party... </ argdown > You can override preprocessor parameters in the tag options. For example if the format for diagrams is set to png in foliant.yml and you need one of your diagrams to render in svg, override the format option in the tag: SVG diagram: < argdown format = \"svg\" > ... </ argdown > Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: < argdown caption = \"Diagram of the opposing arguments\" > ... </ argdown >","title":"Argdown"},{"location":"preprocessors/argdown/#argdown","text":"","title":"Argdown"},{"location":"preprocessors/argdown/#argdown-diagrams-preprocessor-for-foliant","text":"Argdown is a modeling language for creating argument maps. This preprocessor takes Argdown diagram definitions in source markdown files and converts them into images on the fly during project build. This preprocessor uses Argdown Image Export package tool by Christian Voigt to convert diagrams into images.","title":"Argdown Diagrams Preprocessor for Foliant"},{"location":"preprocessors/argdown/#installation","text":"$ pip install foliantcontrib.argdown You will also need to install Argdown CLI and the Image Export package: $ npm install -g @argdown/cli $ npm install -g @argdown/image-export","title":"Installation"},{"location":"preprocessors/argdown/#config","text":"To enable the preprocessor, add argdown to preprocessors section in the project config: preprocessors : - argdown The preprocessor has a number of options: preprocessors : - argdown : cache_dir : !path .diagramscache/argdown converter_path : argdown format : png as_image : true params : no-title : true fix_svg_size : false cache_dir Path to the cache directory for the generated diagrams. It can be a path relative to the project root or a global one. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. converter_path Path to Argdown CLI. By default, it is assumed that you have the argdown command in your PATH , but if it is not the case you can define it here. Default: argdown format Output format of the diagram image. Available formats at the time of writing: dot , graphml , svg , pdf , png , jpg , webp . Default: png as_image If true \u2014 inserts the diagram into the document as Markdown-image. If false \u2014 inserts the source code of the diagram directly into the document (works only for svg , dot and graphml formats). Default: true params Params passed to the Argdown CLI map tool. Value of this option must be a YAML-mapping. Params which require values should be specified as param: value ; params which don't require values should be specified as param: true . To see the full list of available params, run argdown map --help . fix_svg_size Works only with svg format and as_image: false . By default svg is embedded with hardcoded width and height so they may exceed the boundaries of your HTML page. If this option is set to true the svg width and height will be set to 100% which will make it fit inside your content container. Default: false .","title":"Config"},{"location":"preprocessors/argdown/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <argdown>...</argdown> tags: Here\u2019s the diagram: < argdown > === title: The Core Argument of Populism author: David Lanius date: 27/10/2018 === This is a recontruction of right-wing populist argumentation based on the electoral platform of the German party... </ argdown > You can override preprocessor parameters in the tag options. For example if the format for diagrams is set to png in foliant.yml and you need one of your diagrams to render in svg, override the format option in the tag: SVG diagram: < argdown format = \"svg\" > ... </ argdown > Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: < argdown caption = \"Diagram of the opposing arguments\" > ... </ argdown >","title":"Usage"},{"location":"preprocessors/badges/","tags":["preprocessor","git"],"text":"Badges \u00b6 Badges \u00b6 Preprocessor for Foliant which helps to add badges to your documents. It uses Shields.io to generate badges. Installation \u00b6 $ pip install foliantcontrib.badges Config \u00b6 To enable the preprocessor, add badges to preprocessors section in the project config: preprocessors : - badges The preprocessor has a number of options: preprocessors : - badges : server : 'https://img.shields.io' as_object : true add_link : true vars : jira_path : localhost:3000/jira package : foliant # badge look parameters style : flat-square logo : jira server Shields server URL, which hosts badges. default: https://img.shields.io as_object If true \u2014 preprocessor inserts svg badges with HTML <object> tag, instead of Markdown image tag. This is required for links and hints to work. default: true add_link If true preprocessor tries to determine the link which should be added to badge (for example, link to jira issue page for jira issue badge). Only works with as_object = true . default: true Please note that right now only links for pypi and jira-issue badges are being added automatically. Please contribute or contact author for adding other services. vars Dictionary with variables which will be replaced in badge urls. See variables section. Also you may add parameters specified on the shields.io website which alter the badge view like: label , logo , style etc. Usage \u00b6 Just add the badge tag and specify path to badge in the tag body: <badge>jira/issue/https/issues.apache.org/jira/kafka-2896.svg</badge> All options from config may be overriden in tag parameters: <badge style=\"social\" as_object=\"false\">jira/issue/https/issues.apache.org/jira/kafka-2896.svg</badge> Variables \u00b6 You can use variables in your badges to replace parts which repeat often. For example, if we need to add many badges to our Jira tracker, we may put the protocol and host parameters into a variable like this: preprocessors : - badges : vars : jira : https/issues.apache.org/jira To reference a variable in a badge path use syntax ${variable} : <badge>jira/issue/${jira}/kafka-2896.svg</badge> Description of the issue goes here. But it's not the only one. <badge>jira/issue/${jira}/KAFKA-7951.svg</badge> Description of the second issue.","title":"Badges"},{"location":"preprocessors/badges/#badges","text":"","title":"Badges"},{"location":"preprocessors/badges/#badges_1","text":"Preprocessor for Foliant which helps to add badges to your documents. It uses Shields.io to generate badges.","title":"Badges"},{"location":"preprocessors/badges/#installation","text":"$ pip install foliantcontrib.badges","title":"Installation"},{"location":"preprocessors/badges/#config","text":"To enable the preprocessor, add badges to preprocessors section in the project config: preprocessors : - badges The preprocessor has a number of options: preprocessors : - badges : server : 'https://img.shields.io' as_object : true add_link : true vars : jira_path : localhost:3000/jira package : foliant # badge look parameters style : flat-square logo : jira server Shields server URL, which hosts badges. default: https://img.shields.io as_object If true \u2014 preprocessor inserts svg badges with HTML <object> tag, instead of Markdown image tag. This is required for links and hints to work. default: true add_link If true preprocessor tries to determine the link which should be added to badge (for example, link to jira issue page for jira issue badge). Only works with as_object = true . default: true Please note that right now only links for pypi and jira-issue badges are being added automatically. Please contribute or contact author for adding other services. vars Dictionary with variables which will be replaced in badge urls. See variables section. Also you may add parameters specified on the shields.io website which alter the badge view like: label , logo , style etc.","title":"Config"},{"location":"preprocessors/badges/#usage","text":"Just add the badge tag and specify path to badge in the tag body: <badge>jira/issue/https/issues.apache.org/jira/kafka-2896.svg</badge> All options from config may be overriden in tag parameters: <badge style=\"social\" as_object=\"false\">jira/issue/https/issues.apache.org/jira/kafka-2896.svg</badge>","title":"Usage"},{"location":"preprocessors/badges/#variables","text":"You can use variables in your badges to replace parts which repeat often. For example, if we need to add many badges to our Jira tracker, we may put the protocol and host parameters into a variable like this: preprocessors : - badges : vars : jira : https/issues.apache.org/jira To reference a variable in a badge path use syntax ${variable} : <badge>jira/issue/${jira}/kafka-2896.svg</badge> Description of the issue goes here. But it's not the only one. <badge>jira/issue/${jira}/KAFKA-7951.svg</badge> Description of the second issue.","title":"Variables"},{"location":"preprocessors/bindfigma/","tags":["preprocessor","image","design"],"text":"BindFigma \u00b6 BindFigma \u00b6 BindFigma is a preprocessor that downloads and optionally resizes design layout images from Figma , and binds these images with the documentation project. The preprocessor uses Figma REST API to get URLs of images to download. To use the preprocessor, you should get an access token for it via your Figma account. If you need to resize downloaded images, you should install ImageMagick . Installation \u00b6 $ pip install foliantcontrib.bindfigma Config \u00b6 To enable the preprocessor, add bindfigma to preprocessors section in the project config: preprocessors : - bindfigma The preprocessor has a number of options with the following default values: preprocessors : - bindfigma : cache_dir : !path .bindfigmacache api_caching : disabled convert_path : convert caption : '' hyperlinks : true multi_delimeter : '\\n\\n' resize : null access_token : null file_key : null ids : null scale : null format : null svg_include_id : null svg_simplify_stroke : null use_absolute_bounds : null version : null Some values of options specified in the project config may be overridden by tag attributes, see below. cache_dir Directory to store cached API responses, downloaded and resized images. api_caching API responses caching mode. Available values: disabled \u2014switch off unconditionally; enabled \u2014switch on unconditionally; env \u2014switch on only if the FOLIANT_FIGMA_CACHING environment variable is set, otherwise switch off. If this mode is switched on, the preprocessor caches Figma API responses locally and uses cached data instead of performing API request. In this case, Figma node updating without changing API URL may not take effect. convert_path Path to convert binary, a part of ImageMagick. If resizing is not needed, ImageMagick will not be used. caption Caption of images. The {{image_id}} placeholder in the caption will be replaced with Figma node ID. hyperlinks Flag that tells the preprocessor to wrap image references into hyperlinks to related Figma URLs. multi_delimeter String that should separate multiple image references. resize Width of resulting images in pixels. If not specified, resizing is not performed. access_token Access token that you can generate in your Figma account. file_key ID of the Figma file. ids One or more IDs of nodes in the Figma file. May be specified as a list or as a comma-separated string. scale , format , svg_include_id , svg_simplify_stroke , use_absolute_bounds , version Query parameters to use in Figma API requests, see descriptions in Figma API documentation . Usage \u00b6 To insert a design layout image from Figma into your documentation, use <figma>...</figma> tags in Markdown source: Here\u2019s an image from Figma: <figma caption=\"An optional caption\" resize=\"300\" file_key=\"ABC\" ids=\"node1,node2,node3\"></figma> You may use tag attributes to override the values of the project config options with the same names. All the options excepting cache_dir , api_caching and convert_path may be overridden in this way. BindFigma preprocessor will replace such statements with local image references. If ids refers to more than one image, a set of image references will be generated. Multiple image references will be separated with the string specified as multi_delimeter .","title":"BindFigma"},{"location":"preprocessors/bindfigma/#bindfigma","text":"","title":"BindFigma"},{"location":"preprocessors/bindfigma/#bindfigma_1","text":"BindFigma is a preprocessor that downloads and optionally resizes design layout images from Figma , and binds these images with the documentation project. The preprocessor uses Figma REST API to get URLs of images to download. To use the preprocessor, you should get an access token for it via your Figma account. If you need to resize downloaded images, you should install ImageMagick .","title":"BindFigma"},{"location":"preprocessors/bindfigma/#installation","text":"$ pip install foliantcontrib.bindfigma","title":"Installation"},{"location":"preprocessors/bindfigma/#config","text":"To enable the preprocessor, add bindfigma to preprocessors section in the project config: preprocessors : - bindfigma The preprocessor has a number of options with the following default values: preprocessors : - bindfigma : cache_dir : !path .bindfigmacache api_caching : disabled convert_path : convert caption : '' hyperlinks : true multi_delimeter : '\\n\\n' resize : null access_token : null file_key : null ids : null scale : null format : null svg_include_id : null svg_simplify_stroke : null use_absolute_bounds : null version : null Some values of options specified in the project config may be overridden by tag attributes, see below. cache_dir Directory to store cached API responses, downloaded and resized images. api_caching API responses caching mode. Available values: disabled \u2014switch off unconditionally; enabled \u2014switch on unconditionally; env \u2014switch on only if the FOLIANT_FIGMA_CACHING environment variable is set, otherwise switch off. If this mode is switched on, the preprocessor caches Figma API responses locally and uses cached data instead of performing API request. In this case, Figma node updating without changing API URL may not take effect. convert_path Path to convert binary, a part of ImageMagick. If resizing is not needed, ImageMagick will not be used. caption Caption of images. The {{image_id}} placeholder in the caption will be replaced with Figma node ID. hyperlinks Flag that tells the preprocessor to wrap image references into hyperlinks to related Figma URLs. multi_delimeter String that should separate multiple image references. resize Width of resulting images in pixels. If not specified, resizing is not performed. access_token Access token that you can generate in your Figma account. file_key ID of the Figma file. ids One or more IDs of nodes in the Figma file. May be specified as a list or as a comma-separated string. scale , format , svg_include_id , svg_simplify_stroke , use_absolute_bounds , version Query parameters to use in Figma API requests, see descriptions in Figma API documentation .","title":"Config"},{"location":"preprocessors/bindfigma/#usage","text":"To insert a design layout image from Figma into your documentation, use <figma>...</figma> tags in Markdown source: Here\u2019s an image from Figma: <figma caption=\"An optional caption\" resize=\"300\" file_key=\"ABC\" ids=\"node1,node2,node3\"></figma> You may use tag attributes to override the values of the project config options with the same names. All the options excepting cache_dir , api_caching and convert_path may be overridden in this way. BindFigma preprocessor will replace such statements with local image references. If ids refers to more than one image, a set of image references will be generated. Multiple image references will be separated with the string specified as multi_delimeter .","title":"Usage"},{"location":"preprocessors/bindsympli/","tags":["preprocessor","image","design"],"text":"BindSympli \u00b6 BindSympli \u00b6 BindSympli is a tool to download design layout images from Sympli CDN using certain Sympli account, to resize these images, and to bind them with the documentation project. Installation \u00b6 Before using BindSympli, you need to install Node.js , Puppeteer , wget , and ImageMagick . BindSympli preprocessor code is written in Python, but it uses the external script written in JavaScript. This script is provided in BindSympli package: $ pip install foliantcontrib.bindsympli Config \u00b6 To enable the preprocessor, add bindsympli to preprocessors section in the project config: preprocessors : - bindsympli The preprocessor has a number of options with the following default values: preprocessors : - bindsympli : get_sympli_img_urls_path : get_sympli_img_urls.js wget_path : wget convert_path : convert cache_dir : !path .bindsymplicache sympli_login : '' sympli_password : '' image_width : 800 max_attempts : 5 get_sympli_img_urls_path Path to the script get_sympli_img_urls.js or alternative command that launches it (e.g. node some_another_script.js ). By default, it is assumed that you have this command and all other commands in PATH . wget_path Path to wget binary. convert_path Path to convert binary, a part of ImageMagick. cache_dir Directory to store downloaded and resized images. sympli_login Your username in Sympli account. sympli_password Your password in Sympli account. image_width Width of resulting images in pixels (original images are too large). max_attempts Maximum number of attempts to run the script get_sympli_img_urls.js on fails. Usage \u00b6 To insert a design layout image from Sympli into your documentation, use <sympli>...</sympli> tags in Markdown source: Here\u2019s an image from Sympli: <sympli caption=\"An optional caption\" width=\"400\" url=\"https://app.sympli.io/app#!/designs/0123456789abcdef01234567/specs/assets\"></sympli> You have to specify the URL of Sympli design layout page in url attribute. You may specify an optional caption in the caption attribute, and an optional custom image width in the width attribute. The width attribute overrides the image_width config option for a certain image. BindSympli preprocessor will replace such blocks with local image references.","title":"BindSympli"},{"location":"preprocessors/bindsympli/#bindsympli","text":"","title":"BindSympli"},{"location":"preprocessors/bindsympli/#bindsympli_1","text":"BindSympli is a tool to download design layout images from Sympli CDN using certain Sympli account, to resize these images, and to bind them with the documentation project.","title":"BindSympli"},{"location":"preprocessors/bindsympli/#installation","text":"Before using BindSympli, you need to install Node.js , Puppeteer , wget , and ImageMagick . BindSympli preprocessor code is written in Python, but it uses the external script written in JavaScript. This script is provided in BindSympli package: $ pip install foliantcontrib.bindsympli","title":"Installation"},{"location":"preprocessors/bindsympli/#config","text":"To enable the preprocessor, add bindsympli to preprocessors section in the project config: preprocessors : - bindsympli The preprocessor has a number of options with the following default values: preprocessors : - bindsympli : get_sympli_img_urls_path : get_sympli_img_urls.js wget_path : wget convert_path : convert cache_dir : !path .bindsymplicache sympli_login : '' sympli_password : '' image_width : 800 max_attempts : 5 get_sympli_img_urls_path Path to the script get_sympli_img_urls.js or alternative command that launches it (e.g. node some_another_script.js ). By default, it is assumed that you have this command and all other commands in PATH . wget_path Path to wget binary. convert_path Path to convert binary, a part of ImageMagick. cache_dir Directory to store downloaded and resized images. sympli_login Your username in Sympli account. sympli_password Your password in Sympli account. image_width Width of resulting images in pixels (original images are too large). max_attempts Maximum number of attempts to run the script get_sympli_img_urls.js on fails.","title":"Config"},{"location":"preprocessors/bindsympli/#usage","text":"To insert a design layout image from Sympli into your documentation, use <sympli>...</sympli> tags in Markdown source: Here\u2019s an image from Sympli: <sympli caption=\"An optional caption\" width=\"400\" url=\"https://app.sympli.io/app#!/designs/0123456789abcdef01234567/specs/assets\"></sympli> You have to specify the URL of Sympli design layout page in url attribute. You may specify an optional caption in the caption attribute, and an optional custom image width in the width attribute. The width attribute overrides the image_width config option for a certain image. BindSympli preprocessor will replace such blocks with local image references.","title":"Usage"},{"location":"preprocessors/blockdiag/","tags":["preprocessor","diagram"],"text":"Blockdiag \u00b6 Blockdiag Preprocessor for Foliant \u00b6 Blockdiag is a tool to generate diagrams from plain text. This preprocessor finds diagram definitions in the source and converts them into images on the fly during project build. It supports all Blockdiag flavors: blockdiag, seqdiag, actdiag, and nwdiag. Installation \u00b6 $ pip install foliantcontrib.blockdiag Config \u00b6 To enable the preprocessor, add blockdiag to preprocessors section in the project config: preprocessors : - blockdiag The preprocessor has a number of options: preprocessors : - blockdiag : cache_dir : !path .diagramscache blockdiag_path : blockdiag seqdiag_path : seqdiag actdiag_path : actdiag nwdiag_path : nwdiag params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. Note To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. *_path Paths to the blockdiag , seqdiag , actdiag , and nwdiag binaries. By default, it is assumed that you have these commands in PATH , but if they're installed in a custom place, you can define it here. params Params passed to the image generation commands ( blockdiag , seqdiag , etc.). Params should be defined by their long names, with dashes replaced with underscores (e.g. --no-transparency becomes no_transparency ); also, -T param is called format for readability: preprocessors: - blockdiag: params: antialias: true font: !path Anonymous_pro.ttf To see the full list of params, run blockdiag -h . Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <blockdiag>...</blockdiag> , <seqdiag>...</seqdiag> , <actdiag>...</actdiag> , or <nwdiag>...</nwdiag> tags (indentation inside tags is optional): Here's a block diagram: <blockdiag> blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag> Here's a sequence diagram: <seqdiag> seqdiag { browser -> webserver [label = \"GET /index.html\"]; browser <-- webserver; browser -> webserver [label = \"POST /blog/comment\"]; webserver -> database [label = \"INSERT comment\"]; webserver <-- database; browser <-- webserver; } </seqdiag> To set a caption, use caption option: Diagram with a caption: <blockdiag caption=\"Sample diagram from the official site\"> blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag> You can override params values from the preprocessor config for each diagram: By default, diagrams are in png. But this diagram is in svg: <blockdiag caption=\"High-quality diagram\" format=\"svg\"> blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag>","title":"Blockdiag"},{"location":"preprocessors/blockdiag/#blockdiag","text":"","title":"Blockdiag"},{"location":"preprocessors/blockdiag/#blockdiag-preprocessor-for-foliant","text":"Blockdiag is a tool to generate diagrams from plain text. This preprocessor finds diagram definitions in the source and converts them into images on the fly during project build. It supports all Blockdiag flavors: blockdiag, seqdiag, actdiag, and nwdiag.","title":"Blockdiag Preprocessor for Foliant"},{"location":"preprocessors/blockdiag/#installation","text":"$ pip install foliantcontrib.blockdiag","title":"Installation"},{"location":"preprocessors/blockdiag/#config","text":"To enable the preprocessor, add blockdiag to preprocessors section in the project config: preprocessors : - blockdiag The preprocessor has a number of options: preprocessors : - blockdiag : cache_dir : !path .diagramscache blockdiag_path : blockdiag seqdiag_path : seqdiag actdiag_path : actdiag nwdiag_path : nwdiag params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. Note To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. *_path Paths to the blockdiag , seqdiag , actdiag , and nwdiag binaries. By default, it is assumed that you have these commands in PATH , but if they're installed in a custom place, you can define it here. params Params passed to the image generation commands ( blockdiag , seqdiag , etc.). Params should be defined by their long names, with dashes replaced with underscores (e.g. --no-transparency becomes no_transparency ); also, -T param is called format for readability: preprocessors: - blockdiag: params: antialias: true font: !path Anonymous_pro.ttf To see the full list of params, run blockdiag -h .","title":"Config"},{"location":"preprocessors/blockdiag/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <blockdiag>...</blockdiag> , <seqdiag>...</seqdiag> , <actdiag>...</actdiag> , or <nwdiag>...</nwdiag> tags (indentation inside tags is optional): Here's a block diagram: <blockdiag> blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag> Here's a sequence diagram: <seqdiag> seqdiag { browser -> webserver [label = \"GET /index.html\"]; browser <-- webserver; browser -> webserver [label = \"POST /blog/comment\"]; webserver -> database [label = \"INSERT comment\"]; webserver <-- database; browser <-- webserver; } </seqdiag> To set a caption, use caption option: Diagram with a caption: <blockdiag caption=\"Sample diagram from the official site\"> blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag> You can override params values from the preprocessor config for each diagram: By default, diagrams are in png. But this diagram is in svg: <blockdiag caption=\"High-quality diagram\" format=\"svg\"> blockdiag { A -> B -> C -> D; A -> E -> F -> G; } </blockdiag>","title":"Usage"},{"location":"preprocessors/bpmn/","tags":["preprocessor","diagram"],"text":"BPMN \u00b6 BPMN Diagrams Preprocessor for Foliant \u00b6 BPMN (Business Process Modeling Notation) is visual modeling language for documenting business workflows. This preprocessor converts BPMN diagram definitions in source markdown files and converts them into images on the fly during project build. This preprocessor uses bpmn-to-image tool by bpmn.io to convert diagrams into images. Installation \u00b6 $ pip install foliantcontrib.bpmn You will also need to install bpmn-to-image: $ npm install -g bpmn-to-image Config \u00b6 To enable the preprocessor, add bpmn to preprocessors section in the project config: preprocessors : - bpmn The preprocessor has a number of options: preprocessors : - bpmn : cache_dir : !path .diagramscache/bpmn converter_path : bpmn-to-image format : png as_image : true params : no-title : true `fix_svg_size` : false cache_dir Path to the cache directory for the generated diagrams. It can be a path relative to the project root or a global one. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. converter_path Path to bpmn-to-image binary. By default, it is assumed that you have the bpmn-to-image command in your PATH , but if it is not the case you can define it here. Default: bpmn-to-image format Output format of the diagram image. Available formats at the time of writing: pdf , png , svg (note that most backends won't render pdf as image). Default: png as_image If true \u2014 inserts the diagram into the document as Markdown-image. If false \u2014 inserts the svg code of the diagram directly into the document (works only for svg format). Default: true params Params passed to the bpmn-to-image tool. Value of this option must be a YAML-mapping. Params which require values should be specified as param: value ; params which don't require values should be specified as param: true : preprocessors: - bpmn: params: no-footer: true min-dimensions: '500x300' To see the full list of available params, run the bpmn-to-image command without parameters. fix_svg_size Works only with svg format and as_image: false . By default svg is embedded with hardcoded width and height so they may exceed the boundaries of your HTML page. If this option is set to true the svg width and height will be set to 100% which will make it fit inside your content container. Default: false . Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <bpmn>...</bpmn> tags: Here\u2019s the diagram: < bpmn > <?xml version=\"1.0\" encoding=\"UTF-8\"?> < definitions xmlns = \"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi = \"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc = \"http://www.omg.org/spec/DD/20100524/DC\" xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\" id = \"sid-38422fae-e03e-43a3-bef4-bd33b32041b2\" targetNamespace = \"http://bpmn.io/bpmn\" exporter = \"http://bpmn.io\" exporterVersion = \"0.10.1\" > < process id = \"Process_1\" isExecutable = \"false\" > < task id = \"Task_0l0q2kz\" name = \"Single Task\" /> </ process > < bpmndi:BPMNDiagram id = \"BpmnDiagram_1\" > < bpmndi:BPMNPlane id = \"BpmnPlane_1\" bpmnElement = \"Process_1\" > < bpmndi:BPMNShape id = \"Task_0l0q2kz_di\" bpmnElement = \"Task_0l0q2kz\" > < omgdc:Bounds x = \"206\" y = \"108\" width = \"100\" height = \"80\" /> </ bpmndi:BPMNShape > </ bpmndi:BPMNPlane > </ bpmndi:BPMNDiagram > </ definitions > </ bpmn > You can override preprocessor parameters in the tag options. For example if the format for diagrams is set to png in foliant.yml and you need one of your diagrams to render in svg, override the format option in the tag: SVG diagram: < bpmn format = \"svg\" > ... </ bpmn > Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: < bpmn caption = \"Diagram of the supply process\" > ... </ bpmn >","title":"BPMN"},{"location":"preprocessors/bpmn/#bpmn","text":"","title":"BPMN"},{"location":"preprocessors/bpmn/#bpmn-diagrams-preprocessor-for-foliant","text":"BPMN (Business Process Modeling Notation) is visual modeling language for documenting business workflows. This preprocessor converts BPMN diagram definitions in source markdown files and converts them into images on the fly during project build. This preprocessor uses bpmn-to-image tool by bpmn.io to convert diagrams into images.","title":"BPMN Diagrams Preprocessor for Foliant"},{"location":"preprocessors/bpmn/#installation","text":"$ pip install foliantcontrib.bpmn You will also need to install bpmn-to-image: $ npm install -g bpmn-to-image","title":"Installation"},{"location":"preprocessors/bpmn/#config","text":"To enable the preprocessor, add bpmn to preprocessors section in the project config: preprocessors : - bpmn The preprocessor has a number of options: preprocessors : - bpmn : cache_dir : !path .diagramscache/bpmn converter_path : bpmn-to-image format : png as_image : true params : no-title : true `fix_svg_size` : false cache_dir Path to the cache directory for the generated diagrams. It can be a path relative to the project root or a global one. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. converter_path Path to bpmn-to-image binary. By default, it is assumed that you have the bpmn-to-image command in your PATH , but if it is not the case you can define it here. Default: bpmn-to-image format Output format of the diagram image. Available formats at the time of writing: pdf , png , svg (note that most backends won't render pdf as image). Default: png as_image If true \u2014 inserts the diagram into the document as Markdown-image. If false \u2014 inserts the svg code of the diagram directly into the document (works only for svg format). Default: true params Params passed to the bpmn-to-image tool. Value of this option must be a YAML-mapping. Params which require values should be specified as param: value ; params which don't require values should be specified as param: true : preprocessors: - bpmn: params: no-footer: true min-dimensions: '500x300' To see the full list of available params, run the bpmn-to-image command without parameters. fix_svg_size Works only with svg format and as_image: false . By default svg is embedded with hardcoded width and height so they may exceed the boundaries of your HTML page. If this option is set to true the svg width and height will be set to 100% which will make it fit inside your content container. Default: false .","title":"Config"},{"location":"preprocessors/bpmn/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <bpmn>...</bpmn> tags: Here\u2019s the diagram: < bpmn > <?xml version=\"1.0\" encoding=\"UTF-8\"?> < definitions xmlns = \"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi = \"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc = \"http://www.omg.org/spec/DD/20100524/DC\" xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\" id = \"sid-38422fae-e03e-43a3-bef4-bd33b32041b2\" targetNamespace = \"http://bpmn.io/bpmn\" exporter = \"http://bpmn.io\" exporterVersion = \"0.10.1\" > < process id = \"Process_1\" isExecutable = \"false\" > < task id = \"Task_0l0q2kz\" name = \"Single Task\" /> </ process > < bpmndi:BPMNDiagram id = \"BpmnDiagram_1\" > < bpmndi:BPMNPlane id = \"BpmnPlane_1\" bpmnElement = \"Process_1\" > < bpmndi:BPMNShape id = \"Task_0l0q2kz_di\" bpmnElement = \"Task_0l0q2kz\" > < omgdc:Bounds x = \"206\" y = \"108\" width = \"100\" height = \"80\" /> </ bpmndi:BPMNShape > </ bpmndi:BPMNPlane > </ bpmndi:BPMNDiagram > </ definitions > </ bpmn > You can override preprocessor parameters in the tag options. For example if the format for diagrams is set to png in foliant.yml and you need one of your diagrams to render in svg, override the format option in the tag: SVG diagram: < bpmn format = \"svg\" > ... </ bpmn > Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: < bpmn caption = \"Diagram of the supply process\" > ... </ bpmn >","title":"Usage"},{"location":"preprocessors/checksources/","tags":["preprocessor","yaml","config"],"text":"CheckSources \u00b6 CheckSources \u00b6 CheckSources is a preprocessor that checks the project\u2019s chapters for missing and unmentioned files in the sources directory. Installation \u00b6 $ pip install foliantcontrib.checksources Usage \u00b6 To enable the preprocessor, add checksources to preprocessors section in the project config: preprocessors : - checksources You can add a list of unmentioned files that wouldn't throw warnings by not_in_chapters option: preprocessors : - checksources : not_in_chapters : - tags.md It is useful if you don't need to add some files to the table of contents.","title":"CheckSources"},{"location":"preprocessors/checksources/#checksources","text":"","title":"CheckSources"},{"location":"preprocessors/checksources/#checksources_1","text":"CheckSources is a preprocessor that checks the project\u2019s chapters for missing and unmentioned files in the sources directory.","title":"CheckSources"},{"location":"preprocessors/checksources/#installation","text":"$ pip install foliantcontrib.checksources","title":"Installation"},{"location":"preprocessors/checksources/#usage","text":"To enable the preprocessor, add checksources to preprocessors section in the project config: preprocessors : - checksources You can add a list of unmentioned files that wouldn't throw warnings by not_in_chapters option: preprocessors : - checksources : not_in_chapters : - tags.md It is useful if you don't need to add some files to the table of contents.","title":"Usage"},{"location":"preprocessors/confluence/","tags":["preprocessor","confluence"],"text":"Confluence \u00b6 Confluence preprocessor allows inserting content from Confluence server into your Foliant project. Installation \u00b6 $ pip install foliantcontrib.confluence Config \u00b6 To enable the preprocessor, add confluence to preprocessors section in the project config: preprocessors : - confluence The preprocessor has a number of options: preprocessors : - confluence : passfile : confluence_secrets.yml host : https://my_confluence_server.org login : user password : !CONFLUENCE_PASS space_key : \"~user\" pandoc_path : pandoc verify_ssl : true passfile Path to YAML-file holding credentials. See details in Supplying Credentials section. Default: confluence_secrets.yml host Required Host of your confluence server. If not stated \u2014 it would be taken from Confluence backend config. login Login of the user who has permissions to create and update pages. If login is not supplied, it would be taken from backend config, or prompted during the build. password Password of the user. If password is not supplied, it would be taken from backend config, or prompted during the build. It is not secure to store plain text passwords in your config files. We recommend to use environment variables to supply passwords space_key The space key where the page titles will be searched for. pandoc_path Path to Pandoc executable (Pandoc is used to convert Confluence content into Markdown). verify_ssl If false , SSL verification will be turned off. Sometimes when dealing with Confluence servers in Intranets it's easier to turn this option off rather than fight with admins. Not recommended to turn off for public servers in production. Default: true Usage \u00b6 Add a <confluence></confluence> tag at the position in the document where the content from Confluence should be inserted. The page is defined by its id or title . If you are specifying page by title, you will also need to set space_key either in tag or in the preprocessor options. The following content is imported from Confluence: < confluence id = \"12345\" ></ confluence > This is from Confluence too, but determined by page title (space key is defined in preprocessor config): < confluence title = \"My Page\" ></ confluence > Here we are overriding space_key: < confluence space_key = \"ANOTHER_SPACE\" title = \"My Page\" ></ confluence > Supplying Credentials \u00b6 There are two ways to supply credentials for your confluence server. 1. In foliant.yml The most basic way is just to put credentials in foliant.yml: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass It's not very secure because foliant.yml is usually visible to everybody in your project's git repository. 2. Using passfile Alternatively, you can use a passfile. Passfile is a yaml-file which holds all your passwords. You can keep it out from git-repository by storing it only on your local machine and production server. To use passfile, add a passfile option to foliant.yml: backend_config : confluence : host : https://my_confluence_server.org passfile : confluence_secrets.yaml The syntax of the passfile is the following: hostname : login : password For example: https://my_confluence_server.org : user1 : wFwG34uK user2 : MEUeU3b4 https://another_confluence_server.org : admin : adminpass If there are several records for a specified host in passfile (like in the example above), Foliant will pick the first one. If you want specific one of them, add the login parameter to your foliant.yml: backend_config : confluence : host : https://my_confluence_server.org passfile : confluence_secrets.yaml login : user2","title":"Confluence"},{"location":"preprocessors/confluence/#confluence","text":"Confluence preprocessor allows inserting content from Confluence server into your Foliant project.","title":"Confluence"},{"location":"preprocessors/confluence/#installation","text":"$ pip install foliantcontrib.confluence","title":"Installation"},{"location":"preprocessors/confluence/#config","text":"To enable the preprocessor, add confluence to preprocessors section in the project config: preprocessors : - confluence The preprocessor has a number of options: preprocessors : - confluence : passfile : confluence_secrets.yml host : https://my_confluence_server.org login : user password : !CONFLUENCE_PASS space_key : \"~user\" pandoc_path : pandoc verify_ssl : true passfile Path to YAML-file holding credentials. See details in Supplying Credentials section. Default: confluence_secrets.yml host Required Host of your confluence server. If not stated \u2014 it would be taken from Confluence backend config. login Login of the user who has permissions to create and update pages. If login is not supplied, it would be taken from backend config, or prompted during the build. password Password of the user. If password is not supplied, it would be taken from backend config, or prompted during the build. It is not secure to store plain text passwords in your config files. We recommend to use environment variables to supply passwords space_key The space key where the page titles will be searched for. pandoc_path Path to Pandoc executable (Pandoc is used to convert Confluence content into Markdown). verify_ssl If false , SSL verification will be turned off. Sometimes when dealing with Confluence servers in Intranets it's easier to turn this option off rather than fight with admins. Not recommended to turn off for public servers in production. Default: true","title":"Config"},{"location":"preprocessors/confluence/#usage","text":"Add a <confluence></confluence> tag at the position in the document where the content from Confluence should be inserted. The page is defined by its id or title . If you are specifying page by title, you will also need to set space_key either in tag or in the preprocessor options. The following content is imported from Confluence: < confluence id = \"12345\" ></ confluence > This is from Confluence too, but determined by page title (space key is defined in preprocessor config): < confluence title = \"My Page\" ></ confluence > Here we are overriding space_key: < confluence space_key = \"ANOTHER_SPACE\" title = \"My Page\" ></ confluence >","title":"Usage"},{"location":"preprocessors/confluence/#supplying-credentials","text":"There are two ways to supply credentials for your confluence server. 1. In foliant.yml The most basic way is just to put credentials in foliant.yml: backend_config : confluence : host : https://my_confluence_server.org login : user password : pass It's not very secure because foliant.yml is usually visible to everybody in your project's git repository. 2. Using passfile Alternatively, you can use a passfile. Passfile is a yaml-file which holds all your passwords. You can keep it out from git-repository by storing it only on your local machine and production server. To use passfile, add a passfile option to foliant.yml: backend_config : confluence : host : https://my_confluence_server.org passfile : confluence_secrets.yaml The syntax of the passfile is the following: hostname : login : password For example: https://my_confluence_server.org : user1 : wFwG34uK user2 : MEUeU3b4 https://another_confluence_server.org : admin : adminpass If there are several records for a specified host in passfile (like in the example above), Foliant will pick the first one. If you want specific one of them, add the login parameter to your foliant.yml: backend_config : confluence : host : https://my_confluence_server.org passfile : confluence_secrets.yaml login : user2","title":"Supplying Credentials"},{"location":"preprocessors/csvtables/","tags":["preprocessor","table"],"text":"CSVTables \u00b6 CSVTables for Foliant \u00b6 This preprocessor converts csv data to markdown tables. Installation \u00b6 $ pip install foliantcontrib.csvtables Config \u00b6 To enable the preprocessor with default options, add csvtables to preprocessors section in the project config: preprocessors : - csvtables The preprocessor has a number of options (default values stated below): preprocessors : - csvtables : delimiter : ';' padding_symbol : ' ' paddings_number : 1 delimiter Delimiter of csv data. padding_symbol Symbol combination that will be places around datum (reversed on the right side). paddings_number Symbol combination multiplier. Usage \u00b6 You can place csv data in csvtable tag. <csvtable> Header 1;Header 2;Header 3;Header 4;Header 5 Datum 1;Datum 2;Datum 3;Datum 4;Datum 5 Datum 6;Datum 7;Datum 8;Datum 9;Datum 10 </csvtable> Or in external file.csv . <csvtable src=\"table.csv\"></csvtable> You can reassign setting for certain csv tables. <csvtable delimiter=\":\" padding_symbol=\" *\"> Header 1:Header 2:Header 3:Header 4:Header 5 Datum 1:Datum 2:Datum 3:Datum 4:Datum 5 Datum 6:Datum 7:Datum 8:Datum 9:Datum 10 </csvtable> Example \u00b6 Usage section will be converted to this: You can place csv data in csvtable tag. | Header 1 | Header 2 | Header 3 | Header 4 | Header 5 | |----------|----------|----------|----------|----------| | Datum 1 | Datum 2 | Datum 3 | Datum 4 | Datum 5 | | Datum 6 | Datum 7 | Datum 8 | Datum 9 | Datum 10 | Or in external file.csv . | Header 1 | Header 2 | Header 3 | Header 4 | Header 5 | |----------|----------|----------|----------|----------| | Datum 1 | Datum 2 | Datum 3 | Datum 4 | Datum 5 | | Datum 6 | Datum 7 | Datum 8 | Datum 9 | Datum 10 | You can reassign setting for certain csv tables. | *Header 1* | *Header 2* | *Header 3* | *Header 4* | *Header 5* | |------------|------------|------------|------------|------------| | *Datum 1* | *Datum 2* | *Datum 3* | *Datum 4* | *Datum 5* | | *Datum 6* | *Datum 7* | *Datum 8* | *Datum 9* | *Datum 10* |","title":"CSVTables"},{"location":"preprocessors/csvtables/#csvtables","text":"","title":"CSVTables"},{"location":"preprocessors/csvtables/#csvtables-for-foliant","text":"This preprocessor converts csv data to markdown tables.","title":"CSVTables for Foliant"},{"location":"preprocessors/csvtables/#installation","text":"$ pip install foliantcontrib.csvtables","title":"Installation"},{"location":"preprocessors/csvtables/#config","text":"To enable the preprocessor with default options, add csvtables to preprocessors section in the project config: preprocessors : - csvtables The preprocessor has a number of options (default values stated below): preprocessors : - csvtables : delimiter : ';' padding_symbol : ' ' paddings_number : 1 delimiter Delimiter of csv data. padding_symbol Symbol combination that will be places around datum (reversed on the right side). paddings_number Symbol combination multiplier.","title":"Config"},{"location":"preprocessors/csvtables/#usage","text":"You can place csv data in csvtable tag. <csvtable> Header 1;Header 2;Header 3;Header 4;Header 5 Datum 1;Datum 2;Datum 3;Datum 4;Datum 5 Datum 6;Datum 7;Datum 8;Datum 9;Datum 10 </csvtable> Or in external file.csv . <csvtable src=\"table.csv\"></csvtable> You can reassign setting for certain csv tables. <csvtable delimiter=\":\" padding_symbol=\" *\"> Header 1:Header 2:Header 3:Header 4:Header 5 Datum 1:Datum 2:Datum 3:Datum 4:Datum 5 Datum 6:Datum 7:Datum 8:Datum 9:Datum 10 </csvtable>","title":"Usage"},{"location":"preprocessors/csvtables/#example","text":"Usage section will be converted to this: You can place csv data in csvtable tag. | Header 1 | Header 2 | Header 3 | Header 4 | Header 5 | |----------|----------|----------|----------|----------| | Datum 1 | Datum 2 | Datum 3 | Datum 4 | Datum 5 | | Datum 6 | Datum 7 | Datum 8 | Datum 9 | Datum 10 | Or in external file.csv . | Header 1 | Header 2 | Header 3 | Header 4 | Header 5 | |----------|----------|----------|----------|----------| | Datum 1 | Datum 2 | Datum 3 | Datum 4 | Datum 5 | | Datum 6 | Datum 7 | Datum 8 | Datum 9 | Datum 10 | You can reassign setting for certain csv tables. | *Header 1* | *Header 2* | *Header 3* | *Header 4* | *Header 5* | |------------|------------|------------|------------|------------| | *Datum 1* | *Datum 2* | *Datum 3* | *Datum 4* | *Datum 5* | | *Datum 6* | *Datum 7* | *Datum 8* | *Datum 9* | *Datum 10* |","title":"Example"},{"location":"preprocessors/customids/","tags":["preprocessor","markdown"],"text":"CustomIDs \u00b6 \u0421ustomIDs \u00b6 CustomIDs is a preprocessor that allows to define custom identifiers (IDs) for headings in Markdown source by using Pandoc-style syntax in projects built with MkDocs or another backend that provides HTML output. These IDs may be used in hyperlinks that refer to a specific part of a page. Installation \u00b6 $ pip install foliantcontrib.customids Usage \u00b6 To enable the preprocessor, add customids to preprocessors section in the project config: preprocessors : - customids The preprocessor supports the following options: - customids : stylesheet_path : !path customids.css targets : - pre - mkdocs - site - ghp stylesheet_path Path to the CSS stylesheet file. This stylesheet should define rules for .custom_id_anchor_container , .custom_id_anchor_container_level_N , .custom_id_anchor , and .custom_id_anchor_level_N classes. Here N is the heading level ( 1 to 6 ). Default path is customids.css . If stylesheet file does not exist, default built-in stylesheet will be used. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Custom ID may be specified after a heading content at the same line. Examples of Markdown syntax: # First Heading {#custom_id_for_first_heading} A paragraph. ## Second Heading {#custom_id_for_second_heading} Some another paragraph. This Markdown source will be finally transformed into the HTML code: < div class = \"custom_id_anchor_container custom_id_anchor_container_level_1\" >< div id = \"custom_id_for_first_heading\" class = \"custom_id_anchor custom_id_anchor_level_1\" ></ div ></ div > < h1 > First Heading </ h1 > < p > A paragraph. </ p > < div class = \"custom_id_anchor_container custom_id_anchor_container_level_2\" >< div id = \"custom_id_for_second_heading\" class = \"custom_id_anchor custom_id_anchor_level_2\" ></ div ></ div > < h2 > Second Heading </ h2 > < p > Some another paragraph. </ p > (Note that CustomIDs preprocessor does not convert Markdown syntax into HTML; it only inserts HTML tags <div class=\"custom_id_anchor_container\">...</div> into Markdown code.) Custom IDs must not contain spaces and non-ASCII characters. Examples of hyperlinks that refer to custom IDs: [ Link to Heading 1 ]( #custom_id_for_first_heading ) [ Link to Heading 2 in some document at the current site ]( /some/page/#custom_id_for_second_heading ) [ Link to some heading with custom ID at an external site ]( https://some.site/path/to/the/page/#some_custom_id )","title":"CustomIDs"},{"location":"preprocessors/customids/#customids","text":"","title":"CustomIDs"},{"location":"preprocessors/customids/#ustomids","text":"CustomIDs is a preprocessor that allows to define custom identifiers (IDs) for headings in Markdown source by using Pandoc-style syntax in projects built with MkDocs or another backend that provides HTML output. These IDs may be used in hyperlinks that refer to a specific part of a page.","title":"\u0421ustomIDs"},{"location":"preprocessors/customids/#installation","text":"$ pip install foliantcontrib.customids","title":"Installation"},{"location":"preprocessors/customids/#usage","text":"To enable the preprocessor, add customids to preprocessors section in the project config: preprocessors : - customids The preprocessor supports the following options: - customids : stylesheet_path : !path customids.css targets : - pre - mkdocs - site - ghp stylesheet_path Path to the CSS stylesheet file. This stylesheet should define rules for .custom_id_anchor_container , .custom_id_anchor_container_level_N , .custom_id_anchor , and .custom_id_anchor_level_N classes. Here N is the heading level ( 1 to 6 ). Default path is customids.css . If stylesheet file does not exist, default built-in stylesheet will be used. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Custom ID may be specified after a heading content at the same line. Examples of Markdown syntax: # First Heading {#custom_id_for_first_heading} A paragraph. ## Second Heading {#custom_id_for_second_heading} Some another paragraph. This Markdown source will be finally transformed into the HTML code: < div class = \"custom_id_anchor_container custom_id_anchor_container_level_1\" >< div id = \"custom_id_for_first_heading\" class = \"custom_id_anchor custom_id_anchor_level_1\" ></ div ></ div > < h1 > First Heading </ h1 > < p > A paragraph. </ p > < div class = \"custom_id_anchor_container custom_id_anchor_container_level_2\" >< div id = \"custom_id_for_second_heading\" class = \"custom_id_anchor custom_id_anchor_level_2\" ></ div ></ div > < h2 > Second Heading </ h2 > < p > Some another paragraph. </ p > (Note that CustomIDs preprocessor does not convert Markdown syntax into HTML; it only inserts HTML tags <div class=\"custom_id_anchor_container\">...</div> into Markdown code.) Custom IDs must not contain spaces and non-ASCII characters. Examples of hyperlinks that refer to custom IDs: [ Link to Heading 1 ]( #custom_id_for_first_heading ) [ Link to Heading 2 in some document at the current site ]( /some/page/#custom_id_for_second_heading ) [ Link to some heading with custom ID at an external site ]( https://some.site/path/to/the/page/#some_custom_id )","title":"Usage"},{"location":"preprocessors/dbdoc/","tags":["preprocessor","database"],"text":"DBDoc \u00b6 Database Documentation Generator for Foliant \u00b6 Static site on the picture was built with Slate backend together with DBDoc preprocessor This preprocessor generates simple documentation based on the structure of the database. It uses Jinja2 templating engine for customizing the layout and PlantUML for drawing the database scheme. Currently supported databases: PostgreSQL , Oracle , Microsoft SQL Server , MySQL . Important Notice : We, here at Foliant, don't work with all of the databases mentioned above. That's why we cannot thoroughly test the preprocessor's work with all of them. That's where we need your help: If you encounter any errors during build; if you are not getting enough information for your document in the template; if you can't make the filters work; or if you see any other anomaly, please send us an issue in GitHub. We will try to fix it as fast as we can. Thanks! Installation \u00b6 Prerequisites \u00b6 DBDoc generates documentation by querying database structure. That's why you will need client libraries and their Python connectors installed on your computer before running the preprocessor. PostgreSQL To install PostgreSQL simply run $ pip3 install psycopg2-binary Oracle Oracle libraries are proprietary, so we cannot include them even in our Docker distribution . So if you are planning on using DBDoc to document Oracle databases, first install the Instant Client . If you search the web, you can find ways to install Oracle Instant Client inside your Docker image, just saying. Next install the Python connector for Oracle database $ pip3 install cx_Oracle Microsoft SQL Server On Windows you will need to install MS SQL Server. On Unix you will first need to install unixODBC , and then \u2014 the ODBC driver. Microsoft has a detailed instructions on how to install the driver on Linux and on Mac . Install the Python connector for Microsoft SQL Server database $ pip3 install pyodbc MySQL On Mac you can simply run $ brew install mysql On Linux you will have to install server and client packages, for example, with apt-get sudo apt-get update sudo apt-get install -y mysql-server libmysqlclient-dev Finally, install the Python connector for Microsoft SQL Server database $ pip3 install mysqlclient Preprocessor \u00b6 $ pip install foliantcontrib.dbdoc Config \u00b6 To enable the preprocessor, add dbdoc to preprocessors section in the project config: preprocessors : - dbdoc The preprocessor has a number of options: preprocessors : - dbdoc : dbms : pgsql host : localhost port : 5432 dbname : postgres user : postgres password : !env DBDOC_PASS doc : True scheme : True filters : ... doc_template : dbdoc.j2 scheme_template : scheme.j2 components : - tables - functions - triggers driver : '{ODBC Driver 17 for SQL Server}' dbms Name of the DBMS. Should be one of: pgsql , oracle , sqlserver , mysql . Only needed if you are using <dbdoc> tag. If you are using explicit tags ( <oracle> , <pgsql> ), this parameter is ignored. host Database host address. Default: localhost port Database port. Default: 5432 for pgsql, 1521 for Oracle, 1433 for MS SQL, 3306 for MySQL. dbname Database name. Default: postgres for pgsql, orcl for oracle, mssql for MS SQL, mysql for MySQL. user Database user name. Default: postgres for pgsql, hr for oracle, SA for MS SQL, root for MySQL. password Database user password. Default: postgres for pgsql, oracle for oracle, <YourStrong@Passw0rd> for MS SQL, passwd for MySQL. It is not secure to store plain text passwords in your config files. We recommend to use environment variables to supply passwords doc If true \u2014 documentation will be generated. Set to false if you only want to draw a scheme of the database. Default: true scheme If true \u2014 the platuml code for database scheme will be generated. Default: true filters SQL-like operators for filtering the results. More info in the Filters section. doc_template Path to jinja-template for documentation. Path is relative to the project directory. If not supplied \u2014 default template would be used. scheme_template Path to jinja-template for scheme. Path is relative to the project directory. If not supplied \u2014 default template would be used. components List of components to be added to documentation. If not supplied \u2014 everything will be added. Use to exclude some parts of documentation. Available components: 'tables' , 'views' , 'functions' , 'triggers' . driver Specific option for MS SQL Server database. Defines the driver connection string. Default: {ODBC Driver 17 for SQL Server} . Usage \u00b6 DBDoc currently supports four database engines: Oracle, PostgreSQL, MySQL and Microsoft SQL Server. To generate Oracle database documentation, add an <oracle></oracle> tag to a desired place of your chapter. # Introduction This document contains the most awesome automatically generated documentation of our marvellous Oracle database. < oracle ></ oracle > To generate PostgreSQL database documentation, add a <pgsql></pgsql> tag to a desired place of your chapter. # Introduction This document contains the most awesome automatically generated documentation of our marvellous Oracle database. < pgsql ></ pgsql > To generate MySQL database documentation, add a <mysql></mysql> tag to a desired place of your chapter. # Introduction This document contains the most awesome automatically generated documentation of our marvellous SQL Server database. < mysql ></ mysql > To generate SQL Server database documentation, add a <sqlserver></sqlserver> tag to a desired place of your chapter. # Introduction This document contains the most awesome automatically generated documentation of our marvellous SQL Server database. < sqlserver ></ sqlserver > Each time the preprocessor encounters one of the mentioned tags, it inserts the whole generated documentation text instead of it. The connection parameters are taken from the config-file. You can also specify some parameters (or all of them) in the tag options: # Introduction Introduction text for database documentation. < oracle scheme = \"true\" doc = \"false\" host = \"11.51.126.8\" port = \"1521\" dbname = \"mydb\" user = \"scott\" password = \"tiger\" > </ oracle > Tag parameters have the highest priority. This way you can have documentation for several different databases in one foliant project (even in one md-file if you like it so). It also allows you to put documentation and scheme for you database separately by switching on/off doc and scheme params in tags. Filters \u00b6 You can add filters to exclude some tables from the documentation. dbdocs supports several SQL-like filtering operators and a determined list of filtering fields. You can switch on filters either in foliant.yml file like this: preprocessors : - dbdoc : filters : eq : schema : public regex : table_name : 'main_.+' or in tag options using the same yaml-syntax: < pgsql filters = \" eq: schema: public regex: table_name: 'main_.+'\" > </ pgsql > List of currently supported operators: operator SQL equivalent description value eq = equals literal not_eq != does not equal literal in IN contains list not_in NOT IN does not contain list regex ~ , REGEX_LIKE matches regular expression literal not_regex !~ , NOT REGEX_LIKE does not match regular expression literal Note: regex and not_regex are not supported with Microsoft SQL Server DBMS. List of currently supported filtering fields: field description schema filter by database schema table_name filter by database table names The syntax for using filters in configuration files is following: filters : <operator> : <field> : value If value should be list like for in operator, use YAML-lists instead: filters : in : schema : - public - corp About Templates \u00b6 The structure of generated documentation is defined by jinja-templates. You can choose what elements will appear in the documentation, change their positions, add constant text, change layouts and more. Check the Jinja documentation for info on all cool things you can do with templates. If you don't specify path to templates in the config-file and tag-options dbdoc will use default templates. If you wish to create your own template, the default ones may be a good starting point. Default Oracle doc template. Default Oracle scheme template. Default PostgreSQL doc template. Default PostgreSQL scheme template. Default MySQL doc template. Default MySQL scheme template. Default SQL Server doc template. Default SQL Server scheme template. Troubleshooting \u00b6 If you get errors during build, especially errors concerning connection to the database, you have to make sure that you are supplying the right parameters. There may be a lot of possible causes for errors. For example, MS SQL Server may fail to connect to local database if you specify host as localhost , you have to explicitly write 0.0.0.0 or 127.0.0.1 . So your first action to root the source of your errors should be running a python console and trying to connect to your database manually. Here are sample snippets on how to connect to different databases. PostgreSQL psycopg2 library is required. import psycopg2 con = psycopg2 . connect ( \"host=localhost \" \"port=5432 \" \"dbname=MyDatabase \" \"user=postgres\" \"password=postgres\" ) Oracle cx_Oracle library is required. import cx_Oracle con = cx_Oracle . connect ( \"Scott/Tiger@localhost:1521/MyDatabase\" encoding = 'UTF-8' , nencoding = 'UTF-8' ) MySQL mysqlclient library is required. from MySQLdb import _mysql con = _mysql . connect ( host = 'localhost' , port = 3306 , user = 'root' , passwd = 'password' , db = 'MyDatabase' ) Microsoft SQL Server pyodbc library is required. import pyodbc con = pyodbc . connect ( \"DRIVER={ODBC Driver 17 for SQL Server};\" \"SERVER=0.0.0.0,1433;\" \"DATABASE=MyDatabase;\" \"UID=Usernam;PWD=Password_0\" )","title":"DBDoc"},{"location":"preprocessors/dbdoc/#dbdoc","text":"","title":"DBDoc"},{"location":"preprocessors/dbdoc/#database-documentation-generator-for-foliant","text":"Static site on the picture was built with Slate backend together with DBDoc preprocessor This preprocessor generates simple documentation based on the structure of the database. It uses Jinja2 templating engine for customizing the layout and PlantUML for drawing the database scheme. Currently supported databases: PostgreSQL , Oracle , Microsoft SQL Server , MySQL . Important Notice : We, here at Foliant, don't work with all of the databases mentioned above. That's why we cannot thoroughly test the preprocessor's work with all of them. That's where we need your help: If you encounter any errors during build; if you are not getting enough information for your document in the template; if you can't make the filters work; or if you see any other anomaly, please send us an issue in GitHub. We will try to fix it as fast as we can. Thanks!","title":"Database Documentation Generator for Foliant"},{"location":"preprocessors/dbdoc/#installation","text":"","title":"Installation"},{"location":"preprocessors/dbdoc/#prerequisites","text":"DBDoc generates documentation by querying database structure. That's why you will need client libraries and their Python connectors installed on your computer before running the preprocessor. PostgreSQL To install PostgreSQL simply run $ pip3 install psycopg2-binary Oracle Oracle libraries are proprietary, so we cannot include them even in our Docker distribution . So if you are planning on using DBDoc to document Oracle databases, first install the Instant Client . If you search the web, you can find ways to install Oracle Instant Client inside your Docker image, just saying. Next install the Python connector for Oracle database $ pip3 install cx_Oracle Microsoft SQL Server On Windows you will need to install MS SQL Server. On Unix you will first need to install unixODBC , and then \u2014 the ODBC driver. Microsoft has a detailed instructions on how to install the driver on Linux and on Mac . Install the Python connector for Microsoft SQL Server database $ pip3 install pyodbc MySQL On Mac you can simply run $ brew install mysql On Linux you will have to install server and client packages, for example, with apt-get sudo apt-get update sudo apt-get install -y mysql-server libmysqlclient-dev Finally, install the Python connector for Microsoft SQL Server database $ pip3 install mysqlclient","title":"Prerequisites"},{"location":"preprocessors/dbdoc/#preprocessor","text":"$ pip install foliantcontrib.dbdoc","title":"Preprocessor"},{"location":"preprocessors/dbdoc/#config","text":"To enable the preprocessor, add dbdoc to preprocessors section in the project config: preprocessors : - dbdoc The preprocessor has a number of options: preprocessors : - dbdoc : dbms : pgsql host : localhost port : 5432 dbname : postgres user : postgres password : !env DBDOC_PASS doc : True scheme : True filters : ... doc_template : dbdoc.j2 scheme_template : scheme.j2 components : - tables - functions - triggers driver : '{ODBC Driver 17 for SQL Server}' dbms Name of the DBMS. Should be one of: pgsql , oracle , sqlserver , mysql . Only needed if you are using <dbdoc> tag. If you are using explicit tags ( <oracle> , <pgsql> ), this parameter is ignored. host Database host address. Default: localhost port Database port. Default: 5432 for pgsql, 1521 for Oracle, 1433 for MS SQL, 3306 for MySQL. dbname Database name. Default: postgres for pgsql, orcl for oracle, mssql for MS SQL, mysql for MySQL. user Database user name. Default: postgres for pgsql, hr for oracle, SA for MS SQL, root for MySQL. password Database user password. Default: postgres for pgsql, oracle for oracle, <YourStrong@Passw0rd> for MS SQL, passwd for MySQL. It is not secure to store plain text passwords in your config files. We recommend to use environment variables to supply passwords doc If true \u2014 documentation will be generated. Set to false if you only want to draw a scheme of the database. Default: true scheme If true \u2014 the platuml code for database scheme will be generated. Default: true filters SQL-like operators for filtering the results. More info in the Filters section. doc_template Path to jinja-template for documentation. Path is relative to the project directory. If not supplied \u2014 default template would be used. scheme_template Path to jinja-template for scheme. Path is relative to the project directory. If not supplied \u2014 default template would be used. components List of components to be added to documentation. If not supplied \u2014 everything will be added. Use to exclude some parts of documentation. Available components: 'tables' , 'views' , 'functions' , 'triggers' . driver Specific option for MS SQL Server database. Defines the driver connection string. Default: {ODBC Driver 17 for SQL Server} .","title":"Config"},{"location":"preprocessors/dbdoc/#usage","text":"DBDoc currently supports four database engines: Oracle, PostgreSQL, MySQL and Microsoft SQL Server. To generate Oracle database documentation, add an <oracle></oracle> tag to a desired place of your chapter. # Introduction This document contains the most awesome automatically generated documentation of our marvellous Oracle database. < oracle ></ oracle > To generate PostgreSQL database documentation, add a <pgsql></pgsql> tag to a desired place of your chapter. # Introduction This document contains the most awesome automatically generated documentation of our marvellous Oracle database. < pgsql ></ pgsql > To generate MySQL database documentation, add a <mysql></mysql> tag to a desired place of your chapter. # Introduction This document contains the most awesome automatically generated documentation of our marvellous SQL Server database. < mysql ></ mysql > To generate SQL Server database documentation, add a <sqlserver></sqlserver> tag to a desired place of your chapter. # Introduction This document contains the most awesome automatically generated documentation of our marvellous SQL Server database. < sqlserver ></ sqlserver > Each time the preprocessor encounters one of the mentioned tags, it inserts the whole generated documentation text instead of it. The connection parameters are taken from the config-file. You can also specify some parameters (or all of them) in the tag options: # Introduction Introduction text for database documentation. < oracle scheme = \"true\" doc = \"false\" host = \"11.51.126.8\" port = \"1521\" dbname = \"mydb\" user = \"scott\" password = \"tiger\" > </ oracle > Tag parameters have the highest priority. This way you can have documentation for several different databases in one foliant project (even in one md-file if you like it so). It also allows you to put documentation and scheme for you database separately by switching on/off doc and scheme params in tags.","title":"Usage"},{"location":"preprocessors/dbdoc/#filters","text":"You can add filters to exclude some tables from the documentation. dbdocs supports several SQL-like filtering operators and a determined list of filtering fields. You can switch on filters either in foliant.yml file like this: preprocessors : - dbdoc : filters : eq : schema : public regex : table_name : 'main_.+' or in tag options using the same yaml-syntax: < pgsql filters = \" eq: schema: public regex: table_name: 'main_.+'\" > </ pgsql > List of currently supported operators: operator SQL equivalent description value eq = equals literal not_eq != does not equal literal in IN contains list not_in NOT IN does not contain list regex ~ , REGEX_LIKE matches regular expression literal not_regex !~ , NOT REGEX_LIKE does not match regular expression literal Note: regex and not_regex are not supported with Microsoft SQL Server DBMS. List of currently supported filtering fields: field description schema filter by database schema table_name filter by database table names The syntax for using filters in configuration files is following: filters : <operator> : <field> : value If value should be list like for in operator, use YAML-lists instead: filters : in : schema : - public - corp","title":"Filters"},{"location":"preprocessors/dbdoc/#about-templates","text":"The structure of generated documentation is defined by jinja-templates. You can choose what elements will appear in the documentation, change their positions, add constant text, change layouts and more. Check the Jinja documentation for info on all cool things you can do with templates. If you don't specify path to templates in the config-file and tag-options dbdoc will use default templates. If you wish to create your own template, the default ones may be a good starting point. Default Oracle doc template. Default Oracle scheme template. Default PostgreSQL doc template. Default PostgreSQL scheme template. Default MySQL doc template. Default MySQL scheme template. Default SQL Server doc template. Default SQL Server scheme template.","title":"About Templates"},{"location":"preprocessors/dbdoc/#troubleshooting","text":"If you get errors during build, especially errors concerning connection to the database, you have to make sure that you are supplying the right parameters. There may be a lot of possible causes for errors. For example, MS SQL Server may fail to connect to local database if you specify host as localhost , you have to explicitly write 0.0.0.0 or 127.0.0.1 . So your first action to root the source of your errors should be running a python console and trying to connect to your database manually. Here are sample snippets on how to connect to different databases. PostgreSQL psycopg2 library is required. import psycopg2 con = psycopg2 . connect ( \"host=localhost \" \"port=5432 \" \"dbname=MyDatabase \" \"user=postgres\" \"password=postgres\" ) Oracle cx_Oracle library is required. import cx_Oracle con = cx_Oracle . connect ( \"Scott/Tiger@localhost:1521/MyDatabase\" encoding = 'UTF-8' , nencoding = 'UTF-8' ) MySQL mysqlclient library is required. from MySQLdb import _mysql con = _mysql . connect ( host = 'localhost' , port = 3306 , user = 'root' , passwd = 'password' , db = 'MyDatabase' ) Microsoft SQL Server pyodbc library is required. import pyodbc con = pyodbc . connect ( \"DRIVER={ODBC Driver 17 for SQL Server};\" \"SERVER=0.0.0.0,1433;\" \"DATABASE=MyDatabase;\" \"UID=Usernam;PWD=Password_0\" )","title":"Troubleshooting"},{"location":"preprocessors/dbmldoc/","tags":["preprocessor","database"],"text":"DBMLDoc \u00b6 DBML Docs Generator for Foliant \u00b6 This preprocessor generates Markdown documentation from DBML specification files . It uses PyDBML for parsing DBML syntax and Jinja2 templating engine for generating Markdown. Installation \u00b6 $ pip install foliantcontrib.dbmldoc Config \u00b6 To enable the preprocessor, add dbmldoc to preprocessors section in the project config: preprocessors : - dbmldoc The preprocessor has a number of options: preprocessors : - dbmldoc : spec_url : http://localhost/scheme.dbml spec_path : scheme.dbml doc : true scheme : true template : dbml.j2 scheme_template : scheme.j2 spec_url URL to DBML spec file. If it is a list \u2014 preprocessor uses the first url which works. spec_path Local path to DBML spec file (relative to project dir). If both url and path params are specified \u2014 preprocessor first tries to fetch spec from url, and only if that fails looks for the file on the local path. doc If true \u2014 documentation will be generated. Set to false if you only want to draw a scheme of the database. Default true scheme If true \u2014 the platuml code for database scheme will be generated. Default true template Path to jinja-template for rendering the generated documentation. Path is relative to the project directory. If no template is specified preprocessor will use default template (and put it into project dir if it was missing). Default: dbml.j2 Note that the default template may be outdated. Please check if everything works, and if needed \u2014 update the template. scheme_template Path to jinja-template for generating planuml code for the database scheme. Path is relative to the project directory. If no template is specified preprocessor will use default template (and put it into project dir if it was missing). Default: scheme.j2 Usage \u00b6 Add a <dbmldoc></dbmldoc> tag at the position in the document where the generated documentation should be inserted: # Introduction This document contains the automatically generated documentation of our Database schema. < dbmldoc ></ dbmldoc > Each time the preprocessor encounters the tag <dbmldoc></dbmldoc> it inserts the whole generated documentation text instead of it. The path or url to DBML spec file is taken from foliant.yml. You can also override some parameters (or all of them) in the tag options: # Introduction Introduction text for API documentation. <dbmldoc spec_url=\"http://localhost/schema.dbml\" template=\"dbml.j2\" scheme=\"false\"> </dbmldoc> # Database scheme And here goes a visual diagram of our database: <dbmldoc doc=\"false\" scheme=\"true\"> </dbmldoc> Note that template path in tag is stated relative to the markdown file . Tag parameters have the highest priority. This way you can put your database description in one place and its diagram in the other (like in the example above). Or you can even have documentation from several different DBML spec files in one Foliant project. Customizing output \u00b6 The output markdown is generated by the Jinja2 template. Inside the template all data from the parsed DBML file is available under the data variable. It is in fact a PyDBMLParseResults object, as returned by PyDBML (see the docs to find out which attributes are available). To customize the output create a template which suits your needs. Then supply the path to it in the template parameter. Same goes for the scheme template, which is defined in the scheme_template parameter. If you wish to use the default template as a starting point, build the foliant project with dbmldoc preprocessor turned on. After the first build the default templates will appear in your foliant project dir under the names dbml.j2 and scheme.j2 .","title":"DBMLDoc"},{"location":"preprocessors/dbmldoc/#dbmldoc","text":"","title":"DBMLDoc"},{"location":"preprocessors/dbmldoc/#dbml-docs-generator-for-foliant","text":"This preprocessor generates Markdown documentation from DBML specification files . It uses PyDBML for parsing DBML syntax and Jinja2 templating engine for generating Markdown.","title":"DBML Docs Generator for Foliant"},{"location":"preprocessors/dbmldoc/#installation","text":"$ pip install foliantcontrib.dbmldoc","title":"Installation"},{"location":"preprocessors/dbmldoc/#config","text":"To enable the preprocessor, add dbmldoc to preprocessors section in the project config: preprocessors : - dbmldoc The preprocessor has a number of options: preprocessors : - dbmldoc : spec_url : http://localhost/scheme.dbml spec_path : scheme.dbml doc : true scheme : true template : dbml.j2 scheme_template : scheme.j2 spec_url URL to DBML spec file. If it is a list \u2014 preprocessor uses the first url which works. spec_path Local path to DBML spec file (relative to project dir). If both url and path params are specified \u2014 preprocessor first tries to fetch spec from url, and only if that fails looks for the file on the local path. doc If true \u2014 documentation will be generated. Set to false if you only want to draw a scheme of the database. Default true scheme If true \u2014 the platuml code for database scheme will be generated. Default true template Path to jinja-template for rendering the generated documentation. Path is relative to the project directory. If no template is specified preprocessor will use default template (and put it into project dir if it was missing). Default: dbml.j2 Note that the default template may be outdated. Please check if everything works, and if needed \u2014 update the template. scheme_template Path to jinja-template for generating planuml code for the database scheme. Path is relative to the project directory. If no template is specified preprocessor will use default template (and put it into project dir if it was missing). Default: scheme.j2","title":"Config"},{"location":"preprocessors/dbmldoc/#usage","text":"Add a <dbmldoc></dbmldoc> tag at the position in the document where the generated documentation should be inserted: # Introduction This document contains the automatically generated documentation of our Database schema. < dbmldoc ></ dbmldoc > Each time the preprocessor encounters the tag <dbmldoc></dbmldoc> it inserts the whole generated documentation text instead of it. The path or url to DBML spec file is taken from foliant.yml. You can also override some parameters (or all of them) in the tag options: # Introduction Introduction text for API documentation. <dbmldoc spec_url=\"http://localhost/schema.dbml\" template=\"dbml.j2\" scheme=\"false\"> </dbmldoc> # Database scheme And here goes a visual diagram of our database: <dbmldoc doc=\"false\" scheme=\"true\"> </dbmldoc> Note that template path in tag is stated relative to the markdown file . Tag parameters have the highest priority. This way you can put your database description in one place and its diagram in the other (like in the example above). Or you can even have documentation from several different DBML spec files in one Foliant project.","title":"Usage"},{"location":"preprocessors/dbmldoc/#customizing-output","text":"The output markdown is generated by the Jinja2 template. Inside the template all data from the parsed DBML file is available under the data variable. It is in fact a PyDBMLParseResults object, as returned by PyDBML (see the docs to find out which attributes are available). To customize the output create a template which suits your needs. Then supply the path to it in the template parameter. Same goes for the scheme template, which is defined in the scheme_template parameter. If you wish to use the default template as a starting point, build the foliant project with dbmldoc preprocessor turned on. After the first build the default templates will appear in your foliant project dir under the names dbml.j2 and scheme.j2 .","title":"Customizing output"},{"location":"preprocessors/elasticsearch/","tags":["preprocessor","search"],"text":"Elasticsearch \u00b6 This extension allows to integrate Foliant-managed documentation projects with Elasticsearch search engine. The main part of this extension is a preprocessor that prepares data for a search index. Also this extension provides a simple working example of a client-side Web application that may be used to perform searching. By editing HTML, CSS and JS code you may customize it according to your needs. Installation \u00b6 To install the preprocessor, run the command: $ pip install foliantcontrib.elasticsearch To use an example of a client-side Web application for searching, download these HTML, CSS, and JS files and open the file index.html in your Web browser. Config \u00b6 To enable the preprocessor, add elasticsearch to preprocessors section in the project config: preprocessors : - elasticsearch The preprocessor has a number of options with the following default values: preprocessors : - elasticsearch : es_url : 'http://127.0.0.1:9200/' index_name : '' index_copy_name : '' index_properties : {} actions : - delete - create use_chapters : true format : plaintext escape_html : true url_transform : - '\\/?index\\.md$' : '/' - '\\.md$' : '/' - '^([^\\/]+)' : '/\\g<1>' require_env : false targets : [] es_url Elasticsearch API URL. index_name Name of the index. Your index must have an explicitly specified name, otherwise (by default) API URL will be invalid. index_copy_name Name of the index copy when the copy action is used; see below. If the index_copy_name is not set explicitly, and if the index_name is specified, the index_copy_name value will be formed as the index_name value with the _copy string appended to the end. index_properties Settings and other properties that should be used when creating an index. If not specified (by default), the default Elasticsearch settings will be used. More details are described below. actions Sequence of actions that the preprocessor should to perform. Available item values are: delete , create , copy . By default, the actions delete and create are performed since in most cases it\u2019s needed to remove and then fully rebuild the index. The copy action is used to duplicate an index, i.e to create a copy of the index index_name with the name index_copy_name . This action may be useful when a common search index is created for multiple Foliant projects, and the index may remain incomplete during for a long time during their building. The copy action is not atomic. To perform it, the preprocessor: marks the source index index_name as read-only; deletes the target index index_copy_name if it exists; clones the source index index_name and thereby creates the target index index_copy_name ; unmarks the source index index_name as read-only; also unmarks the target index index_copy_name as read-only, since the target index inherits the settings of the source one. use_chapters If set to true (by default), the preprocessor applies only to the files that are mentioned in the chapters section of the project config. Otherwise, the preprocessor applies to all of the files of the project. format Format that the source Markdown content should be converted to before adding to the index; available values are: plaintext (by default), html , markdown (for no conversion). escape_html If set to true (by default), HTML syntax constructions in the content converted to plaintext will be escaped by replacing & with &amp; , < with &lt; , > with &gt; , and \" with &quot; . url_transform Sequence of rules to transform local paths of source Markdown files into URLs of target pages. Each rule should be a dictionary. Its data is passed to the re.sub() method : key as the pattern argument, and value as the repl argument. The local path (possibly previously transformed) to the source Markdown file relative to the temporary working directory is passed as the string argument. The default value of the url_transform option is designed to be used to build static websites with MkDocs backend. require_env If set to true , the FOLIANT_ELASTICSEARCH environment variable must be set to allow the preprocessor to perform any operations with Elasticsearch index. This flag may be useful in CI/CD jobs. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Usage \u00b6 The preprocessor reads each source Markdown file and generates three fields for indexing: url \u2014target page URL; title \u2014document title, it\u2019s taken from the first heading of source Markdown content; content \u2014source Markdown content, optionally converted into plain text or HTML. When all the files are processed, the preprocessor calls Elasticsearch API to create the index. Optionally the preprocessor may call Elasticsearch API to delete previously created index. By using the index_properties option, you may override the default Elasticsearch settings when creating an index. Below is an example of JSON-formatted value of the index_properties option to create an index with Russian morphology analysis: { \"settings\" : { \"analysis\" : { \"filter\" : { \"ru_stop\" : { \"type\" : \"stop\" , \"stopwords\" : \"_russian_\" }, \"ru_stemmer\" : { \"type\" : \"stemmer\" , \"language\" : \"russian\" } }, \"analyzer\" : { \"default\" : { \"tokenizer\" : \"standard\" , \"filter\" : [ \"lowercase\" , \"ru_stop\" , \"ru_stemmer\" ] } } } } } You may perform custom search requests to Elasticsearch API. The simple client-side Web application example that is provided as a part of this extension, performs requests like this: { \"query\" : { \"multi_match\" : { \"query\" : \"foliant\" , \"type\" : \"phrase_prefix\" , \"fields\" : [ \"title^3\" , \"content\" ] } }, \"highlight\" : { \"fields\" : { \"content\" : {} } }, \"size\" : 50 } Search results may look like that: If you use self-hosted instance of Elasticsearch, you may need to configure it to append CORS headers to HTTP API responses.","title":"Elasticsearch"},{"location":"preprocessors/elasticsearch/#elasticsearch","text":"This extension allows to integrate Foliant-managed documentation projects with Elasticsearch search engine. The main part of this extension is a preprocessor that prepares data for a search index. Also this extension provides a simple working example of a client-side Web application that may be used to perform searching. By editing HTML, CSS and JS code you may customize it according to your needs.","title":"Elasticsearch"},{"location":"preprocessors/elasticsearch/#installation","text":"To install the preprocessor, run the command: $ pip install foliantcontrib.elasticsearch To use an example of a client-side Web application for searching, download these HTML, CSS, and JS files and open the file index.html in your Web browser.","title":"Installation"},{"location":"preprocessors/elasticsearch/#config","text":"To enable the preprocessor, add elasticsearch to preprocessors section in the project config: preprocessors : - elasticsearch The preprocessor has a number of options with the following default values: preprocessors : - elasticsearch : es_url : 'http://127.0.0.1:9200/' index_name : '' index_copy_name : '' index_properties : {} actions : - delete - create use_chapters : true format : plaintext escape_html : true url_transform : - '\\/?index\\.md$' : '/' - '\\.md$' : '/' - '^([^\\/]+)' : '/\\g<1>' require_env : false targets : [] es_url Elasticsearch API URL. index_name Name of the index. Your index must have an explicitly specified name, otherwise (by default) API URL will be invalid. index_copy_name Name of the index copy when the copy action is used; see below. If the index_copy_name is not set explicitly, and if the index_name is specified, the index_copy_name value will be formed as the index_name value with the _copy string appended to the end. index_properties Settings and other properties that should be used when creating an index. If not specified (by default), the default Elasticsearch settings will be used. More details are described below. actions Sequence of actions that the preprocessor should to perform. Available item values are: delete , create , copy . By default, the actions delete and create are performed since in most cases it\u2019s needed to remove and then fully rebuild the index. The copy action is used to duplicate an index, i.e to create a copy of the index index_name with the name index_copy_name . This action may be useful when a common search index is created for multiple Foliant projects, and the index may remain incomplete during for a long time during their building. The copy action is not atomic. To perform it, the preprocessor: marks the source index index_name as read-only; deletes the target index index_copy_name if it exists; clones the source index index_name and thereby creates the target index index_copy_name ; unmarks the source index index_name as read-only; also unmarks the target index index_copy_name as read-only, since the target index inherits the settings of the source one. use_chapters If set to true (by default), the preprocessor applies only to the files that are mentioned in the chapters section of the project config. Otherwise, the preprocessor applies to all of the files of the project. format Format that the source Markdown content should be converted to before adding to the index; available values are: plaintext (by default), html , markdown (for no conversion). escape_html If set to true (by default), HTML syntax constructions in the content converted to plaintext will be escaped by replacing & with &amp; , < with &lt; , > with &gt; , and \" with &quot; . url_transform Sequence of rules to transform local paths of source Markdown files into URLs of target pages. Each rule should be a dictionary. Its data is passed to the re.sub() method : key as the pattern argument, and value as the repl argument. The local path (possibly previously transformed) to the source Markdown file relative to the temporary working directory is passed as the string argument. The default value of the url_transform option is designed to be used to build static websites with MkDocs backend. require_env If set to true , the FOLIANT_ELASTICSEARCH environment variable must be set to allow the preprocessor to perform any operations with Elasticsearch index. This flag may be useful in CI/CD jobs. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Config"},{"location":"preprocessors/elasticsearch/#usage","text":"The preprocessor reads each source Markdown file and generates three fields for indexing: url \u2014target page URL; title \u2014document title, it\u2019s taken from the first heading of source Markdown content; content \u2014source Markdown content, optionally converted into plain text or HTML. When all the files are processed, the preprocessor calls Elasticsearch API to create the index. Optionally the preprocessor may call Elasticsearch API to delete previously created index. By using the index_properties option, you may override the default Elasticsearch settings when creating an index. Below is an example of JSON-formatted value of the index_properties option to create an index with Russian morphology analysis: { \"settings\" : { \"analysis\" : { \"filter\" : { \"ru_stop\" : { \"type\" : \"stop\" , \"stopwords\" : \"_russian_\" }, \"ru_stemmer\" : { \"type\" : \"stemmer\" , \"language\" : \"russian\" } }, \"analyzer\" : { \"default\" : { \"tokenizer\" : \"standard\" , \"filter\" : [ \"lowercase\" , \"ru_stop\" , \"ru_stemmer\" ] } } } } } You may perform custom search requests to Elasticsearch API. The simple client-side Web application example that is provided as a part of this extension, performs requests like this: { \"query\" : { \"multi_match\" : { \"query\" : \"foliant\" , \"type\" : \"phrase_prefix\" , \"fields\" : [ \"title^3\" , \"content\" ] } }, \"highlight\" : { \"fields\" : { \"content\" : {} } }, \"size\" : 50 } Search results may look like that: If you use self-hosted instance of Elasticsearch, you may need to configure it to append CORS headers to HTTP API responses.","title":"Usage"},{"location":"preprocessors/epsconvert/","tags":["preprocessor","image"],"text":"Epsconvert \u00b6 EPSConvert is a tool to convert EPS images into PNG format. Installation \u00b6 $ pip install foliantcontrib.epsconvert Config \u00b6 To enable the preprocessor, add epsconvert to preprocessors section in the project config: preprocessors : - epsconvert The preprocessor has a number of options: preprocessors : - epsconvert : convert_path : convert cache_dir : !path .epsconvertcache image_width : 0 targets : - pre - mkdocs - site - ghp convert_path Path to convert binary. By default, it is assumed that you have this command in PATH . ImageMagick must be installed. cache_dir Directory to store processed images. They may be reused later. image_width Width of PNG images in pixels. By default (in case when the value is 0 ), the width of each image is set by ImageMagick automatically. Default behavior is recommended. If the width is given explicitly, file size may increase. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Epsconvert"},{"location":"preprocessors/epsconvert/#epsconvert","text":"EPSConvert is a tool to convert EPS images into PNG format.","title":"Epsconvert"},{"location":"preprocessors/epsconvert/#installation","text":"$ pip install foliantcontrib.epsconvert","title":"Installation"},{"location":"preprocessors/epsconvert/#config","text":"To enable the preprocessor, add epsconvert to preprocessors section in the project config: preprocessors : - epsconvert The preprocessor has a number of options: preprocessors : - epsconvert : convert_path : convert cache_dir : !path .epsconvertcache image_width : 0 targets : - pre - mkdocs - site - ghp convert_path Path to convert binary. By default, it is assumed that you have this command in PATH . ImageMagick must be installed. cache_dir Directory to store processed images. They may be reused later. image_width Width of PNG images in pixels. By default (in case when the value is 0 ), the width of each image is set by ImageMagick automatically. Default behavior is recommended. If the width is given explicitly, file size may increase. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Config"},{"location":"preprocessors/escapecode/","tags":["preprocessor","markdown"],"text":"EscapeCode and UnescapeCode \u00b6 EscapeCode and UnescapeCode \u00b6 EscapeCode and UnescapeCode preprocessors work in pair. EscapeCode finds in the source Markdown content the parts that should not be modified by any next preprocessors. Examples of content that should be left raw: fence code blocks, pre code blocks, inline code. EscapeCode replaces these raw content parts with pseudo-XML tags recognized by UnescapeCode preprocessor. EscapeCode saves raw content parts into files. Later, UnescapeCode restores this content from files. Also, before the replacement, EscapeCode normalizes the source Markdown content to unify and simplify further operations. The preprocessor replaces CRLF with LF , removes excessive whitespace characters, provides trailing newline, etc. Installation \u00b6 To install EscapeCode and UnescapeCode preprocessors, run: $ pip install foliantcontrib.escapecode See more details below. Integration with Foliant and Includes \u00b6 You may call EscapeCode and UnescapeCode explicitly, but these preprocessors are integrated with Foliant core (since version 1.0.10) and with Includes preprocessor (since version 1.1.1). The escape_code project\u2019s config option, if set to true , provides applying EscapeCode before all other preprocessors, and applying UnescapeCode after all other preprocessors. Also this option tells Includes preprocessor to apply EscapeCode to each included file. In this mode EscapeCode and UnescapeCode preprocessors deprecate _unescape preprocessor. > **Note** > > The preprocessor _unescape is a part of Foliant core. It allows to use pseudo-XML tags in code examples. If you want an opening tag not to be interpreted by any preprocessor, precede this tag with the `<` character. The preprocessor _unescape applies after all other preprocessors and removes such characters. Config example: title : My Awesome Project chapters : - index.md ... escape_code : true preprocessors : ... - includes ... ... If the escape_code option isn\u2019t used or set to false , backward compatibility mode is involved. In this mode EscapeCode and UnescapeCode aren\u2019t applied automatically, but _unescape preprocessor is applied. In more complicated case, you may pass some custom options to EscapeCode preprocessor: escape_code: options: ... Custom options available in EscapeCode since version 1.0.2. Foliant core supports passing custom options to EscapeCode preprocessor as the value of escape_code.options parameter since version 1.0.11. Options are described below. The Python package that includes EscapeCode and UnescapeCode preprocessors is the dependence of Includes preprocessor since version 1.1.1. At the same time this package isn\u2019t a dependence of Foliant core. To use escape_code config option in Foliant core, you have to install the package with EscapeCode and UnescapeCode preprocessors separately. Explicit Enabling \u00b6 You may not want to use the escape_code option and call the preprocessors explicitly: preprocessors : - escapecode # usually the first list item ... - unescapecode # usually the last list item Both preprocessors allow to override the path to the directory that is used to store temporary files: preprocessors : - escapecode : cache_dir : !path .escapecodecache ... - unescapecode : cache_dir : !path .escapecodecache The default values are shown in this example. EscapeCode and related UnescapeCode must work with the same cache directory. Note that if you use Includes preprocessor, and the included content doesn\u2019t belong to the current Foliant project, there\u2019s no way to escape raw parts of this content before Includes preprocessor is applied. Config \u00b6 Since version 1.0.2, EscapeCode preprocessor supports the option actions in additional to cache_dir . The value of actions options should be a list of acceptable actions. By default, the following list is used: actions : - normalize - escape : - fence_blocks - pre_blocks - inline_code This default list may be overridden. For example: actions : - normalize - escape : - fence_blocks - inline_code - tags : - plantuml - seqdiag - comments Meanings of parameters: normalize \u2014perform normalization; escape \u2014perform escaping of certain types of raw content: fence_blocks \u2014fence code blocks; pre_blocks \u2014pre code blocks; inline_code \u2014inline code; comments \u2014HTML-style comments, also usual for Markdown; tags \u2014content of certain tags with the tags themselves, for example plantuml for <<plantuml>...</plantuml> . Usage \u00b6 Below you can see an example of Markdown content with code blocks and inline code. # Heading Text that contains some `inline code`. Below is a fence code block, language is optional: ```python import this ``` One more fence code block: ~~~ # This is a comment that should not be interpreted as a heading print('Hello World') ~~~ And this is a pre code block: mov dx, hello; mov ah, 9; int 21h; The preprocessor EscapeCode with default behavior will do the following replacements: # Heading Text that contains some <<escaped hash=\"2bb20aeb00314e915ecfefd86d26f46a\"></escaped>. Below is a fence code block, language is optional: <<escaped hash=\"15e1e46a75ef29eb760f392bb2df4ebb\"></escaped> One more fence code block: <<escaped hash=\"91c3d3da865e24c33c4b366760c99579\"></escaped> And this is a pre code block: <<escaped hash=\"a1e51c9ad3da841d393533f1522ab17e\"></escaped> Escaped content parts will be saved into files located in the cache directory. The names of the files correspond the values of the hash attributes. For example, that\u2019s the content of the file 15e1e46a75ef29eb760f392bb2df4ebb.md : ```python import this ```","title":"EscapeCode and UnescapeCode"},{"location":"preprocessors/escapecode/#escapecode-and-unescapecode","text":"","title":"EscapeCode and UnescapeCode"},{"location":"preprocessors/escapecode/#escapecode-and-unescapecode_1","text":"EscapeCode and UnescapeCode preprocessors work in pair. EscapeCode finds in the source Markdown content the parts that should not be modified by any next preprocessors. Examples of content that should be left raw: fence code blocks, pre code blocks, inline code. EscapeCode replaces these raw content parts with pseudo-XML tags recognized by UnescapeCode preprocessor. EscapeCode saves raw content parts into files. Later, UnescapeCode restores this content from files. Also, before the replacement, EscapeCode normalizes the source Markdown content to unify and simplify further operations. The preprocessor replaces CRLF with LF , removes excessive whitespace characters, provides trailing newline, etc.","title":"EscapeCode and UnescapeCode"},{"location":"preprocessors/escapecode/#installation","text":"To install EscapeCode and UnescapeCode preprocessors, run: $ pip install foliantcontrib.escapecode See more details below.","title":"Installation"},{"location":"preprocessors/escapecode/#integration-with-foliant-and-includes","text":"You may call EscapeCode and UnescapeCode explicitly, but these preprocessors are integrated with Foliant core (since version 1.0.10) and with Includes preprocessor (since version 1.1.1). The escape_code project\u2019s config option, if set to true , provides applying EscapeCode before all other preprocessors, and applying UnescapeCode after all other preprocessors. Also this option tells Includes preprocessor to apply EscapeCode to each included file. In this mode EscapeCode and UnescapeCode preprocessors deprecate _unescape preprocessor. > **Note** > > The preprocessor _unescape is a part of Foliant core. It allows to use pseudo-XML tags in code examples. If you want an opening tag not to be interpreted by any preprocessor, precede this tag with the `<` character. The preprocessor _unescape applies after all other preprocessors and removes such characters. Config example: title : My Awesome Project chapters : - index.md ... escape_code : true preprocessors : ... - includes ... ... If the escape_code option isn\u2019t used or set to false , backward compatibility mode is involved. In this mode EscapeCode and UnescapeCode aren\u2019t applied automatically, but _unescape preprocessor is applied. In more complicated case, you may pass some custom options to EscapeCode preprocessor: escape_code: options: ... Custom options available in EscapeCode since version 1.0.2. Foliant core supports passing custom options to EscapeCode preprocessor as the value of escape_code.options parameter since version 1.0.11. Options are described below. The Python package that includes EscapeCode and UnescapeCode preprocessors is the dependence of Includes preprocessor since version 1.1.1. At the same time this package isn\u2019t a dependence of Foliant core. To use escape_code config option in Foliant core, you have to install the package with EscapeCode and UnescapeCode preprocessors separately.","title":"Integration with Foliant and Includes"},{"location":"preprocessors/escapecode/#explicit-enabling","text":"You may not want to use the escape_code option and call the preprocessors explicitly: preprocessors : - escapecode # usually the first list item ... - unescapecode # usually the last list item Both preprocessors allow to override the path to the directory that is used to store temporary files: preprocessors : - escapecode : cache_dir : !path .escapecodecache ... - unescapecode : cache_dir : !path .escapecodecache The default values are shown in this example. EscapeCode and related UnescapeCode must work with the same cache directory. Note that if you use Includes preprocessor, and the included content doesn\u2019t belong to the current Foliant project, there\u2019s no way to escape raw parts of this content before Includes preprocessor is applied.","title":"Explicit Enabling"},{"location":"preprocessors/escapecode/#config","text":"Since version 1.0.2, EscapeCode preprocessor supports the option actions in additional to cache_dir . The value of actions options should be a list of acceptable actions. By default, the following list is used: actions : - normalize - escape : - fence_blocks - pre_blocks - inline_code This default list may be overridden. For example: actions : - normalize - escape : - fence_blocks - inline_code - tags : - plantuml - seqdiag - comments Meanings of parameters: normalize \u2014perform normalization; escape \u2014perform escaping of certain types of raw content: fence_blocks \u2014fence code blocks; pre_blocks \u2014pre code blocks; inline_code \u2014inline code; comments \u2014HTML-style comments, also usual for Markdown; tags \u2014content of certain tags with the tags themselves, for example plantuml for <<plantuml>...</plantuml> .","title":"Config"},{"location":"preprocessors/escapecode/#usage","text":"Below you can see an example of Markdown content with code blocks and inline code. # Heading Text that contains some `inline code`. Below is a fence code block, language is optional: ```python import this ``` One more fence code block: ~~~ # This is a comment that should not be interpreted as a heading print('Hello World') ~~~ And this is a pre code block: mov dx, hello; mov ah, 9; int 21h; The preprocessor EscapeCode with default behavior will do the following replacements: # Heading Text that contains some <<escaped hash=\"2bb20aeb00314e915ecfefd86d26f46a\"></escaped>. Below is a fence code block, language is optional: <<escaped hash=\"15e1e46a75ef29eb760f392bb2df4ebb\"></escaped> One more fence code block: <<escaped hash=\"91c3d3da865e24c33c4b366760c99579\"></escaped> And this is a pre code block: <<escaped hash=\"a1e51c9ad3da841d393533f1522ab17e\"></escaped> Escaped content parts will be saved into files located in the cache directory. The names of the files correspond the values of the hash attributes. For example, that\u2019s the content of the file 15e1e46a75ef29eb760f392bb2df4ebb.md : ```python import this ```","title":"Usage"},{"location":"preprocessors/flags/","tags":["preprocessor","markdown"],"text":"Flags \u00b6 Conditional Blocks for Foliant \u00b6 This preprocessors lets you exclude parts of the source based on flags defined in the project config and environment variables, as well as current target and backend. Installation \u00b6 $ pip install foliantcontrib.flags Config \u00b6 Enable the propressor by adding it to preprocessors : preprocessors : - flags Enabled project flags are listed in preprocessors.flags.flags : preprocessors : - flags : flags : - foo - bar To set flags for the current session, define FOLIANT_FLAGS environment variable: $ FOLIANT_FLAGS = \"spam, eggs\" You can use commas, semicolons, or spaces to separate flags. Hint To emulate a particular target or backend with a flag, use the special flags target:FLAG and backend:FLAG where FLAG is your target or backend: $ FOLIANT_FLAGS=\"target:pdf, backend:pandoc, spam\" Usage \u00b6 Conditional blocks are enclosed between <if>...</if> tags: This paragraph is for everyone. <if flags=\"management\"> This parapraph is for management only. </if> A block can depend on multiple flags. You can pick whether all tags must be present for the block to appear, or any of them (by default, kind=\"all\" is assumed): <if flags=\"spam, eggs\" kind=\"all\"> This is included only if both `spam` and `eggs` are set. </if> <if flags=\"spam, eggs\" kind=\"any\"> This is included if both `spam` or `eggs` is set. </if> You can also list flags that must not be set for the block to be included: <if flags=\"spam, eggs\" kind=\"none\"> This is included only if neither `spam` nor `eggs` are set. </if> You can check against the current target and backend instead of manually defined flags: <if targets=\"pdf\">This is for pdf output</if><if targets=\"site\">This is for the site</if> <if backends=\"mkdocs\">This is only for MkDocs.</if>","title":"Flags"},{"location":"preprocessors/flags/#flags","text":"","title":"Flags"},{"location":"preprocessors/flags/#conditional-blocks-for-foliant","text":"This preprocessors lets you exclude parts of the source based on flags defined in the project config and environment variables, as well as current target and backend.","title":"Conditional Blocks for Foliant"},{"location":"preprocessors/flags/#installation","text":"$ pip install foliantcontrib.flags","title":"Installation"},{"location":"preprocessors/flags/#config","text":"Enable the propressor by adding it to preprocessors : preprocessors : - flags Enabled project flags are listed in preprocessors.flags.flags : preprocessors : - flags : flags : - foo - bar To set flags for the current session, define FOLIANT_FLAGS environment variable: $ FOLIANT_FLAGS = \"spam, eggs\" You can use commas, semicolons, or spaces to separate flags. Hint To emulate a particular target or backend with a flag, use the special flags target:FLAG and backend:FLAG where FLAG is your target or backend: $ FOLIANT_FLAGS=\"target:pdf, backend:pandoc, spam\"","title":"Config"},{"location":"preprocessors/flags/#usage","text":"Conditional blocks are enclosed between <if>...</if> tags: This paragraph is for everyone. <if flags=\"management\"> This parapraph is for management only. </if> A block can depend on multiple flags. You can pick whether all tags must be present for the block to appear, or any of them (by default, kind=\"all\" is assumed): <if flags=\"spam, eggs\" kind=\"all\"> This is included only if both `spam` and `eggs` are set. </if> <if flags=\"spam, eggs\" kind=\"any\"> This is included if both `spam` or `eggs` is set. </if> You can also list flags that must not be set for the block to be included: <if flags=\"spam, eggs\" kind=\"none\"> This is included only if neither `spam` nor `eggs` are set. </if> You can check against the current target and backend instead of manually defined flags: <if targets=\"pdf\">This is for pdf output</if><if targets=\"site\">This is for the site</if> <if backends=\"mkdocs\">This is only for MkDocs.</if>","title":"Usage"},{"location":"preprocessors/flatten/","tags":["preprocessor","pandoc"],"text":"Flatten \u00b6 Project Flattener for Foliant \u00b6 This preprocessor converts a Foliant project source directory into a single Markdown file containing all the sources, preserving order and inheritance. This preprocessor is used by backends that require a single Markdown file as input instead of a directory. The Pandoc backend is one such example. Installation \u00b6 $ pip install foliantcontrib.flatten Config \u00b6 This preprocessor is required by Pandoc backend, so if you use it, you don\u2019t need to install Flatten or enable it in the project config manually. However, it\u2019s still a regular preprocessor, and you can run it manually by listing it in preprocessors : preprocessors : - flatten The preprocessor has a number of options with the following default values: preprocessors : - flatten : flat_src_file_name : __all__.md keep_sources : false flat_src_file_name Name of the flattened file that is created in the temporary working directory. keep_sources Flag that tells the preprocessor to keep Markdown sources in the temporary working directory after flattening. If set to false , all Markdown files excepting the flattened will be deleted from the temporary working directory. Note Flatten preprocessor uses Includes, so when you install Pandoc backend, Includes preprocessor will also be installed, along with Flatten.","title":"Flatten"},{"location":"preprocessors/flatten/#flatten","text":"","title":"Flatten"},{"location":"preprocessors/flatten/#project-flattener-for-foliant","text":"This preprocessor converts a Foliant project source directory into a single Markdown file containing all the sources, preserving order and inheritance. This preprocessor is used by backends that require a single Markdown file as input instead of a directory. The Pandoc backend is one such example.","title":"Project Flattener for Foliant"},{"location":"preprocessors/flatten/#installation","text":"$ pip install foliantcontrib.flatten","title":"Installation"},{"location":"preprocessors/flatten/#config","text":"This preprocessor is required by Pandoc backend, so if you use it, you don\u2019t need to install Flatten or enable it in the project config manually. However, it\u2019s still a regular preprocessor, and you can run it manually by listing it in preprocessors : preprocessors : - flatten The preprocessor has a number of options with the following default values: preprocessors : - flatten : flat_src_file_name : __all__.md keep_sources : false flat_src_file_name Name of the flattened file that is created in the temporary working directory. keep_sources Flag that tells the preprocessor to keep Markdown sources in the temporary working directory after flattening. If set to false , all Markdown files excepting the flattened will be deleted from the temporary working directory. Note Flatten preprocessor uses Includes, so when you install Pandoc backend, Includes preprocessor will also be installed, along with Flatten.","title":"Config"},{"location":"preprocessors/general_notes/","tags":["preprocessor","yaml","config"],"text":"General Notes on Usage \u00b6 Most simple preprocessors apply unconditionally to the whole content of each Markdown file in the Foliant project. But usually preprocessors look for some specific pseudo-XML tags in Markdown content. Each preprocessor registers its own set of tags. Tags can have attributes and a body. Attributes are usually used to specify some required or optional parameters. Body is the content that is enclosed between opening and closing tags; preprocessors usually do something with this content: <tag attribute_1= \"value_1\" ... attribute_N= \"value_N\" > body </tag> Foliant under 1.0.8 tries to convert each attribute value into a boolean value, a number, or a string. Attribute values must be enclosed in double quotes ( \" ). Since Foliant 1.0.9, attribute values are processed as YAML. Scalar values are also converted into boolean values, numbers and strings, but you may specify composite values that should be transformed into lists or dictionaries. You may also use modifiers (i.e. YAML tags) that are available in the Foliant project\u2019s config. !path The string preceded by this modifier should be converted into an existing path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. !project_path The string preceded by this modifier should be converted into a path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. This path may be nonexistent. !rel_path The string preceded by this modifier should be converted into a path relative to the currently processed Markdown file. This path may be nonexistent. If you develop a preprocessor that accepts some path, by default it is better to be a path relative to the currently processed Markdown file. Also, since Foliant 1.0.9, attribute values may be enclosed into double ( \" ) or single ( ' ) quotes.","title":"General Notes"},{"location":"preprocessors/general_notes/#general-notes-on-usage","text":"Most simple preprocessors apply unconditionally to the whole content of each Markdown file in the Foliant project. But usually preprocessors look for some specific pseudo-XML tags in Markdown content. Each preprocessor registers its own set of tags. Tags can have attributes and a body. Attributes are usually used to specify some required or optional parameters. Body is the content that is enclosed between opening and closing tags; preprocessors usually do something with this content: <tag attribute_1= \"value_1\" ... attribute_N= \"value_N\" > body </tag> Foliant under 1.0.8 tries to convert each attribute value into a boolean value, a number, or a string. Attribute values must be enclosed in double quotes ( \" ). Since Foliant 1.0.9, attribute values are processed as YAML. Scalar values are also converted into boolean values, numbers and strings, but you may specify composite values that should be transformed into lists or dictionaries. You may also use modifiers (i.e. YAML tags) that are available in the Foliant project\u2019s config. !path The string preceded by this modifier should be converted into an existing path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. !project_path The string preceded by this modifier should be converted into a path relative to the Foliant project\u2019s top-level (\u201croot\u201d) directory. This path may be nonexistent. !rel_path The string preceded by this modifier should be converted into a path relative to the currently processed Markdown file. This path may be nonexistent. If you develop a preprocessor that accepts some path, by default it is better to be a path relative to the currently processed Markdown file. Also, since Foliant 1.0.9, attribute values may be enclosed into double ( \" ) or single ( ' ) quotes.","title":"General Notes on Usage"},{"location":"preprocessors/glossary/","tags":["preprocessor","pandoc"],"text":"Glossary \u00b6 Glossary collector for Foliant \u00b6 Glossary preprocessor collects terms and definitions from the files stated and inserts them to specified places of the document. Installation \u00b6 $ pip install foliantcontrib.glossary Config \u00b6 To enable the preprocessor, add glossary to preprocessors section in the project config. preprocessors : - glossary The preprocessor has a number of options (default values stated below): preprocessors : - glossary : term_definitions : 'term_definitions.md' definition_mark : ': ' files_to_process : '' term_definitions Local or remote file with terms and definitions in Pandoc definition_lists notation (by default this file stored in foliant project folder, but you can place it other folder). Also you can use includes in this file to join several glossary files. In this case includes preprocessor should be stated before glossary in foliant.yml preprocessors section. Note that if several definitions of one term are found, only first will be used. definition_mark Preprocessor uses this string to determine, if the definition should be inserted here. \": \" for Pandoc definition_lists notation. files_to_process You can set certain files to process by preprocessor. Usage \u00b6 Just add the preprocessor to the project config, set it up and enjoy the automatically collected glossary in your document. Example \u00b6 foliant.yml ... chapters : - text.md preprocessors : ... - includes - glossary ... term_definitions.md # Glossary <include nohead=\"true\"> $https://git.repo/repo_name_1$src/glossary_1.md </include> <include nohead=\"true\"> $https://git.repo/repo_name_2$src/glossary_2.md </include> glossary_1.md from repo_1 # Glossary Term 1 : Definition 1 Term 2 : Definition 2 Term 3 : Definition 3 glossary_2.md from repo_2 # Glossary Term 4 : Definition 4 { some code, part of Definition 4 } Third paragraph of definition 4. Term 5 : Definition 5 text.md # Main chapter Some text. # Glossary : Term 1 : Term 4 : Term 2 __all__.md # Main chapter Some text. # Glossary Term 1 : Definition 1 Term 4 : Definition 4 { some code, part of Definition 4 } Third paragraph of definition 4. Term 2 : Definition 2","title":"Glossary"},{"location":"preprocessors/glossary/#glossary","text":"","title":"Glossary"},{"location":"preprocessors/glossary/#glossary-collector-for-foliant","text":"Glossary preprocessor collects terms and definitions from the files stated and inserts them to specified places of the document.","title":"Glossary collector for Foliant"},{"location":"preprocessors/glossary/#installation","text":"$ pip install foliantcontrib.glossary","title":"Installation"},{"location":"preprocessors/glossary/#config","text":"To enable the preprocessor, add glossary to preprocessors section in the project config. preprocessors : - glossary The preprocessor has a number of options (default values stated below): preprocessors : - glossary : term_definitions : 'term_definitions.md' definition_mark : ': ' files_to_process : '' term_definitions Local or remote file with terms and definitions in Pandoc definition_lists notation (by default this file stored in foliant project folder, but you can place it other folder). Also you can use includes in this file to join several glossary files. In this case includes preprocessor should be stated before glossary in foliant.yml preprocessors section. Note that if several definitions of one term are found, only first will be used. definition_mark Preprocessor uses this string to determine, if the definition should be inserted here. \": \" for Pandoc definition_lists notation. files_to_process You can set certain files to process by preprocessor.","title":"Config"},{"location":"preprocessors/glossary/#usage","text":"Just add the preprocessor to the project config, set it up and enjoy the automatically collected glossary in your document.","title":"Usage"},{"location":"preprocessors/glossary/#example","text":"foliant.yml ... chapters : - text.md preprocessors : ... - includes - glossary ... term_definitions.md # Glossary <include nohead=\"true\"> $https://git.repo/repo_name_1$src/glossary_1.md </include> <include nohead=\"true\"> $https://git.repo/repo_name_2$src/glossary_2.md </include> glossary_1.md from repo_1 # Glossary Term 1 : Definition 1 Term 2 : Definition 2 Term 3 : Definition 3 glossary_2.md from repo_2 # Glossary Term 4 : Definition 4 { some code, part of Definition 4 } Third paragraph of definition 4. Term 5 : Definition 5 text.md # Main chapter Some text. # Glossary : Term 1 : Term 4 : Term 2 __all__.md # Main chapter Some text. # Glossary Term 1 : Definition 1 Term 4 : Definition 4 { some code, part of Definition 4 } Third paragraph of definition 4. Term 2 : Definition 2","title":"Example"},{"location":"preprocessors/graphviz/","tags":["preprocessor","diagram"],"text":"Graphviz \u00b6 Graphviz Diagrams Preprocessor for Foliant \u00b6 Graphviz is an open source graph visualization tool. This preprocessor converts Graphviz diagram definitions in the source and converts them into images on the fly during project build. Installation \u00b6 $ pip install foliantcontrib.graphviz Config \u00b6 To enable the preprocessor, add graphviz to preprocessors section in the project config: preprocessors : - graphviz The preprocessor has a number of options: preprocessors : - graphviz : cache_dir : !path .diagramscache graphviz_path : dot engine : dot format : png as_image : true params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. graphviz_path Path to Graphviz launcher. By default, it is assumed that you have the dot command in your PATH , but if Graphviz uses another command to launch, or if the dot launcher is installed in a custom place, you can define it here. engine Layout engine used to process the diagram source. Available engines: ( circo , dot , fdp , neato , osage , patchwork , sfdp twopi ). Default: dot format Output format of the diagram image. Available formats: tons of them . Default: png as_image If true \u2014 inserts scheme into document as md-image. If false \u2014 inserts the file generated by GraphViz directly into the document (may be handy for svg images). Default: true params Params passed to the image generation command: preprocessors: - graphviz: params: Gdpi: 100 To see the full list of params, run the command that launches Graphviz, with -? command line option. Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <graphviz>...</graphviz> tags: Here\u2019s a diagram: <graphviz> a -> b </graphviz> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have two exclusive options: caption option \u2014 the markdown caption of the diagram image and src \u2014 path to diagram source (relative to current file). If src tag option is supplied, tag body is ignored. Diagram source is loaded from external file. Diagram with a caption: <graphviz caption=\"Deployment diagram\" params=\"Earrowsize: 0.5\" src=\"diags/sample.gv\"> </graphviz> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Graphviz"},{"location":"preprocessors/graphviz/#graphviz","text":"","title":"Graphviz"},{"location":"preprocessors/graphviz/#graphviz-diagrams-preprocessor-for-foliant","text":"Graphviz is an open source graph visualization tool. This preprocessor converts Graphviz diagram definitions in the source and converts them into images on the fly during project build.","title":"Graphviz Diagrams Preprocessor for Foliant"},{"location":"preprocessors/graphviz/#installation","text":"$ pip install foliantcontrib.graphviz","title":"Installation"},{"location":"preprocessors/graphviz/#config","text":"To enable the preprocessor, add graphviz to preprocessors section in the project config: preprocessors : - graphviz The preprocessor has a number of options: preprocessors : - graphviz : cache_dir : !path .diagramscache graphviz_path : dot engine : dot format : png as_image : true params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. graphviz_path Path to Graphviz launcher. By default, it is assumed that you have the dot command in your PATH , but if Graphviz uses another command to launch, or if the dot launcher is installed in a custom place, you can define it here. engine Layout engine used to process the diagram source. Available engines: ( circo , dot , fdp , neato , osage , patchwork , sfdp twopi ). Default: dot format Output format of the diagram image. Available formats: tons of them . Default: png as_image If true \u2014 inserts scheme into document as md-image. If false \u2014 inserts the file generated by GraphViz directly into the document (may be handy for svg images). Default: true params Params passed to the image generation command: preprocessors: - graphviz: params: Gdpi: 100 To see the full list of params, run the command that launches Graphviz, with -? command line option.","title":"Config"},{"location":"preprocessors/graphviz/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <graphviz>...</graphviz> tags: Here\u2019s a diagram: <graphviz> a -> b </graphviz> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have two exclusive options: caption option \u2014 the markdown caption of the diagram image and src \u2014 path to diagram source (relative to current file). If src tag option is supplied, tag body is ignored. Diagram source is loaded from external file. Diagram with a caption: <graphviz caption=\"Deployment diagram\" params=\"Earrowsize: 0.5\" src=\"diags/sample.gv\"> </graphviz> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Usage"},{"location":"preprocessors/history/","tags":["preprocessor","git"],"text":"History \u00b6 History \u00b6 History is a preprocessor that generates single linear history of releases for multiple Git repositories based on their changelog files, tags, or commits. The history may be represented as Markdown, and as RSS feed. Installation \u00b6 $ pip install foliantcontrib.history Config \u00b6 To enable the preprocessor, add history to preprocessors section in the project config: preprocessors : - history The preprocessor has a number of options with the following default values: - history : repos : [] revision : '' name_from_readme : false readme : README.md from : changelog merge_commits : true changelog : changelog.md source_heading_level : 1 target_heading_level : 1 target_heading_template : '[%date%] [%repo%](%link%) %version%' date_format : year_first limit : 0 rss : false rss_file : rss.xml rss_title : 'History of Releases' rss_link : '' rss_description : '' rss_language : en-US rss_item_title_template : '%repo% %version%' repos List of URLs of Git repositories that it\u2019s necessary to generate history for. Example: repos : - https://github.com/foliant-docs/foliant.git - https://github.com/foliant-docs/foliantcontrib.includes.git revision Revision or branch name to use. If revision is not specified, the default branch of the repository will be used. If you specify a revision or branch name, it will be used for all specified repositories. name_from_readme Flag that tells the preprocessor to try to use the content of the first heading of README file in each listed repository as the repo name. If the flag set to false , or an attempt to get the first heading content is unsuccessful, the repo name will be based on the repo URL. readme Path to README file. README files must be located at the same paths in all listed repositories. from Data source to generate history: changelog \u2014changelog file, tags \u2014tags, commits \u2014all commits. Data sources of the same type will be used for all listed repositories. merge_commits Flag that tells the preprocessor to include merge commits into history when from: commits is used. changelog Path to changelog file. Changelogs must be located at the same paths in all listed repositories. source_heading_level Level of headings that precede descriptions of releases in the source Markdown content. It must be the same for all listed repositories. target_heading_level Level of headings that precede descriptions of releases in the target Markdown content of generated history. target_heading_template Template for top-level headings in the target Markdown content. You may use any characters, and the variables: %date% \u2014date, %repo% \u2014repo name, %link% \u2014repo URL, %version% \u2014version data (content of source changelog heading, tag value, or commit hash). date_format Output date format to use in the target Markdown content. If the default value year_first is used, the date \u201cSeptember 4, 2019\u201d will be represented as 2019-09-04 . If the day_first value is used, this date will be represented as 04.09.2019 . limit Maximum number of items to include into the target Markdown content; 0 means no limit. rss Flag that tells the preprocessor to export the history into RSS feed. Note that the parameters target_heading_level , target_heading_template , date_format , and limit are applied to Markdown content only, not to RSS feed content. rss_file Subpath to the file with RSS feed. It\u2019s relative to the temporary working directory during building, to the directory of built project after building, and to the rss_link value in URLs. rss_title RSS channel title. rss_link RSS channel link, e.g. https://foliant-docs.github.io/docs/ . If the rss parameter value is rss.xml , the RSS feed URL will be https://foliant-docs.github.io/docs/rss.xml . rss_description RSS channel description. rss_language RSS channel language. rss_item_title_template Template for titles of RSS feed items. You may use any characters, and the variables: %repo% \u2014repo name, %version% \u2014version data. Usage \u00b6 To insert some history into Markdown content, use the <history></history> tags: Some optional content here. <history></history> More optional content. If no attributes specified, the values of options from the project config will be used. You may override each config option value with the attribute of the same name. Example: <history repos=\"https://github.com/foliant-docs/foliantcontrib.mkdocs.git\" revision=\"develop\" limit=\"5\" rss=\"true\" rss_file=\"some_another.xml\" ... > </history>","title":"History"},{"location":"preprocessors/history/#history","text":"","title":"History"},{"location":"preprocessors/history/#history_1","text":"History is a preprocessor that generates single linear history of releases for multiple Git repositories based on their changelog files, tags, or commits. The history may be represented as Markdown, and as RSS feed.","title":"History"},{"location":"preprocessors/history/#installation","text":"$ pip install foliantcontrib.history","title":"Installation"},{"location":"preprocessors/history/#config","text":"To enable the preprocessor, add history to preprocessors section in the project config: preprocessors : - history The preprocessor has a number of options with the following default values: - history : repos : [] revision : '' name_from_readme : false readme : README.md from : changelog merge_commits : true changelog : changelog.md source_heading_level : 1 target_heading_level : 1 target_heading_template : '[%date%] [%repo%](%link%) %version%' date_format : year_first limit : 0 rss : false rss_file : rss.xml rss_title : 'History of Releases' rss_link : '' rss_description : '' rss_language : en-US rss_item_title_template : '%repo% %version%' repos List of URLs of Git repositories that it\u2019s necessary to generate history for. Example: repos : - https://github.com/foliant-docs/foliant.git - https://github.com/foliant-docs/foliantcontrib.includes.git revision Revision or branch name to use. If revision is not specified, the default branch of the repository will be used. If you specify a revision or branch name, it will be used for all specified repositories. name_from_readme Flag that tells the preprocessor to try to use the content of the first heading of README file in each listed repository as the repo name. If the flag set to false , or an attempt to get the first heading content is unsuccessful, the repo name will be based on the repo URL. readme Path to README file. README files must be located at the same paths in all listed repositories. from Data source to generate history: changelog \u2014changelog file, tags \u2014tags, commits \u2014all commits. Data sources of the same type will be used for all listed repositories. merge_commits Flag that tells the preprocessor to include merge commits into history when from: commits is used. changelog Path to changelog file. Changelogs must be located at the same paths in all listed repositories. source_heading_level Level of headings that precede descriptions of releases in the source Markdown content. It must be the same for all listed repositories. target_heading_level Level of headings that precede descriptions of releases in the target Markdown content of generated history. target_heading_template Template for top-level headings in the target Markdown content. You may use any characters, and the variables: %date% \u2014date, %repo% \u2014repo name, %link% \u2014repo URL, %version% \u2014version data (content of source changelog heading, tag value, or commit hash). date_format Output date format to use in the target Markdown content. If the default value year_first is used, the date \u201cSeptember 4, 2019\u201d will be represented as 2019-09-04 . If the day_first value is used, this date will be represented as 04.09.2019 . limit Maximum number of items to include into the target Markdown content; 0 means no limit. rss Flag that tells the preprocessor to export the history into RSS feed. Note that the parameters target_heading_level , target_heading_template , date_format , and limit are applied to Markdown content only, not to RSS feed content. rss_file Subpath to the file with RSS feed. It\u2019s relative to the temporary working directory during building, to the directory of built project after building, and to the rss_link value in URLs. rss_title RSS channel title. rss_link RSS channel link, e.g. https://foliant-docs.github.io/docs/ . If the rss parameter value is rss.xml , the RSS feed URL will be https://foliant-docs.github.io/docs/rss.xml . rss_description RSS channel description. rss_language RSS channel language. rss_item_title_template Template for titles of RSS feed items. You may use any characters, and the variables: %repo% \u2014repo name, %version% \u2014version data.","title":"Config"},{"location":"preprocessors/history/#usage","text":"To insert some history into Markdown content, use the <history></history> tags: Some optional content here. <history></history> More optional content. If no attributes specified, the values of options from the project config will be used. You may override each config option value with the attribute of the same name. Example: <history repos=\"https://github.com/foliant-docs/foliantcontrib.mkdocs.git\" revision=\"develop\" limit=\"5\" rss=\"true\" rss_file=\"some_another.xml\" ... > </history>","title":"Usage"},{"location":"preprocessors/imagemagick/","tags":["preprocessor","image"],"text":"ImageMagick \u00b6 ImageMagick Preprocessor \u00b6 This tool provides additional processing of images that referred in Markdown source, with ImageMagick . Installation \u00b6 $ pip install foliantcontrib.imagemagick Config \u00b6 To enable the preprocessor, add imagemagick to preprocessors section in the project config: preprocessors : - imagemagick The preprocessor has a number of options with the following default values: preprocessors : - imagemagick : convert_path : convert cache_dir : .imagemagickcache convert_path Path to convert binary, a part of ImageMagick. cache_dir Directory to store processed images. These files can be reused later. Usage \u00b6 Suppose you want to apply the following command to your picture image.eps : $ convert image.eps -resize 600 -background Orange label: 'Picture' +swap -gravity Center -append image.jpg This command takes the source EPS image image.eps , resizes it, puts a text label over the picture, and writes the result into new file image.jpg . The suffix of output file name specifies that the image must be converted into JPEG format. To use the ImageMagick preprocessor to do the same, enclose one or more image references in your Markdown source between <magick> and </magick> tags. <magick command_params=\"-resize 600 -background Orange label:'Picture' +swap -gravity Center -append\" output_format=\"jpg\"> (leading exclamation mark here)[Optional Caption](image.eps) </magick> Use output_format attribute to specify the suffix of output file name. The whole output file name will be generated automatically. Use command_params attribute to specify the string of parameters that should be passed to ImageMagick convert binary. Instead of using command_params attribute, you may specify each parameter as its own attribute with the same name: <magick resize=\"600\" background=\"Orange label:'Picture' +swap\" gravity=\"Center\" append=\"true\" output_format=\"jpg\"> (leading exclamation mark here)[Optional Caption](image.eps) </magick>","title":"ImageMagick"},{"location":"preprocessors/imagemagick/#imagemagick","text":"","title":"ImageMagick"},{"location":"preprocessors/imagemagick/#imagemagick-preprocessor","text":"This tool provides additional processing of images that referred in Markdown source, with ImageMagick .","title":"ImageMagick Preprocessor"},{"location":"preprocessors/imagemagick/#installation","text":"$ pip install foliantcontrib.imagemagick","title":"Installation"},{"location":"preprocessors/imagemagick/#config","text":"To enable the preprocessor, add imagemagick to preprocessors section in the project config: preprocessors : - imagemagick The preprocessor has a number of options with the following default values: preprocessors : - imagemagick : convert_path : convert cache_dir : .imagemagickcache convert_path Path to convert binary, a part of ImageMagick. cache_dir Directory to store processed images. These files can be reused later.","title":"Config"},{"location":"preprocessors/imagemagick/#usage","text":"Suppose you want to apply the following command to your picture image.eps : $ convert image.eps -resize 600 -background Orange label: 'Picture' +swap -gravity Center -append image.jpg This command takes the source EPS image image.eps , resizes it, puts a text label over the picture, and writes the result into new file image.jpg . The suffix of output file name specifies that the image must be converted into JPEG format. To use the ImageMagick preprocessor to do the same, enclose one or more image references in your Markdown source between <magick> and </magick> tags. <magick command_params=\"-resize 600 -background Orange label:'Picture' +swap -gravity Center -append\" output_format=\"jpg\"> (leading exclamation mark here)[Optional Caption](image.eps) </magick> Use output_format attribute to specify the suffix of output file name. The whole output file name will be generated automatically. Use command_params attribute to specify the string of parameters that should be passed to ImageMagick convert binary. Instead of using command_params attribute, you may specify each parameter as its own attribute with the same name: <magick resize=\"600\" background=\"Orange label:'Picture' +swap\" gravity=\"Center\" append=\"true\" output_format=\"jpg\"> (leading exclamation mark here)[Optional Caption](image.eps) </magick>","title":"Usage"},{"location":"preprocessors/imagineui/","tags":["preprocessor","image","design"],"text":"ImagineUI \u00b6 ImagineUI for Foliant \u00b6 ImagineUI is a tool that supports developing wireframes in a localized human-readable format. This preprocessor allows using <imagineui> macros in Foliant Installation \u00b6 Before using ImagineUI, you need to install Node.js . ImagineUI preprocessor code is written in Python, but it uses a JavaScript package. This script is provided in ImagineUI package: $ pip install foliantcontrib.imagineui ImagineUI uses Puppeteer for rendering in background, which is a huge dependency, so to avoid downloading Chrome every time this preprocessor applies, it's advised to install imagineui-cli globally. $ npm i -g imagineui-cli Config \u00b6 To enable the preprocessor, add imagineui to preprocessors section in the project config: preprocessors : - imagineui The preprocessor has a number of options with the following default values: preprocessors : - imagineui : version : global cache_dir : !path .imagineuicache version Version of the imagineui-cli package in NPM. \"global\" (default) will skip and will use either the version already installed globally or the latest version, which speeds up NPX significantly. cache_dir Directory to store downloaded and resized images. Usage \u00b6 To insert a wireframe image rendered by ImagineUI into your documentation, use <imagineui>...</imagineui> tags in Markdown source: <imagineui> Page: \"Welcome screen\" Block: \"Header\" Header \"Mockup poetry\" Block: \"Flowers\" Two columns Image \"Roses are red,\" Image \"Violets are blue.\" Image \"Your mockups are awesome,\" Image \"And so are you!\" Block: \"Footer\" One row Button \"Try ImagineUI\" Button \"Subscribe\" Button \"Contribute\" </imagineui> ImagineUI preprocessor will replace such blocks with local image references. Acknowledgements \u00b6 BindSympli preprocessor was used as a starting point","title":"ImagineUI"},{"location":"preprocessors/imagineui/#imagineui","text":"","title":"ImagineUI"},{"location":"preprocessors/imagineui/#imagineui-for-foliant","text":"ImagineUI is a tool that supports developing wireframes in a localized human-readable format. This preprocessor allows using <imagineui> macros in Foliant","title":"ImagineUI for Foliant"},{"location":"preprocessors/imagineui/#installation","text":"Before using ImagineUI, you need to install Node.js . ImagineUI preprocessor code is written in Python, but it uses a JavaScript package. This script is provided in ImagineUI package: $ pip install foliantcontrib.imagineui ImagineUI uses Puppeteer for rendering in background, which is a huge dependency, so to avoid downloading Chrome every time this preprocessor applies, it's advised to install imagineui-cli globally. $ npm i -g imagineui-cli","title":"Installation"},{"location":"preprocessors/imagineui/#config","text":"To enable the preprocessor, add imagineui to preprocessors section in the project config: preprocessors : - imagineui The preprocessor has a number of options with the following default values: preprocessors : - imagineui : version : global cache_dir : !path .imagineuicache version Version of the imagineui-cli package in NPM. \"global\" (default) will skip and will use either the version already installed globally or the latest version, which speeds up NPX significantly. cache_dir Directory to store downloaded and resized images.","title":"Config"},{"location":"preprocessors/imagineui/#usage","text":"To insert a wireframe image rendered by ImagineUI into your documentation, use <imagineui>...</imagineui> tags in Markdown source: <imagineui> Page: \"Welcome screen\" Block: \"Header\" Header \"Mockup poetry\" Block: \"Flowers\" Two columns Image \"Roses are red,\" Image \"Violets are blue.\" Image \"Your mockups are awesome,\" Image \"And so are you!\" Block: \"Footer\" One row Button \"Try ImagineUI\" Button \"Subscribe\" Button \"Contribute\" </imagineui> ImagineUI preprocessor will replace such blocks with local image references.","title":"Usage"},{"location":"preprocessors/imagineui/#acknowledgements","text":"BindSympli preprocessor was used as a starting point","title":"Acknowledgements"},{"location":"preprocessors/imgcaptions/","tags":["preprocessor","image"],"text":"ImgCaptions \u00b6 ImgCaptions \u00b6 ImgCaptions is a preprocessor that generates visible captions for the images from alternative text descriptions of the images. The preprocessor is useful in projects built with MkDocs or another backend that provides HTML output. Installation \u00b6 $ pip install foliantcontrib.imgcaptions Usage \u00b6 To enable the preprocessor, add imgcaptions to preprocessors section in the project config: preprocessors : - imgcaptions The preprocessor supports the following options: - imgcaptions : stylesheet_path : !path imgcaptions.css template : <p class=\"image_caption\">{caption}</p> targets : - pre - mkdocs - site - ghp stylesheet_path Path to the CSS stylesheet file. This stylesheet should define rules for the .image_caption class. Default path is imgcaptions.css . If stylesheet file does not exist, default built-in stylesheet will be used. template Template string representing the HTML tag of the caption to be placed after the image. The template should contain the {caption} variable that will be replaced with the image caption. Default: <p class=\"image_caption\">{caption}</p> . targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Image definition example: (leading exclamation mark here)[My Picture](picture.png) This Markdown source will be finally transformed into the HTML code: < p >< img alt = \"My Picture\" src = \"picture.png\" ></ p > < p class = \"image_caption\" > My Picture </ p > (Note that ImgCaptions preprocessor does not convert Markdown syntax into HTML; it only inserts HTML tags like <p class=\"image_caption\">My Picture</p> into Markdown code after the image definitions. Empty alternative text descriptions are ignored.)","title":"ImgCaptions"},{"location":"preprocessors/imgcaptions/#imgcaptions","text":"","title":"ImgCaptions"},{"location":"preprocessors/imgcaptions/#imgcaptions_1","text":"ImgCaptions is a preprocessor that generates visible captions for the images from alternative text descriptions of the images. The preprocessor is useful in projects built with MkDocs or another backend that provides HTML output.","title":"ImgCaptions"},{"location":"preprocessors/imgcaptions/#installation","text":"$ pip install foliantcontrib.imgcaptions","title":"Installation"},{"location":"preprocessors/imgcaptions/#usage","text":"To enable the preprocessor, add imgcaptions to preprocessors section in the project config: preprocessors : - imgcaptions The preprocessor supports the following options: - imgcaptions : stylesheet_path : !path imgcaptions.css template : <p class=\"image_caption\">{caption}</p> targets : - pre - mkdocs - site - ghp stylesheet_path Path to the CSS stylesheet file. This stylesheet should define rules for the .image_caption class. Default path is imgcaptions.css . If stylesheet file does not exist, default built-in stylesheet will be used. template Template string representing the HTML tag of the caption to be placed after the image. The template should contain the {caption} variable that will be replaced with the image caption. Default: <p class=\"image_caption\">{caption}</p> . targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Image definition example: (leading exclamation mark here)[My Picture](picture.png) This Markdown source will be finally transformed into the HTML code: < p >< img alt = \"My Picture\" src = \"picture.png\" ></ p > < p class = \"image_caption\" > My Picture </ p > (Note that ImgCaptions preprocessor does not convert Markdown syntax into HTML; it only inserts HTML tags like <p class=\"image_caption\">My Picture</p> into Markdown code after the image definitions. Empty alternative text descriptions are ignored.)","title":"Usage"},{"location":"preprocessors/imgconvert/","tags":["preprocessor","image"],"text":"ImgConvert \u00b6 ImgConvert is a tool to convert images from an arbitrary format into PNG. Installation \u00b6 $ pip install foliantcontrib.imgconvert Config \u00b6 To enable the preprocessor, add imgconvert to preprocessors section in the project config: preprocessors : - imgconvert The preprocessor has a number of options with the following default values: preprocessors : - imgconvert : convert_path : convert cache_dir : !path .imgconvertcache image_width : 0 formats : {} convert_path Path to convert binary. By default, it is assumed that you have this command in PATH . ImageMagick must be installed. cache_dir Directory to store processed images. They may be reused later. image_width Width of PNG images in pixels. By default (in case when the value is 0 ), the width of each image is set by ImageMagick automatically. Default behavior is recommended. If the width is given explicitly, file size may increase. formats Settings that apply to each format of source images. The formats option may be used to define lists of targets for each format. If targets for a format are not specified explicitly, the preprocessor will be applied to all targets. Example: formats : eps : targets : - site svg : targets : - docx Formats should be named in lowercase.","title":"ImgConvert"},{"location":"preprocessors/imgconvert/#imgconvert","text":"ImgConvert is a tool to convert images from an arbitrary format into PNG.","title":"ImgConvert"},{"location":"preprocessors/imgconvert/#installation","text":"$ pip install foliantcontrib.imgconvert","title":"Installation"},{"location":"preprocessors/imgconvert/#config","text":"To enable the preprocessor, add imgconvert to preprocessors section in the project config: preprocessors : - imgconvert The preprocessor has a number of options with the following default values: preprocessors : - imgconvert : convert_path : convert cache_dir : !path .imgconvertcache image_width : 0 formats : {} convert_path Path to convert binary. By default, it is assumed that you have this command in PATH . ImageMagick must be installed. cache_dir Directory to store processed images. They may be reused later. image_width Width of PNG images in pixels. By default (in case when the value is 0 ), the width of each image is set by ImageMagick automatically. Default behavior is recommended. If the width is given explicitly, file size may increase. formats Settings that apply to each format of source images. The formats option may be used to define lists of targets for each format. If targets for a format are not specified explicitly, the preprocessor will be applied to all targets. Example: formats : eps : targets : - site svg : targets : - docx Formats should be named in lowercase.","title":"Config"},{"location":"preprocessors/includes/","tags":["preprocessor","git"],"text":"Includes \u00b6 Includes for Foliant \u00b6 Includes preprocessor lets you reuse parts of other documents in your Foliant project sources. It can include from files on your local machine and remote Git repositories. You can include entire documents as well as parts between particular headings, removing or normalizing included headings on the way. Installation \u00b6 $ pip install foliantcontrib.includes Config \u00b6 To enable the preprocessor with default options, add includes to preprocessors section in the project config: preprocessors : - includes The preprocessor has a number of options: preprocessors : - includes : cache_dir : !path .includescache recursive : true extensions : - md - j2 aliases : ... cache_dir Path to the directory for cloned Git repositories. It can be a path relative to the project path or a global one; you can use ~/ shortcut. Note To include files from remote repositories, the preprocessor clones them. To save time during build, cloned repositories are stored and reused in future builds. recursive Flag that defines whether includes in included documents should be processed. extensions List of file extensions that defines the types of files which should be processed looking for include statements. Might be useful if you need to include some content from third-party sources into non-Markdown files like configs, templates, reports, etc. Defaults to [md] . aliases Mapping from aliases to Git repository URLs. Once defined here, an alias can be used to refer to the repository instead of its full URL. Note Aliases are available only within the legacy syntax of include statements (see below). For example, if you set this alias in the config: - includes: aliases: foo: https://github.com/boo/bar.git baz: https://github.com/foo/far.git#develop you can include the content of doc.md files from these repositories using the following syntax: <include>$foo$path/to/doc.md</include> <include>$baz#master$path/to/doc.md</include> Note that in the second example the default revision ( develop ) will be overridden with the custom one ( master ). Usage \u00b6 The preprocessor allows two syntax variants for include statements. The legacy syntax is simpler and shorter but less flexible. There are no plans to extend it. The new syntax introduced in version 1.1.0 is stricter and more flexible. It is more suitable for complex cases, and it can be easily extended in the future. This is the preferred syntax. Both variants of syntax use the <include>...</include> tags. If the included file is specified between the tags, it\u2019s the legacy syntax. If the file is referenced in the tag attributes ( src , repo_url , path ), it\u2019s the new one. The New Syntax \u00b6 To enforce using the new syntax rules, put no content between <include>...</include> tags, and specify a local file or a file in a remote Git repository in tag attributes. To include a local file, use the src attribute: Text below is taken from another document. <include src=\"path/to/another/document.md\"></include> To include a file from a remote Git repository, use the repo_url and path attributes: Text below is taken from a remote repository. <include repo_url=\"https://github.com/foo/bar.git\" path=\"path/to/doc.md\"></include> You have to specify the full remote repository URL in the repo_url attribute, aliases are not supported here. Optional branch or revision can be specified in the revision attribute: Text below is taken from a remote repository on branch develop. <include repo_url=\"https://github.com/foo/bar.git\" revision=\"develop\" path=\"path/to/doc.md\"></include> To include a code snippet, use wrap_code and code_language attributes: <include src=\"path/to/some/config.yaml\" wrap_code=\"triple_backticks\" code_language=\"yaml\"> </include> Attributes \u00b6 src Path to the local file to include. url HTTP(S) URL of the content that should be included. repo_url Full remote Git repository URL without a revision. path Path to the file inside the remote Git repository. Note If you are using the new syntax, the src attribute is required to include a local file, url is required to include a remote file, and the repo_url and path attributes are required to include a file from a remote Git repository. All other attributes are optional. Note Foliant 1.0.9 supports the processing of attribute values as YAML. You can precede the values of attributes by the !path , !project_path , and !rel_path modifiers (i.e. YAML tags). These modifiers can be useful in the src , path , and project_root attributes. revision Revision of the Git repository. from_heading Full content of the starting heading when it\u2019s necessary to include some part of the referenced file content. If the to_heading , to_id , or to_end attribute is not specified, the preprocessor cuts the included content to the next heading of the same level. The referenced heading is included. to_heading Full content of the ending heading when it\u2019s necessary to include some part of the referenced file content. The referenced heading will not be included. from_id ID of the starting heading or starting anchor when it\u2019s necessary to include some part of the referenced file content. The from_id attribute has higher priority than from_heading . If the to_heading , to_id , or to_end attribute is not specified, the preprocessor cuts the included content to the next heading of the same level. The referenced id is included. NOTE: If you want from_id and to_id features to work with anchors , make sure that anchors preprocessor is listed after includes in foliant.yml. to_id ID of the ending heading or ending anchor when it\u2019s necessary to include some part of the referenced file content. The to_id attribute has higher priority than to_heading . The referenced id will not be included. to_end Flag that tells the preprocessor to cut to the end of the included content. Otherwise, if from_heading or from_id is specified, the preprocessor cuts the included content to the next heading of the same level as the starting heading, or the heading that precedes the starting anchor. Example: ## Some Heading {#custom_id} <anchor>one_more_custom_id</anchor> Here Some Heading {#custom_id} is the full content of the heading, custom_id is its ID, and one_more_custom_id is the ID of the anchor. wrap_code Attribute that allows to mark up the included content as fence code block or inline code by wrapping the content with additional Markdown syntax constructions. Available values are: triple_backticks \u2014to add triple backticks separated with newlines before and after the included content; triple_tildas \u2014to do the same but using triple tildas; single_backticks \u2014to add single backticks before and after the included content without adding extra newlines. Note that this attribute doesn\u2019t affect the included content. So if the content consists of multiple lines, and the wrap_code attribute with the value single_backticks is set, all newlines within the content will be kept. To perform forced conversion of multiple lines into one, use the inline attribute. code_language Language of the included code snippet that should be additionally marked up as fence code block by using the wrap_code attribute with the value triple_backticks or triple_tildas . Note that the code_language attribute doesn\u2019t take effect to inline code that is obtained when the single_backticks value is used. The value of this attribute should be a string without whitespace characters, usually in lowercase; examples: python , bash , json . Optional Attributes Supported in Both Syntax Variants \u00b6 sethead The level of the topmost heading in the included content. Use it to guarantee that the included text does not break the parent document\u2019s heading order: # Title ## Subtitle <include src=\"other.md\" sethead=\"3\"></include> nohead Flag that tells the preprocessor to strip the starting heading from the included content: # My Custom Heading <include src=\"other.md\" from_heading=\"Original Heading\" nohead=\"true\"></include> Default is false . By default, the starting heading is included to the output, and the ending heading is not. Starting and ending anchors are never included into the output. inline Flag that tells the preprocessor to replace sequences of whitespace characters of many kinds (including \\r , \\n , and \\t ) with single spaces ( ) in the included content, and then to strip leading and trailing spaces. It may be useful in single-line table cells. Default value is false . project_root Path to the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to. This option may be needed to resolve the !path and !project_path modifiers in the included content properly. Note By default, if a local file is included, project_root points to the top-level directory of the current Foliant project, and if a file in a remote Git repository is referenced, project_root points to the top-level directory of this repository. In most cases you don\u2019t need to override the default behavior. Different options can be combined. For example, use both sethead and nohead if you need to include a section with a custom heading: # My Custom Heading <include src=\"other.md\" from_heading=\"Original Heading\" sethead=\"1\" nohead=\"true\"></include> The Legacy Syntax \u00b6 This syntax was the only supported in the preprocessor up to version 1.0.11. It\u2019s weird and cryptic, you had to memorize strange rules about $ , # and stuff. The new syntax described above is much cleaner. The legacy syntax is kept for backward compatibility. To use it, put the reference to the included file between <include>...</include> tags. Local path example: Text below is taken from another document. <include>path/to/another/document.md</include> The path may be either relative to currently processed Markdown file or absolute. To include a document from a remote Git repository, put its URL between $ s before the document path: Text below is taken from a remote repository. <include> $https://github.com/foo/bar.git$path/to/doc.md </include> If the repository alias is defined in the project config, you can use it instead of the URL: - includes : aliases : foo : https://github.com/foo/bar.git And then in the source: <include>$foo$path/to/doc.md</include> You can also specify a particular branch or revision: Text below is taken from a remote repository on branch develop. <include>$foo#develop$path/to/doc.md</include> To include a part of a document between two headings, use the #Start:Finish syntax after the file path: Include content from \u201cIntro\u201d up to \u201cCredits\u201d: <include>sample.md#Intro:Credits</include> Include content from start up to \u201cCredits\u201d: <include>sample.md#:Credits</include> Include content from \u201cIntro\u201d up to the next heading of the same level: <include>sample.md#Intro</include> In the legacy syntax, problems may occur with the use of $ , # , and : characters in filenames and headings, since these characters may be interpreted as delimeters.","title":"Includes"},{"location":"preprocessors/includes/#includes","text":"","title":"Includes"},{"location":"preprocessors/includes/#includes-for-foliant","text":"Includes preprocessor lets you reuse parts of other documents in your Foliant project sources. It can include from files on your local machine and remote Git repositories. You can include entire documents as well as parts between particular headings, removing or normalizing included headings on the way.","title":"Includes for Foliant"},{"location":"preprocessors/includes/#installation","text":"$ pip install foliantcontrib.includes","title":"Installation"},{"location":"preprocessors/includes/#config","text":"To enable the preprocessor with default options, add includes to preprocessors section in the project config: preprocessors : - includes The preprocessor has a number of options: preprocessors : - includes : cache_dir : !path .includescache recursive : true extensions : - md - j2 aliases : ... cache_dir Path to the directory for cloned Git repositories. It can be a path relative to the project path or a global one; you can use ~/ shortcut. Note To include files from remote repositories, the preprocessor clones them. To save time during build, cloned repositories are stored and reused in future builds. recursive Flag that defines whether includes in included documents should be processed. extensions List of file extensions that defines the types of files which should be processed looking for include statements. Might be useful if you need to include some content from third-party sources into non-Markdown files like configs, templates, reports, etc. Defaults to [md] . aliases Mapping from aliases to Git repository URLs. Once defined here, an alias can be used to refer to the repository instead of its full URL. Note Aliases are available only within the legacy syntax of include statements (see below). For example, if you set this alias in the config: - includes: aliases: foo: https://github.com/boo/bar.git baz: https://github.com/foo/far.git#develop you can include the content of doc.md files from these repositories using the following syntax: <include>$foo$path/to/doc.md</include> <include>$baz#master$path/to/doc.md</include> Note that in the second example the default revision ( develop ) will be overridden with the custom one ( master ).","title":"Config"},{"location":"preprocessors/includes/#usage","text":"The preprocessor allows two syntax variants for include statements. The legacy syntax is simpler and shorter but less flexible. There are no plans to extend it. The new syntax introduced in version 1.1.0 is stricter and more flexible. It is more suitable for complex cases, and it can be easily extended in the future. This is the preferred syntax. Both variants of syntax use the <include>...</include> tags. If the included file is specified between the tags, it\u2019s the legacy syntax. If the file is referenced in the tag attributes ( src , repo_url , path ), it\u2019s the new one.","title":"Usage"},{"location":"preprocessors/includes/#the-new-syntax","text":"To enforce using the new syntax rules, put no content between <include>...</include> tags, and specify a local file or a file in a remote Git repository in tag attributes. To include a local file, use the src attribute: Text below is taken from another document. <include src=\"path/to/another/document.md\"></include> To include a file from a remote Git repository, use the repo_url and path attributes: Text below is taken from a remote repository. <include repo_url=\"https://github.com/foo/bar.git\" path=\"path/to/doc.md\"></include> You have to specify the full remote repository URL in the repo_url attribute, aliases are not supported here. Optional branch or revision can be specified in the revision attribute: Text below is taken from a remote repository on branch develop. <include repo_url=\"https://github.com/foo/bar.git\" revision=\"develop\" path=\"path/to/doc.md\"></include> To include a code snippet, use wrap_code and code_language attributes: <include src=\"path/to/some/config.yaml\" wrap_code=\"triple_backticks\" code_language=\"yaml\"> </include>","title":"The New Syntax"},{"location":"preprocessors/includes/#attributes","text":"src Path to the local file to include. url HTTP(S) URL of the content that should be included. repo_url Full remote Git repository URL without a revision. path Path to the file inside the remote Git repository. Note If you are using the new syntax, the src attribute is required to include a local file, url is required to include a remote file, and the repo_url and path attributes are required to include a file from a remote Git repository. All other attributes are optional. Note Foliant 1.0.9 supports the processing of attribute values as YAML. You can precede the values of attributes by the !path , !project_path , and !rel_path modifiers (i.e. YAML tags). These modifiers can be useful in the src , path , and project_root attributes. revision Revision of the Git repository. from_heading Full content of the starting heading when it\u2019s necessary to include some part of the referenced file content. If the to_heading , to_id , or to_end attribute is not specified, the preprocessor cuts the included content to the next heading of the same level. The referenced heading is included. to_heading Full content of the ending heading when it\u2019s necessary to include some part of the referenced file content. The referenced heading will not be included. from_id ID of the starting heading or starting anchor when it\u2019s necessary to include some part of the referenced file content. The from_id attribute has higher priority than from_heading . If the to_heading , to_id , or to_end attribute is not specified, the preprocessor cuts the included content to the next heading of the same level. The referenced id is included. NOTE: If you want from_id and to_id features to work with anchors , make sure that anchors preprocessor is listed after includes in foliant.yml. to_id ID of the ending heading or ending anchor when it\u2019s necessary to include some part of the referenced file content. The to_id attribute has higher priority than to_heading . The referenced id will not be included. to_end Flag that tells the preprocessor to cut to the end of the included content. Otherwise, if from_heading or from_id is specified, the preprocessor cuts the included content to the next heading of the same level as the starting heading, or the heading that precedes the starting anchor. Example: ## Some Heading {#custom_id} <anchor>one_more_custom_id</anchor> Here Some Heading {#custom_id} is the full content of the heading, custom_id is its ID, and one_more_custom_id is the ID of the anchor. wrap_code Attribute that allows to mark up the included content as fence code block or inline code by wrapping the content with additional Markdown syntax constructions. Available values are: triple_backticks \u2014to add triple backticks separated with newlines before and after the included content; triple_tildas \u2014to do the same but using triple tildas; single_backticks \u2014to add single backticks before and after the included content without adding extra newlines. Note that this attribute doesn\u2019t affect the included content. So if the content consists of multiple lines, and the wrap_code attribute with the value single_backticks is set, all newlines within the content will be kept. To perform forced conversion of multiple lines into one, use the inline attribute. code_language Language of the included code snippet that should be additionally marked up as fence code block by using the wrap_code attribute with the value triple_backticks or triple_tildas . Note that the code_language attribute doesn\u2019t take effect to inline code that is obtained when the single_backticks value is used. The value of this attribute should be a string without whitespace characters, usually in lowercase; examples: python , bash , json .","title":"Attributes"},{"location":"preprocessors/includes/#optional-attributes-supported-in-both-syntax-variants","text":"sethead The level of the topmost heading in the included content. Use it to guarantee that the included text does not break the parent document\u2019s heading order: # Title ## Subtitle <include src=\"other.md\" sethead=\"3\"></include> nohead Flag that tells the preprocessor to strip the starting heading from the included content: # My Custom Heading <include src=\"other.md\" from_heading=\"Original Heading\" nohead=\"true\"></include> Default is false . By default, the starting heading is included to the output, and the ending heading is not. Starting and ending anchors are never included into the output. inline Flag that tells the preprocessor to replace sequences of whitespace characters of many kinds (including \\r , \\n , and \\t ) with single spaces ( ) in the included content, and then to strip leading and trailing spaces. It may be useful in single-line table cells. Default value is false . project_root Path to the top-level (\u201croot\u201d) directory of Foliant project that the included file belongs to. This option may be needed to resolve the !path and !project_path modifiers in the included content properly. Note By default, if a local file is included, project_root points to the top-level directory of the current Foliant project, and if a file in a remote Git repository is referenced, project_root points to the top-level directory of this repository. In most cases you don\u2019t need to override the default behavior. Different options can be combined. For example, use both sethead and nohead if you need to include a section with a custom heading: # My Custom Heading <include src=\"other.md\" from_heading=\"Original Heading\" sethead=\"1\" nohead=\"true\"></include>","title":"Optional Attributes Supported in Both Syntax Variants"},{"location":"preprocessors/includes/#the-legacy-syntax","text":"This syntax was the only supported in the preprocessor up to version 1.0.11. It\u2019s weird and cryptic, you had to memorize strange rules about $ , # and stuff. The new syntax described above is much cleaner. The legacy syntax is kept for backward compatibility. To use it, put the reference to the included file between <include>...</include> tags. Local path example: Text below is taken from another document. <include>path/to/another/document.md</include> The path may be either relative to currently processed Markdown file or absolute. To include a document from a remote Git repository, put its URL between $ s before the document path: Text below is taken from a remote repository. <include> $https://github.com/foo/bar.git$path/to/doc.md </include> If the repository alias is defined in the project config, you can use it instead of the URL: - includes : aliases : foo : https://github.com/foo/bar.git And then in the source: <include>$foo$path/to/doc.md</include> You can also specify a particular branch or revision: Text below is taken from a remote repository on branch develop. <include>$foo#develop$path/to/doc.md</include> To include a part of a document between two headings, use the #Start:Finish syntax after the file path: Include content from \u201cIntro\u201d up to \u201cCredits\u201d: <include>sample.md#Intro:Credits</include> Include content from start up to \u201cCredits\u201d: <include>sample.md#:Credits</include> Include content from \u201cIntro\u201d up to the next heading of the same level: <include>sample.md#Intro</include> In the legacy syntax, problems may occur with the use of $ , # , and : characters in filenames and headings, since these characters may be interpreted as delimeters.","title":"The Legacy Syntax"},{"location":"preprocessors/macros/","tags":["preprocessor","markdown"],"text":"Macros \u00b6 Macros for Foliant \u00b6 Macro is a string with placeholders that is replaced with predefined content during documentation build. Macros are defined in the config. Installation \u00b6 $ pip install foliantcontrib.macros Config \u00b6 Enable the preprocessor by adding it to preprocessors and listing your macros in macros dictionary: preprocessors : - macros : macros : foo : This is a macro definition. bar : \"This is macro with a parameter: {param}\" Usage \u00b6 Here's the simplest usecase for macros: preprocessors : - macros : macros : support_number : \"8 800 123-45-67\" Now, every time you need to insert your support phone number, you put a macro instead: Call you support team: < macro > support_number </ macro > . Here's the number again: < m > support_number </ m > . Macros support params. This simple feature may make your sources a lot tidier: preprocessors : - macros : macros : jira : \"https://mycompany.jira.server.us/jira/ticket?ID={ticket_id}\" Now you don't need to remember the address of your Jira server if you want to reference a ticket: Link to jira ticket: < macro ticket_id = \"DOC-123\" > jira </ macro > Realworld example \u00b6 You can combine Macros with tags by other Foliant preprocessors. This can useful in documentation that should be built into multiple targets, e.g. site and pdf, when the same thing is done differently in one target than in the other. For example, to reference a page in MkDocs, you just put the Markdown file in the link: Here is [another page](another_page.md). But when building documents with Pandoc all sources are flattened into a single Markdown, so you refer to different parts of the document by anchor links: Here is [another page](#another_page). This can be implemented using the Flags preprocessor and its <if></if> tag: Here is [another page]( < if backends = \"pandoc\" > #another_page </ if >< if backends = \"mkdocs\" > another_page.md </ if > ). This bulky construct quickly gets old when you use many cross-references in your documentation. To make your sources cleaner, move this construct to the config as a reusable macro: preprocessors : - macros : macros : ref : <if backends=\"pandoc\">{pandoc}</if><if backends=\"mkdocs\">{mkdocs}</if> - flags And use it in the source: Here is [another page]( < macro pandoc = \"#another_page\" mkdocs = \"another_page.md\" > ref </ macro > ). Just remember, that in this use case macros preprocessor must go before flags preprocessor in the config. This way macros will be already resolved at the time flags starts working.","title":"Macros"},{"location":"preprocessors/macros/#macros","text":"","title":"Macros"},{"location":"preprocessors/macros/#macros-for-foliant","text":"Macro is a string with placeholders that is replaced with predefined content during documentation build. Macros are defined in the config.","title":"Macros for Foliant"},{"location":"preprocessors/macros/#installation","text":"$ pip install foliantcontrib.macros","title":"Installation"},{"location":"preprocessors/macros/#config","text":"Enable the preprocessor by adding it to preprocessors and listing your macros in macros dictionary: preprocessors : - macros : macros : foo : This is a macro definition. bar : \"This is macro with a parameter: {param}\"","title":"Config"},{"location":"preprocessors/macros/#usage","text":"Here's the simplest usecase for macros: preprocessors : - macros : macros : support_number : \"8 800 123-45-67\" Now, every time you need to insert your support phone number, you put a macro instead: Call you support team: < macro > support_number </ macro > . Here's the number again: < m > support_number </ m > . Macros support params. This simple feature may make your sources a lot tidier: preprocessors : - macros : macros : jira : \"https://mycompany.jira.server.us/jira/ticket?ID={ticket_id}\" Now you don't need to remember the address of your Jira server if you want to reference a ticket: Link to jira ticket: < macro ticket_id = \"DOC-123\" > jira </ macro >","title":"Usage"},{"location":"preprocessors/macros/#realworld-example","text":"You can combine Macros with tags by other Foliant preprocessors. This can useful in documentation that should be built into multiple targets, e.g. site and pdf, when the same thing is done differently in one target than in the other. For example, to reference a page in MkDocs, you just put the Markdown file in the link: Here is [another page](another_page.md). But when building documents with Pandoc all sources are flattened into a single Markdown, so you refer to different parts of the document by anchor links: Here is [another page](#another_page). This can be implemented using the Flags preprocessor and its <if></if> tag: Here is [another page]( < if backends = \"pandoc\" > #another_page </ if >< if backends = \"mkdocs\" > another_page.md </ if > ). This bulky construct quickly gets old when you use many cross-references in your documentation. To make your sources cleaner, move this construct to the config as a reusable macro: preprocessors : - macros : macros : ref : <if backends=\"pandoc\">{pandoc}</if><if backends=\"mkdocs\">{mkdocs}</if> - flags And use it in the source: Here is [another page]( < macro pandoc = \"#another_page\" mkdocs = \"another_page.md\" > ref </ macro > ). Just remember, that in this use case macros preprocessor must go before flags preprocessor in the config. This way macros will be already resolved at the time flags starts working.","title":"Realworld example"},{"location":"preprocessors/mermaid/","tags":["preprocessor","diagram"],"text":"Mermaid \u00b6 Mermaid Diagrams Preprocessor for Foliant \u00b6 Mermaid is an open source diagram visualization tool. This preprocessor converts Mermaid diagram definitions in your Markdown files into images on the fly during project build. Installation \u00b6 $ pip install foliantcontrib.mermaid Please note that to use this preprocessor you will also need to install Mermaid and Mermaid CLI: $ npm install mermaid # installs locally $ npm install mermaid.cli Config \u00b6 To enable the preprocessor, add mermaid to preprocessors section in the project config: preprocessors : - mermaid The preprocessor has a number of options: preprocessors : - mermaid : cache_dir : !path .diagramscache mermaid_path : !path node_modules/.bin/mmdc format : svg params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. mermaid_path Path to Mermaid CLI binary. If you installed Mermaid locally this parameter is required. Default: mmdc . format Generated image format. Available: svg , png , pdf . Default svg . params Params passed to the image generation command: preprocessors: - mermaid: params: theme: forest To see the full list of available params, run mmdc -h or check here . Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <mermaid>...</mermaid> tags: Here\u2019s a diagram: <mermaid> graph TD; A-->B; </mermaid> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: <mermaid caption=\"Deployment diagram\" params=\"theme: dark\"> </mermaid> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Mermaid"},{"location":"preprocessors/mermaid/#mermaid","text":"","title":"Mermaid"},{"location":"preprocessors/mermaid/#mermaid-diagrams-preprocessor-for-foliant","text":"Mermaid is an open source diagram visualization tool. This preprocessor converts Mermaid diagram definitions in your Markdown files into images on the fly during project build.","title":"Mermaid Diagrams Preprocessor for Foliant"},{"location":"preprocessors/mermaid/#installation","text":"$ pip install foliantcontrib.mermaid Please note that to use this preprocessor you will also need to install Mermaid and Mermaid CLI: $ npm install mermaid # installs locally $ npm install mermaid.cli","title":"Installation"},{"location":"preprocessors/mermaid/#config","text":"To enable the preprocessor, add mermaid to preprocessors section in the project config: preprocessors : - mermaid The preprocessor has a number of options: preprocessors : - mermaid : cache_dir : !path .diagramscache mermaid_path : !path node_modules/.bin/mmdc format : svg params : ... cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. mermaid_path Path to Mermaid CLI binary. If you installed Mermaid locally this parameter is required. Default: mmdc . format Generated image format. Available: svg , png , pdf . Default svg . params Params passed to the image generation command: preprocessors: - mermaid: params: theme: forest To see the full list of available params, run mmdc -h or check here .","title":"Config"},{"location":"preprocessors/mermaid/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <mermaid>...</mermaid> tags: Here\u2019s a diagram: <mermaid> graph TD; A-->B; </mermaid> You can set any parameters in the tag options. Tag options have priority over the config options so you can override some values for specific diagrams while having the default ones set up in the config. Tags also have an exclusive option caption \u2014 the markdown caption of the diagram image. Diagram with a caption: <mermaid caption=\"Deployment diagram\" params=\"theme: dark\"> </mermaid> Note that command params listed in the params option are stated in YAML format. Remember that YAML is sensitive to indentation so for several params it is more suitable to use JSON-like mappings: {key1: 1, key2: 'value2'} .","title":"Usage"},{"location":"preprocessors/metagraph/","tags":["preprocessor","diagram"],"text":"MetaGraph \u00b6 MetaGraph preprocessor for Foliant \u00b6 Preprocessor generates Graphviz diagrams of meta sections in the project. Installation \u00b6 $ pip install foliantcontrib.metagraph Config \u00b6 preprocessors : - metagraph : natural : false directed : false draw_all : false natural if true \u2014 the graph is generated based on \"natural\" section structure: main sections are connected to the inner sections, which are connected to their child sections and so on. If false \u2014 the connections are deretmined by the relates meta section of each chapter. Default: false directed If true \u2014 draws a directed graph (with arrows). Default: false draw_all If true \u2014 draws all sections, except those which have meta field draw: false . If false \u2014 draws only sections which have meta field draw: true . Default: false Usage \u00b6 First set up a few meta sections: < meta title = \"Main document\" id = \"main\" relates = \"['first', 'sub']\" draw = \"true\" ></ meta > # First title < meta id = \"first\" draw = \"true\" ></ meta > Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nesciunt, atque. ## Subtitle < meta id = \"sub\" draw = \"true\" ></ meta > Then add a metagraph tag somewhere in the project: < metagraph ></ metagraph >","title":"MetaGraph"},{"location":"preprocessors/metagraph/#metagraph","text":"","title":"MetaGraph"},{"location":"preprocessors/metagraph/#metagraph-preprocessor-for-foliant","text":"Preprocessor generates Graphviz diagrams of meta sections in the project.","title":"MetaGraph preprocessor for Foliant"},{"location":"preprocessors/metagraph/#installation","text":"$ pip install foliantcontrib.metagraph","title":"Installation"},{"location":"preprocessors/metagraph/#config","text":"preprocessors : - metagraph : natural : false directed : false draw_all : false natural if true \u2014 the graph is generated based on \"natural\" section structure: main sections are connected to the inner sections, which are connected to their child sections and so on. If false \u2014 the connections are deretmined by the relates meta section of each chapter. Default: false directed If true \u2014 draws a directed graph (with arrows). Default: false draw_all If true \u2014 draws all sections, except those which have meta field draw: false . If false \u2014 draws only sections which have meta field draw: true . Default: false","title":"Config"},{"location":"preprocessors/metagraph/#usage","text":"First set up a few meta sections: < meta title = \"Main document\" id = \"main\" relates = \"['first', 'sub']\" draw = \"true\" ></ meta > # First title < meta id = \"first\" draw = \"true\" ></ meta > Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nesciunt, atque. ## Subtitle < meta id = \"sub\" draw = \"true\" ></ meta > Then add a metagraph tag somewhere in the project: < metagraph ></ metagraph >","title":"Usage"},{"location":"preprocessors/multilinetables/","tags":["preprocessor","table"],"text":"MultilineTables \u00b6 This preprocessor converts tables to multiline and grid format before creating document (very useful especially for pandoc processing). It helps to make tables in doc and pdf formats more proportional \u2014 column with more text in it will be more wide. Also it helps whith processing of extremely wide tables with pandoc. Convertation to the grid format allows arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.). Installation \u00b6 $ pip install foliantcontrib.multilinetables Config \u00b6 To enable the preprocessor with default options, add multilinetables to preprocessors section in the project config: preprocessors : - multilinetables The preprocessor has a number of options (best values set by default): preprocessors : - multilinetables : rewrite_src_files : false min_table_width : 100 keep_narrow_tables : true table_columns_to_scale : 3 enable_hyphenation : false hyph_combination : '<br>' convert_to_grid : false targets : - docx - pdf rewrite_src_file You can update source files after each use of preprocessor. Be careful, previous data will be deleted. min_table_width Wide markdown tables will be shrinked to this width in symbols. This parameter affects scaling - change it if table columns are merging. keep_narrow_tables If true narrow tables will not be stretched to minimum table width. table_columns_to_scale Minimum amount of columns to process the table. enable_hyphenation Switch breaking text in table cells with the tag set in hyph_combination . Good for lists, paragraphs, etc. hyph_combination Custom tag to break a text in multiline tables. convert_to_grid If true tables will be converted to the grid format, that allows arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.). targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Usage \u00b6 Just add preprocessor to the project config and enjoy the result.","title":"MultilineTables"},{"location":"preprocessors/multilinetables/#multilinetables","text":"This preprocessor converts tables to multiline and grid format before creating document (very useful especially for pandoc processing). It helps to make tables in doc and pdf formats more proportional \u2014 column with more text in it will be more wide. Also it helps whith processing of extremely wide tables with pandoc. Convertation to the grid format allows arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.).","title":"MultilineTables"},{"location":"preprocessors/multilinetables/#installation","text":"$ pip install foliantcontrib.multilinetables","title":"Installation"},{"location":"preprocessors/multilinetables/#config","text":"To enable the preprocessor with default options, add multilinetables to preprocessors section in the project config: preprocessors : - multilinetables The preprocessor has a number of options (best values set by default): preprocessors : - multilinetables : rewrite_src_files : false min_table_width : 100 keep_narrow_tables : true table_columns_to_scale : 3 enable_hyphenation : false hyph_combination : '<br>' convert_to_grid : false targets : - docx - pdf rewrite_src_file You can update source files after each use of preprocessor. Be careful, previous data will be deleted. min_table_width Wide markdown tables will be shrinked to this width in symbols. This parameter affects scaling - change it if table columns are merging. keep_narrow_tables If true narrow tables will not be stretched to minimum table width. table_columns_to_scale Minimum amount of columns to process the table. enable_hyphenation Switch breaking text in table cells with the tag set in hyph_combination . Good for lists, paragraphs, etc. hyph_combination Custom tag to break a text in multiline tables. convert_to_grid If true tables will be converted to the grid format, that allows arbitrary cell' content (multiple paragraphs, code blocks, lists, etc.). targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Config"},{"location":"preprocessors/multilinetables/#usage","text":"Just add preprocessor to the project config and enjoy the result.","title":"Usage"},{"location":"preprocessors/pgsqldoc/","tags":["preprocessor","database","deprecated"],"text":"Pgsqldoc \u00b6 PostgreSQL Docs Generator for Foliant \u00b6 This preprocessor is DEPRECATED. Please, use DBDoc instead. This preprocessor generates simple documentation of a PostgreSQL database based on its structure. It uses Jinja2 templating engine for customizing the layout and PlantUML for drawing the database scheme. Installation \u00b6 $ pip install foliantcontrib.pgsqldoc Config \u00b6 To enable the preprocessor, add pgsqldoc to preprocessors section in the project config: preprocessors : - pgsqldoc The preprocessor has a number of options: preprocessors : - pgsqldoc : host : localhost port : 5432 dbname : postgres user : postgres password : '' draw : false filters : ... doc_template : pgsqldoc.j2 scheme_template : scheme.j2 host PostgreSQL database host address. Default: localhost port PostgreSQL database port. Default: 5432 dbname PostgreSQL database name. Default: postgres user PostgreSQL user name. Default: postgres passwrod PostgreSQL user password. draw If this parameter is true \u2014 preprocessor would generate scheme of the database and add it to the end of the document. Default: false filters SQL-like operators for filtering the results. More info in the Filters section. doc_template Path to jinja-template for documentation. Path is relative to the project directory. Default: pgsqldoc.j2 scheme_template Path to jinja-template for scheme. Path is relative to the project directory. Default: scheme.j2 Usage \u00b6 Add a <pgsqldoc></pgsqldoc> tag at the position in the document where the generated documentation of a PostgreSQL database should be inserted: # Introduction This document contains the most awesome automatically generated documentation of our marvellous database. <pgsqldoc></pgsqldoc> Each time the preprocessor encounters the tag <pgsqldoc></pgsqldoc> it inserts the whole generated documentation text instead of it. The connection parameters are taken from the config-file. You can also specify some parameters (or all of them) in the tag options: # Introduction Introduction text for database documentation. <pgsqldoc draw=\"true\" host=\"11.51.126.8\" port=\"5432\" dbname=\"mydb\" user=\"scott\" password=\"tiger\"> </pgsqldoc> Tag parameters have the highest priority. This way you can have documentation for several different databases in one foliant project (even in one md-file if you like it so). Filters \u00b6 You can add filters to exclude some tables from the documentation. Pgsqldocs supports several SQL-like filtering operators and a determined list of filtering fields. You can switch on filters either in foliant.yml file like this: preprocessors : - pgsqldoc : filters : eq : schema : public regex : table_name : 'main_.+' or in tag options using the same yaml-syntax: <pgsqldoc filters=\" eq: schema: public regex: table_name: 'main_.+'\"> </pgsqldoc> List of currently supported operators: operator SQL equivalent description value eq = equals literal not_eq != does not equal literal in IN contains list not_in NOT IN does not contain list regex ~ matches regular expression literal not_regex !~ does not match regular expression literal List of currently supported filtering fields: field description schema filter by PostgreSQL database schema table_name filter by database table names The syntax for using filters in configuration files is following: filters : <operator> : <field> : value If value should be list like for in operator, use YAML-lists instead: filters : in : schema : - public - corp About Templates \u00b6 The structure of generated documentation is defined by jinja-templates. You can choose what elements will appear in the documentation, change their positions, add constant text, change layouts and more. Check the Jinja documentation for info on all cool things you can do with templates. If you don't specify path to templates in the config-file and tag-options pgsqldoc will use default paths: <Project_path>/pgsqldoc.j2 for documentation template; <Project_path>/scheme.j2 for database scheme source template. If pgsqldoc can't find these templates in the project dir it will generate default templates and put them there. So if you accidentally mess things up while experimenting with templates you can always delete your templates and run preprocessor \u2014 the default ones will appear in the project dir. (But only if the templates are not specified in config-file or their names are the same as defaults). One more useful thing about default templates is that you can find a detailed description of the source data they get from pgsqldoc in the beginning of the template.","title":"Pgsqldoc"},{"location":"preprocessors/pgsqldoc/#pgsqldoc","text":"","title":"Pgsqldoc"},{"location":"preprocessors/pgsqldoc/#postgresql-docs-generator-for-foliant","text":"This preprocessor is DEPRECATED. Please, use DBDoc instead. This preprocessor generates simple documentation of a PostgreSQL database based on its structure. It uses Jinja2 templating engine for customizing the layout and PlantUML for drawing the database scheme.","title":"PostgreSQL Docs Generator for Foliant"},{"location":"preprocessors/pgsqldoc/#installation","text":"$ pip install foliantcontrib.pgsqldoc","title":"Installation"},{"location":"preprocessors/pgsqldoc/#config","text":"To enable the preprocessor, add pgsqldoc to preprocessors section in the project config: preprocessors : - pgsqldoc The preprocessor has a number of options: preprocessors : - pgsqldoc : host : localhost port : 5432 dbname : postgres user : postgres password : '' draw : false filters : ... doc_template : pgsqldoc.j2 scheme_template : scheme.j2 host PostgreSQL database host address. Default: localhost port PostgreSQL database port. Default: 5432 dbname PostgreSQL database name. Default: postgres user PostgreSQL user name. Default: postgres passwrod PostgreSQL user password. draw If this parameter is true \u2014 preprocessor would generate scheme of the database and add it to the end of the document. Default: false filters SQL-like operators for filtering the results. More info in the Filters section. doc_template Path to jinja-template for documentation. Path is relative to the project directory. Default: pgsqldoc.j2 scheme_template Path to jinja-template for scheme. Path is relative to the project directory. Default: scheme.j2","title":"Config"},{"location":"preprocessors/pgsqldoc/#usage","text":"Add a <pgsqldoc></pgsqldoc> tag at the position in the document where the generated documentation of a PostgreSQL database should be inserted: # Introduction This document contains the most awesome automatically generated documentation of our marvellous database. <pgsqldoc></pgsqldoc> Each time the preprocessor encounters the tag <pgsqldoc></pgsqldoc> it inserts the whole generated documentation text instead of it. The connection parameters are taken from the config-file. You can also specify some parameters (or all of them) in the tag options: # Introduction Introduction text for database documentation. <pgsqldoc draw=\"true\" host=\"11.51.126.8\" port=\"5432\" dbname=\"mydb\" user=\"scott\" password=\"tiger\"> </pgsqldoc> Tag parameters have the highest priority. This way you can have documentation for several different databases in one foliant project (even in one md-file if you like it so).","title":"Usage"},{"location":"preprocessors/pgsqldoc/#filters","text":"You can add filters to exclude some tables from the documentation. Pgsqldocs supports several SQL-like filtering operators and a determined list of filtering fields. You can switch on filters either in foliant.yml file like this: preprocessors : - pgsqldoc : filters : eq : schema : public regex : table_name : 'main_.+' or in tag options using the same yaml-syntax: <pgsqldoc filters=\" eq: schema: public regex: table_name: 'main_.+'\"> </pgsqldoc> List of currently supported operators: operator SQL equivalent description value eq = equals literal not_eq != does not equal literal in IN contains list not_in NOT IN does not contain list regex ~ matches regular expression literal not_regex !~ does not match regular expression literal List of currently supported filtering fields: field description schema filter by PostgreSQL database schema table_name filter by database table names The syntax for using filters in configuration files is following: filters : <operator> : <field> : value If value should be list like for in operator, use YAML-lists instead: filters : in : schema : - public - corp","title":"Filters"},{"location":"preprocessors/pgsqldoc/#about-templates","text":"The structure of generated documentation is defined by jinja-templates. You can choose what elements will appear in the documentation, change their positions, add constant text, change layouts and more. Check the Jinja documentation for info on all cool things you can do with templates. If you don't specify path to templates in the config-file and tag-options pgsqldoc will use default paths: <Project_path>/pgsqldoc.j2 for documentation template; <Project_path>/scheme.j2 for database scheme source template. If pgsqldoc can't find these templates in the project dir it will generate default templates and put them there. So if you accidentally mess things up while experimenting with templates you can always delete your templates and run preprocessor \u2014 the default ones will appear in the project dir. (But only if the templates are not specified in config-file or their names are the same as defaults). One more useful thing about default templates is that you can find a detailed description of the source data they get from pgsqldoc in the beginning of the template.","title":"About Templates"},{"location":"preprocessors/plantuml/","tags":["preprocessor","diagram"],"text":"Plantuml \u00b6 PlantUML Diagrams Preprocessor for Foliant \u00b6 PlantUML is a tool to generate diagrams from plain text. This preprocessor finds PlantUML diagrams definitions in the source and converts them into images on the fly during project build. Installation \u00b6 $ pip install foliantcontrib.plantuml Config \u00b6 To enable the preprocessor, add plantuml to preprocessors section in the project config: preprocessors : - plantuml The preprocessor has a number of options: preprocessors : - plantuml : cache_dir : !path .diagramscache plantuml_path : plantuml format : png params : ... parse_raw : true as_image : true cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. Note To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. plantuml_path Path to PlantUML launcher. By default, it is assumed that you have the command plantuml in your PATH , but if PlantUML uses another command to launch, or if the plantuml launcher is installed in a custom place, you can define it here. format Diagram format, list of supported formats . Default: png . Another way to specify format is to use t<format> option in params . params Params passed to the image generation command: preprocessors: - plantuml: params: config: !path plantuml.cfg To see the full list of params, run the command that launches PlantUML, with -h command line option. parse_raw If this flag is true , the preprocessor will also process all PlantUML diagrams which are not wrapped in <plantuml>...</plantuml> tags. Default value is false . as_image If true \u2014 inserts scheme into document as md-image. If false \u2014 inserts the file generated by PlantUML directly into the document (only for svg format). Default: true Usage \u00b6 To insert a diagram definition in your Markdown source, enclose it between <plantuml>...</plantuml> tags (indentation inside tags is optional): Here\u2019s a diagram: <plantuml> @startuml ... @enduml </plantuml> To set a caption, use caption option: Diagram with a caption: <plantuml caption=\"Sample diagram from the official site\"> @startuml ... @enduml </plantuml> You can override values from the preprocessor config for each diagram. By default, diagrams are in PNG. But this diagram is in EPS: <plantuml caption=\"Vector diagram\" format=\"eps\"> @startuml ... @enduml </plantuml> Sometimes it can be necessary to process auto-generated documents that contain multiple PlantUML diagrams definitions without using Foliant-specific tags syntax. Use the parse_raw option in these cases.","title":"Plantuml"},{"location":"preprocessors/plantuml/#plantuml","text":"","title":"Plantuml"},{"location":"preprocessors/plantuml/#plantuml-diagrams-preprocessor-for-foliant","text":"PlantUML is a tool to generate diagrams from plain text. This preprocessor finds PlantUML diagrams definitions in the source and converts them into images on the fly during project build.","title":"PlantUML Diagrams Preprocessor for Foliant"},{"location":"preprocessors/plantuml/#installation","text":"$ pip install foliantcontrib.plantuml","title":"Installation"},{"location":"preprocessors/plantuml/#config","text":"To enable the preprocessor, add plantuml to preprocessors section in the project config: preprocessors : - plantuml The preprocessor has a number of options: preprocessors : - plantuml : cache_dir : !path .diagramscache plantuml_path : plantuml format : png params : ... parse_raw : true as_image : true cache_dir Path to the directory with the generated diagrams. It can be a path relative to the project root or a global one; you can use ~/ shortcut. Note To save time during build, only new and modified diagrams are rendered. The generated images are cached and reused in future builds. plantuml_path Path to PlantUML launcher. By default, it is assumed that you have the command plantuml in your PATH , but if PlantUML uses another command to launch, or if the plantuml launcher is installed in a custom place, you can define it here. format Diagram format, list of supported formats . Default: png . Another way to specify format is to use t<format> option in params . params Params passed to the image generation command: preprocessors: - plantuml: params: config: !path plantuml.cfg To see the full list of params, run the command that launches PlantUML, with -h command line option. parse_raw If this flag is true , the preprocessor will also process all PlantUML diagrams which are not wrapped in <plantuml>...</plantuml> tags. Default value is false . as_image If true \u2014 inserts scheme into document as md-image. If false \u2014 inserts the file generated by PlantUML directly into the document (only for svg format). Default: true","title":"Config"},{"location":"preprocessors/plantuml/#usage","text":"To insert a diagram definition in your Markdown source, enclose it between <plantuml>...</plantuml> tags (indentation inside tags is optional): Here\u2019s a diagram: <plantuml> @startuml ... @enduml </plantuml> To set a caption, use caption option: Diagram with a caption: <plantuml caption=\"Sample diagram from the official site\"> @startuml ... @enduml </plantuml> You can override values from the preprocessor config for each diagram. By default, diagrams are in PNG. But this diagram is in EPS: <plantuml caption=\"Vector diagram\" format=\"eps\"> @startuml ... @enduml </plantuml> Sometimes it can be necessary to process auto-generated documents that contain multiple PlantUML diagrams definitions without using Foliant-specific tags syntax. Use the parse_raw option in these cases.","title":"Usage"},{"location":"preprocessors/ramldoc/","tags":["preprocessor","API"],"text":"RAMLDoc \u00b6 RAML API Docs Generator for Foliant \u00b6 This preprocessor generates Markdown documentation from RAML spec files. It uses raml2html converter with raml2html-full-markdown-theme . raml2html uses Nunjucks templating system. Installation \u00b6 First install raml2html and the markdown theme: $ npm install -g raml2html raml2html-full-markdown-theme Then install the preprocessor: $ pip install foliantcontrib.ramldoc Config \u00b6 To enable the preprocessor, add ramldoc to preprocessors section in the project config: preprocessors : - ramldoc The preprocessor has a number of options: preprocessors : - ramldoc : spec_url : http://localhost/my_api.raml spec_path : !path my_api.raml template_dir : !path custom_templates raml2html_path : raml2html spec_url URL to RAML spec file. If it is a list \u2014 preprocessor picks the first working URL. spec_path Local path to RAML spec file. If both URL and path are specified \u2014 preprocessor first tries to fetch spec from URL, and then (if that fails) looks for the file on local path. template_dir Path to directory with Nunjucks templates. If not specified \u2014 default template is used. The main template in the directory must have a name root.nunjucks . raml2html_path Path to raml2html binary. Default: raml2html Usage \u00b6 Add a <ramldoc></ramldoc> tag at the position in the document where the generated documentation should be inserted: # Introduction This document contains the automatically generated documentation of our API. <ramldoc></ramldoc> Each time the preprocessor encounters the tag <ramldoc></ramldoc> it inserts the whole generated documentation text instead of it. The path or url to RAML spec file are taken from foliant.yml. You can also specify some parameters (or all of them) in the tag options: # Introduction Introduction text for API documentation. <ramldoc spec_url=\"http://localhost/my_api.raml\" template_dir=\"assets/templates\"> </ramldoc> Tag parameters have the highest priority. This way you can have documentation from several different RAML spec files in one Foliant project (even in one md-file if you like it so). Customizing output \u00b6 The output markdown is generated by raml2html converter, which uses Nunjucks templating engine (with syntax similar to Jinja2 . If you want to create your own template or modify the default one, specify the template_dir parameter. The main template file in template dir must be named root.nunjucks . You may use the default template as your starting point.","title":"RAMLDoc"},{"location":"preprocessors/ramldoc/#ramldoc","text":"","title":"RAMLDoc"},{"location":"preprocessors/ramldoc/#raml-api-docs-generator-for-foliant","text":"This preprocessor generates Markdown documentation from RAML spec files. It uses raml2html converter with raml2html-full-markdown-theme . raml2html uses Nunjucks templating system.","title":"RAML API Docs Generator for Foliant"},{"location":"preprocessors/ramldoc/#installation","text":"First install raml2html and the markdown theme: $ npm install -g raml2html raml2html-full-markdown-theme Then install the preprocessor: $ pip install foliantcontrib.ramldoc","title":"Installation"},{"location":"preprocessors/ramldoc/#config","text":"To enable the preprocessor, add ramldoc to preprocessors section in the project config: preprocessors : - ramldoc The preprocessor has a number of options: preprocessors : - ramldoc : spec_url : http://localhost/my_api.raml spec_path : !path my_api.raml template_dir : !path custom_templates raml2html_path : raml2html spec_url URL to RAML spec file. If it is a list \u2014 preprocessor picks the first working URL. spec_path Local path to RAML spec file. If both URL and path are specified \u2014 preprocessor first tries to fetch spec from URL, and then (if that fails) looks for the file on local path. template_dir Path to directory with Nunjucks templates. If not specified \u2014 default template is used. The main template in the directory must have a name root.nunjucks . raml2html_path Path to raml2html binary. Default: raml2html","title":"Config"},{"location":"preprocessors/ramldoc/#usage","text":"Add a <ramldoc></ramldoc> tag at the position in the document where the generated documentation should be inserted: # Introduction This document contains the automatically generated documentation of our API. <ramldoc></ramldoc> Each time the preprocessor encounters the tag <ramldoc></ramldoc> it inserts the whole generated documentation text instead of it. The path or url to RAML spec file are taken from foliant.yml. You can also specify some parameters (or all of them) in the tag options: # Introduction Introduction text for API documentation. <ramldoc spec_url=\"http://localhost/my_api.raml\" template_dir=\"assets/templates\"> </ramldoc> Tag parameters have the highest priority. This way you can have documentation from several different RAML spec files in one Foliant project (even in one md-file if you like it so).","title":"Usage"},{"location":"preprocessors/ramldoc/#customizing-output","text":"The output markdown is generated by raml2html converter, which uses Nunjucks templating engine (with syntax similar to Jinja2 . If you want to create your own template or modify the default one, specify the template_dir parameter. The main template file in template dir must be named root.nunjucks . You may use the default template as your starting point.","title":"Customizing output"},{"location":"preprocessors/reindexer/","tags":["preprocessor","search"],"text":"Reindexer \u00b6 Reindexer Integration Extension \u00b6 This extension allows to integrate Foliant-managed documentation projects with the in-memory DBMS Reindexer to use it as a fulltext search engine. The main part of this extension is a preprocessor that prepares data for a search index. In addition, the preprocessor performs basic manipulations with the database and the namespace in it. Also this extension provides a simple working example of a client-side Web application that may be used to perform searching. By editing HTML, CSS and JS code you may customize it according to your needs. Installation \u00b6 To install the preprocessor, run the command: $ pip install foliantcontrib.reindexer To use an example of a client-side Web application for searching, download these HTML, CSS, and JS files and open the file index.html in your Web browser. Config \u00b6 To enable the preprocessor, add reindexer to preprocessors section in the project config: preprocessors : - reindexer The preprocessor has a number of options with the following default values: preprocessors : - reindexer : reindexer_url : http://127.0.0.1:9088/ insert_max_bytes : 0 database : '' namespace : '' namespace_renamed : '' fulltext_config : {} actions : - drop_database - create_database - create_namespace - insert_items use_chapters : true format : plaintext escape_html : true url_transform : - '\\/?index\\.md$' : '/' - '\\.md$' : '/' - '^([^\\/]+)' : '/\\g<1>' require_env : false targets : [] reindexer_url URL of your Reindexer instance. \u201cRoot\u201d server URL should be used here, do not add any endpoints such as /api/v1/db to it. insert_max_bytes Reindexer itself or a proxy server may limit the available size of request body. Use this option, if it\u2019s needed to split a large amount of content for indexing into several chunks, so each of them will be sent in a separate request. The value of this option represents maximum size of HTTP POST request body in bytes. Allowed values are positive integers starting from 1024 , and 0 (default) meaning no limits. database Name of the database that is used to store your search index. namespace Name of the namespace in the specified database. Namespace in Reindexer means the same as table in relational databases. To store the search index for one documentation project, single namespace is enough. namespace_renamed New namespace name to be applied if the rename option is used; see below. fulltext_config The value of the config field that refers to the description of the composite fulltext index over the title and content data fields. Used data structure is described below. Fulltext indexes config options are listed in the Reindexer\u2019s official documentation. actions Sequence of actions that the preprocessor should to perform. Available item values are: drop_database \u2014 fully remove the database that is specified as the value of the database option. Please be careful using this action when the single database is used to store multiple namespaces. Since this action is included to the default actions list, it\u2019s recommended to use separate databases for each search index. The default list of actions assumes that in most cases it\u2019s needed to remove and then fully rebuild the index, and wherein the database and the namespace may not exist; create_database \u2014 create the new database with the name specified as the database option value; drop_namespace \u2014 delete the namespace that is specified as the namespace option value. All *_namespace actions are applied to the existing database with the name from the database option; truncate_namespace \u2014 remove all items from the namespace that is specified as the namespace option value, but keep the namespace itself; rename_namespace \u2014 rename the existing namespace that has the name specified as the namespace option value, to the new name from the renamed_namespace option. This action may be useful when a common search index is created for multiple Foliant projects, and the index may remain incomplete for a long time during their building; create_namespace \u2014 create the new namespace with the name from the namespace option; insert_items \u2014 fill the namespace that is specified in the namespace option, with the content that should be indexed. Each data item added to the namespace corresponds a single Markdown file of the documentation project. use_chapters If set to true (by default), the preprocessor applies only to the files that are mentioned in the chapters section of the project config. Otherwise, the preprocessor applies to all Markdown files of the project. format Format that the source Markdown content should be converted to before adding to the index; available values are: plaintext (by default), html , markdown (for no conversion). escape_html If set to true (by default), HTML syntax constructions in the content converted to plaintext will be escaped by replacing & with &amp; , < with &lt; , > with &gt; , and \" with &quot; . url_transform Sequence of rules to transform local paths of source Markdown files into URLs of target pages. Each rule should be a dictionary. Its data is passed to the re.sub() method : key as the pattern argument, and value as the repl argument. The local path (possibly previously transformed) to the source Markdown file relative to the temporary working directory is passed as the string argument. The default value of the url_transform option is designed to be used to build static websites with MkDocs backend. require_env If set to true , the FOLIANT_REINDEXER environment variable must be set to allow the preprocessor to perform any operations with the database and the namespace managed by Reindexer. This flag may be useful in CI/CD jobs. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Usage \u00b6 The preprocessor reads each source Markdown file and prepares three fields for indexing: url \u2014target page URL. This field is used as the primary key, so it must be unique; title \u2014document title, it\u2019s taken from the first heading of source Markdown content; content \u2014source Markdown content, optionally converted into plain text or HTML. When all the files are processed, the preprocessor calls Reindexer API to insert data items (each item corresponds a single Markdown file) into the specified namespace. Also the preprocessor may call Reindexer API to manipulate the database or namespace, e.g. to delete previously created search index. You may perform custom search requests to Reindexer API. The simple client-side Web application example that is provided as a part of this extension, sends to Reindexer queries like this: { \"namespace\" : \"testing\" , \"filters\" : [ { \"field\" : \"indexed_content\" , \"cond\" : \"EQ\" , \"value\" : \"@title^3,content^1 foliant\" } ], \"select_functions\" : [ \"content = snippet(<em>,</em>,100,100,'\\n\\n')\" ], \"limit\" : 50 } To learn how to write efficient queries to Reindexer, you may need to refer to its official documentation on topics: general use , fulltext search , HTTP REST API . In the example above, the indexed_content field corresponds to the composite index over two fields: title and content (this index is generated when the namespace is created by the request from the preprocessor). Text of the search query starts with @title^3,content^1 that means that the title field of the composite index has triple priority (i.e. weighting factor of 3), and the content field has normal priority (i.e. weight coefficient equals to 1). Also the example uses the snippet() select function to highlight the text that matches the query and to cut off excess. If you use self-hosted instance of Reindexer, you may need to configure a proxy to append CORS headers to HTTP API responses.","title":"Reindexer"},{"location":"preprocessors/reindexer/#reindexer","text":"","title":"Reindexer"},{"location":"preprocessors/reindexer/#reindexer-integration-extension","text":"This extension allows to integrate Foliant-managed documentation projects with the in-memory DBMS Reindexer to use it as a fulltext search engine. The main part of this extension is a preprocessor that prepares data for a search index. In addition, the preprocessor performs basic manipulations with the database and the namespace in it. Also this extension provides a simple working example of a client-side Web application that may be used to perform searching. By editing HTML, CSS and JS code you may customize it according to your needs.","title":"Reindexer Integration Extension"},{"location":"preprocessors/reindexer/#installation","text":"To install the preprocessor, run the command: $ pip install foliantcontrib.reindexer To use an example of a client-side Web application for searching, download these HTML, CSS, and JS files and open the file index.html in your Web browser.","title":"Installation"},{"location":"preprocessors/reindexer/#config","text":"To enable the preprocessor, add reindexer to preprocessors section in the project config: preprocessors : - reindexer The preprocessor has a number of options with the following default values: preprocessors : - reindexer : reindexer_url : http://127.0.0.1:9088/ insert_max_bytes : 0 database : '' namespace : '' namespace_renamed : '' fulltext_config : {} actions : - drop_database - create_database - create_namespace - insert_items use_chapters : true format : plaintext escape_html : true url_transform : - '\\/?index\\.md$' : '/' - '\\.md$' : '/' - '^([^\\/]+)' : '/\\g<1>' require_env : false targets : [] reindexer_url URL of your Reindexer instance. \u201cRoot\u201d server URL should be used here, do not add any endpoints such as /api/v1/db to it. insert_max_bytes Reindexer itself or a proxy server may limit the available size of request body. Use this option, if it\u2019s needed to split a large amount of content for indexing into several chunks, so each of them will be sent in a separate request. The value of this option represents maximum size of HTTP POST request body in bytes. Allowed values are positive integers starting from 1024 , and 0 (default) meaning no limits. database Name of the database that is used to store your search index. namespace Name of the namespace in the specified database. Namespace in Reindexer means the same as table in relational databases. To store the search index for one documentation project, single namespace is enough. namespace_renamed New namespace name to be applied if the rename option is used; see below. fulltext_config The value of the config field that refers to the description of the composite fulltext index over the title and content data fields. Used data structure is described below. Fulltext indexes config options are listed in the Reindexer\u2019s official documentation. actions Sequence of actions that the preprocessor should to perform. Available item values are: drop_database \u2014 fully remove the database that is specified as the value of the database option. Please be careful using this action when the single database is used to store multiple namespaces. Since this action is included to the default actions list, it\u2019s recommended to use separate databases for each search index. The default list of actions assumes that in most cases it\u2019s needed to remove and then fully rebuild the index, and wherein the database and the namespace may not exist; create_database \u2014 create the new database with the name specified as the database option value; drop_namespace \u2014 delete the namespace that is specified as the namespace option value. All *_namespace actions are applied to the existing database with the name from the database option; truncate_namespace \u2014 remove all items from the namespace that is specified as the namespace option value, but keep the namespace itself; rename_namespace \u2014 rename the existing namespace that has the name specified as the namespace option value, to the new name from the renamed_namespace option. This action may be useful when a common search index is created for multiple Foliant projects, and the index may remain incomplete for a long time during their building; create_namespace \u2014 create the new namespace with the name from the namespace option; insert_items \u2014 fill the namespace that is specified in the namespace option, with the content that should be indexed. Each data item added to the namespace corresponds a single Markdown file of the documentation project. use_chapters If set to true (by default), the preprocessor applies only to the files that are mentioned in the chapters section of the project config. Otherwise, the preprocessor applies to all Markdown files of the project. format Format that the source Markdown content should be converted to before adding to the index; available values are: plaintext (by default), html , markdown (for no conversion). escape_html If set to true (by default), HTML syntax constructions in the content converted to plaintext will be escaped by replacing & with &amp; , < with &lt; , > with &gt; , and \" with &quot; . url_transform Sequence of rules to transform local paths of source Markdown files into URLs of target pages. Each rule should be a dictionary. Its data is passed to the re.sub() method : key as the pattern argument, and value as the repl argument. The local path (possibly previously transformed) to the source Markdown file relative to the temporary working directory is passed as the string argument. The default value of the url_transform option is designed to be used to build static websites with MkDocs backend. require_env If set to true , the FOLIANT_REINDEXER environment variable must be set to allow the preprocessor to perform any operations with the database and the namespace managed by Reindexer. This flag may be useful in CI/CD jobs. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Config"},{"location":"preprocessors/reindexer/#usage","text":"The preprocessor reads each source Markdown file and prepares three fields for indexing: url \u2014target page URL. This field is used as the primary key, so it must be unique; title \u2014document title, it\u2019s taken from the first heading of source Markdown content; content \u2014source Markdown content, optionally converted into plain text or HTML. When all the files are processed, the preprocessor calls Reindexer API to insert data items (each item corresponds a single Markdown file) into the specified namespace. Also the preprocessor may call Reindexer API to manipulate the database or namespace, e.g. to delete previously created search index. You may perform custom search requests to Reindexer API. The simple client-side Web application example that is provided as a part of this extension, sends to Reindexer queries like this: { \"namespace\" : \"testing\" , \"filters\" : [ { \"field\" : \"indexed_content\" , \"cond\" : \"EQ\" , \"value\" : \"@title^3,content^1 foliant\" } ], \"select_functions\" : [ \"content = snippet(<em>,</em>,100,100,'\\n\\n')\" ], \"limit\" : 50 } To learn how to write efficient queries to Reindexer, you may need to refer to its official documentation on topics: general use , fulltext search , HTTP REST API . In the example above, the indexed_content field corresponds to the composite index over two fields: title and content (this index is generated when the namespace is created by the request from the preprocessor). Text of the search query starts with @title^3,content^1 that means that the title field of the composite index has triple priority (i.e. weighting factor of 3), and the content field has normal priority (i.e. weight coefficient equals to 1). Also the example uses the snippet() select function to highlight the text that matches the query and to cut off excess. If you use self-hosted instance of Reindexer, you may need to configure a proxy to append CORS headers to HTTP API responses.","title":"Usage"},{"location":"preprocessors/removeexcess/","tags":["preprocessor","yaml","config"],"text":"RemoveExcess \u00b6 RemoveExcess is a preprocessor that removes unnecessary Markdown files that are not mentioned in the project\u2019s chapters , from the temporary working directory. Installation \u00b6 $ pip install foliantcontrib.removeexcess Config \u00b6 To enable the preprocessor, add removeexcess to preprocessors section in the project config: preprocessors : - removeexcess The preprocessor has no options. Usage \u00b6 By default, all preprocessors are applied to each Markdown source file copied into the temporary working directory. Often it\u2019s needed not to include some files to the project\u2019s chapters . But anyway, preprocessors will be applied to all source files, that will take extra time and may cause extra errors. Also, extra files may pass to backends that might be undesirable for security reasons. When RemoveExcess preprocessor is enabled, unnecessary files will be deleted. Decide at your discretion to which place in the preprocessor queue to put it.","title":"RemoveExcess"},{"location":"preprocessors/removeexcess/#removeexcess","text":"RemoveExcess is a preprocessor that removes unnecessary Markdown files that are not mentioned in the project\u2019s chapters , from the temporary working directory.","title":"RemoveExcess"},{"location":"preprocessors/removeexcess/#installation","text":"$ pip install foliantcontrib.removeexcess","title":"Installation"},{"location":"preprocessors/removeexcess/#config","text":"To enable the preprocessor, add removeexcess to preprocessors section in the project config: preprocessors : - removeexcess The preprocessor has no options.","title":"Config"},{"location":"preprocessors/removeexcess/#usage","text":"By default, all preprocessors are applied to each Markdown source file copied into the temporary working directory. Often it\u2019s needed not to include some files to the project\u2019s chapters . But anyway, preprocessors will be applied to all source files, that will take extra time and may cause extra errors. Also, extra files may pass to backends that might be undesirable for security reasons. When RemoveExcess preprocessor is enabled, unnecessary files will be deleted. Decide at your discretion to which place in the preprocessor queue to put it.","title":"Usage"},{"location":"preprocessors/replace/","tags":["preprocessor","markdown"],"text":"Replace \u00b6 Replace text for Foliant \u00b6 Preprocessor for simple search and replace in Markdown sources with support of regular expressions. Installation \u00b6 $ pip install foliantcontrib.replace Config \u00b6 To enable the preprocessor, add replace to preprocessors section in the project config: preprocessors : - replace The preprocessor has two options: preprocessors : - replace : dictionary : Mike : Michael Sam : Samuel Tim : Timoel re_dictionary : '!\\[\\]\\((.+?)\\)' : '![Figure](\\1)' dictionary YAML mapping where key is string to replace, value is the replacement string. re_dictionary YAML mapping where key is Python regular expression pattern, value is the replacement string. Usage \u00b6 Fill up the dictionary or/and re_dictionary in preprocessor options and the keys will be replaced with values. For example, if you wish that all images without title in your Markdown sources were titled \"Figure\", use the following config: preprocessors : - replace : re_dictionary : '!\\[\\]\\((.+?)\\)' : '![Figure](\\1)' You can also apply a sequence of regex substitions. Like case-insensitive link insertion as shown in the example below: preprocessors : - replace : re_dictionary : '`(?i)(wikipedia)`' : '[\\1](https://www.wikipedia.org/)' '`(?i)(github)`' : '[\\1](https://github.com/)'","title":"Replace"},{"location":"preprocessors/replace/#replace","text":"","title":"Replace"},{"location":"preprocessors/replace/#replace-text-for-foliant","text":"Preprocessor for simple search and replace in Markdown sources with support of regular expressions.","title":"Replace text for Foliant"},{"location":"preprocessors/replace/#installation","text":"$ pip install foliantcontrib.replace","title":"Installation"},{"location":"preprocessors/replace/#config","text":"To enable the preprocessor, add replace to preprocessors section in the project config: preprocessors : - replace The preprocessor has two options: preprocessors : - replace : dictionary : Mike : Michael Sam : Samuel Tim : Timoel re_dictionary : '!\\[\\]\\((.+?)\\)' : '![Figure](\\1)' dictionary YAML mapping where key is string to replace, value is the replacement string. re_dictionary YAML mapping where key is Python regular expression pattern, value is the replacement string.","title":"Config"},{"location":"preprocessors/replace/#usage","text":"Fill up the dictionary or/and re_dictionary in preprocessor options and the keys will be replaced with values. For example, if you wish that all images without title in your Markdown sources were titled \"Figure\", use the following config: preprocessors : - replace : re_dictionary : '!\\[\\]\\((.+?)\\)' : '![Figure](\\1)' You can also apply a sequence of regex substitions. Like case-insensitive link insertion as shown in the example below: preprocessors : - replace : re_dictionary : '`(?i)(wikipedia)`' : '[\\1](https://www.wikipedia.org/)' '`(?i)(github)`' : '[\\1](https://github.com/)'","title":"Usage"},{"location":"preprocessors/repolink/","tags":["preprocessor","git","mkdocs"],"text":"RepoLink \u00b6 This preprocessor allows to add into each Markdown source a hyperlink to the related file in Git repository. Applying of the preprocessor to subprojects allows to get links to separate repositories from different pages of a single site (e.g. generated with MkDocs). By default, the preprocessor emulates MkDocs behavior. The preprocessor generates HTML hyperlink with specific attributes and inserts the link after the first heading of the document. The default behavior may be overridden. The preprocessor supports the same options repo_url and edit_uri as MkDocs. Installation \u00b6 RepoLink preprocessor is a part of MultiProject extension: Usage \u00b6 To enable the preprocessor, add repolink to preprocessors section in the project config: preprocessors : - repolink The preprocessor has a number of options: preprocessors : - repolink : repo_url : https://github.com/foliant-docs/docs/ edit_uri : /blob/master/src/ link_type : html link_location : after_first_heading link_text : \"&#xE3C9;\" link_title : View the source file link_html_attributes : \"class=\\\"md-icon md-content__icon\\\" style=\\\"margin: -7.5rem 0\\\"\" targets : - pre repo_url URL of the related repository. Default value is an empty string; in this case the preprocessor does not apply. Trailing slashes do not affect. edit_uri Revision-dependent part of URL of each file in the repository. Default value is /blob/master/src/ . Leading and trailing slashes do not affect. link_type Link type: HTML ( html ) or Markdown ( markdown ). Default value is html . link_location Place in the document to put the hyperlink. By default, the hyperlink is placed after the first heading, and newlines are added before and after it ( after_first_heading ). Other values: before_content \u2014the hyperlink is placed before the content of the document, the newline after it is provided; after_content \u2014the hyperlink is placed after the content of the document, the newline before it is added; defined_by_tag \u2014the tags <repo_link></repo_link> that are met in the content of the document are replaced with the hyperlink. link_text Hyperlink text. Default value is Edit this page . link_title Hyperlink title (the value of title HTML attribute). Default value is also Edit this page . This option takes effect only when link_type is set to html . link_html_attributes Additional HTML attributes for the hyperlink. By using CSS in combination with class attribute, and/or style attribute, you may customize the presentation of your hyperlinks. Default value is an empty string. This option takes effect only when link_type is set to html . targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. You may override the value of the edit_uri config option with the FOLIANT_REPOLINK_EDIT_URI system environment variable. It can be useful in some non-stable testing or staging environments.","title":"RepoLink"},{"location":"preprocessors/repolink/#repolink","text":"This preprocessor allows to add into each Markdown source a hyperlink to the related file in Git repository. Applying of the preprocessor to subprojects allows to get links to separate repositories from different pages of a single site (e.g. generated with MkDocs). By default, the preprocessor emulates MkDocs behavior. The preprocessor generates HTML hyperlink with specific attributes and inserts the link after the first heading of the document. The default behavior may be overridden. The preprocessor supports the same options repo_url and edit_uri as MkDocs.","title":"RepoLink"},{"location":"preprocessors/repolink/#installation","text":"RepoLink preprocessor is a part of MultiProject extension:","title":"Installation"},{"location":"preprocessors/repolink/#usage","text":"To enable the preprocessor, add repolink to preprocessors section in the project config: preprocessors : - repolink The preprocessor has a number of options: preprocessors : - repolink : repo_url : https://github.com/foliant-docs/docs/ edit_uri : /blob/master/src/ link_type : html link_location : after_first_heading link_text : \"&#xE3C9;\" link_title : View the source file link_html_attributes : \"class=\\\"md-icon md-content__icon\\\" style=\\\"margin: -7.5rem 0\\\"\" targets : - pre repo_url URL of the related repository. Default value is an empty string; in this case the preprocessor does not apply. Trailing slashes do not affect. edit_uri Revision-dependent part of URL of each file in the repository. Default value is /blob/master/src/ . Leading and trailing slashes do not affect. link_type Link type: HTML ( html ) or Markdown ( markdown ). Default value is html . link_location Place in the document to put the hyperlink. By default, the hyperlink is placed after the first heading, and newlines are added before and after it ( after_first_heading ). Other values: before_content \u2014the hyperlink is placed before the content of the document, the newline after it is provided; after_content \u2014the hyperlink is placed after the content of the document, the newline before it is added; defined_by_tag \u2014the tags <repo_link></repo_link> that are met in the content of the document are replaced with the hyperlink. link_text Hyperlink text. Default value is Edit this page . link_title Hyperlink title (the value of title HTML attribute). Default value is also Edit this page . This option takes effect only when link_type is set to html . link_html_attributes Additional HTML attributes for the hyperlink. By using CSS in combination with class attribute, and/or style attribute, you may customize the presentation of your hyperlinks. Default value is an empty string. This option takes effect only when link_type is set to html . targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. You may override the value of the edit_uri config option with the FOLIANT_REPOLINK_EDIT_URI system environment variable. It can be useful in some non-stable testing or staging environments.","title":"Usage"},{"location":"preprocessors/runcommands/","tags":["preprocessor","shell"],"text":"RunCommands \u00b6 RunCommands is a preprocessor that allows to execute a sequence of arbitrary external commands. Installation \u00b6 $ pip install foliantcontrib.runcommands Usage \u00b6 To enable the preprocessor, add runcommands to preprocessors section in the project config, and specify the commands to run: preprocessors : - runcommands : commands : - ./build.sh - echo \"Hello World\" > ${WORKING_DIR}/hello.txt targets : - pre - tex - pdf - docx commands Sequence of system commands to execute one after the other. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Supported environment variables \u00b6 You may use the following environment variables in your commands: ${PROJECT_DIR} \u2014 full path to the project directory, e.g. /usr/src/app ; ${SRC_DIR} \u2014 full path to the directory that contains Markdown sources, e.g. /usr/src/app/src ; ${WORKING_DIR} \u2014 full path to the temporary directory that is used by preprocessors, e.g. /usr/src/app/__folianttmp__ ; ${BACKEND} \u2014 currently used backend, e.g. pre , pandoc , or mkdocs ; ${TARGET} \u2014 current target, e.g. site , or pdf .","title":"RunCommands"},{"location":"preprocessors/runcommands/#runcommands","text":"RunCommands is a preprocessor that allows to execute a sequence of arbitrary external commands.","title":"RunCommands"},{"location":"preprocessors/runcommands/#installation","text":"$ pip install foliantcontrib.runcommands","title":"Installation"},{"location":"preprocessors/runcommands/#usage","text":"To enable the preprocessor, add runcommands to preprocessors section in the project config, and specify the commands to run: preprocessors : - runcommands : commands : - ./build.sh - echo \"Hello World\" > ${WORKING_DIR}/hello.txt targets : - pre - tex - pdf - docx commands Sequence of system commands to execute one after the other. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Usage"},{"location":"preprocessors/runcommands/#supported-environment-variables","text":"You may use the following environment variables in your commands: ${PROJECT_DIR} \u2014 full path to the project directory, e.g. /usr/src/app ; ${SRC_DIR} \u2014 full path to the directory that contains Markdown sources, e.g. /usr/src/app/src ; ${WORKING_DIR} \u2014 full path to the temporary directory that is used by preprocessors, e.g. /usr/src/app/__folianttmp__ ; ${BACKEND} \u2014 currently used backend, e.g. pre , pandoc , or mkdocs ; ${TARGET} \u2014 current target, e.g. site , or pdf .","title":"Supported environment variables"},{"location":"preprocessors/showcommits/","tags":["preprocessor","git"],"text":"ShowCommits \u00b6 ShowCommits Preprocessor \u00b6 ShowCommits is a preprocessor that appends the history of Git commits corresponding to the current processed file to its content. Installation \u00b6 $ pip install foliantcontrib.showcommits Config \u00b6 To enable the preprocessor, add showcommits to preprocessors section in the project config: preprocessors : - showcommits The preprocessor has a number of options with the following default values: preprocessors : - showcommits : repo_path : !rel_path ./ # Path object that points to the current Foliant project\u2019s top-level (\u201croot\u201d) directory when the preprocessor initializes try_default_path : true remote_name : origin self-hosted : gitlab protocol : https position : after_content date_format : year_first escape_html : true template : | ## File History {{startcommits}} Commit: [{{hash}}]({{url}}), author: [{{author}}]({{email}}), date: {{date}} {{message}} ```diff {{diff}} ``` {{endcommits}} targets : [] repo_path Path to the locally cloned copy of the Git repository that the current Foliant project\u2019s files belong to. try_default_path Flag that tells the preprocessor to try to use the default repo_path if user-specified repo_path does not exist. remote_name Identifier of remote repository; in most cases you don\u2019t need to override the default value. self-hosted String that defines the rules of commit\u2019s web URL anchor generation when a self-hosted Git repositories management system with web interface is used. Supported values are: github for GitHub, gitlab for GitLab, and bitbucket for BitBucket. If the repo fetch URL hostname is github.com , gitlab.com , or bitbucket.org , the corresponding rules are applied automatically. protocol Web interface URL prefix of a repos management system. Supported values are https and http . position String that defines where the history of commits should be placed. Supported values are: after_content for concatenating the history with the currently processed Markdown file content, and defined_by_tag for replacing the tags <commits></commits> with the history. date_format Output date format. If the default value year_first is used, the date \u201cDecember 11, 2019\u201d will be represented as 2019-12-11 . If the day_first value is used, this date will be represented as 11.12.2019 . escape_html Flag that tells the preprocessor to replace HTML control characters with corresponding HTML entities in commit messages and diffs: & with &amp; , < with &lt; , > with &gt; , \" with &quot; . template Template to render the history of commits. If the value is a string that contains one or more newlines ( \\n ) or double opening curly braces ( {{ ), it is interpreted as a template itself. If the value is a string without newlines and any double opening curly braces, or a Path object, it is interpreted as a path to the file that contains a template. Template syntax is described below. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets. Usage \u00b6 You may override the default template to customize the commits history formatting and rendering. Feel free to use Markdown syntax, HTML, CSS, and JavaScript in your custom templates. In templates, a number of placeholders is supported. {{startcommits}} Beginning of the list of commits that is rendered within a loop. Before this placeholder, you may use some common stuff like an introducing heading or a stylesheet. {{endcommits}} End of the list of commits. After this placeholder, you also may use some common stuff like a paragraph of text or a script. The following placeholders affect only between the {{startcommits}} and {{endcommits}} . {{hash}} First 8 digits of the commit hash, e.g. deadc0de . {{url}} Web URL of commit with an anchor that points to the certain file, e.g. https://github.com/foliant-docs/foliant/commit/67138f7c#diff-478b1f78b2146021bce46fbf833eb636 . If you don\u2019t use a repos management system with web interface, you don\u2019t need this placeholder. {{author}} Author name, e.g. Artemy Lomov . {{email}} Author email, e.g. artemy@lomov.ru . {{date}} Formatted date, e.g. 2019-12-11 . {{message}} Commit message, e.g. Bump version to 1.0.1. . {{diff}} Diff between the currently processed Markdown file at a certain commit and the same file at the previous state.","title":"ShowCommits"},{"location":"preprocessors/showcommits/#showcommits","text":"","title":"ShowCommits"},{"location":"preprocessors/showcommits/#showcommits-preprocessor","text":"ShowCommits is a preprocessor that appends the history of Git commits corresponding to the current processed file to its content.","title":"ShowCommits Preprocessor"},{"location":"preprocessors/showcommits/#installation","text":"$ pip install foliantcontrib.showcommits","title":"Installation"},{"location":"preprocessors/showcommits/#config","text":"To enable the preprocessor, add showcommits to preprocessors section in the project config: preprocessors : - showcommits The preprocessor has a number of options with the following default values: preprocessors : - showcommits : repo_path : !rel_path ./ # Path object that points to the current Foliant project\u2019s top-level (\u201croot\u201d) directory when the preprocessor initializes try_default_path : true remote_name : origin self-hosted : gitlab protocol : https position : after_content date_format : year_first escape_html : true template : | ## File History {{startcommits}} Commit: [{{hash}}]({{url}}), author: [{{author}}]({{email}}), date: {{date}} {{message}} ```diff {{diff}} ``` {{endcommits}} targets : [] repo_path Path to the locally cloned copy of the Git repository that the current Foliant project\u2019s files belong to. try_default_path Flag that tells the preprocessor to try to use the default repo_path if user-specified repo_path does not exist. remote_name Identifier of remote repository; in most cases you don\u2019t need to override the default value. self-hosted String that defines the rules of commit\u2019s web URL anchor generation when a self-hosted Git repositories management system with web interface is used. Supported values are: github for GitHub, gitlab for GitLab, and bitbucket for BitBucket. If the repo fetch URL hostname is github.com , gitlab.com , or bitbucket.org , the corresponding rules are applied automatically. protocol Web interface URL prefix of a repos management system. Supported values are https and http . position String that defines where the history of commits should be placed. Supported values are: after_content for concatenating the history with the currently processed Markdown file content, and defined_by_tag for replacing the tags <commits></commits> with the history. date_format Output date format. If the default value year_first is used, the date \u201cDecember 11, 2019\u201d will be represented as 2019-12-11 . If the day_first value is used, this date will be represented as 11.12.2019 . escape_html Flag that tells the preprocessor to replace HTML control characters with corresponding HTML entities in commit messages and diffs: & with &amp; , < with &lt; , > with &gt; , \" with &quot; . template Template to render the history of commits. If the value is a string that contains one or more newlines ( \\n ) or double opening curly braces ( {{ ), it is interpreted as a template itself. If the value is a string without newlines and any double opening curly braces, or a Path object, it is interpreted as a path to the file that contains a template. Template syntax is described below. targets Allowed targets for the preprocessor. If not specified (by default), the preprocessor applies to all targets.","title":"Config"},{"location":"preprocessors/showcommits/#usage","text":"You may override the default template to customize the commits history formatting and rendering. Feel free to use Markdown syntax, HTML, CSS, and JavaScript in your custom templates. In templates, a number of placeholders is supported. {{startcommits}} Beginning of the list of commits that is rendered within a loop. Before this placeholder, you may use some common stuff like an introducing heading or a stylesheet. {{endcommits}} End of the list of commits. After this placeholder, you also may use some common stuff like a paragraph of text or a script. The following placeholders affect only between the {{startcommits}} and {{endcommits}} . {{hash}} First 8 digits of the commit hash, e.g. deadc0de . {{url}} Web URL of commit with an anchor that points to the certain file, e.g. https://github.com/foliant-docs/foliant/commit/67138f7c#diff-478b1f78b2146021bce46fbf833eb636 . If you don\u2019t use a repos management system with web interface, you don\u2019t need this placeholder. {{author}} Author name, e.g. Artemy Lomov . {{email}} Author email, e.g. artemy@lomov.ru . {{date}} Formatted date, e.g. 2019-12-11 . {{message}} Commit message, e.g. Bump version to 1.0.1. . {{diff}} Diff between the currently processed Markdown file at a certain commit and the same file at the previous state.","title":"Usage"},{"location":"preprocessors/superlinks/","tags":["preprocessor","markdown"],"text":"SuperLinks \u00b6 SuperLinks for Foliant \u00b6 This preprocessor extends the functionality of Markdown links, allowing you to reference by the heading title, file name or meta id. It works correctly with most backends, resolving to proper links, depending on which backend is being used. It adds the <link> tag. The Problem \u00b6 The problem with Markdown links is that you have to specify the correct anchor and file path right away. Let's imagine that you want to create a link to a heading which is defined in another chapter. If you are building a single-page PDF with Pandoc, you will only need to specify the anchor, which Pandoc generates from that title. But if you are building an MkDocs website, you will need to specify the relative filename to the referenced chapter, and the anchor, which MkDocs generates from the titles. By the way, Pandoc and MkDocs generate anchors differently. So there's no way to make it work for all backends by using just Markdown link syntax. Superlinks aim to solve this problem. Installation \u00b6 Install the preprocessor: $ pip install foliantcontrib.superlinks Config \u00b6 To enable the preprocessor, add superlink to preprocessors section in the project config. preprocessors : - superlinks Important: SuperLinks preprocessor is very sensitive to its position in the preprocessors list. If you are using it in along with Includes , Anchors or CustomIDs preprocessor, the order in which they are mentioned must be following: preprocessors : - includes # indludes must be defined BEFORE superlinks in the list - ... - superlinks - ... # following preprocessors must be defined AFTER superlinks in the list - anchors - customids The preprocessor has no config options just now. But it has some important tag options. Usage \u00b6 To add a link, use a link tag with a combination of following parameters: title Heading title, which you want to create a link to. src Relative path to a chapter which is being referenced. meta_id ID of the meta section which is being referenced. (if title is used, then this title MUST be inside this meta section) anchor Name of the anchor defined by Anchors preprocessor or an ID defined by CustomIDs preprocessor. If src or meta is not provided \u2014 the id will be searched globally. id Just a hardcoded id. No magic here. The body of the link tag is your link caption. If the body is empty, SuperLinks will try to guess the right caption: referenced title for links by title, meta section title for links by meta section, heading title for links by CustomIDs, title from config or first heading title in the file for links to file, anchor name for links by anchors. Examples \u00b6 Reference a title in the same document < link title = \"My title\" > Link caption </ link > Reference a title in another chapter < link src = \"subfolder/another_chapter.md\" title = \"Another title\" > Link caption </ link > Reference the beginning of another chapter < link src = \"subfolder/another_chapter.md\" > Link caption </ link > Reference a title inside meta section < link meta_id = \"SECTION1\" title = \"Title in section1\" > Link caption </ link > Reference the beginning of meta section < link meta_id = \"SECTION1\" > Link caption </ link > Reference an anchor and search for it globally < link anchor = \"my_anchor\" > Link caption </ link > Reference an anchor and search for it in specific chapter < link src = \"subfolder/another_chapter.md\" anchor = \"my_anchor\" > Link caption </ link > Supported Backends: \u00b6 Backend Support aglio \u2705 YES pandoc \u2705 YES mdtopdf \u2705 YES mkdocs \u2705 YES slate \u2705 YES confluence \u2705 YES","title":"SuperLinks"},{"location":"preprocessors/superlinks/#superlinks","text":"","title":"SuperLinks"},{"location":"preprocessors/superlinks/#superlinks-for-foliant","text":"This preprocessor extends the functionality of Markdown links, allowing you to reference by the heading title, file name or meta id. It works correctly with most backends, resolving to proper links, depending on which backend is being used. It adds the <link> tag.","title":"SuperLinks for Foliant"},{"location":"preprocessors/superlinks/#the-problem","text":"The problem with Markdown links is that you have to specify the correct anchor and file path right away. Let's imagine that you want to create a link to a heading which is defined in another chapter. If you are building a single-page PDF with Pandoc, you will only need to specify the anchor, which Pandoc generates from that title. But if you are building an MkDocs website, you will need to specify the relative filename to the referenced chapter, and the anchor, which MkDocs generates from the titles. By the way, Pandoc and MkDocs generate anchors differently. So there's no way to make it work for all backends by using just Markdown link syntax. Superlinks aim to solve this problem.","title":"The Problem"},{"location":"preprocessors/superlinks/#installation","text":"Install the preprocessor: $ pip install foliantcontrib.superlinks","title":"Installation"},{"location":"preprocessors/superlinks/#config","text":"To enable the preprocessor, add superlink to preprocessors section in the project config. preprocessors : - superlinks Important: SuperLinks preprocessor is very sensitive to its position in the preprocessors list. If you are using it in along with Includes , Anchors or CustomIDs preprocessor, the order in which they are mentioned must be following: preprocessors : - includes # indludes must be defined BEFORE superlinks in the list - ... - superlinks - ... # following preprocessors must be defined AFTER superlinks in the list - anchors - customids The preprocessor has no config options just now. But it has some important tag options.","title":"Config"},{"location":"preprocessors/superlinks/#usage","text":"To add a link, use a link tag with a combination of following parameters: title Heading title, which you want to create a link to. src Relative path to a chapter which is being referenced. meta_id ID of the meta section which is being referenced. (if title is used, then this title MUST be inside this meta section) anchor Name of the anchor defined by Anchors preprocessor or an ID defined by CustomIDs preprocessor. If src or meta is not provided \u2014 the id will be searched globally. id Just a hardcoded id. No magic here. The body of the link tag is your link caption. If the body is empty, SuperLinks will try to guess the right caption: referenced title for links by title, meta section title for links by meta section, heading title for links by CustomIDs, title from config or first heading title in the file for links to file, anchor name for links by anchors.","title":"Usage"},{"location":"preprocessors/superlinks/#examples","text":"Reference a title in the same document < link title = \"My title\" > Link caption </ link > Reference a title in another chapter < link src = \"subfolder/another_chapter.md\" title = \"Another title\" > Link caption </ link > Reference the beginning of another chapter < link src = \"subfolder/another_chapter.md\" > Link caption </ link > Reference a title inside meta section < link meta_id = \"SECTION1\" title = \"Title in section1\" > Link caption </ link > Reference the beginning of meta section < link meta_id = \"SECTION1\" > Link caption </ link > Reference an anchor and search for it globally < link anchor = \"my_anchor\" > Link caption </ link > Reference an anchor and search for it in specific chapter < link src = \"subfolder/another_chapter.md\" anchor = \"my_anchor\" > Link caption </ link >","title":"Examples"},{"location":"preprocessors/superlinks/#supported-backends","text":"Backend Support aglio \u2705 YES pandoc \u2705 YES mdtopdf \u2705 YES mkdocs \u2705 YES slate \u2705 YES confluence \u2705 YES","title":"Supported Backends:"},{"location":"preprocessors/swaggerdoc/","tags":["preprocessor","API"],"text":"SwaggerDoc \u00b6 Swagger API Docs Generator for Foliant \u00b6 The static site on the picture was built with Slate backend together with SwaggerDoc preprocessor This preprocessor generates Markdown documentation from Swagger spec files. It uses Jinja2 templating engine or Widdershins for generating Markdown from swagger spec files. Installation \u00b6 $ pip install foliantcontrib.swaggerdoc This preprocessor requires Widdershins to be installed on your system (unless you are using Foliant with Full Docker Image ): npm install -g widdershins Config \u00b6 To enable the preprocessor, add swaggerdoc to preprocessors section in the project config: preprocessors : - swaggerdoc The preprocessor has a number of options: preprocessors : - swaggerdoc : spec_url : http://localhost/swagger.json spec_path : swagger.json additional_json_path : tags.json mode : widdershins template : swagger.j2 environment : env.yaml spec_url URL to Swagger spec file. If it is a list \u2014 preprocessor takes the first url which works. spec_path Local path to Swagger spec file (relative to project dir). If both url and path are specified \u2014 preprocessor first tries to fetch spec from url, and then (if that fails) looks for the file on local path. additional_json_path Only for jinja mode. Local path to swagger spec file with additional info (relative to project dir). It will be merged into original spec file, not overriding existing fields . mode Determines how the Swagger spec file would be converted to markdown. Should be one of: jinja , widdershins . Default: widdershins jinja mode is deprecated. It may be removed in future template Only for jinja mode. Path to jinja-template for rendering the generated documentation. Path is relative to the project directory. If no template is specified preprocessor will use default template (and put it into project dir if it was missing). Default: swagger.j2 environment Only for widdershins mode. Parameters for widdershins converter. You can either pass a string containing relative path to YAML or JSON file with all parameters (like in example above) or specify all parameters in YAML format under this key. More info on widdershins parameters. Usage \u00b6 Add a <swaggerdoc></swaggerdoc> tag at the position in the document where the generated documentation should be inserted: # Introduction This document contains the automatically generated documentation of our API. <swaggerdoc></swaggerdoc> Each time the preprocessor encounters the tag <swaggerdoc></swaggerdoc> it inserts the whole generated documentation text instead of it. The path or url to Swagger spec file are taken from foliant.yml. You can also specify some parameters (or all of them) in the tag options: # Introduction Introduction text for API documentation. <swaggerdoc spec_url=\"http://localhost/swagger.json\" mode=\"jinja\" template=\"swagger.j2\"> </swaggerdoc> <swaggerdoc spec_url=\"http://localhost/swagger.json\" mode=\"widdershins\" environment=\"env.yml\"> </swaggerdoc> Tag parameters have the highest priority. This way you can have documentation from several different Swagger spec files in one foliant project (even in one md-file if you like it so). Customizing output \u00b6 Widdershins \u00b6 In widdershins mode the output markdown is generated by widdershins Node.js application. It supports customizing the output with doT.js templates. Clone the original widdershins repository and modify the templates located in one of the subfolders in the templates folder. Save the modified templates somewhere near your foliant project. Specify the path to modified templates in the user_templates field of the environment configuration. For example, like this: preprocessors : - swaggerdoc : spec_path : swagger.yml environment : user_templates : !path ./widdershins_templates/ Jinja \u00b6 jinja mode is deprecated. It may be removed in future In jinja mode the output markdown is generated by the Jinja2 template. In this template all fields from Swagger spec file are available under the dictionary named swagger_data . To customize the output create a template which suits your needs. Then supply the path to it in the template parameter. If you wish to use the default template as a starting point, build the foliant project with swaggerdoc preprocessor turned on. After the first build the default template will appear in your foliant project dir under name swagger.j2 .","title":"SwaggerDoc"},{"location":"preprocessors/swaggerdoc/#swaggerdoc","text":"","title":"SwaggerDoc"},{"location":"preprocessors/swaggerdoc/#swagger-api-docs-generator-for-foliant","text":"The static site on the picture was built with Slate backend together with SwaggerDoc preprocessor This preprocessor generates Markdown documentation from Swagger spec files. It uses Jinja2 templating engine or Widdershins for generating Markdown from swagger spec files.","title":"Swagger API Docs Generator for Foliant"},{"location":"preprocessors/swaggerdoc/#installation","text":"$ pip install foliantcontrib.swaggerdoc This preprocessor requires Widdershins to be installed on your system (unless you are using Foliant with Full Docker Image ): npm install -g widdershins","title":"Installation"},{"location":"preprocessors/swaggerdoc/#config","text":"To enable the preprocessor, add swaggerdoc to preprocessors section in the project config: preprocessors : - swaggerdoc The preprocessor has a number of options: preprocessors : - swaggerdoc : spec_url : http://localhost/swagger.json spec_path : swagger.json additional_json_path : tags.json mode : widdershins template : swagger.j2 environment : env.yaml spec_url URL to Swagger spec file. If it is a list \u2014 preprocessor takes the first url which works. spec_path Local path to Swagger spec file (relative to project dir). If both url and path are specified \u2014 preprocessor first tries to fetch spec from url, and then (if that fails) looks for the file on local path. additional_json_path Only for jinja mode. Local path to swagger spec file with additional info (relative to project dir). It will be merged into original spec file, not overriding existing fields . mode Determines how the Swagger spec file would be converted to markdown. Should be one of: jinja , widdershins . Default: widdershins jinja mode is deprecated. It may be removed in future template Only for jinja mode. Path to jinja-template for rendering the generated documentation. Path is relative to the project directory. If no template is specified preprocessor will use default template (and put it into project dir if it was missing). Default: swagger.j2 environment Only for widdershins mode. Parameters for widdershins converter. You can either pass a string containing relative path to YAML or JSON file with all parameters (like in example above) or specify all parameters in YAML format under this key. More info on widdershins parameters.","title":"Config"},{"location":"preprocessors/swaggerdoc/#usage","text":"Add a <swaggerdoc></swaggerdoc> tag at the position in the document where the generated documentation should be inserted: # Introduction This document contains the automatically generated documentation of our API. <swaggerdoc></swaggerdoc> Each time the preprocessor encounters the tag <swaggerdoc></swaggerdoc> it inserts the whole generated documentation text instead of it. The path or url to Swagger spec file are taken from foliant.yml. You can also specify some parameters (or all of them) in the tag options: # Introduction Introduction text for API documentation. <swaggerdoc spec_url=\"http://localhost/swagger.json\" mode=\"jinja\" template=\"swagger.j2\"> </swaggerdoc> <swaggerdoc spec_url=\"http://localhost/swagger.json\" mode=\"widdershins\" environment=\"env.yml\"> </swaggerdoc> Tag parameters have the highest priority. This way you can have documentation from several different Swagger spec files in one foliant project (even in one md-file if you like it so).","title":"Usage"},{"location":"preprocessors/swaggerdoc/#customizing-output","text":"","title":"Customizing output"},{"location":"preprocessors/swaggerdoc/#widdershins","text":"In widdershins mode the output markdown is generated by widdershins Node.js application. It supports customizing the output with doT.js templates. Clone the original widdershins repository and modify the templates located in one of the subfolders in the templates folder. Save the modified templates somewhere near your foliant project. Specify the path to modified templates in the user_templates field of the environment configuration. For example, like this: preprocessors : - swaggerdoc : spec_path : swagger.yml environment : user_templates : !path ./widdershins_templates/","title":"Widdershins"},{"location":"preprocessors/swaggerdoc/#jinja","text":"jinja mode is deprecated. It may be removed in future In jinja mode the output markdown is generated by the Jinja2 template. In this template all fields from Swagger spec file are available under the dictionary named swagger_data . To customize the output create a template which suits your needs. Then supply the path to it in the template parameter. If you wish to use the default template as a starting point, build the foliant project with swaggerdoc preprocessor turned on. After the first build the default template will appear in your foliant project dir under name swagger.j2 .","title":"Jinja"},{"location":"preprocessors/templateparser/","tags":["preprocessor","jinja"],"text":"TemplateParser \u00b6 TemplateParser preprocessor for Foliant \u00b6 Preprocessor which allows to use templates in Foliant source files. Preprocessor now supports only Jinja2 templating engine, but more can be added easily. Installation \u00b6 $ pip install foliantcontrib.templateparser Config \u00b6 All params that are stated in foliant.yml are considered global params. All of them may be overriden in template tag options, which have higher priority. preprocessors : - templateparser : engine : jinja2 engine_params : root : '/usr/src/app' context : param1 : 1008 param2 : 'Kittens' ext_context : context.yml param3 : 'Puppies' engine name of the template engine which will be used to process template. Supported engines right now: jinja2 . engine_params dictionary with parameters which will be transfered to the template engine. context dictionary with variables which will be redirected to the template. ext_context path to YAML- or JSON-file with context dictionary. (relative to current md-file), or URL to such file on the remote server. All parameters with other names are also transfered to the template, as if they appeared inside the context dictionary. ( param3 in the above example) Please note that even if this may seem convenient, it is preferred to include template variables in the context dictionary, as in future more reserved parameters may be added which may conflict with your stray variables. If some variable names overlap among these methods to supply context, preprocessor uses this priority order: Context dictionary. Stray variables. External context file. Usage \u00b6 To use the template in a Markdown file just insert a tag of the template engine name, for example: This is ordinary markdown text. < jinja2 > This is a Jinja2 template: I can count to five! {% for i in range(5) %}{{ i + 1 }}{% endfor %} </ jinja2 > After making a document with Foliant this will be transformed to: This is ordinary markdown text. This is a Jinja2 template: I can count to five! 12345 You can also use a general <template> tag, but in this case you have to specify the engine you want to use in the engine parameter: This is ordinary markdown text. < template engine = \"jinja2\" > This is a Jinja2 template: I can count to five! {% for i in range(5) %}{{ i + 1 }}{% endfor %} </ template > Sending variables to template \u00b6 To send a variable to template, add them into the context option. This option accepts yaml dictionary format. < jinja2 context = \"{'name': Andy, 'age': 8}\" > Hi, my name is {{name}}! I am {{ age }} years old. {% for prev in range(age - 1, 0, -1) %} The year before I was {{prev}} years old. {% endfor %} </ jinja2 > Result: Hi, my name is Andy! I am 8 years old. The year before I was 7 years old. The year before I was 6 years old. The year before I was 5 years old. The year before I was 4 years old. The year before I was 3 years old. The year before I was 2 years old. The year before I was 1 years old. Also, you can supply a yaml-file with variables in an ext_context parameter: <jinja2 ext_context=\"swagger.yaml\"> Swagger file version: {{ swagger }} Base path: {{ base_path }} ... </jinja2> Built-in variables \u00b6 There are some variables that are available in your template by default: _foliant_context \u2014 dictionary with all user-defined variables, from tag parameters, context or ext_context variables, _foliant_vars \u2014 dictionary with all variables mentioned below (in case of name collisions), meta \u2014 dictionary with current chapter's metadata, details in the next chapter, meta_object \u2014 project's meta object, details in the next chapter, config \u2014 Foliant project config, target \u2014 current target, backend \u2014 current backend. Integration with metadata \u00b6 Templates support latest Foliant metadata functionality. You can find the meta dictionary for current section under meta variable inside template: < meta status = \"ready\" title = \"Custom Title\" author = \"John\" ></ meta > < jinja2 > Document status: {{ meta.status }} The document \"{{ meta.title }}\" is brought to you by {{ meta.author }} </ jinja2 > Result: Document status: ready The document \"Custom Title\" is brought to you by John You can also find the whole project's Meta object under meta_object variable inside template: < meta status = \"ready\" title = \"Custom Title\" author = \"John\" ></ meta > < jinja2 > List of chapters in this project: {% for chapter in meta_object.chapters %} * {{ chapter.name }} {%- endfor %} </ jinja2 > Result: List of chapters in this project: * index * sub * auth Extends and includes \u00b6 Extends and includes work in templates. The path of the extending\\included file is relative to the Markdown file where the template lives. In Jinja2 engine you can override the path of the included\\extended files with root engine_param. Note that this param is relative to project root. Pro tips \u00b6 Pro tip #1 All context variables are also available in the _foliant_context dictionary. It may be handy if you don't know at design-time which key names are supplied in the external context file: <jinja2 ext_context=\"customers.yml\"> {% for name, data in _foliant_context.items() %} # Customer {{ name }} Purchase: {{ data['purchase'] }} Order id: {{ data['order_id'] }} {% endfor %} </jinja2> Pro tip #2 If your context file is inside private git repository, you can utilize the power of Includes preprocessor to retrieve it. Create a file in your src dir, for example, context.md ( md extension is obligatory, includes only process markdown files). Add an includes tag: <include repo_url=\"https://my_login:my_password@my.git.org/my_repo.git\" path=\"path/to/file.yml\"> And supply path to this file in your ext_context param: <jinja2 ext_context=\"context.md\"> Pro tip #3 If data inside your external context file is not a dictionary, it will be available inside template under context variable (or _foliant_context['context'] ).","title":"TemplateParser"},{"location":"preprocessors/templateparser/#templateparser","text":"","title":"TemplateParser"},{"location":"preprocessors/templateparser/#templateparser-preprocessor-for-foliant","text":"Preprocessor which allows to use templates in Foliant source files. Preprocessor now supports only Jinja2 templating engine, but more can be added easily.","title":"TemplateParser preprocessor for Foliant"},{"location":"preprocessors/templateparser/#installation","text":"$ pip install foliantcontrib.templateparser","title":"Installation"},{"location":"preprocessors/templateparser/#config","text":"All params that are stated in foliant.yml are considered global params. All of them may be overriden in template tag options, which have higher priority. preprocessors : - templateparser : engine : jinja2 engine_params : root : '/usr/src/app' context : param1 : 1008 param2 : 'Kittens' ext_context : context.yml param3 : 'Puppies' engine name of the template engine which will be used to process template. Supported engines right now: jinja2 . engine_params dictionary with parameters which will be transfered to the template engine. context dictionary with variables which will be redirected to the template. ext_context path to YAML- or JSON-file with context dictionary. (relative to current md-file), or URL to such file on the remote server. All parameters with other names are also transfered to the template, as if they appeared inside the context dictionary. ( param3 in the above example) Please note that even if this may seem convenient, it is preferred to include template variables in the context dictionary, as in future more reserved parameters may be added which may conflict with your stray variables. If some variable names overlap among these methods to supply context, preprocessor uses this priority order: Context dictionary. Stray variables. External context file.","title":"Config"},{"location":"preprocessors/templateparser/#usage","text":"To use the template in a Markdown file just insert a tag of the template engine name, for example: This is ordinary markdown text. < jinja2 > This is a Jinja2 template: I can count to five! {% for i in range(5) %}{{ i + 1 }}{% endfor %} </ jinja2 > After making a document with Foliant this will be transformed to: This is ordinary markdown text. This is a Jinja2 template: I can count to five! 12345 You can also use a general <template> tag, but in this case you have to specify the engine you want to use in the engine parameter: This is ordinary markdown text. < template engine = \"jinja2\" > This is a Jinja2 template: I can count to five! {% for i in range(5) %}{{ i + 1 }}{% endfor %} </ template >","title":"Usage"},{"location":"preprocessors/templateparser/#sending-variables-to-template","text":"To send a variable to template, add them into the context option. This option accepts yaml dictionary format. < jinja2 context = \"{'name': Andy, 'age': 8}\" > Hi, my name is {{name}}! I am {{ age }} years old. {% for prev in range(age - 1, 0, -1) %} The year before I was {{prev}} years old. {% endfor %} </ jinja2 > Result: Hi, my name is Andy! I am 8 years old. The year before I was 7 years old. The year before I was 6 years old. The year before I was 5 years old. The year before I was 4 years old. The year before I was 3 years old. The year before I was 2 years old. The year before I was 1 years old. Also, you can supply a yaml-file with variables in an ext_context parameter: <jinja2 ext_context=\"swagger.yaml\"> Swagger file version: {{ swagger }} Base path: {{ base_path }} ... </jinja2>","title":"Sending variables to template"},{"location":"preprocessors/templateparser/#built-in-variables","text":"There are some variables that are available in your template by default: _foliant_context \u2014 dictionary with all user-defined variables, from tag parameters, context or ext_context variables, _foliant_vars \u2014 dictionary with all variables mentioned below (in case of name collisions), meta \u2014 dictionary with current chapter's metadata, details in the next chapter, meta_object \u2014 project's meta object, details in the next chapter, config \u2014 Foliant project config, target \u2014 current target, backend \u2014 current backend.","title":"Built-in variables"},{"location":"preprocessors/templateparser/#integration-with-metadata","text":"Templates support latest Foliant metadata functionality. You can find the meta dictionary for current section under meta variable inside template: < meta status = \"ready\" title = \"Custom Title\" author = \"John\" ></ meta > < jinja2 > Document status: {{ meta.status }} The document \"{{ meta.title }}\" is brought to you by {{ meta.author }} </ jinja2 > Result: Document status: ready The document \"Custom Title\" is brought to you by John You can also find the whole project's Meta object under meta_object variable inside template: < meta status = \"ready\" title = \"Custom Title\" author = \"John\" ></ meta > < jinja2 > List of chapters in this project: {% for chapter in meta_object.chapters %} * {{ chapter.name }} {%- endfor %} </ jinja2 > Result: List of chapters in this project: * index * sub * auth","title":"Integration with metadata"},{"location":"preprocessors/templateparser/#extends-and-includes","text":"Extends and includes work in templates. The path of the extending\\included file is relative to the Markdown file where the template lives. In Jinja2 engine you can override the path of the included\\extended files with root engine_param. Note that this param is relative to project root.","title":"Extends and includes"},{"location":"preprocessors/templateparser/#pro-tips","text":"Pro tip #1 All context variables are also available in the _foliant_context dictionary. It may be handy if you don't know at design-time which key names are supplied in the external context file: <jinja2 ext_context=\"customers.yml\"> {% for name, data in _foliant_context.items() %} # Customer {{ name }} Purchase: {{ data['purchase'] }} Order id: {{ data['order_id'] }} {% endfor %} </jinja2> Pro tip #2 If your context file is inside private git repository, you can utilize the power of Includes preprocessor to retrieve it. Create a file in your src dir, for example, context.md ( md extension is obligatory, includes only process markdown files). Add an includes tag: <include repo_url=\"https://my_login:my_password@my.git.org/my_repo.git\" path=\"path/to/file.yml\"> And supply path to this file in your ext_context param: <jinja2 ext_context=\"context.md\"> Pro tip #3 If data inside your external context file is not a dictionary, it will be available inside template under context variable (or _foliant_context['context'] ).","title":"Pro tips"},{"location":"preprocessors/testrail/","tags":["preprocessor"],"text":"Testrail \u00b6 TestRail cases downloader for Foliant \u00b6 TestRail preprocessor collects test cases from TestRail project and adds to your testing procedure document. Important notice! We have some problems with displaying an exclamation mark in the image links, so they are replaced with (leading_exclamation_mark_here) phrase in the text. Installation \u00b6 $ pip install foliantcontrib.testrail Config \u00b6 To enable the preprocessor, add testrail to preprocessors section in the project config. The preprocessor has a number of options (best values are set by default where possible): preprocessors : - testrail : testrail_url : http://testrails.url \\\\ Required testrail_login : username \\\\ Required testrail_pass : !env TESTRAIL_PASS \\\\ Required project_id : 35 \\\\ Required suite_ids : \\\\ Optional section_ids : \\\\ Optional exclude_suite_ids : \\\\ Optional exclude_section_ids : \\\\ Optional exclude_case_ids : \\\\ Optional filename : test_cases.md \\\\ Optional rewrite_src_files : false \\\\ Optional template_folder : case_templates \\\\ Optional img_folder : testrail_imgs \\\\ Optional move_imgs_from_text : false \\\\ Optional section_header : Testing program \\\\ Recommended std_table_header : Table with testing results \\\\ Recommended std_table_column_headers : \u2116; Priority; Platform; ID; Test case name; Result; Comment \\\\ Recommended add_std_table : true \\\\ Optional add_suite_headers : true \\\\ Optional add_section_headers : true \\\\ Optional add_case_id_to_case_header : false \\\\ Optional add_case_id_to_std_table : false \\\\ Optional multi_param_name : \\\\ Optional multi_param_select : \\\\ Optional multi_param_select_type : any \\\\ Optional add_cases_without_multi_param : true \\\\ Optional add_multi_param_to_case_header : false \\\\ Optional add_multi_param_to_std_table : false \\\\ Optional checkbox_param_name : \\\\ Optional checkbox_param_select_type : checked \\\\ Optional choose_priorities : \\\\ Optional add_priority_to_case_header : false \\\\ Optional add_priority_to_std_table : false \\\\ Optional resolve_urls : true \\\\ Optional screenshots_url : https://gitlab_repository.url \\\\ Optional img_ext : .png \\\\ Optional print_case_structure : true \\\\ For debugging testrail_url URL of TestRail deployed. testrail_login Your TestRail username. testrail_pass Your TestRail password. It is not secure to store plain text passwords in your config files. We recommend to use environment variables to supply passwords. project_id TestRail project ID. You can find it in the project URL, for example http://testrails.url/index.php?/projects/overview/17 <-. suite_ids If you have several suites in your project, you can download test cases from certain suites. You can find suite ID in the URL again, for example http://testrails.url/index.php?/suites/view/63... <-. section_ids Also you can download any sections you want regardless of it's level. Just keep in mind that this setting overrides previous suite_ids (but if you set suite_ids and then section_ids from another suite, nothing will be downloaded). And suddenly you can find section ID in it's URL, for example http://testrails.url/index.php?/suites/view/124&group_by=cases:section_id&group_order=asc&group_id=3926 <-. exclude_suite_ids You can exclude any suites (even stated in suite_ids ) from the document. exclude_section_ids The same with the sections. exclude_case_ids And the same with the cases. filename Path to the test cases file. It should be added to project chapters in foliant.yml . Default: test_cases.md . For example: title : &title Test procedure chapters : - intro.md - conditions.md - awesome_test_cases.md <- This one for test cases - appendum.md preprocessors : - testrail : testrail_url : http://testrails.url testrail_login : username testrail_pass : password project_id : 35 filename : awesome_test_cases.md rewrite_src_files You can update ( true ) test cases file after each use of preprocessor. Be careful, previous data will be deleted. template_folder Preprocessor uses Jinja2 templates to compose the file with test cases. Here you can find documentation: http://jinja.pocoo.org/docs/2.10/ . You can store templates in folder inside the foliant project, but if it's not default case_templates you have to write it here. If this parameter not set and there is no default case_templates folder in the project, it will be created automatically with two jinja files for TestRail templates by default \u2014 Test Case (Text) with template_id=1 and Test Case (Steps) with template_id=2 . You can create TestRail templates by yourself in Administration panel, Customizations section, Templates part. Then you have to create jinja templates whith the names {template_id}.j2 for them. For example, file 2.j2 for Test Case (Steps) TestRail template: {% if case['custom_steps_separated'][0]['content'] %} {% if case['custom_preconds'] %} **Preconditions:** {{ case['custom_preconds'] }} {% endif %} **Scenario:** {% for case_step in case['custom_steps_separated'] %} *Step {{ loop.index }}.* {{ case_step['content'] }} *Expected result:* {{ case_step['expected'] }} {% endfor %} {% endif %} You can use all parameters of two variables in the template \u2014 case and params . Case parameters depends on TestRail template. All custom parameters have prefix 'custom_' before system name set in TestRail. Here is an example of case variable (parameters depends on case template): case = { 'created_by': 3, 'created_on': 1524909903, 'custom_expected': None, 'custom_goals': None, 'custom_mission': None, 'custom_preconds': '- The user is not registered in the system.\\r\\n' '- Registration form opened.', 'custom_steps': '', 'custom_steps_separated': [{ 'content': 'Enter mobile phone number.', 'expected': '- Entered phone number ' 'is visible in the form field.' }, {'content': 'Press OK button.', 'expected': '- SMS with registration code ' 'received.\\n'}], 'custom_test_androidtv': None, 'custom_test_appletv': None, 'custom_test_smarttv': 'None, 'custom_tp': True, 'estimate': None, 'estimate_forecast': None, 'id': 15940, 'milestone_id': None, 'priority_id': 4, 'refs': None, 'section_id': 3441, 'suite_id': 101, 'template_id': 7, 'title': 'Registration by mobile phone number.', 'type_id': 7, 'updated_by': 10, 'updated_on': 1528978979 } And here is an example of params variable (parameters are always the same): params = { 'multi_param_name': 'platform', 'multi_param_sys_name': 'custom_platform', 'multi_param_select': ['android', 'ios'], 'multi_param_select_type': any, 'add_cases_without_multi_param': False, 'checkbox_param_name': 'publish', 'checkbox_param_sys_name': 'custom_publish', 'checkbox_param_select_type': 'checked', 'choose_priorities': ['critical', 'high', 'medium'], 'add_multi_param_to_case_header': True, 'add_multi_param_to_std_table': True, 'add_priority_to_case_header': True, 'add_priority_to_std_table': True, 'add_case_id_to_case_header': False, 'add_case_id_to_std_table': False, 'links_to_images': [ {'id': '123', 'link': '(leading_exclamation_mark_here)[Image caption](testrail_imgs/123.png)'}, ... ] } img_folder Folder to store downloaded images if rewrite_src_files=True . move_imgs_from_text It's impossible to compile test cases with images to the table. So you can use this parameter to convert image links in test cases to ordinary markdown-links and get the list with all image links in params['links_to_images'] parameter to use in jinja template. In this case you'll have to use multilinetables and anchors preprocessors. For example, you have 2-step test case: Step 1: Press the button: (leading_exclamation_mark_here)[Button](index.php?/attachments/get/740) Result 1: Dialog box will opened: (leading_exclamation_mark_here)[Dialog box](index.php?/attachments/get/741) Step 2: Select option: (leading_exclamation_mark_here)[List of options](index.php?/attachments/get/742) Result 2: Option selected: (leading_exclamation_mark_here)[Result](index.php?/attachments/get/743) Minimal multilinetables and anchors preprocessor settings in foliant.yml should be like this (more about multilinetables parameters see in preprocessor documentation ): - anchors - multilinetables: enable_hyphenation: true hyph_combination: brkln convert_to_grid: true After testrail preprocessor process this test case, you will have params['links_to_images'] parameter with list of image links in order of appearance to use in jinja template: [ { 'id' : '740' , 'link' : '(leading_exclamation_mark_here)[Button](testrail_imgs/740.png)' }, { 'id' : '741' , 'link' : '(leading_exclamation_mark_here)[Dialog box](testrail_imgs/741.png)' }, { 'id' : '742' , 'link' : '(leading_exclamation_mark_here)[List of options](testrail_imgs/742.png)' }, { 'id' : '743' , 'link' : '(leading_exclamation_mark_here)[Result](testrail_imgs/743.png)' } ] Using this jinja template: **Testing procedure:** | # | Test step | Expected result | Passed | Comment | |---|-------------------|---------------------|----------|------------------------| {% for case_step in case['custom_steps_separated'] -%} | {{ loop.index }} | {{ case_step['content']|replace(\"\\n\", \"brkln\") }} | {{ case_step['expected']|replace(\"\\n\", \"brkln\") }} | | | {% endfor %} {% if params['links_to_images'] %} *Images:* {% for image in params['links_to_images'] %} <anchor>{{ image['id'] }}</anchor> {{ image['link'] }} {% endfor %} {% endif %} The markdown result will be: **Testing procedure:** +---+-----------------------------------------+----------------------------------------+--------+---------+ | # | Test step | Expected result | Passed | Comment | +===+=========================================+========================================+========+=========+ | 1 | Press the button | Dialog box will opened: | | | | | | | | | | | [Button](#740) | [Dialog box](#741) | | | | | | | | | +---+-----------------------------------------+----------------------------------------+--------+---------+ | 2 | Select option: | Option selected: | | | | | | | | | | | [List of options](#742) | [Result](#743) | | | +---+-----------------------------------------+----------------------------------------+--------+---------+ *Images:* <anchor>740</anchor> (leading_exclamation_mark_here)[Button](testrail_imgs/740.png) <anchor>741</anchor> (leading_exclamation_mark_here)[Dialog box](testrail_imgs/741.png) <anchor>742</anchor> (leading_exclamation_mark_here)[List of options](testrail_imgs/742.png) <anchor>743</anchor> (leading_exclamation_mark_here)[Result](testrail_imgs/743.png) So you can use links in the table to go to the correspondent image. Important! Anchors must differ, so if one image (with the same image id) will appear in several test cases, this image will be downloaded separately for each appearance and renamed with postfix '-1', '-2', etc. Next three fields are necessary due localization issues. While markdown document with test cases is composed on the go, you have to set up some document headers. Definitely not the best solution in my life. section_header First level header of section with test cases. By default it's Testing program in Russian. std_table_header First level header of section with test results table. By default it's Testing table in Russian. std_table_column_headers Semicolon separated headers of testing table columns. By default it's \u2116; Priority; Platform; ID; Test case name; Result; Comment in Russian. add_std_table You can exclude ( false ) a testing table from the document. add_suite_headers With false you can exclude all suite headers from the final document. add_section_headers With false you can exclude all section headers from the final document. add_case_id_to_case_header Every test case in TestRail has unique ID, which, as usual, you can find in the header or test case URL: http://testrails.url/index.php?/cases/view/15920... <-. So you can add ( true ) this ID to the test case headers and testing table. Or not ( false ). add_case_id_to_std_table Also you can add ( true ) the column with the test case IDs to the testing table. In TestRail you can add custom parameters to your test case template. With next settings you can use one multi-select or dropdown (good for platforms, for example) and one checkbox (publishing) plus default priority parameter for cases sampling. multi_param_name Parameter name of multi-select or dropdown type you set in System Name field of Add Custom Field form in TestRail. For example, platforms with values Android , iOS , PC , Mac and web . If multi_param_select not set, all test cases will be downloaded (useful when you need just to add parameter value to the test headers or testing table). multi_param_select Here you can set the platforms for which you want to get test cases (case insensitive). For example, you have similar UX for mobile platforms and want to combine them: preprocessors : - testrail : ... multi_param_name : platforms multi_param_select : android, ios ... multi_param_select_type With this parameter you can make test cases sampling in different ways. It has several options: any (by default) \u2014 at least one of multi_param_select values should be set for the case, all \u2014 all of multi_param_select values should be set and any other can be set for the case, only \u2014 only multi_param_select values in any combination should be set for the case, match \u2014 all and only multi_param_select values should be set for the case. With multi_param_select: android, ios we will get the following cases: Test cases Android iOS PC Mac web any all only match Test case 1 + + + + + + Test case 2 + + + + + + Test case 3 + + Test case 4 + + + + Test case 5 + + + + + Test case 6 + + + + + Test case 7 + + + Test case 8 + + + Test case 9 + + + add_cases_without_multi_param Also you can include (by default) or exclude ( false ) cases without any value of multi-select or dropdown parameter. add_multi_param_to_case_header You can add ( true ) values of multi-select or dropdown parameter to the case headers or not (by default). add_multi_param_to_std_table You can add ( true ) column with values of multi-select or dropdown parameter to the testing table or not (by default). checkbox_param_name Parameter name of checkbox type you set in System Name field of Add Custom Field form in TestRail. For example, publish . Without parameter name set all of cases will be downloaded. checkbox_param_select_type With this parameter you can make test cases sampling in different ways. It has several options: checked (by default) \u2014 only cases whith checked field will be downloaded, unchecked \u2014 only cases whith unchecked field will be downloaded. choose_priorities Here you can set test case priorities to download (case insensitive). preprocessors : - testrail : ... choose_priorities : critical, high, medium ... add_priority_to_case_header You can add ( true ) priority to the case headers or not (by default). add_priority_to_std_table You can add ( true ) column with case priority to the testing table or not (by default). Using described setting you can flexibly adjust test cases sampling. For example, you can download only published critical test cases for both and only Mac and PC . Now strange things, mostly made specially for my project, but may be useful for others. Screenshots. There is a possibility to store screenshots in TestRail test cases, but you can store them in the GitLab repository (link to which should be stated in one of the following parameters). GitLab project should have following structure: images/ \u251c\u2500\u2500 smarttv/ | \u251c\u2500\u2500 screenshot1_smarttv.png | \u251c\u2500\u2500 screenshot2_smarttv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 androidtv/ | \u251c\u2500\u2500 screenshot1_androidtv.png | \u251c\u2500\u2500 screenshot2_androidtv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 appletv/ | \u251c\u2500\u2500 screenshot1_appletv.png | \u251c\u2500\u2500 screenshot2_appletv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 web/ | \u251c\u2500\u2500 screenshot1_web.png | \u251c\u2500\u2500 screenshot2_web.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 screenshot1.png \u251c\u2500\u2500 screenshot2.png \u2514\u2500\u2500 ... images folder used for projects without platforms. Filename ending is a first value of multi_param_select parameter ( platform ). Now to add screenshot to your document just add following string to the test case (unfortunately, in TestRail interface it will looks like broken image link): (leading exclamation mark here!)[Image title](main_filename_part) Preprocessor will convert to the following format: https://gitlab.url/gitlab_group_name/gitlab_project_name/raw/master/images/platform_name/main_filename_part_platform_name.png For example, in the project with multi_param_select: smarttv the string (leading exclamation mark here!)[Application main screen](main_screen) will be converted to: (leading exclamation mark here!)[Application main screen](https://gitlab.url/documentation/application-screenshots/raw/master/images/smarttv/main_screen_smarttv.png) That's it. resolve_urls Turn on ( true ) or off ( false , by default) image urls resolving. screenshots_url GitLab repository URL, in our example: https://gitlab.url/documentation/application-screenshots/ . img_ext Screenshots extension. Yes, it must be only one and the same for all screenshots. Also this parameter used to save downloaded images from TestRail. And the last one emergency tool. If you have no jinja template for any type of TestRail case, you'll see this message like this: There is no jinja template for test case template_id 5 (case_id 1325) in folder case_templates . So you have to write jinja template by yourself. To do this it's necessary to know case structure. This parameter shows it to you. print_case_structure Turn on ( true ) or off ( false , by default) printing out of case structure with all data in it if any problem occurs. Usage \u00b6 Just add the preprocessor to the project config, set it up and enjoy the automatically collected test cases to your document. Tips \u00b6 In some cases you may encounter a problem with test cases text format, so composed markdown file will be converted to the document with bad formatting. In this cases replace preprocessor could be useful: https://foliant-docs.github.io/docs/preprocessors/replace/ .","title":"Testrail"},{"location":"preprocessors/testrail/#testrail","text":"","title":"Testrail"},{"location":"preprocessors/testrail/#testrail-cases-downloader-for-foliant","text":"TestRail preprocessor collects test cases from TestRail project and adds to your testing procedure document. Important notice! We have some problems with displaying an exclamation mark in the image links, so they are replaced with (leading_exclamation_mark_here) phrase in the text.","title":"TestRail cases downloader for Foliant"},{"location":"preprocessors/testrail/#installation","text":"$ pip install foliantcontrib.testrail","title":"Installation"},{"location":"preprocessors/testrail/#config","text":"To enable the preprocessor, add testrail to preprocessors section in the project config. The preprocessor has a number of options (best values are set by default where possible): preprocessors : - testrail : testrail_url : http://testrails.url \\\\ Required testrail_login : username \\\\ Required testrail_pass : !env TESTRAIL_PASS \\\\ Required project_id : 35 \\\\ Required suite_ids : \\\\ Optional section_ids : \\\\ Optional exclude_suite_ids : \\\\ Optional exclude_section_ids : \\\\ Optional exclude_case_ids : \\\\ Optional filename : test_cases.md \\\\ Optional rewrite_src_files : false \\\\ Optional template_folder : case_templates \\\\ Optional img_folder : testrail_imgs \\\\ Optional move_imgs_from_text : false \\\\ Optional section_header : Testing program \\\\ Recommended std_table_header : Table with testing results \\\\ Recommended std_table_column_headers : \u2116; Priority; Platform; ID; Test case name; Result; Comment \\\\ Recommended add_std_table : true \\\\ Optional add_suite_headers : true \\\\ Optional add_section_headers : true \\\\ Optional add_case_id_to_case_header : false \\\\ Optional add_case_id_to_std_table : false \\\\ Optional multi_param_name : \\\\ Optional multi_param_select : \\\\ Optional multi_param_select_type : any \\\\ Optional add_cases_without_multi_param : true \\\\ Optional add_multi_param_to_case_header : false \\\\ Optional add_multi_param_to_std_table : false \\\\ Optional checkbox_param_name : \\\\ Optional checkbox_param_select_type : checked \\\\ Optional choose_priorities : \\\\ Optional add_priority_to_case_header : false \\\\ Optional add_priority_to_std_table : false \\\\ Optional resolve_urls : true \\\\ Optional screenshots_url : https://gitlab_repository.url \\\\ Optional img_ext : .png \\\\ Optional print_case_structure : true \\\\ For debugging testrail_url URL of TestRail deployed. testrail_login Your TestRail username. testrail_pass Your TestRail password. It is not secure to store plain text passwords in your config files. We recommend to use environment variables to supply passwords. project_id TestRail project ID. You can find it in the project URL, for example http://testrails.url/index.php?/projects/overview/17 <-. suite_ids If you have several suites in your project, you can download test cases from certain suites. You can find suite ID in the URL again, for example http://testrails.url/index.php?/suites/view/63... <-. section_ids Also you can download any sections you want regardless of it's level. Just keep in mind that this setting overrides previous suite_ids (but if you set suite_ids and then section_ids from another suite, nothing will be downloaded). And suddenly you can find section ID in it's URL, for example http://testrails.url/index.php?/suites/view/124&group_by=cases:section_id&group_order=asc&group_id=3926 <-. exclude_suite_ids You can exclude any suites (even stated in suite_ids ) from the document. exclude_section_ids The same with the sections. exclude_case_ids And the same with the cases. filename Path to the test cases file. It should be added to project chapters in foliant.yml . Default: test_cases.md . For example: title : &title Test procedure chapters : - intro.md - conditions.md - awesome_test_cases.md <- This one for test cases - appendum.md preprocessors : - testrail : testrail_url : http://testrails.url testrail_login : username testrail_pass : password project_id : 35 filename : awesome_test_cases.md rewrite_src_files You can update ( true ) test cases file after each use of preprocessor. Be careful, previous data will be deleted. template_folder Preprocessor uses Jinja2 templates to compose the file with test cases. Here you can find documentation: http://jinja.pocoo.org/docs/2.10/ . You can store templates in folder inside the foliant project, but if it's not default case_templates you have to write it here. If this parameter not set and there is no default case_templates folder in the project, it will be created automatically with two jinja files for TestRail templates by default \u2014 Test Case (Text) with template_id=1 and Test Case (Steps) with template_id=2 . You can create TestRail templates by yourself in Administration panel, Customizations section, Templates part. Then you have to create jinja templates whith the names {template_id}.j2 for them. For example, file 2.j2 for Test Case (Steps) TestRail template: {% if case['custom_steps_separated'][0]['content'] %} {% if case['custom_preconds'] %} **Preconditions:** {{ case['custom_preconds'] }} {% endif %} **Scenario:** {% for case_step in case['custom_steps_separated'] %} *Step {{ loop.index }}.* {{ case_step['content'] }} *Expected result:* {{ case_step['expected'] }} {% endfor %} {% endif %} You can use all parameters of two variables in the template \u2014 case and params . Case parameters depends on TestRail template. All custom parameters have prefix 'custom_' before system name set in TestRail. Here is an example of case variable (parameters depends on case template): case = { 'created_by': 3, 'created_on': 1524909903, 'custom_expected': None, 'custom_goals': None, 'custom_mission': None, 'custom_preconds': '- The user is not registered in the system.\\r\\n' '- Registration form opened.', 'custom_steps': '', 'custom_steps_separated': [{ 'content': 'Enter mobile phone number.', 'expected': '- Entered phone number ' 'is visible in the form field.' }, {'content': 'Press OK button.', 'expected': '- SMS with registration code ' 'received.\\n'}], 'custom_test_androidtv': None, 'custom_test_appletv': None, 'custom_test_smarttv': 'None, 'custom_tp': True, 'estimate': None, 'estimate_forecast': None, 'id': 15940, 'milestone_id': None, 'priority_id': 4, 'refs': None, 'section_id': 3441, 'suite_id': 101, 'template_id': 7, 'title': 'Registration by mobile phone number.', 'type_id': 7, 'updated_by': 10, 'updated_on': 1528978979 } And here is an example of params variable (parameters are always the same): params = { 'multi_param_name': 'platform', 'multi_param_sys_name': 'custom_platform', 'multi_param_select': ['android', 'ios'], 'multi_param_select_type': any, 'add_cases_without_multi_param': False, 'checkbox_param_name': 'publish', 'checkbox_param_sys_name': 'custom_publish', 'checkbox_param_select_type': 'checked', 'choose_priorities': ['critical', 'high', 'medium'], 'add_multi_param_to_case_header': True, 'add_multi_param_to_std_table': True, 'add_priority_to_case_header': True, 'add_priority_to_std_table': True, 'add_case_id_to_case_header': False, 'add_case_id_to_std_table': False, 'links_to_images': [ {'id': '123', 'link': '(leading_exclamation_mark_here)[Image caption](testrail_imgs/123.png)'}, ... ] } img_folder Folder to store downloaded images if rewrite_src_files=True . move_imgs_from_text It's impossible to compile test cases with images to the table. So you can use this parameter to convert image links in test cases to ordinary markdown-links and get the list with all image links in params['links_to_images'] parameter to use in jinja template. In this case you'll have to use multilinetables and anchors preprocessors. For example, you have 2-step test case: Step 1: Press the button: (leading_exclamation_mark_here)[Button](index.php?/attachments/get/740) Result 1: Dialog box will opened: (leading_exclamation_mark_here)[Dialog box](index.php?/attachments/get/741) Step 2: Select option: (leading_exclamation_mark_here)[List of options](index.php?/attachments/get/742) Result 2: Option selected: (leading_exclamation_mark_here)[Result](index.php?/attachments/get/743) Minimal multilinetables and anchors preprocessor settings in foliant.yml should be like this (more about multilinetables parameters see in preprocessor documentation ): - anchors - multilinetables: enable_hyphenation: true hyph_combination: brkln convert_to_grid: true After testrail preprocessor process this test case, you will have params['links_to_images'] parameter with list of image links in order of appearance to use in jinja template: [ { 'id' : '740' , 'link' : '(leading_exclamation_mark_here)[Button](testrail_imgs/740.png)' }, { 'id' : '741' , 'link' : '(leading_exclamation_mark_here)[Dialog box](testrail_imgs/741.png)' }, { 'id' : '742' , 'link' : '(leading_exclamation_mark_here)[List of options](testrail_imgs/742.png)' }, { 'id' : '743' , 'link' : '(leading_exclamation_mark_here)[Result](testrail_imgs/743.png)' } ] Using this jinja template: **Testing procedure:** | # | Test step | Expected result | Passed | Comment | |---|-------------------|---------------------|----------|------------------------| {% for case_step in case['custom_steps_separated'] -%} | {{ loop.index }} | {{ case_step['content']|replace(\"\\n\", \"brkln\") }} | {{ case_step['expected']|replace(\"\\n\", \"brkln\") }} | | | {% endfor %} {% if params['links_to_images'] %} *Images:* {% for image in params['links_to_images'] %} <anchor>{{ image['id'] }}</anchor> {{ image['link'] }} {% endfor %} {% endif %} The markdown result will be: **Testing procedure:** +---+-----------------------------------------+----------------------------------------+--------+---------+ | # | Test step | Expected result | Passed | Comment | +===+=========================================+========================================+========+=========+ | 1 | Press the button | Dialog box will opened: | | | | | | | | | | | [Button](#740) | [Dialog box](#741) | | | | | | | | | +---+-----------------------------------------+----------------------------------------+--------+---------+ | 2 | Select option: | Option selected: | | | | | | | | | | | [List of options](#742) | [Result](#743) | | | +---+-----------------------------------------+----------------------------------------+--------+---------+ *Images:* <anchor>740</anchor> (leading_exclamation_mark_here)[Button](testrail_imgs/740.png) <anchor>741</anchor> (leading_exclamation_mark_here)[Dialog box](testrail_imgs/741.png) <anchor>742</anchor> (leading_exclamation_mark_here)[List of options](testrail_imgs/742.png) <anchor>743</anchor> (leading_exclamation_mark_here)[Result](testrail_imgs/743.png) So you can use links in the table to go to the correspondent image. Important! Anchors must differ, so if one image (with the same image id) will appear in several test cases, this image will be downloaded separately for each appearance and renamed with postfix '-1', '-2', etc. Next three fields are necessary due localization issues. While markdown document with test cases is composed on the go, you have to set up some document headers. Definitely not the best solution in my life. section_header First level header of section with test cases. By default it's Testing program in Russian. std_table_header First level header of section with test results table. By default it's Testing table in Russian. std_table_column_headers Semicolon separated headers of testing table columns. By default it's \u2116; Priority; Platform; ID; Test case name; Result; Comment in Russian. add_std_table You can exclude ( false ) a testing table from the document. add_suite_headers With false you can exclude all suite headers from the final document. add_section_headers With false you can exclude all section headers from the final document. add_case_id_to_case_header Every test case in TestRail has unique ID, which, as usual, you can find in the header or test case URL: http://testrails.url/index.php?/cases/view/15920... <-. So you can add ( true ) this ID to the test case headers and testing table. Or not ( false ). add_case_id_to_std_table Also you can add ( true ) the column with the test case IDs to the testing table. In TestRail you can add custom parameters to your test case template. With next settings you can use one multi-select or dropdown (good for platforms, for example) and one checkbox (publishing) plus default priority parameter for cases sampling. multi_param_name Parameter name of multi-select or dropdown type you set in System Name field of Add Custom Field form in TestRail. For example, platforms with values Android , iOS , PC , Mac and web . If multi_param_select not set, all test cases will be downloaded (useful when you need just to add parameter value to the test headers or testing table). multi_param_select Here you can set the platforms for which you want to get test cases (case insensitive). For example, you have similar UX for mobile platforms and want to combine them: preprocessors : - testrail : ... multi_param_name : platforms multi_param_select : android, ios ... multi_param_select_type With this parameter you can make test cases sampling in different ways. It has several options: any (by default) \u2014 at least one of multi_param_select values should be set for the case, all \u2014 all of multi_param_select values should be set and any other can be set for the case, only \u2014 only multi_param_select values in any combination should be set for the case, match \u2014 all and only multi_param_select values should be set for the case. With multi_param_select: android, ios we will get the following cases: Test cases Android iOS PC Mac web any all only match Test case 1 + + + + + + Test case 2 + + + + + + Test case 3 + + Test case 4 + + + + Test case 5 + + + + + Test case 6 + + + + + Test case 7 + + + Test case 8 + + + Test case 9 + + + add_cases_without_multi_param Also you can include (by default) or exclude ( false ) cases without any value of multi-select or dropdown parameter. add_multi_param_to_case_header You can add ( true ) values of multi-select or dropdown parameter to the case headers or not (by default). add_multi_param_to_std_table You can add ( true ) column with values of multi-select or dropdown parameter to the testing table or not (by default). checkbox_param_name Parameter name of checkbox type you set in System Name field of Add Custom Field form in TestRail. For example, publish . Without parameter name set all of cases will be downloaded. checkbox_param_select_type With this parameter you can make test cases sampling in different ways. It has several options: checked (by default) \u2014 only cases whith checked field will be downloaded, unchecked \u2014 only cases whith unchecked field will be downloaded. choose_priorities Here you can set test case priorities to download (case insensitive). preprocessors : - testrail : ... choose_priorities : critical, high, medium ... add_priority_to_case_header You can add ( true ) priority to the case headers or not (by default). add_priority_to_std_table You can add ( true ) column with case priority to the testing table or not (by default). Using described setting you can flexibly adjust test cases sampling. For example, you can download only published critical test cases for both and only Mac and PC . Now strange things, mostly made specially for my project, but may be useful for others. Screenshots. There is a possibility to store screenshots in TestRail test cases, but you can store them in the GitLab repository (link to which should be stated in one of the following parameters). GitLab project should have following structure: images/ \u251c\u2500\u2500 smarttv/ | \u251c\u2500\u2500 screenshot1_smarttv.png | \u251c\u2500\u2500 screenshot2_smarttv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 androidtv/ | \u251c\u2500\u2500 screenshot1_androidtv.png | \u251c\u2500\u2500 screenshot2_androidtv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 appletv/ | \u251c\u2500\u2500 screenshot1_appletv.png | \u251c\u2500\u2500 screenshot2_appletv.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 web/ | \u251c\u2500\u2500 screenshot1_web.png | \u251c\u2500\u2500 screenshot2_web.png | \u2514\u2500\u2500 ... \u251c\u2500\u2500 screenshot1.png \u251c\u2500\u2500 screenshot2.png \u2514\u2500\u2500 ... images folder used for projects without platforms. Filename ending is a first value of multi_param_select parameter ( platform ). Now to add screenshot to your document just add following string to the test case (unfortunately, in TestRail interface it will looks like broken image link): (leading exclamation mark here!)[Image title](main_filename_part) Preprocessor will convert to the following format: https://gitlab.url/gitlab_group_name/gitlab_project_name/raw/master/images/platform_name/main_filename_part_platform_name.png For example, in the project with multi_param_select: smarttv the string (leading exclamation mark here!)[Application main screen](main_screen) will be converted to: (leading exclamation mark here!)[Application main screen](https://gitlab.url/documentation/application-screenshots/raw/master/images/smarttv/main_screen_smarttv.png) That's it. resolve_urls Turn on ( true ) or off ( false , by default) image urls resolving. screenshots_url GitLab repository URL, in our example: https://gitlab.url/documentation/application-screenshots/ . img_ext Screenshots extension. Yes, it must be only one and the same for all screenshots. Also this parameter used to save downloaded images from TestRail. And the last one emergency tool. If you have no jinja template for any type of TestRail case, you'll see this message like this: There is no jinja template for test case template_id 5 (case_id 1325) in folder case_templates . So you have to write jinja template by yourself. To do this it's necessary to know case structure. This parameter shows it to you. print_case_structure Turn on ( true ) or off ( false , by default) printing out of case structure with all data in it if any problem occurs.","title":"Config"},{"location":"preprocessors/testrail/#usage","text":"Just add the preprocessor to the project config, set it up and enjoy the automatically collected test cases to your document.","title":"Usage"},{"location":"preprocessors/testrail/#tips","text":"In some cases you may encounter a problem with test cases text format, so composed markdown file will be converted to the document with bad formatting. In this cases replace preprocessor could be useful: https://foliant-docs.github.io/docs/preprocessors/replace/ .","title":"Tips"},{"location":"tutorials/api/","tags":["tutorial","API"],"text":"Documenting API with Foliant \u00b6 In this tutorial we will learn how to use Foliant to generate documentation from API specification formats OpenAPI (Swagger) , RAML and API Blueprint . The general idea is that you supply a specification file path ( json or yaml for OpenAPI, raml for RAML) to a preprocessor which will generate a Markdown document out of it. Markdown is what Foliant is good at, so after that you can do anything with it: convert to PDF, partially include in other documents, etc. In this guide we will concentrate on building a static website for your API documentation. Please note that in this article we cover only the basic usage of the tools. For detailed information on features and customizing output refer to each component\u2019s doc page. OpenAPI \u00b6 Installing prerequisites \u00b6 Besides Foliant you will need to install some additional packages on your system. If you are using our full docker image foliant/foliant:full , you can skip this chapter. First, install the SwaggerDoc preprocessor which will convert spec file to Markdown. pip3 install foliantcontrib.swaggerdoc SwaggerDoc preprocessor uses Widdershins under the hood, so you will need to install that too. npm install -g widdershins Finally, to build the static website we will be using Slate backend : pip3 install foliantcontrib.slate Also note that Slate requires Ruby and Bundler to work (that\u2019s a lot of dependencies, I know). Creating project \u00b6 Let\u2019s create Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We\u2019ve chosen \"OpenAPI docs\", but it may be anything: cd ~/projects foliant init Enter the project name: OpenAPI docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"OpenAPI docs\" created in openapi-docs In the output Foliant informs us that the project was created in a new folder openapi-docs . Let\u2019s copy your OpenAPI spec file into this folder: cp ~/Downloads/my_api.yaml ~/projects/openapi-docs In the end you should get the following directory structure: \u2514\u2500\u2500 openapi-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 my_api.yaml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full Configuring project \u00b6 Now let\u2019s set up foliant.yml . Right now it looks like this: title : OpenAPI docs chapters : - index.md First add and fill up the preprocessors section at the bottom: preprocessors : - swaggerdoc : spec_path : !path my_api.yaml # path to your API spec file, relative to project root At this stage you may also specify path to custom templates dir in environment: {user_templates: path/to/custom/templates} parameter. Templates describe the exact way of how to convert structured specification file into a Markdown document. For this tutorial we will be using default templates because they are perfect for our static site. Check Widdershins docs for detailed info on templates. The last thing we need to do is point Foliant where to insert the generated Markdown from the spec file. We already have a source file created for us by init command, called index.md , so let\u2019s use it to store our API docs. Open openapi-docs/src/index.md with text editor and replace its contents with the following: < swaggerdoc ></ swaggerdoc > Foliant will insert generated markdown on the place of this tag during build. You may even add some kind of introduction for the API docs before the tag, if you don\u2019t have such inside your spec file. That\u2019s it! All is left to do is run make command to build your site. foliant make site --with slate Parsing config... Done Applying preprocessor swaggerdoc... Done Applying preprocessor slate... Done Applying preprocessor _unescape... Done Making site... ... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: OpenAPI_docs-2019-11-29.slate/ If you use docker, the command is: docker-compose run --rm foliant make site --with slate Now if you open the index.html from just created OpenAPI_docs-2019-11-29.slate folder, you should see something like this: You can customize the page styles, add or remove language example tabs and tune other options. Check the Slate backend documentation for details. RAML \u00b6 Building API docs from RAML specification is quite similar to that of OpenAPI, the difference is that instead of swaggerdoc preprocessor you use ramldoc . We will go through all the steps anyway. Installing prerequisites \u00b6 Besides Foliant you will need to install some additional packages on your system. If you are using our full docker image foliant/foliant:full , you can skip this chapter. First, install the RAMLDoc preprocessor which will convert spec file to Markdown. pip3 install foliantcontrib.ramldoc RAMLdoc preprocessor uses raml2html with full-markdown-theme under the hood, so you will need to install those too. npm install -g raml2html raml2html-full-markdown-theme Finally, to build the static website we will be using Slate backend . If you don\u2019t have it, run: pip3 install foliantcontrib.slate Also note that Slate requires Ruby and Bundler to work. Creating project \u00b6 Let\u2019s create Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We\u2019ve chosen \"API docs\", but it may be anything: cd ~/projects foliant init Enter the project name: API docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"API docs\" created in api-docs In the output Foliant informs us that the project was created in a new folder api-docs . Now let\u2019s copy your RAML spec file to this folder: cp ~/Downloads/my_api.raml ~/projects/api-docs In the end you should get the following directory structure: \u2514\u2500\u2500 api-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 my_api.raml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full Configuring project \u00b6 Now let\u2019s set up foliant.yml . Right now it looks like this: title : API docs chapters : - index.md First add and fill up the preprocessors section at the bottom: preprocessors : - ramldoc : spec_path : !path my_api.yaml # path to your API spec file, relative to project root At this stage you may also specify path to custom templates dir in the template_dir parameter. Templates describe the exact way of how to convert structured specification file into a Markdown document. raml2html uses Nunjucks templates, which are stored in the theme. So the easiest way to create your own templates is to copy default ones and adjust them to your needs. But we will use the default template which works great with Slate. The last thing we need to do is point Foliant where to insert the generated Markdown from the spec file. We already have a source file created for us by init command, called index.md , so let\u2019s use it to store our API docs. Open api-docs/src/index.md with text editor and replace its contents with the following: < ramldoc ></ ramldoc > Foliant will insert generated markdown on the place of this tag during build. You may even add some kind of introduction for the API docs before the tag, if you don\u2019t have such in your spec file. That\u2019s it! All is left to do is run make command to build your site. foliant make site --with slate Parsing config... Done Applying preprocessor ramldoc... Done Applying preprocessor slate... Done Applying preprocessor _unescape... Done Making site... ... Project built successfully. Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: API_docs-2019-11-29.slate/ If you use docker, the command is: docker-compose run --rm foliant make site --with slate Now if you open the index.html from just created API_docs-2019-11-29.slate folder, you should see something like this: You can customize the page styles, add or remove language example tabs and tune other options. Check the Slate backend documentation for details. Blueprint \u00b6 API Blueprint is a Markdown-based API specification format. That\u2019s why the build process differs from that of OpenAPI or RAML: we skip the converting step and just add the specification file as a source. Installing prerequisites \u00b6 To build a static site we will use Aglio backend which is designed specifically for rendering API Blueprint. So first install the backend and Aglio renderer itself: pip3 install foliantcontrib.aglio npm install -g aglio Creating project \u00b6 Let\u2019s create a Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We\u2019ve chosen \"API docs\", but it may be anything: cd ~/projects foliant init Enter the project name: API docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"API docs\" created in api-docs In the output Foliant informs us that the project was created in a new folder api-docs . Now copy your Blueprint spec file into the src subfolder (it\u2019s better to change the extension to .md too), replacing \"index.md\": cp ~/Downloads/spec.abip ~/projects/api-docs/src/index.md In the end you should get the following directory structure: \u2514\u2500\u2500 openapi-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full Configuring project \u00b6 Now check your foliant.yml . Right now it looks like this: title : API docs chapters : - index.md # this should be your API Blueprint specification It may be hard to believe, but no other configuration is required! Let\u2019s build our project: foliant make site --with aglio Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: OpenAPI_docs-2019-11-29.aglio If you use docker, the command is: docker-compose run --rm foliant make site --with aglio Now if you open the index.html from just created API_docs-2019-11-29.aglio folder, you should see something like this: It\u2019s not near as attractive as the Slate site we had in previous examples. But don\u2019t worry, Aglio supports styling with CSS and layout control with Jade templates. It also has several built-in themes, which look much better than the default one. Open your foliant.yml again and add following lines at the end: backend_config : aglio : params : theme-variables : streak theme-template : triple Now run the same build command: foliant make site --with aglio And look at the result: Much better!","title":"Documenting API with Foliant"},{"location":"tutorials/api/#documenting-api-with-foliant","text":"In this tutorial we will learn how to use Foliant to generate documentation from API specification formats OpenAPI (Swagger) , RAML and API Blueprint . The general idea is that you supply a specification file path ( json or yaml for OpenAPI, raml for RAML) to a preprocessor which will generate a Markdown document out of it. Markdown is what Foliant is good at, so after that you can do anything with it: convert to PDF, partially include in other documents, etc. In this guide we will concentrate on building a static website for your API documentation. Please note that in this article we cover only the basic usage of the tools. For detailed information on features and customizing output refer to each component\u2019s doc page.","title":"Documenting API with Foliant"},{"location":"tutorials/api/#openapi","text":"","title":"OpenAPI"},{"location":"tutorials/api/#installing-prerequisites","text":"Besides Foliant you will need to install some additional packages on your system. If you are using our full docker image foliant/foliant:full , you can skip this chapter. First, install the SwaggerDoc preprocessor which will convert spec file to Markdown. pip3 install foliantcontrib.swaggerdoc SwaggerDoc preprocessor uses Widdershins under the hood, so you will need to install that too. npm install -g widdershins Finally, to build the static website we will be using Slate backend : pip3 install foliantcontrib.slate Also note that Slate requires Ruby and Bundler to work (that\u2019s a lot of dependencies, I know).","title":"Installing prerequisites"},{"location":"tutorials/api/#creating-project","text":"Let\u2019s create Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We\u2019ve chosen \"OpenAPI docs\", but it may be anything: cd ~/projects foliant init Enter the project name: OpenAPI docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"OpenAPI docs\" created in openapi-docs In the output Foliant informs us that the project was created in a new folder openapi-docs . Let\u2019s copy your OpenAPI spec file into this folder: cp ~/Downloads/my_api.yaml ~/projects/openapi-docs In the end you should get the following directory structure: \u2514\u2500\u2500 openapi-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 my_api.yaml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full","title":"Creating project"},{"location":"tutorials/api/#configuring-project","text":"Now let\u2019s set up foliant.yml . Right now it looks like this: title : OpenAPI docs chapters : - index.md First add and fill up the preprocessors section at the bottom: preprocessors : - swaggerdoc : spec_path : !path my_api.yaml # path to your API spec file, relative to project root At this stage you may also specify path to custom templates dir in environment: {user_templates: path/to/custom/templates} parameter. Templates describe the exact way of how to convert structured specification file into a Markdown document. For this tutorial we will be using default templates because they are perfect for our static site. Check Widdershins docs for detailed info on templates. The last thing we need to do is point Foliant where to insert the generated Markdown from the spec file. We already have a source file created for us by init command, called index.md , so let\u2019s use it to store our API docs. Open openapi-docs/src/index.md with text editor and replace its contents with the following: < swaggerdoc ></ swaggerdoc > Foliant will insert generated markdown on the place of this tag during build. You may even add some kind of introduction for the API docs before the tag, if you don\u2019t have such inside your spec file. That\u2019s it! All is left to do is run make command to build your site. foliant make site --with slate Parsing config... Done Applying preprocessor swaggerdoc... Done Applying preprocessor slate... Done Applying preprocessor _unescape... Done Making site... ... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: OpenAPI_docs-2019-11-29.slate/ If you use docker, the command is: docker-compose run --rm foliant make site --with slate Now if you open the index.html from just created OpenAPI_docs-2019-11-29.slate folder, you should see something like this: You can customize the page styles, add or remove language example tabs and tune other options. Check the Slate backend documentation for details.","title":"Configuring project"},{"location":"tutorials/api/#raml","text":"Building API docs from RAML specification is quite similar to that of OpenAPI, the difference is that instead of swaggerdoc preprocessor you use ramldoc . We will go through all the steps anyway.","title":"RAML"},{"location":"tutorials/api/#installing-prerequisites_1","text":"Besides Foliant you will need to install some additional packages on your system. If you are using our full docker image foliant/foliant:full , you can skip this chapter. First, install the RAMLDoc preprocessor which will convert spec file to Markdown. pip3 install foliantcontrib.ramldoc RAMLdoc preprocessor uses raml2html with full-markdown-theme under the hood, so you will need to install those too. npm install -g raml2html raml2html-full-markdown-theme Finally, to build the static website we will be using Slate backend . If you don\u2019t have it, run: pip3 install foliantcontrib.slate Also note that Slate requires Ruby and Bundler to work.","title":"Installing prerequisites"},{"location":"tutorials/api/#creating-project_1","text":"Let\u2019s create Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We\u2019ve chosen \"API docs\", but it may be anything: cd ~/projects foliant init Enter the project name: API docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"API docs\" created in api-docs In the output Foliant informs us that the project was created in a new folder api-docs . Now let\u2019s copy your RAML spec file to this folder: cp ~/Downloads/my_api.raml ~/projects/api-docs In the end you should get the following directory structure: \u2514\u2500\u2500 api-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 my_api.raml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full","title":"Creating project"},{"location":"tutorials/api/#configuring-project_1","text":"Now let\u2019s set up foliant.yml . Right now it looks like this: title : API docs chapters : - index.md First add and fill up the preprocessors section at the bottom: preprocessors : - ramldoc : spec_path : !path my_api.yaml # path to your API spec file, relative to project root At this stage you may also specify path to custom templates dir in the template_dir parameter. Templates describe the exact way of how to convert structured specification file into a Markdown document. raml2html uses Nunjucks templates, which are stored in the theme. So the easiest way to create your own templates is to copy default ones and adjust them to your needs. But we will use the default template which works great with Slate. The last thing we need to do is point Foliant where to insert the generated Markdown from the spec file. We already have a source file created for us by init command, called index.md , so let\u2019s use it to store our API docs. Open api-docs/src/index.md with text editor and replace its contents with the following: < ramldoc ></ ramldoc > Foliant will insert generated markdown on the place of this tag during build. You may even add some kind of introduction for the API docs before the tag, if you don\u2019t have such in your spec file. That\u2019s it! All is left to do is run make command to build your site. foliant make site --with slate Parsing config... Done Applying preprocessor ramldoc... Done Applying preprocessor slate... Done Applying preprocessor _unescape... Done Making site... ... Project built successfully. Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: API_docs-2019-11-29.slate/ If you use docker, the command is: docker-compose run --rm foliant make site --with slate Now if you open the index.html from just created API_docs-2019-11-29.slate folder, you should see something like this: You can customize the page styles, add or remove language example tabs and tune other options. Check the Slate backend documentation for details.","title":"Configuring project"},{"location":"tutorials/api/#blueprint","text":"API Blueprint is a Markdown-based API specification format. That\u2019s why the build process differs from that of OpenAPI or RAML: we skip the converting step and just add the specification file as a source.","title":"Blueprint"},{"location":"tutorials/api/#installing-prerequisites_2","text":"To build a static site we will use Aglio backend which is designed specifically for rendering API Blueprint. So first install the backend and Aglio renderer itself: pip3 install foliantcontrib.aglio npm install -g aglio","title":"Installing prerequisites"},{"location":"tutorials/api/#creating-project_2","text":"Let\u2019s create a Foliant project. The easiest way is to use foliant init command. After running the command Foliant will ask you about your project name. We\u2019ve chosen \"API docs\", but it may be anything: cd ~/projects foliant init Enter the project name: API docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"API docs\" created in api-docs In the output Foliant informs us that the project was created in a new folder api-docs . Now copy your Blueprint spec file into the src subfolder (it\u2019s better to change the extension to .md too), replacing \"index.md\": cp ~/Downloads/spec.abip ~/projects/api-docs/src/index.md In the end you should get the following directory structure: \u2514\u2500\u2500 openapi-docs \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md If you wish to use Docker with full Foliant image, which is the recommended way to build Foliant projects, then open generated Dockerfile and replace its contents with the following line: FROM foliant/foliant:full","title":"Creating project"},{"location":"tutorials/api/#configuring-project_2","text":"Now check your foliant.yml . Right now it looks like this: title : API docs chapters : - index.md # this should be your API Blueprint specification It may be hard to believe, but no other configuration is required! Let\u2019s build our project: foliant make site --with aglio Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: OpenAPI_docs-2019-11-29.aglio If you use docker, the command is: docker-compose run --rm foliant make site --with aglio Now if you open the index.html from just created API_docs-2019-11-29.aglio folder, you should see something like this: It\u2019s not near as attractive as the Slate site we had in previous examples. But don\u2019t worry, Aglio supports styling with CSS and layout control with Jade templates. It also has several built-in themes, which look much better than the default one. Open your foliant.yml again and add following lines at the end: backend_config : aglio : params : theme-variables : streak theme-template : triple Now run the same build command: foliant make site --with aglio And look at the result: Much better!","title":"Configuring project"},{"location":"tutorials/docker/","tags":["tutorial"],"text":"Running Foliant in Docker \u00b6 Foliant's design philosophy says that everybody should do what they do best. We don't aim to create a universal text processing combine which covers all needs of a technical writer by itself. Instead Foliant introduces integrations with different beautiful open source tools which specialize on a little chunk of work and do it perfectly. This approach comes with a disadvantage that you have to install each one of the tools you are using in the project for Foliant to work. You may do it once on your machine but Foliant projects usually need to work as well for other people if they decide to clone your project's repository. And these people may not have the right tool installed, or they may have another version of it, or even an operating system which doesn't have the tool at all. Docker solves this problem by creating a virtual environment which will be consistent among different machines and even different operating systems. All the required tools will be installed and configured inside this virtual environment so all it's left to do is to run the build. Working with Docker may seem complicated for non-programmers, but we will try to make it simple. We will concentrate on practical examples and keep the technical details out of this tutorial. If you want them \u2014 check the Docker documentation . Getting Docker \u00b6 The first step is to download and install Docker. Windows Go to https://www.docker.com/get-started and download Docker installer. Follow the instructions of the installer. In the end, it may ask you to restart the computer. After restarting, run Docker by the shortcut in your Start menu. Linux Follow the instructions for your Linux distribution on the official website. After that install Docker Compose . MacOs Download and install Docker from this page . Creating a Test Project \u00b6 Now that we\u2019ve got Docker, we can create our test project. If you have Foliant installed on your system, run the init command $ foliant init Type the name of the project and cd into the freshly created folder. But that's the beauty of the Docker way, you don't even need to have Foliant installed on you computer to build Foliant projects. Instead of using init you can clone the Foliant Project template . It\u2019s an empty Foliant project with the required file and directory structure, including necessary Docker configs. It's similar to what you get by running foliant init . Now cd to the cloned directory and remove the .git folder, which still points to the template repository. Setting up Docker configs \u00b6 We've got a basic project which we already can build with Docker. Inside the project dir run: $ docker-compose run --rm foliant make site Right now our project can only build an MkDocs site. If we try to build a pdf we will get $ docker-compose run --rm foliant make pdf No backend available for pdf. If you are already familiar with Foliant you know that to build PDFs you need to install Pandoc with TeXLive and Pandoc backend . So how do we install that in a Docker container? In your project root you have a Dockerfile . This file describes the steps required to set up your virtual container. If you open the Dockerfile , you will see that apart from comments it contains three lines: FROM foliant/foliant COPY requirements.txt . RUN pip3 install -r requirements.txt The first line means that we start out with the base Foliant image, more on that later. The second one copies the file requirements.txt from your project folder into the container and the last one installs all Python dependencies from this file with pip from inside the container. requirements.txt is a file where all your Python dependencies for the project live. It means that adding the Pandoc backend to the virtual environment is a matter of adding it into requirements.txt . Let's do this now: foliantcontrib.mkdocs + foliantcontrib.pandoc With Pandoc and TeXLive it's not that easy, because they are not Python packages. But don't worry, it's still easy enough. Your virtual container is based on foliant/foliant image, which is in turn based on Ubuntu operating system. So all you need to do is to find the right commands to install the required packages as if you were on Ubuntu. These commands are apt update apt install -y texlive-full librsvg2-bin apt install -y pandoc So we take this commands and put them in our Dockerfile , but we will put RUN before each one to explain Docker our intentions. The order in which lines appear in the Dockerfile is important. Docker does a nice job of caching stages of container build, so make a rule of putting the commands which less prone to change at the start. In our case we will probably be editing our requirements.txt further down the line, but the pandoc installation commands are unlikely to change so we put them first: FROM foliant/foliant + ENV DEBIAN_FRONTEND=noninteractive + RUN apt update + RUN apt install -y texlive-full librsvg2-bin + RUN apt install -y pandoc COPY requirements.txt . RUN pip3 install -r requirements.txt We've also added an environment variable DEBIAN_FRONTEND which is required to install texlive-full inside a Docker container. Consider it magic, just don't forget to add it each time you install texlive in Docker. Now we need to rebuild our container. If we were to run the docker-compose run command now, it would still run in the old container, which doesn't have pandoc. So let's build it $ docker-compose build This command will now take time to complete because of the TeXLive engine which is HUGE. Don't worry, you will need to wait for so long just once. Now, as it's starting to get dark and you can hear the workers coming home from the factories, our image has finished building. Let's make a PDF! $ docker-compose run --rm foliant make pdf If all went right you will see a PDF file in your project folder. Using different Foliant Docker images \u00b6 You've noticed that docker-compose build command took a lot of time to complete because it needed to download and install the massive TexLive engine. It would be a pain to repeat this for each new Foliant project. Luckily, Foliant offers a selection of Docker images , each of which offers different number of tools preinstalled. One of the images is called pandoc and has the same packages which we've installed in the previous section. The full list is: slim \u2014 minimal image of Foliant with no extensions; latest \u2014 same as slim but with the foliant init command support; pandoc \u2014 image of Foliant with Pandoc backend, Pandoc itself, and LaTeX ( texlive-full Ubuntu package); full \u2014 most complete image of Foliant with all released extensions and dependencies required for them. Let's update our project to use the pandoc image instead of manually installing the dependencies. The image to use for the project is specified on the first line of the Dockerfile . Open it and replace the first line with: - FROM foliant/foliant + FROM foliant/foliant:pandoc Now remove the lines which we've added previouslly so your Dockerfile looks like this: FROM foliant/foliant:pandoc RUN pip3 install -r requirements.txt Next, remove the Pandoc backend from requirements.txt as it is also preinstalled in the pandoc image. Finally, rebuild the image and run the PDF making command: $ docker-compose build $ docker-compose run --rm foliant make pdf Once the pandoc image is downloaded, the build commands will always run very fast. Working with Foliant full image \u00b6 We've learned how to use Foliant with Docker, how to install dependencies inside the container and how to use different Foliant images. Now it's time to learn about the full Foliant image. This is the most powerful one of all. It has all official Foliant extensions and all their dependencies preinstalled. Once you base your Dockerfile on this image you will have whole power of Foliant at your disposal whenever you need it. To use it replace the first line of your Dockerfile with - FROM foliant/foliant + FROM foliant/foliant:full and run the build command $ docker-compose build Now you can for instance make a Slate static website with your docs instead of MkDocs. The command is $ docker-compose run --rm foliant make site --with slate We had to add a --with slate argument to our command to specify the backend to build site target with. full Foliant docker image contains all available official backends for Foliant and several of them are capable of building the site target. Without the --with argument (or -w for short) Foliant would prompt you for the specific backend name interactively. Summary \u00b6 That's all you need to know to work with Foliant the Docker way. Just remember the steps: put your Python dependencies in the requirements.txt file, add commands for installing your non-Python dependencies into the Dockerfile , preceding them with the RUN , rebuild your image with docker-compose build command every time you edit Dockerfile or requirements.txt . No need to run it after editing your Markdown sources or Foliant-related configuration files. And one last note for the full image users. We keep constantly updating Foliant, adding and updating its extensions. To use all the fresh features update the image every once in a while with command $ docker pull registry.itv.restr.im:5000/foliant:full And don't forget to rebuild your project's image after updating: $ docker-compose build","title":"Running Foliant in Docker"},{"location":"tutorials/docker/#running-foliant-in-docker","text":"Foliant's design philosophy says that everybody should do what they do best. We don't aim to create a universal text processing combine which covers all needs of a technical writer by itself. Instead Foliant introduces integrations with different beautiful open source tools which specialize on a little chunk of work and do it perfectly. This approach comes with a disadvantage that you have to install each one of the tools you are using in the project for Foliant to work. You may do it once on your machine but Foliant projects usually need to work as well for other people if they decide to clone your project's repository. And these people may not have the right tool installed, or they may have another version of it, or even an operating system which doesn't have the tool at all. Docker solves this problem by creating a virtual environment which will be consistent among different machines and even different operating systems. All the required tools will be installed and configured inside this virtual environment so all it's left to do is to run the build. Working with Docker may seem complicated for non-programmers, but we will try to make it simple. We will concentrate on practical examples and keep the technical details out of this tutorial. If you want them \u2014 check the Docker documentation .","title":"Running Foliant in Docker"},{"location":"tutorials/docker/#getting-docker","text":"The first step is to download and install Docker. Windows Go to https://www.docker.com/get-started and download Docker installer. Follow the instructions of the installer. In the end, it may ask you to restart the computer. After restarting, run Docker by the shortcut in your Start menu. Linux Follow the instructions for your Linux distribution on the official website. After that install Docker Compose . MacOs Download and install Docker from this page .","title":"Getting Docker"},{"location":"tutorials/docker/#creating-a-test-project","text":"Now that we\u2019ve got Docker, we can create our test project. If you have Foliant installed on your system, run the init command $ foliant init Type the name of the project and cd into the freshly created folder. But that's the beauty of the Docker way, you don't even need to have Foliant installed on you computer to build Foliant projects. Instead of using init you can clone the Foliant Project template . It\u2019s an empty Foliant project with the required file and directory structure, including necessary Docker configs. It's similar to what you get by running foliant init . Now cd to the cloned directory and remove the .git folder, which still points to the template repository.","title":"Creating a Test Project"},{"location":"tutorials/docker/#setting-up-docker-configs","text":"We've got a basic project which we already can build with Docker. Inside the project dir run: $ docker-compose run --rm foliant make site Right now our project can only build an MkDocs site. If we try to build a pdf we will get $ docker-compose run --rm foliant make pdf No backend available for pdf. If you are already familiar with Foliant you know that to build PDFs you need to install Pandoc with TeXLive and Pandoc backend . So how do we install that in a Docker container? In your project root you have a Dockerfile . This file describes the steps required to set up your virtual container. If you open the Dockerfile , you will see that apart from comments it contains three lines: FROM foliant/foliant COPY requirements.txt . RUN pip3 install -r requirements.txt The first line means that we start out with the base Foliant image, more on that later. The second one copies the file requirements.txt from your project folder into the container and the last one installs all Python dependencies from this file with pip from inside the container. requirements.txt is a file where all your Python dependencies for the project live. It means that adding the Pandoc backend to the virtual environment is a matter of adding it into requirements.txt . Let's do this now: foliantcontrib.mkdocs + foliantcontrib.pandoc With Pandoc and TeXLive it's not that easy, because they are not Python packages. But don't worry, it's still easy enough. Your virtual container is based on foliant/foliant image, which is in turn based on Ubuntu operating system. So all you need to do is to find the right commands to install the required packages as if you were on Ubuntu. These commands are apt update apt install -y texlive-full librsvg2-bin apt install -y pandoc So we take this commands and put them in our Dockerfile , but we will put RUN before each one to explain Docker our intentions. The order in which lines appear in the Dockerfile is important. Docker does a nice job of caching stages of container build, so make a rule of putting the commands which less prone to change at the start. In our case we will probably be editing our requirements.txt further down the line, but the pandoc installation commands are unlikely to change so we put them first: FROM foliant/foliant + ENV DEBIAN_FRONTEND=noninteractive + RUN apt update + RUN apt install -y texlive-full librsvg2-bin + RUN apt install -y pandoc COPY requirements.txt . RUN pip3 install -r requirements.txt We've also added an environment variable DEBIAN_FRONTEND which is required to install texlive-full inside a Docker container. Consider it magic, just don't forget to add it each time you install texlive in Docker. Now we need to rebuild our container. If we were to run the docker-compose run command now, it would still run in the old container, which doesn't have pandoc. So let's build it $ docker-compose build This command will now take time to complete because of the TeXLive engine which is HUGE. Don't worry, you will need to wait for so long just once. Now, as it's starting to get dark and you can hear the workers coming home from the factories, our image has finished building. Let's make a PDF! $ docker-compose run --rm foliant make pdf If all went right you will see a PDF file in your project folder.","title":"Setting up Docker configs"},{"location":"tutorials/docker/#using-different-foliant-docker-images","text":"You've noticed that docker-compose build command took a lot of time to complete because it needed to download and install the massive TexLive engine. It would be a pain to repeat this for each new Foliant project. Luckily, Foliant offers a selection of Docker images , each of which offers different number of tools preinstalled. One of the images is called pandoc and has the same packages which we've installed in the previous section. The full list is: slim \u2014 minimal image of Foliant with no extensions; latest \u2014 same as slim but with the foliant init command support; pandoc \u2014 image of Foliant with Pandoc backend, Pandoc itself, and LaTeX ( texlive-full Ubuntu package); full \u2014 most complete image of Foliant with all released extensions and dependencies required for them. Let's update our project to use the pandoc image instead of manually installing the dependencies. The image to use for the project is specified on the first line of the Dockerfile . Open it and replace the first line with: - FROM foliant/foliant + FROM foliant/foliant:pandoc Now remove the lines which we've added previouslly so your Dockerfile looks like this: FROM foliant/foliant:pandoc RUN pip3 install -r requirements.txt Next, remove the Pandoc backend from requirements.txt as it is also preinstalled in the pandoc image. Finally, rebuild the image and run the PDF making command: $ docker-compose build $ docker-compose run --rm foliant make pdf Once the pandoc image is downloaded, the build commands will always run very fast.","title":"Using different Foliant Docker images"},{"location":"tutorials/docker/#working-with-foliant-full-image","text":"We've learned how to use Foliant with Docker, how to install dependencies inside the container and how to use different Foliant images. Now it's time to learn about the full Foliant image. This is the most powerful one of all. It has all official Foliant extensions and all their dependencies preinstalled. Once you base your Dockerfile on this image you will have whole power of Foliant at your disposal whenever you need it. To use it replace the first line of your Dockerfile with - FROM foliant/foliant + FROM foliant/foliant:full and run the build command $ docker-compose build Now you can for instance make a Slate static website with your docs instead of MkDocs. The command is $ docker-compose run --rm foliant make site --with slate We had to add a --with slate argument to our command to specify the backend to build site target with. full Foliant docker image contains all available official backends for Foliant and several of them are capable of building the site target. Without the --with argument (or -w for short) Foliant would prompt you for the specific backend name interactively.","title":"Working with Foliant full image"},{"location":"tutorials/docker/#summary","text":"That's all you need to know to work with Foliant the Docker way. Just remember the steps: put your Python dependencies in the requirements.txt file, add commands for installing your non-Python dependencies into the Dockerfile , preceding them with the RUN , rebuild your image with docker-compose build command every time you edit Dockerfile or requirements.txt . No need to run it after editing your Markdown sources or Foliant-related configuration files. And one last note for the full image users. We keep constantly updating Foliant, adding and updating its extensions. To use all the fresh features update the image every once in a while with command $ docker pull registry.itv.restr.im:5000/foliant:full And don't forget to rebuild your project's image after updating: $ docker-compose build","title":"Summary"},{"location":"tutorials/first_project/","tags":["tutorial"],"text":"Your First Foliant Project \u00b6 In this tutorial, you\u2019ll learn how to use Foliant to build websites and pdf documents from a single Markdown source. You\u2019ll also learn how to use Foliant preprocessors. It is recommended to run Foliant through Docker to get consistent results on different machines, but it's also perfectly fine to run it natively (e.g. as a pure CLI tool without virtualization). In this tutorial, we will show the example commands for both native way (these will go first) and the Docker way (these will follow). Create New Project \u00b6 All Foliant projects must adhere to a certain structure. Luckily, you don\u2019t have to memorize it thanks to the Init extension. You should have installed it during Foliant installation and it\u2019s included in Foliant\u2019s default Docker image. To use it, run foliant init command $ foliant init Enter the project name: Hello Foliant Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant To do the same with Docker, run $ docker run --rm -it --user $( id -u ) : $( id -g ) -v $( pwd ) :/usr/src/app -w /usr/src/app foliant/foliant init Enter the project name: Hello Foliant Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant The init command created a structure for the Foliant project in hello-foliant subfolder. $ cd hello-foliant $ tree . \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md 1 directory, 6 files foliant.yml is your Project Configuration file. src is the directory for your Markdown documents. Currently, there\u2019s just one file there called index.md . requirements.txt lists the Python packages required for the project: Foliant backends and preprocessors, MkDocs themes, and whatnot. When the Docker image for the project is built, these requirements will be installed in it. Dockerfile and docker-compose.yml are necessary to build the project in a Docker container. Build Site \u00b6 To build a site you will first need a suitable backend . To catch up with the terminology, check this article , but in short, backends are Foliant modules responsible for converting Markdown sources into the final documentation format. Let\u2019s start with MkDocs backend. First, install it using the following command pip3 install foliantcontrib.mkdocs Docker users would normally need to add this package to the requirements.txt file instead, but mkdocs is already there by default if you used init to generate project structure. To build a site, in the project directory, run $ foliant make site Parsing config... Done Applying preprocessor mkdocs... Done Applying preprocessor _unescape... Done Making site with MkDocs... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.mkdocs Or, with Docker Compose $ docker-compose run --rm foliant make site Parsing config... Done Applying preprocessor mkdocs... Done Applying preprocessor _unescape... Done Making site with MkDocs... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.mkdocs That\u2019s it! Your static, MkDocs-powered website is ready. To look at it, use any web server, for example, Python\u2019s built-in one. $ python3 -m http.server -d Hello_Foliant-2020-05-25.mkdocs Serving HTTP on 0 .0.0.0 port 8000 ( http://0.0.0.0:8000/ ) ... Open localhost:8000 in your web browser. You should see something like this Build PDF \u00b6 To build PDF with Pandoc natively, first you will need to install Pandoc itself and TexLive, check Foliant installation page for instructions. Then, in the project directory, run $ foliant make pdf Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.pdf To build pdf in Docker container, first uncomment foliant/foliant:pandoc in your project\u2019s Dockerfile - FROM foliant/foliant + # FROM foliant/foliant # If you plan to bake PDFs, uncomment this line and comment the line above: - # FROM foliant/foliant:pandoc + FROM foliant/foliant:pandoc COPY requirements.txt . RUN pip3 install -r requirements.txt Note Run docker-compose build to rebuild the image from the new base image if you have previously run docker-compose run with the old one. Also, run it whenever you need to update the versions of the required packages from requirements.txt . Then, run this command in the project directory $ docker-compose run --rm foliant make pdf Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.pdf Your standalone pdf documentation is ready! It should look something like this Edit Content \u00b6 Your project\u2019s content lives in .md files inside the src folder. You can organize it into multiple files and subfolders inside the src as you please. Foliant encourages pure Markdown syntax as described by John Gruber. Pandoc, MkDocs, and other backend-specific additions are allowed, but we strongly recommend putting them in <if>...</if> . Let's create a file hello.md inside src folder $ touch src/hello.md And fill it with some content. For example # Hello Again This is regular text generated from regular Markdown. Foliant doesn\u2019t force any *special* Markdown flavor. Now you have two files (or chapters ) inside src , but Foliant knows only about one of them. To add hello.md to the project, open foliant.yml and add the new chapter to the chapters list title: Hello Foliant chapters: - index.md + - hello.md Let's rebuild the project to see the new page. The native command foliant make pdf && foliant make site Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.pdf Parsing config... Done Applying preprocessor mkdocs... Done Applying preprocessor _unescape... Done Making site with MkDocs... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.mkdocs The command for Docker $ docker-compose run --rm foliant make site && docker-compose run --rm foliant make pdf Parsing config... Done Applying preprocessor mkdocs... Done Applying preprocessor _unescape... Done Making site with MkDocs... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.mkdocs Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.pdf And see the new page appear on the site and in the pdf document Use Preprocessors \u00b6 Preprocessors are additional Foliant packages that transform your Markdown chapters in different ways. You can do all kinds of stuff with them: include remote Markdown files or their parts in the source files, perform auto-replace, render diagrams from their textual description on the build, restructure the project source or compile it into a single file for a particular backend. Preprocessors don't touch your sources in the src folder. Instead, they copy them into a temporary directory and transform the fresh copies on each build. In fact, you have already used two preprocessors! Look at the output of the foliant make commands and note the lines Applying preprocessor mkdocs and Applying preprocessor flatten . The mkdocs preprocessor made your files compatible with MkDocs\u2019 requirements, and the flatten preprocessor was used to squash the project source into one file to produce a single PDF with Pandoc. These preprocessors were called by MkDocs and Pandoc backends implicitly. Now let's add a preprocessor into the pipeline ourselves. We've chosen Blockdiag preprocessor for this tutorial. Embed Diagrams with Blockdiag \u00b6 Blockdiag is a Python app for generating diagrams. Blockdiag preprocessor extracts diagram descriptions from the project source and replaces them with the generated images. First, we need to install the blockdiag preprocessor $ pip3 install foliantcontrib.blockdiag Or, if you are building with docker, add foliantcontrib.blockdiag to requirements.txt and rebuild the image with docker-compose build command. Next, we need to switch on the blockdiag preprocessor in project config. Open foliant.yml and add the following lines title: Hello Foliant + + preprocessors: + - blockdiag chapters: - index.md - hello.md Then, in hello.md , add the following Foliant doesn\u2019t force any *special* Markdown flavor. + <seqdiag caption=\"This diagram is generated on the fly\"> + seqdiag { + \"foliant make site\" -> \"blockdiag preprocessor\" -> \"mkdocs preprocessor\" -> \"mkdocs backend\" -> site; + } + </seqdiag> Blockdiag preprocessor extends the Markdown syntax of your documentation by adding several tags . Each tag produces a different diagram type. Sequence diagrams are defined with <seqdiag></seqdiag> tag. This is what we used in the sample above. The diagram definition sits in the tag body and the diagram properties such as caption or format are defined as tag attributes. Rebuild the site with foliant make site or docker-compose run --rm foliant make site and open it in the browser Rebuild the pdf and see that the diagram is there too Let\u2019s customize the look of the diagrams in our project by setting their properties in the config file. For example, let\u2019s use a custom font for labels. I\u2019m using the ever-popular Comic Sans font, but you can pick any font that\u2019s available in .ttf format. Put the font file in the project directory and add the following lines to foliant.yml preprocessors: - - blockdiag + - blockdiag: + params: + font: !path comic.ttf After a rebuild, the diagram on the site and in the pdf should look like this There are many more params you can define for your diagrams. You can override global params for particular diagrams in their tags. And by combining this preprocessor with Flags you can even set different params for different backends, for example, build vector diagrams for pdf output and bitmap for site This is a diagram that is rendered to `.png` in HTML and to `.pdf` in pdf: <blockdiag format=\"<if targets=\"site\">png</if><if targets=\"pdf\">pdf</if>\"> ... </blockdiag> The possibilities acquired by combining different preprocessors are endless! Why Foliant Uses XML syntax for Preprocessor Tags It\u2019s common for Markdown-based tools to extend Markdown with custom syntax for additional functions. There\u2019s no standard for custom syntax in the Markdown spec, so every developer uses whatever syntax is available for them, a different one for every new extension. In Foliant, we tried our best not to dive into this mess. Foliant aims to be an extensible platform, with many available preprocessors. So we needed one syntax for all preprocessors, but the one that was flexible enough to support them all. After trying many options, we settled with XML. Yes, normally you\u2019d have a nervous tick when you hear XML, and so would we, but this is one rare case where XML syntax belongs just right: it allows to provide tag body and named parameters, it\u2019s familiar to every techwriter out there, it\u2019s close enough to HTML, and HTML tags are actually allowed by the Markdown spec, so we\u2019re not even breaking the vanilla Markdown spec (almost), it\u2019s nicely highlighted in IDEs and text editors.","title":"Your First Foliant Project"},{"location":"tutorials/first_project/#your-first-foliant-project","text":"In this tutorial, you\u2019ll learn how to use Foliant to build websites and pdf documents from a single Markdown source. You\u2019ll also learn how to use Foliant preprocessors. It is recommended to run Foliant through Docker to get consistent results on different machines, but it's also perfectly fine to run it natively (e.g. as a pure CLI tool without virtualization). In this tutorial, we will show the example commands for both native way (these will go first) and the Docker way (these will follow).","title":"Your First Foliant Project"},{"location":"tutorials/first_project/#create-new-project","text":"All Foliant projects must adhere to a certain structure. Luckily, you don\u2019t have to memorize it thanks to the Init extension. You should have installed it during Foliant installation and it\u2019s included in Foliant\u2019s default Docker image. To use it, run foliant init command $ foliant init Enter the project name: Hello Foliant Generating Foliant project \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant To do the same with Docker, run $ docker run --rm -it --user $( id -u ) : $( id -g ) -v $( pwd ) :/usr/src/app -w /usr/src/app foliant/foliant init Enter the project name: Hello Foliant Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Hello Foliant\" created in hello-foliant The init command created a structure for the Foliant project in hello-foliant subfolder. $ cd hello-foliant $ tree . \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md 1 directory, 6 files foliant.yml is your Project Configuration file. src is the directory for your Markdown documents. Currently, there\u2019s just one file there called index.md . requirements.txt lists the Python packages required for the project: Foliant backends and preprocessors, MkDocs themes, and whatnot. When the Docker image for the project is built, these requirements will be installed in it. Dockerfile and docker-compose.yml are necessary to build the project in a Docker container.","title":"Create New Project"},{"location":"tutorials/first_project/#build-site","text":"To build a site you will first need a suitable backend . To catch up with the terminology, check this article , but in short, backends are Foliant modules responsible for converting Markdown sources into the final documentation format. Let\u2019s start with MkDocs backend. First, install it using the following command pip3 install foliantcontrib.mkdocs Docker users would normally need to add this package to the requirements.txt file instead, but mkdocs is already there by default if you used init to generate project structure. To build a site, in the project directory, run $ foliant make site Parsing config... Done Applying preprocessor mkdocs... Done Applying preprocessor _unescape... Done Making site with MkDocs... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.mkdocs Or, with Docker Compose $ docker-compose run --rm foliant make site Parsing config... Done Applying preprocessor mkdocs... Done Applying preprocessor _unescape... Done Making site with MkDocs... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.mkdocs That\u2019s it! Your static, MkDocs-powered website is ready. To look at it, use any web server, for example, Python\u2019s built-in one. $ python3 -m http.server -d Hello_Foliant-2020-05-25.mkdocs Serving HTTP on 0 .0.0.0 port 8000 ( http://0.0.0.0:8000/ ) ... Open localhost:8000 in your web browser. You should see something like this","title":"Build Site"},{"location":"tutorials/first_project/#build-pdf","text":"To build PDF with Pandoc natively, first you will need to install Pandoc itself and TexLive, check Foliant installation page for instructions. Then, in the project directory, run $ foliant make pdf Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.pdf To build pdf in Docker container, first uncomment foliant/foliant:pandoc in your project\u2019s Dockerfile - FROM foliant/foliant + # FROM foliant/foliant # If you plan to bake PDFs, uncomment this line and comment the line above: - # FROM foliant/foliant:pandoc + FROM foliant/foliant:pandoc COPY requirements.txt . RUN pip3 install -r requirements.txt Note Run docker-compose build to rebuild the image from the new base image if you have previously run docker-compose run with the old one. Also, run it whenever you need to update the versions of the required packages from requirements.txt . Then, run this command in the project directory $ docker-compose run --rm foliant make pdf Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.pdf Your standalone pdf documentation is ready! It should look something like this","title":"Build PDF"},{"location":"tutorials/first_project/#edit-content","text":"Your project\u2019s content lives in .md files inside the src folder. You can organize it into multiple files and subfolders inside the src as you please. Foliant encourages pure Markdown syntax as described by John Gruber. Pandoc, MkDocs, and other backend-specific additions are allowed, but we strongly recommend putting them in <if>...</if> . Let's create a file hello.md inside src folder $ touch src/hello.md And fill it with some content. For example # Hello Again This is regular text generated from regular Markdown. Foliant doesn\u2019t force any *special* Markdown flavor. Now you have two files (or chapters ) inside src , but Foliant knows only about one of them. To add hello.md to the project, open foliant.yml and add the new chapter to the chapters list title: Hello Foliant chapters: - index.md + - hello.md Let's rebuild the project to see the new page. The native command foliant make pdf && foliant make site Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.pdf Parsing config... Done Applying preprocessor mkdocs... Done Applying preprocessor _unescape... Done Making site with MkDocs... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.mkdocs The command for Docker $ docker-compose run --rm foliant make site && docker-compose run --rm foliant make pdf Parsing config... Done Applying preprocessor mkdocs... Done Applying preprocessor _unescape... Done Making site with MkDocs... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.mkdocs Parsing config... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making pdf with Pandoc... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Hello_Foliant-2020-05-25.pdf And see the new page appear on the site and in the pdf document","title":"Edit Content"},{"location":"tutorials/first_project/#use-preprocessors","text":"Preprocessors are additional Foliant packages that transform your Markdown chapters in different ways. You can do all kinds of stuff with them: include remote Markdown files or their parts in the source files, perform auto-replace, render diagrams from their textual description on the build, restructure the project source or compile it into a single file for a particular backend. Preprocessors don't touch your sources in the src folder. Instead, they copy them into a temporary directory and transform the fresh copies on each build. In fact, you have already used two preprocessors! Look at the output of the foliant make commands and note the lines Applying preprocessor mkdocs and Applying preprocessor flatten . The mkdocs preprocessor made your files compatible with MkDocs\u2019 requirements, and the flatten preprocessor was used to squash the project source into one file to produce a single PDF with Pandoc. These preprocessors were called by MkDocs and Pandoc backends implicitly. Now let's add a preprocessor into the pipeline ourselves. We've chosen Blockdiag preprocessor for this tutorial.","title":"Use Preprocessors"},{"location":"tutorials/first_project/#embed-diagrams-with-blockdiag","text":"Blockdiag is a Python app for generating diagrams. Blockdiag preprocessor extracts diagram descriptions from the project source and replaces them with the generated images. First, we need to install the blockdiag preprocessor $ pip3 install foliantcontrib.blockdiag Or, if you are building with docker, add foliantcontrib.blockdiag to requirements.txt and rebuild the image with docker-compose build command. Next, we need to switch on the blockdiag preprocessor in project config. Open foliant.yml and add the following lines title: Hello Foliant + + preprocessors: + - blockdiag chapters: - index.md - hello.md Then, in hello.md , add the following Foliant doesn\u2019t force any *special* Markdown flavor. + <seqdiag caption=\"This diagram is generated on the fly\"> + seqdiag { + \"foliant make site\" -> \"blockdiag preprocessor\" -> \"mkdocs preprocessor\" -> \"mkdocs backend\" -> site; + } + </seqdiag> Blockdiag preprocessor extends the Markdown syntax of your documentation by adding several tags . Each tag produces a different diagram type. Sequence diagrams are defined with <seqdiag></seqdiag> tag. This is what we used in the sample above. The diagram definition sits in the tag body and the diagram properties such as caption or format are defined as tag attributes. Rebuild the site with foliant make site or docker-compose run --rm foliant make site and open it in the browser Rebuild the pdf and see that the diagram is there too Let\u2019s customize the look of the diagrams in our project by setting their properties in the config file. For example, let\u2019s use a custom font for labels. I\u2019m using the ever-popular Comic Sans font, but you can pick any font that\u2019s available in .ttf format. Put the font file in the project directory and add the following lines to foliant.yml preprocessors: - - blockdiag + - blockdiag: + params: + font: !path comic.ttf After a rebuild, the diagram on the site and in the pdf should look like this There are many more params you can define for your diagrams. You can override global params for particular diagrams in their tags. And by combining this preprocessor with Flags you can even set different params for different backends, for example, build vector diagrams for pdf output and bitmap for site This is a diagram that is rendered to `.png` in HTML and to `.pdf` in pdf: <blockdiag format=\"<if targets=\"site\">png</if><if targets=\"pdf\">pdf</if>\"> ... </blockdiag> The possibilities acquired by combining different preprocessors are endless! Why Foliant Uses XML syntax for Preprocessor Tags It\u2019s common for Markdown-based tools to extend Markdown with custom syntax for additional functions. There\u2019s no standard for custom syntax in the Markdown spec, so every developer uses whatever syntax is available for them, a different one for every new extension. In Foliant, we tried our best not to dive into this mess. Foliant aims to be an extensible platform, with many available preprocessors. So we needed one syntax for all preprocessors, but the one that was flexible enough to support them all. After trying many options, we settled with XML. Yes, normally you\u2019d have a nervous tick when you hear XML, and so would we, but this is one rare case where XML syntax belongs just right: it allows to provide tag body and named parameters, it\u2019s familiar to every techwriter out there, it\u2019s close enough to HTML, and HTML tags are actually allowed by the Markdown spec, so we\u2019re not even breaking the vanilla Markdown spec (almost), it\u2019s nicely highlighted in IDEs and text editors.","title":"Embed Diagrams with Blockdiag"},{"location":"tutorials/db/db/","tags":["tutorial","database"],"text":"Introduction \u00b6 In these tutorials we will show you a way to document your database using Foliant. Right now there are options available for those of you who use PostgreSQL , Oracle , MySQL , MS SQL Server and DBML . If your DBMS is not in the list, send us an issue , we'll do our best to add the support to it as fast as possible. The principles \u00b6 Generally, we want to keep our docs as close to the code as possible. For documenting the source code of an application we usually can utilize the power of Swagger to generate docs from comments in the sources. Since there\u2019s no Swagger for databases, we had to invent something similar. We are going to add actual descriptions of the tables and fields using comments . Comment (not to be confused with SQL script -- comment ) is a special entity which in one way or another is present in most DBMSs. They don\u2019t affect the data or table structure, they are only used for documentation purposes. You can add a comment like this: COMMENT ON TABLE \"Clients\" IS \"Table holding info about the clients\" After describing all your entities inside your database, we need to get all this information for our document. For this we will use Foliant DBDoc preprocessor . It queries the database to get its structure (including the comments) and converts it into Markdown. We can then use this Markdown to generate a static site for our documentation. The tutorials \u00b6 First tutorial is about creating a document out of DBML schema. DBML is not a database but a simplified language for describing databases. The other two tutorials focus on the process of documenting actual databases. We have tutorials for PostgreSQL and Oracle. But the process of documenting other databases is quite similar. Documenting with DBML specification Documenting Oracle Database Documenting PostgreSQL Database","title":"Introduction"},{"location":"tutorials/db/db/#introduction","text":"In these tutorials we will show you a way to document your database using Foliant. Right now there are options available for those of you who use PostgreSQL , Oracle , MySQL , MS SQL Server and DBML . If your DBMS is not in the list, send us an issue , we'll do our best to add the support to it as fast as possible.","title":"Introduction"},{"location":"tutorials/db/db/#the-principles","text":"Generally, we want to keep our docs as close to the code as possible. For documenting the source code of an application we usually can utilize the power of Swagger to generate docs from comments in the sources. Since there\u2019s no Swagger for databases, we had to invent something similar. We are going to add actual descriptions of the tables and fields using comments . Comment (not to be confused with SQL script -- comment ) is a special entity which in one way or another is present in most DBMSs. They don\u2019t affect the data or table structure, they are only used for documentation purposes. You can add a comment like this: COMMENT ON TABLE \"Clients\" IS \"Table holding info about the clients\" After describing all your entities inside your database, we need to get all this information for our document. For this we will use Foliant DBDoc preprocessor . It queries the database to get its structure (including the comments) and converts it into Markdown. We can then use this Markdown to generate a static site for our documentation.","title":"The principles"},{"location":"tutorials/db/db/#the-tutorials","text":"First tutorial is about creating a document out of DBML schema. DBML is not a database but a simplified language for describing databases. The other two tutorials focus on the process of documenting actual databases. We have tutorials for PostgreSQL and Oracle. But the process of documenting other databases is quite similar. Documenting with DBML specification Documenting Oracle Database Documenting PostgreSQL Database","title":"The tutorials"},{"location":"tutorials/db/dbml/","tags":["tutorial","database"],"text":"Documenting DBML schema \u00b6 Quote from the official website: DBML (Database Markup Language) is an open-source DSL language designed to define and document database schemas and structures. It is designed to be simple, consistent and highly-readable. And that makes it a perfect choice for the designing stage of your database. You can create your table structure without messing with cumbersome SQL in a more readible way like this: Table users { id integer username varchar role varchar created_at timestamp } Table posts { id integer [ primary key ] title varchar body text [ note : 'Content of the post' ] user_id integer status post_status created_at timestamp } Enum post_status { draft published private [ note : 'visible via URL only' ] } Ref : posts . user_id > users . id // many - to - one As you may have noticed, DBML also has tools to document pieces of you schema using notes ( body text [note: 'Content of the post'] ) and comments ( Ref: posts.user_id > users.id // many-to-one ). So how can we convert DBML schema descriptions into a human-readible document? The idea is pretty simple: we parse the DBML definitions and pass them to a Jinja template, which renders markdown for us. After that we use one of our backends (we will use Slate in this tutorial) to build a static site out of it. We won\u2019t need to do it all manually, of course, we just need to configure Foliant to do it for us. Installing prerequisites \u00b6 If you are running Foliant natively, you will need to install some prerequisites. But if you are working with our Full Foliant Docker image , you don\u2019t need to do that, just skip to the next stage . First you will need Foliant, of course. If you don\u2019t have it yet, please, refer to the installation guide . Install DBMLDoc and PlantUML preprocessors, and the Slate backend: $ pip3 install foliantcontrib.dbmldoc foliantcontrib.slate, foliantcontrib.plantuml We are going to use Slate for building a static website with documentation, so you will also need to install Slate dependencies . Finally, install PlantUML , we will need it to draw database scheme. Creating project \u00b6 Let\u2019s create a Foliant project for our experiments. cd into the directory where you want your project created and run the init command: $ cd ~/foliant_projects $ foliant init Enter the project name: Database Docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Database Docs\" created in database-docs $ cd database-docs The other option is to clone the Foliant Project template repository: $ cd ~/foliant_projects $ mkdir database-docs $ git clone https://github.com/foliant-docs/foliant_project_template.git database-docs Cloning into 'database-docs' ... remote: Enumerating objects: 11 , done . remote: Counting objects: 100 % ( 11 /11 ) , done . remote: Compressing objects: 100 % ( 7 /7 ) , done . remote: Total 11 ( delta 1 ) , reused 11 ( delta 1 ) , pack-reused 0 Unpacking objects: 100 % ( 11 /11 ) , done . $ cd database-docs Next, let\u2019s download the sample DBML spec and save it into schema.dbml in the root your Foliant project: $ wget https://raw.githubusercontent.com/holistics/dbml/master/packages/dbml-core/__tests__/parser/dbml-parse/input/general_schema.in.dbml -O schema.dbml Setting up project \u00b6 Now it\u2019s time to set up our config. Open foliant.yml and add the following lines: title: Database Docs chapters: - index.md +preprocessors: + - dbmldoc: + spec_path: !path schema.dbml + - plantuml + We\u2019ve added the PlantUML and DBMLDoc preprocessors to the pipeline and specified path to our DBML sample schema. DBMLDoc will parse the schema and convert it into Markdown, plantuml will draw the visual diagram of our DB schema. Note: if plantuml is not available under $ plantuml in your system, you will also need to specify path to plantuml.jar in preprocessor settings like this: - plantuml : plantuml_path : /usr/bin/plantuml.jar Finally, we need to point Foliant the place in the Markdown source files where the generated documentation should be inserted. Since we already have an index.md chapter created for us by init command, let\u2019s put it in there. Open src/index.md and make it look like this: # Welcome to Database Docs -Your content goes here. +<dbmldoc></dbmldoc> + Building site \u00b6 All preparations are finished, let\u2019s build our site: $ foliant make site -w slate Parsing config... Done Applying preprocessor dbmldoc... Done Applying preprocessor plantuml... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done ... \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Database_Docs-2020-06-03.slate/ If you are using Docker, the command is: $ docker-compose run --rm foliant make site -w slate Now open Database_Docs-2020-06-03.slate/index.html and look at the results: That looks good enough, but you may want to tweak the appearance of your site. You can edit the Jinja-template to change the way DBMLDoc generates markdown out of your schema. After the first build, the default template should have appeared in your project dir under the name dbml.j2 . If you want to change the looks of you site, please, refer to the instructions in Slate backend documentation.","title":"Documenting DBML schema"},{"location":"tutorials/db/dbml/#documenting-dbml-schema","text":"Quote from the official website: DBML (Database Markup Language) is an open-source DSL language designed to define and document database schemas and structures. It is designed to be simple, consistent and highly-readable. And that makes it a perfect choice for the designing stage of your database. You can create your table structure without messing with cumbersome SQL in a more readible way like this: Table users { id integer username varchar role varchar created_at timestamp } Table posts { id integer [ primary key ] title varchar body text [ note : 'Content of the post' ] user_id integer status post_status created_at timestamp } Enum post_status { draft published private [ note : 'visible via URL only' ] } Ref : posts . user_id > users . id // many - to - one As you may have noticed, DBML also has tools to document pieces of you schema using notes ( body text [note: 'Content of the post'] ) and comments ( Ref: posts.user_id > users.id // many-to-one ). So how can we convert DBML schema descriptions into a human-readible document? The idea is pretty simple: we parse the DBML definitions and pass them to a Jinja template, which renders markdown for us. After that we use one of our backends (we will use Slate in this tutorial) to build a static site out of it. We won\u2019t need to do it all manually, of course, we just need to configure Foliant to do it for us.","title":"Documenting DBML schema"},{"location":"tutorials/db/dbml/#installing-prerequisites","text":"If you are running Foliant natively, you will need to install some prerequisites. But if you are working with our Full Foliant Docker image , you don\u2019t need to do that, just skip to the next stage . First you will need Foliant, of course. If you don\u2019t have it yet, please, refer to the installation guide . Install DBMLDoc and PlantUML preprocessors, and the Slate backend: $ pip3 install foliantcontrib.dbmldoc foliantcontrib.slate, foliantcontrib.plantuml We are going to use Slate for building a static website with documentation, so you will also need to install Slate dependencies . Finally, install PlantUML , we will need it to draw database scheme.","title":"Installing prerequisites"},{"location":"tutorials/db/dbml/#creating-project","text":"Let\u2019s create a Foliant project for our experiments. cd into the directory where you want your project created and run the init command: $ cd ~/foliant_projects $ foliant init Enter the project name: Database Docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Database Docs\" created in database-docs $ cd database-docs The other option is to clone the Foliant Project template repository: $ cd ~/foliant_projects $ mkdir database-docs $ git clone https://github.com/foliant-docs/foliant_project_template.git database-docs Cloning into 'database-docs' ... remote: Enumerating objects: 11 , done . remote: Counting objects: 100 % ( 11 /11 ) , done . remote: Compressing objects: 100 % ( 7 /7 ) , done . remote: Total 11 ( delta 1 ) , reused 11 ( delta 1 ) , pack-reused 0 Unpacking objects: 100 % ( 11 /11 ) , done . $ cd database-docs Next, let\u2019s download the sample DBML spec and save it into schema.dbml in the root your Foliant project: $ wget https://raw.githubusercontent.com/holistics/dbml/master/packages/dbml-core/__tests__/parser/dbml-parse/input/general_schema.in.dbml -O schema.dbml","title":"Creating project"},{"location":"tutorials/db/dbml/#setting-up-project","text":"Now it\u2019s time to set up our config. Open foliant.yml and add the following lines: title: Database Docs chapters: - index.md +preprocessors: + - dbmldoc: + spec_path: !path schema.dbml + - plantuml + We\u2019ve added the PlantUML and DBMLDoc preprocessors to the pipeline and specified path to our DBML sample schema. DBMLDoc will parse the schema and convert it into Markdown, plantuml will draw the visual diagram of our DB schema. Note: if plantuml is not available under $ plantuml in your system, you will also need to specify path to plantuml.jar in preprocessor settings like this: - plantuml : plantuml_path : /usr/bin/plantuml.jar Finally, we need to point Foliant the place in the Markdown source files where the generated documentation should be inserted. Since we already have an index.md chapter created for us by init command, let\u2019s put it in there. Open src/index.md and make it look like this: # Welcome to Database Docs -Your content goes here. +<dbmldoc></dbmldoc> +","title":"Setting up project"},{"location":"tutorials/db/dbml/#building-site","text":"All preparations are finished, let\u2019s build our site: $ foliant make site -w slate Parsing config... Done Applying preprocessor dbmldoc... Done Applying preprocessor plantuml... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done ... \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Database_Docs-2020-06-03.slate/ If you are using Docker, the command is: $ docker-compose run --rm foliant make site -w slate Now open Database_Docs-2020-06-03.slate/index.html and look at the results: That looks good enough, but you may want to tweak the appearance of your site. You can edit the Jinja-template to change the way DBMLDoc generates markdown out of your schema. After the first build, the default template should have appeared in your project dir under the name dbml.j2 . If you want to change the looks of you site, please, refer to the instructions in Slate backend documentation.","title":"Building site"},{"location":"tutorials/db/oracle/","tags":["tutorial","database"],"text":"Documenting Oracle Database \u00b6 Please note that in this article covers only the basic usage of the tools. For detailed information on features and customizing output refer to each component\u2019s docs. Installing prerequisites \u00b6 First you will need to install some prerequisites. If you are running Foliant natively, follow the guide below. If you are working with our Full Docker image , you will just need the last paragraph in this section. First, you will need Foliant, of course. If you don\u2019t have it yet, please, refer to the installation guide . Install Python connector for Oracle database. $ pip3 install cx_Oracle Install DBDoc and PlantUML preprocessors, and the Slate backend: $ pip3 install foliantcontrib.dbdoc foliantcontrib.slate, foliantcontrib.plantuml We are going to use Slate for building a static website with documentation, so you will need to install Slate dependencies . Install PlantUML , we will need it to draw the database scheme. Install Oracle Instant Client if you don\u2019t have it. We will need it to query the database. If you are using Docker, you will need to add Oracle Instant Client to your image. Since it is a proprietary software, we cannot include it in our Full Docker Image. But you can do it yourself. Our image is based on Ubuntu, so you can find instructions on how to install Oracle Instant Client on Ubuntu (spoiler: it\u2019s not that easy) and add those commands into the Dockerfile, or just find those commands made by someone else. For example, from this Dockerfile by Sergey Makinen . Copy all commands starting from the third line into your Dockerfile and run docker-compose build to rebuild the image. For the sake of reliability another variant of the Oracle-ready Dockefile is provided below: FROM foliant/foliant:full RUN pip3 install cx_Oracle ENV DEBIAN_FRONTEND noninteractive ENV ORACLE_INSTANTCLIENT_MAJOR 21 ENV ORACLE /usr/local/oracle ENV ORACLE_HOME $ORACLE /lib/oracle/ $ORACLE_INSTANTCLIENT_MAJOR /client64 ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH : $ORACLE_HOME /lib ENV C_INCLUDE_PATH $C_INCLUDE_PATH : $ORACLE /include/oracle/ $ORACLE_INSTANTCLIENT_MAJOR /client64 RUN apt-get update && apt-get install -y libaio1 \\ curl rpm2cpio cpio \\ && mkdir $ORACLE && TMP_DIR = \" $( mktemp -d ) \" && cd \" $TMP_DIR \" \\ && curl -L https://download.oracle.com/otn_software/linux/instantclient/218000/oracle-instantclient-basic-21.8.0.0.0-1.el8.x86_64.rpm -o basic.rpm \\ && rpm2cpio basic.rpm | cpio -i -d -v && cp -r usr/* $ORACLE && rm -rf ./* \\ && ln -s libclntsh.so.12.1 $ORACLE /lib/oracle/ $ORACLE_INSTANTCLIENT_MAJOR /client64/lib/libclntsh.so. $ORACLE_INSTANTCLIENT_MAJOR \\ && ln -s libocci.so.12.1 $ORACLE /lib/oracle/ $ORACLE_INSTANTCLIENT_MAJOR /client64/lib/libocci.so. $ORACLE_INSTANTCLIENT_MAJOR \\ && echo \" $ORACLE_HOME /lib\" > /etc/ld.so.conf.d/oracle.conf && chmod o+r /etc/ld.so.conf.d/oracle.conf && ldconfig \\ && rm -rf /var/lib/apt/lists/* && apt-get purge -y --auto-remove curl rpm2cpio cpio Creating project \u00b6 Let\u2019s create a Foliant project for our experiments. cd to the directory where you want your project created and run the init command: $ cd ~/foliant_projects $ foliant init Enter the project name: Database Docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Database Docs\" created in database-docs $ cd database-docs The other option is to clone the Foliant Project template repository: $ cd ~/foliant_projects $ mkdir database-docs $ git clone https://github.com/foliant-docs/foliant_project_template.git database-docs Cloning into 'database-docs' ... remote: Enumerating objects: 11 , done . remote: Counting objects: 100 % ( 11 /11 ) , done . remote: Compressing objects: 100 % ( 7 /7 ) , done . remote: Total 11 ( delta 1 ) , reused 11 ( delta 1 ) , pack-reused 0 Unpacking objects: 100 % ( 11 /11 ) , done . $ cd database-docs Setting up project \u00b6 Now it\u2019s time to set up our config. Open foliant.yml and add the following lines: title: Database Docs chapters: - index.md +preprocessors: + - dbdoc: + dbms: oracle + host: localhost + port: 1521 + dbname: orcl + user: hr + password: oracle + - plantuml + Make sure to use proper credentials for your Oracle database. If you are running Foliant from docker, you can use host: host.docker.internal to access localhost from docker. Note: if plantuml is not available under $ plantuml in your system, you will also need to specify path to platnum.jar in preprocessor settings like this: - plantuml : plantuml_path : /usr/bin/plantuml.jar Finally, we need to point Foliant the place in the Markdown source files where the generated documentation should be inserted. Since we already have an index.md chapter created for us by init command, let\u2019s put it in there. Open src/index.md and make it look like this: # Welcome to Database Docs -Your content goes here. +<dbdoc></dbdoc> + Building site \u00b6 All preparations done, let\u2019s build our site: $ foliant make site -w slate Parsing config... Done Applying preprocessor dbdoc... Done Applying preprocessor plantuml... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done ... \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Database_Docs-2020-06-03.slate/ If you are using Docker, the command is: $ docker-compose run --rm foliant make site -w slate Now open Database_Docs-2020-06-03.slate/index.html and look what you\u2019ve got: That looks good enough, but you may want to tweak the appearance of your site. You can edit the Jinja-template to change the way DBDoc generates markdown out of your schema. The default template can be found here . Edit it and save in your project dir, then specify in the doc_template parameter. If you want to change the looks of your site, please, refer for instructions in Slate backend documentation.","title":"Documenting Oracle Database"},{"location":"tutorials/db/oracle/#documenting-oracle-database","text":"Please note that in this article covers only the basic usage of the tools. For detailed information on features and customizing output refer to each component\u2019s docs.","title":"Documenting Oracle Database"},{"location":"tutorials/db/oracle/#installing-prerequisites","text":"First you will need to install some prerequisites. If you are running Foliant natively, follow the guide below. If you are working with our Full Docker image , you will just need the last paragraph in this section. First, you will need Foliant, of course. If you don\u2019t have it yet, please, refer to the installation guide . Install Python connector for Oracle database. $ pip3 install cx_Oracle Install DBDoc and PlantUML preprocessors, and the Slate backend: $ pip3 install foliantcontrib.dbdoc foliantcontrib.slate, foliantcontrib.plantuml We are going to use Slate for building a static website with documentation, so you will need to install Slate dependencies . Install PlantUML , we will need it to draw the database scheme. Install Oracle Instant Client if you don\u2019t have it. We will need it to query the database. If you are using Docker, you will need to add Oracle Instant Client to your image. Since it is a proprietary software, we cannot include it in our Full Docker Image. But you can do it yourself. Our image is based on Ubuntu, so you can find instructions on how to install Oracle Instant Client on Ubuntu (spoiler: it\u2019s not that easy) and add those commands into the Dockerfile, or just find those commands made by someone else. For example, from this Dockerfile by Sergey Makinen . Copy all commands starting from the third line into your Dockerfile and run docker-compose build to rebuild the image. For the sake of reliability another variant of the Oracle-ready Dockefile is provided below: FROM foliant/foliant:full RUN pip3 install cx_Oracle ENV DEBIAN_FRONTEND noninteractive ENV ORACLE_INSTANTCLIENT_MAJOR 21 ENV ORACLE /usr/local/oracle ENV ORACLE_HOME $ORACLE /lib/oracle/ $ORACLE_INSTANTCLIENT_MAJOR /client64 ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH : $ORACLE_HOME /lib ENV C_INCLUDE_PATH $C_INCLUDE_PATH : $ORACLE /include/oracle/ $ORACLE_INSTANTCLIENT_MAJOR /client64 RUN apt-get update && apt-get install -y libaio1 \\ curl rpm2cpio cpio \\ && mkdir $ORACLE && TMP_DIR = \" $( mktemp -d ) \" && cd \" $TMP_DIR \" \\ && curl -L https://download.oracle.com/otn_software/linux/instantclient/218000/oracle-instantclient-basic-21.8.0.0.0-1.el8.x86_64.rpm -o basic.rpm \\ && rpm2cpio basic.rpm | cpio -i -d -v && cp -r usr/* $ORACLE && rm -rf ./* \\ && ln -s libclntsh.so.12.1 $ORACLE /lib/oracle/ $ORACLE_INSTANTCLIENT_MAJOR /client64/lib/libclntsh.so. $ORACLE_INSTANTCLIENT_MAJOR \\ && ln -s libocci.so.12.1 $ORACLE /lib/oracle/ $ORACLE_INSTANTCLIENT_MAJOR /client64/lib/libocci.so. $ORACLE_INSTANTCLIENT_MAJOR \\ && echo \" $ORACLE_HOME /lib\" > /etc/ld.so.conf.d/oracle.conf && chmod o+r /etc/ld.so.conf.d/oracle.conf && ldconfig \\ && rm -rf /var/lib/apt/lists/* && apt-get purge -y --auto-remove curl rpm2cpio cpio","title":"Installing prerequisites"},{"location":"tutorials/db/oracle/#creating-project","text":"Let\u2019s create a Foliant project for our experiments. cd to the directory where you want your project created and run the init command: $ cd ~/foliant_projects $ foliant init Enter the project name: Database Docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Database Docs\" created in database-docs $ cd database-docs The other option is to clone the Foliant Project template repository: $ cd ~/foliant_projects $ mkdir database-docs $ git clone https://github.com/foliant-docs/foliant_project_template.git database-docs Cloning into 'database-docs' ... remote: Enumerating objects: 11 , done . remote: Counting objects: 100 % ( 11 /11 ) , done . remote: Compressing objects: 100 % ( 7 /7 ) , done . remote: Total 11 ( delta 1 ) , reused 11 ( delta 1 ) , pack-reused 0 Unpacking objects: 100 % ( 11 /11 ) , done . $ cd database-docs","title":"Creating project"},{"location":"tutorials/db/oracle/#setting-up-project","text":"Now it\u2019s time to set up our config. Open foliant.yml and add the following lines: title: Database Docs chapters: - index.md +preprocessors: + - dbdoc: + dbms: oracle + host: localhost + port: 1521 + dbname: orcl + user: hr + password: oracle + - plantuml + Make sure to use proper credentials for your Oracle database. If you are running Foliant from docker, you can use host: host.docker.internal to access localhost from docker. Note: if plantuml is not available under $ plantuml in your system, you will also need to specify path to platnum.jar in preprocessor settings like this: - plantuml : plantuml_path : /usr/bin/plantuml.jar Finally, we need to point Foliant the place in the Markdown source files where the generated documentation should be inserted. Since we already have an index.md chapter created for us by init command, let\u2019s put it in there. Open src/index.md and make it look like this: # Welcome to Database Docs -Your content goes here. +<dbdoc></dbdoc> +","title":"Setting up project"},{"location":"tutorials/db/oracle/#building-site","text":"All preparations done, let\u2019s build our site: $ foliant make site -w slate Parsing config... Done Applying preprocessor dbdoc... Done Applying preprocessor plantuml... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done ... \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Database_Docs-2020-06-03.slate/ If you are using Docker, the command is: $ docker-compose run --rm foliant make site -w slate Now open Database_Docs-2020-06-03.slate/index.html and look what you\u2019ve got: That looks good enough, but you may want to tweak the appearance of your site. You can edit the Jinja-template to change the way DBDoc generates markdown out of your schema. The default template can be found here . Edit it and save in your project dir, then specify in the doc_template parameter. If you want to change the looks of your site, please, refer for instructions in Slate backend documentation.","title":"Building site"},{"location":"tutorials/db/pgsql/","tags":["tutorial","database"],"text":"Documenting PostgreSQL Database \u00b6 Please note that this article will cover only the basic usage of the tools. For detailed information on the features and customizing output refer to each component\u2019s docs. Installing prerequisites \u00b6 You will need to install some prerequisites. If you are running Foliant natively, follow the guide below. If you are working with our Full Docker image , you don\u2019t need to do anything, you can skip to the next stage . First, you will need Foliant, of course. If you don\u2019t have it yet, please, refer to the installation guide . Install PostgreSQL and its Python connector. $ pip3 install psycopg2-binary Install DBDoc and PlantUML preprocessors, and the Slate backend: $ pip3 install foliantcontrib.dbdoc foliantcontrib.slate, foliantcontrib.plantuml We are going to use Slate for building a static website with documentation, so you will need to install Slate dependencies . Finally, Install PlantUML , we will need it to draw the database scheme. Creating project \u00b6 Let\u2019s create a Foliant project for our experiments. cd to the directory where you want your project created and run the init command: $ cd ~/foliant_projects $ foliant init Enter the project name: Database Docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Database Docs\" created in database-docs $ cd database-docs The other option is to clone the Foliant Project template repository: $ cd ~/foliant_projects $ mkdir database-docs $ git clone https://github.com/foliant-docs/foliant_project_template.git database-docs Cloning into 'database-docs' ... remote: Enumerating objects: 11 , done . remote: Counting objects: 100 % ( 11 /11 ) , done . remote: Compressing objects: 100 % ( 7 /7 ) , done . remote: Total 11 ( delta 1 ) , reused 11 ( delta 1 ) , pack-reused 0 Unpacking objects: 100 % ( 11 /11 ) , done . $ cd database-docs Setting up project \u00b6 Now it\u2019s time to set up our config. Open foliant.yml and add the following lines: title: Database Docs chapters: - index.md +preprocessors: + - dbdoc: + dbms: pgsql + host: localhost + port: 5432 + dbname: posgres + user: posgres + password: posgres + - plantuml + Make sure to use proper credentials for your PostgreSQL database. If you are running Foliant from docker, you can use host: host.docker.internal to access localhost from docker. Note: if plantuml is not available under $ plantuml in your system, you will also need to specify path to platnum.jar in preprocessor settings like this: - plantuml : plantuml_path : /usr/bin/plantuml.jar Finally, we need to point Foliant the place in the Markdown source files where the generated documentation should be inserted. Since we already have an index.md chapter created for us by init command, let\u2019s put it in there. Open src/index.md and make it look like this: # Welcome to Database Docs -Your content goes here. +<dbdoc></dbdoc> + Building site \u00b6 All preparations done, let\u2019s build our site: $ foliant make site -w slate Parsing config... Done Applying preprocessor dbdoc... Done Applying preprocessor plantuml... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done ... \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Database_Docs-2020-06-03.slate/ If you are using Docker, the command is: $ docker-compose run --rm foliant make site -w slate Now open Database_Docs-2020-06-03.slate/index.html and look what you\u2019ve got: That looks good enough, but you may want to tweak the appearance of your site. You can edit the Jinja-template to change the way DBDoc generates markdown out of your schema. The default template can be found here . Edit it and save in your project dir, then specify in the doc_template parameter. If you want to change the looks of your site, please, refer for instructions in Slate backend documentation.","title":"Documenting PostgreSQL Database"},{"location":"tutorials/db/pgsql/#documenting-postgresql-database","text":"Please note that this article will cover only the basic usage of the tools. For detailed information on the features and customizing output refer to each component\u2019s docs.","title":"Documenting PostgreSQL Database"},{"location":"tutorials/db/pgsql/#installing-prerequisites","text":"You will need to install some prerequisites. If you are running Foliant natively, follow the guide below. If you are working with our Full Docker image , you don\u2019t need to do anything, you can skip to the next stage . First, you will need Foliant, of course. If you don\u2019t have it yet, please, refer to the installation guide . Install PostgreSQL and its Python connector. $ pip3 install psycopg2-binary Install DBDoc and PlantUML preprocessors, and the Slate backend: $ pip3 install foliantcontrib.dbdoc foliantcontrib.slate, foliantcontrib.plantuml We are going to use Slate for building a static website with documentation, so you will need to install Slate dependencies . Finally, Install PlantUML , we will need it to draw the database scheme.","title":"Installing prerequisites"},{"location":"tutorials/db/pgsql/#creating-project","text":"Let\u2019s create a Foliant project for our experiments. cd to the directory where you want your project created and run the init command: $ cd ~/foliant_projects $ foliant init Enter the project name: Database Docs Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Database Docs\" created in database-docs $ cd database-docs The other option is to clone the Foliant Project template repository: $ cd ~/foliant_projects $ mkdir database-docs $ git clone https://github.com/foliant-docs/foliant_project_template.git database-docs Cloning into 'database-docs' ... remote: Enumerating objects: 11 , done . remote: Counting objects: 100 % ( 11 /11 ) , done . remote: Compressing objects: 100 % ( 7 /7 ) , done . remote: Total 11 ( delta 1 ) , reused 11 ( delta 1 ) , pack-reused 0 Unpacking objects: 100 % ( 11 /11 ) , done . $ cd database-docs","title":"Creating project"},{"location":"tutorials/db/pgsql/#setting-up-project","text":"Now it\u2019s time to set up our config. Open foliant.yml and add the following lines: title: Database Docs chapters: - index.md +preprocessors: + - dbdoc: + dbms: pgsql + host: localhost + port: 5432 + dbname: posgres + user: posgres + password: posgres + - plantuml + Make sure to use proper credentials for your PostgreSQL database. If you are running Foliant from docker, you can use host: host.docker.internal to access localhost from docker. Note: if plantuml is not available under $ plantuml in your system, you will also need to specify path to platnum.jar in preprocessor settings like this: - plantuml : plantuml_path : /usr/bin/plantuml.jar Finally, we need to point Foliant the place in the Markdown source files where the generated documentation should be inserted. Since we already have an index.md chapter created for us by init command, let\u2019s put it in there. Open src/index.md and make it look like this: # Welcome to Database Docs -Your content goes here. +<dbdoc></dbdoc> +","title":"Setting up project"},{"location":"tutorials/db/pgsql/#building-site","text":"All preparations done, let\u2019s build our site: $ foliant make site -w slate Parsing config... Done Applying preprocessor dbdoc... Done Applying preprocessor plantuml... Done Applying preprocessor flatten... Done Applying preprocessor _unescape... Done Making site... Done ... \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Database_Docs-2020-06-03.slate/ If you are using Docker, the command is: $ docker-compose run --rm foliant make site -w slate Now open Database_Docs-2020-06-03.slate/index.html and look what you\u2019ve got: That looks good enough, but you may want to tweak the appearance of your site. You can edit the Jinja-template to change the way DBDoc generates markdown out of your schema. The default template can be found here . Edit it and save in your project dir, then specify in the doc_template parameter. If you want to change the looks of your site, please, refer for instructions in Slate backend documentation.","title":"Building site"},{"location":"tutorials/preprocessor/generator/","tags":["tutorial","preprocessor"],"text":"Creating the Gibberish Generator \u00b6 There are already several Python packages present on PyPi which generate placeholder texts like loremipsum but we won't deprive ourselves of the fun of creating our own. Let's define some requirements: The generated text should consist of sentences that start with a capital letter and end with a dot. There should be a way of controlling the size of the sentence and the number of sentences in the resulting text. The words in the text should have at least a slight resemblance with real language words. The last requirement is a bit tricky: we don't want words like q or zxd in our text, or at least not too many of those, so that the text looks a bit more real. So what we will do is create a simple gen_word function which will generate a word with a random number of letters, but the letters will be picked in a more controlled way by another function called pick_letter : from random import randint def gen_word (): word_len = randint ( 2 , 9 ) # [1] return '' . join ( pick_letter () for _ in range ( word_len )) # [2] We've restricted the length of the words to 2 to 9 letters so we could avoid too short and too long words. The pick_letter function will be supplying us with random letters. Now to the pick_letter function. To make the words look real we don't want this function to return too many of the letters q, w, x and z, which don't appear in the words often. We also want to get more vowels than consonants: kiobe looks more like a word than lknsd . Here's one way to do it from random import choice , random def pick_letter (): rare_letters = 'qwxz' vowels = 'aeiouy' consonants = 'cdfghjklmnprstv' pick = random () # [1] if pick > 0.9 : # [2] return choice ( rare_letters ) # [3] elif pick > 0.25 : # [4] return choice ( vowels ) # [5] else : return choice ( consonants ) # [6] Get a random float number from the random function. Since random returns a float from 0.0 to 1.0, there's about a 10% chance of getting a float that is larger than 0.9. In this case, we will randomly pick one of the rare letters: q, w, x, or z with the choice function. The chance of getting a float between 0.25 and 0.9 is about 65%. In this case, we will return a vowel. Finally, with a chance of about 25%, we will be returning one of the remaining consonants. Let's put it all together and test our gen_word function >>> gen_word () 'eojuo' >>> gen_word () 'soe' >>> gen_word () 'qwiim' >>> gen_word () 'itookao' Oh my god, I think we've just created the Finnish language! Jokes aside, it seems that our words generator works fine. Now we need to create functions for generating sentences and putting them together in a text. def gen_sentence ( num_words = 7 ): # [1] words = ( gen_word () for _ in range ( num_words )) # [2] return ' ' . join ( words ) . capitalize () # [3] The number of words in the sentence is determined by the num_words parameter with a sensible default of 7 words. Creating a generator that will yield a new word a required number of times. Joining the generated words into a single string, separated by spaces. We are also making the first word capitalized in our sentence. A quick test to make sure it works >>> gen_sentence () 'Oveecyyi tukzgoli zvo uqyi ujiffrl viivu odui' >>> gen_sentence ( 3 ) 'Ioyieyug ie hkeepnyo' And now to the whole text generator def gen_text ( num_sentences = 10 ): # [1] sizes = ( randint ( 3 , 12 ) for _ in range ( num_sentences )) # [2] sentences = ( gen_sentence ( size ) for size in sizes ) # [3] return '. ' . join ( sentences ) + '.' # [4] The text generator will accept one parameter num_sentences with a default of 10. Creating a generator that will yield a number of words in each sentence a required number of times. We are limiting the sentence size here to 3 to 12 words. Creating a generator that will yield a new sentence a required number of times. Joining the generated sentences into a single string, separated by dots. We are also adding a dot at the end of the text. Time for the final test! >>> gen_text () 'Eeaidmt cznm aeoiemino ivjuyauq exieh aoioayif yavfkoa tasojm xuz qizxiyum iyoi fajo. Anuipcauo uac eunjtou oiy hougqf tulztiawk qooulu eiewewaii. Lxi isoxuau ooovox wtopuodu oom ougvoeyy ou calxja io reicye yaioyzx. Usmyuavq yoyu xioqei iiu ateuyau yeroueut gucuifuth tiazkkgc. Oyqzuy rnzouq ajiof qaxewxufo. Utiselorc qpoaoydoi kyvyiuao ofxaoiy ueyaoi azdacy lieaiiy au vteccye. Lopgygsz efixuio gi eyzeuxoa eea qwaycx impoetvy eoyijaum uoiighcq lyaxa xy. Yo yazd oio yyn gvyifzaeo eyz iewueuqze yy yeadvtx dqmdiy. Agiiorixk yae tvmu eeeoe aqjy eqnsouejn. Szejaae yl vuoaewt aujc nvkols auokud reaqopae.' >>> gen_text ( 2 ) 'Uyayu xpriicoe usao yua duleekayi loqk iop saiy iuys sciyaihs. Onacrtog ual iei nuuoaz gdgia yyoui.' Our gibberish generator turned out quite decent. Now it's time to make it a Foliant preprocessor. Complete source of the generator module from random import choice from random import randint from random import random def pick_letter () -> str : \"\"\" Pick a random letter. Vowels have a higher chance of picking. Letters q, w, x and z have the lowest chance of picking. \"\"\" rare_letters = 'qwxz' vowels = 'aeiouy' consonants = 'cdfghjklmnprstv' pick = random () if pick > 0.9 : return choice ( rare_letters ) elif pick > 0.3 : return choice ( vowels ) else : return choice ( consonants ) def gen_word () -> str : \"\"\"Return a word consisting of 2 to 9 letters.\"\"\" word_len = randint ( 2 , 9 ) return '' . join ( pick_letter () for _ in range ( word_len )) def gen_sentence ( num_words : int = 7 ) -> str : \"\"\"Generate a sentence consisting of `num_words` words.\"\"\" words = ( gen_word () for _ in range ( num_words )) return ' ' . join ( words ) . capitalize () def gen_text ( num_sentences : int = 10 ) -> str : \"\"\" Generate a paragraph of gibberish consisting of `num_sentences` senteces, each consisting of 3 to 12 words. \"\"\" sizes = ( randint ( 3 , 12 ) for _ in range ( num_sentences )) sentences = ( gen_sentence ( size ) for size in sizes ) return '. ' . join ( sentences ) + '.' Next: Formalizing the Preprocessor Previous: Introduction","title":"Creating the Gibberish Generator"},{"location":"tutorials/preprocessor/generator/#creating-the-gibberish-generator","text":"There are already several Python packages present on PyPi which generate placeholder texts like loremipsum but we won't deprive ourselves of the fun of creating our own. Let's define some requirements: The generated text should consist of sentences that start with a capital letter and end with a dot. There should be a way of controlling the size of the sentence and the number of sentences in the resulting text. The words in the text should have at least a slight resemblance with real language words. The last requirement is a bit tricky: we don't want words like q or zxd in our text, or at least not too many of those, so that the text looks a bit more real. So what we will do is create a simple gen_word function which will generate a word with a random number of letters, but the letters will be picked in a more controlled way by another function called pick_letter : from random import randint def gen_word (): word_len = randint ( 2 , 9 ) # [1] return '' . join ( pick_letter () for _ in range ( word_len )) # [2] We've restricted the length of the words to 2 to 9 letters so we could avoid too short and too long words. The pick_letter function will be supplying us with random letters. Now to the pick_letter function. To make the words look real we don't want this function to return too many of the letters q, w, x and z, which don't appear in the words often. We also want to get more vowels than consonants: kiobe looks more like a word than lknsd . Here's one way to do it from random import choice , random def pick_letter (): rare_letters = 'qwxz' vowels = 'aeiouy' consonants = 'cdfghjklmnprstv' pick = random () # [1] if pick > 0.9 : # [2] return choice ( rare_letters ) # [3] elif pick > 0.25 : # [4] return choice ( vowels ) # [5] else : return choice ( consonants ) # [6] Get a random float number from the random function. Since random returns a float from 0.0 to 1.0, there's about a 10% chance of getting a float that is larger than 0.9. In this case, we will randomly pick one of the rare letters: q, w, x, or z with the choice function. The chance of getting a float between 0.25 and 0.9 is about 65%. In this case, we will return a vowel. Finally, with a chance of about 25%, we will be returning one of the remaining consonants. Let's put it all together and test our gen_word function >>> gen_word () 'eojuo' >>> gen_word () 'soe' >>> gen_word () 'qwiim' >>> gen_word () 'itookao' Oh my god, I think we've just created the Finnish language! Jokes aside, it seems that our words generator works fine. Now we need to create functions for generating sentences and putting them together in a text. def gen_sentence ( num_words = 7 ): # [1] words = ( gen_word () for _ in range ( num_words )) # [2] return ' ' . join ( words ) . capitalize () # [3] The number of words in the sentence is determined by the num_words parameter with a sensible default of 7 words. Creating a generator that will yield a new word a required number of times. Joining the generated words into a single string, separated by spaces. We are also making the first word capitalized in our sentence. A quick test to make sure it works >>> gen_sentence () 'Oveecyyi tukzgoli zvo uqyi ujiffrl viivu odui' >>> gen_sentence ( 3 ) 'Ioyieyug ie hkeepnyo' And now to the whole text generator def gen_text ( num_sentences = 10 ): # [1] sizes = ( randint ( 3 , 12 ) for _ in range ( num_sentences )) # [2] sentences = ( gen_sentence ( size ) for size in sizes ) # [3] return '. ' . join ( sentences ) + '.' # [4] The text generator will accept one parameter num_sentences with a default of 10. Creating a generator that will yield a number of words in each sentence a required number of times. We are limiting the sentence size here to 3 to 12 words. Creating a generator that will yield a new sentence a required number of times. Joining the generated sentences into a single string, separated by dots. We are also adding a dot at the end of the text. Time for the final test! >>> gen_text () 'Eeaidmt cznm aeoiemino ivjuyauq exieh aoioayif yavfkoa tasojm xuz qizxiyum iyoi fajo. Anuipcauo uac eunjtou oiy hougqf tulztiawk qooulu eiewewaii. Lxi isoxuau ooovox wtopuodu oom ougvoeyy ou calxja io reicye yaioyzx. Usmyuavq yoyu xioqei iiu ateuyau yeroueut gucuifuth tiazkkgc. Oyqzuy rnzouq ajiof qaxewxufo. Utiselorc qpoaoydoi kyvyiuao ofxaoiy ueyaoi azdacy lieaiiy au vteccye. Lopgygsz efixuio gi eyzeuxoa eea qwaycx impoetvy eoyijaum uoiighcq lyaxa xy. Yo yazd oio yyn gvyifzaeo eyz iewueuqze yy yeadvtx dqmdiy. Agiiorixk yae tvmu eeeoe aqjy eqnsouejn. Szejaae yl vuoaewt aujc nvkols auokud reaqopae.' >>> gen_text ( 2 ) 'Uyayu xpriicoe usao yua duleekayi loqk iop saiy iuys sciyaihs. Onacrtog ual iei nuuoaz gdgia yyoui.' Our gibberish generator turned out quite decent. Now it's time to make it a Foliant preprocessor. Complete source of the generator module from random import choice from random import randint from random import random def pick_letter () -> str : \"\"\" Pick a random letter. Vowels have a higher chance of picking. Letters q, w, x and z have the lowest chance of picking. \"\"\" rare_letters = 'qwxz' vowels = 'aeiouy' consonants = 'cdfghjklmnprstv' pick = random () if pick > 0.9 : return choice ( rare_letters ) elif pick > 0.3 : return choice ( vowels ) else : return choice ( consonants ) def gen_word () -> str : \"\"\"Return a word consisting of 2 to 9 letters.\"\"\" word_len = randint ( 2 , 9 ) return '' . join ( pick_letter () for _ in range ( word_len )) def gen_sentence ( num_words : int = 7 ) -> str : \"\"\"Generate a sentence consisting of `num_words` words.\"\"\" words = ( gen_word () for _ in range ( num_words )) return ' ' . join ( words ) . capitalize () def gen_text ( num_sentences : int = 10 ) -> str : \"\"\" Generate a paragraph of gibberish consisting of `num_sentences` senteces, each consisting of 3 to 12 words. \"\"\" sizes = ( randint ( 3 , 12 ) for _ in range ( num_sentences )) sentences = ( gen_sentence ( size ) for size in sizes ) return '. ' . join ( sentences ) + '.' Next: Formalizing the Preprocessor Previous: Introduction","title":"Creating the Gibberish Generator"},{"location":"tutorials/preprocessor/install/","tags":["tutorial","preprocessor"],"text":"Installing and Testing \u00b6 Right now our preprocessor folder looks like this. $ tree . \u2514\u2500\u2500 foliant \u2514\u2500\u2500 preprocessors \u2514\u2500\u2500 gibberish.py 2 directories, 1 file To make it an installable Python package we need to add a setup.py file to the root folder. Here's an article on creating setup files from the official docs. Usually, we just take one of the setup.py s from an existing preprocessor as a template or use this official Foliant snippet . Here's what your setup.py may look like. from setuptools import setup SHORT_DESCRIPTION = 'Gibberish preprocessor for Foliant.' # [*] try : with open ( 'README.md' , encoding = 'utf8' ) as readme : LONG_DESCRIPTION = readme . read () except FileNotFoundError : LONG_DESCRIPTION = SHORT_DESCRIPTION setup ( name = 'foliantcontrib.gibberish' , # [*] description = SHORT_DESCRIPTION , long_description = LONG_DESCRIPTION , long_description_content_type = 'text/markdown' , version = '1.0.0' , author = 'Simon Garfunkel' , # [*] author_email = 'simong@example.com' , # [*] url = 'https://github.com/foliant-docs/foliantcontrib.gibberish' , # [*] packages = [ 'foliant.preprocessors' ], license = 'MIT' , platforms = 'any' , install_requires = [ 'foliant>=1.0.8' , ], classifiers = [ \"Development Status :: 5 - Production/Stable\" , \"Environment :: Console\" , \"Intended Audience :: Developers\" , \"License :: OSI Approved :: MIT License\" , \"Operating System :: OS Independent\" , \"Programming Language :: Python\" , \"Topic :: Documentation\" , \"Topic :: Utilities\" , ] ) Lines marked with asterisks you would probably want to change to suit your preprocessor. Also, note that we referred to the contents of the README.md as the full description of the package. It's a good time to add a readme for your preprocessor. Explain what your preprocessor does and what options it has. You may use one of the official preprocessors for possible readme structure. Now the folder structure should look like this $ tree . \u251c\u2500\u2500 foliant \u2502 \u2514\u2500\u2500 preprocessors \u2502 \u2514\u2500\u2500 gibberish.py \u251c\u2500\u2500 README.md \u2514\u2500\u2500 setup.py 2 directories, 3 files Time to test if the preprocessor actually works. First, install it by running this command inside the preprocessor folder. $ pip3 install . Create an empty Foliant project using the init command: $ foliant init # creating the empty project Enter the project name: Gibberish Test Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Gibberish Test\" created in gibberish-test $ cd gibberish-test # entering the created project folder $ tree # inspecting the project file structure . \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md 1 directory, 6 files First, let's add our preprocessor to the foliant.yml . title: Gibberish Test + preprocessors: + - gibberish + chapters: - index.md Now let's edit the index.md and use the <gibberish><gibberish> tag a few times. # Welcome to Gibberish Test Here's some gibberish: < gibberish ></ gibberish > Here are just two sentences of gibberish: < gibberish size = \"2\" ></ gibberish > Let's build our project into the pre target. This target doesn't create a PDF or a DOCX, it just returns the preprocessed Markdown text, which perfectly suits our testing needs. $ foliant make pre Parsing config... Done Applying preprocessor gibberish... Done Applying preprocessor _unescape... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Gibberish_Test-2021-08-16.pre Inspect the results $ cat Gibberish_Test-2021-08-16.pre/index.md # Welcome to Gibberish Test Here's some gibberish: Yxz izyuo sjo iir tewo qvqc etosaeeuo iecaizaso aaeoeuo iyey. Apavaiqfu eqaaa eecyo ioiiyuoay ah caou iets. Yooyofa iiynndea yiuqehlq uizu yca. Pi iuld ixuaeqei ousogp yu ushggxyq yiia uiuyjo. Ofoemct ciyfuup uufiy avkfeqa ehtjoj ietwohoo xqgif. Iwohqoeao snf uozlw qeasoqzu gevuywxui ou xypikyyqu on hrx. Ruagoisia ivga ovzho da oziazioic. Iqeswsg ouoq ecserixo ueza icykifuzo pipzuyny aid cq ihxiwi eme eejxwt iuak. Oui goido yduz eeyfahxil dyiya mezifeo iym xuuvyiy. Iii yucnyyyq eono qyqu uu ioo sqwcjuhip. Here are just two sentences of gibberish: Lof peuoy iiouy yyau qggedo evuoucaig. Pziqgsg ekiqepyu laeiridyc. Looks like everything worked fine. Now let's set the default_size parameter to check if preprocessor options work too. Edit the foliant.yml title: Gibberish Test preprocessors: - - gibberish + - gibberish: + default_size: 1 chapters: - index.md And run the build $ foliant make pre Parsing config... Done Applying preprocessor gibberish... Done Applying preprocessor _unescape... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Gibberish_Test-2021-08-16.pre Now the first <gibberish></gibberish> tag should be replaced with just one line of text. Let's check that cat Gibberish_Test-2021-08-16.pre/index.md # Welcome to Gibberish Test Here's some gibberish: Jy si zhwtyu acneec qeugeya ax qqofaiu ydyyyxz. Here are just two sentences of gibberish: Wnuhocx uqny ns. Iu ieuiaea iogyjyfy kl eyyeex agayii aioaac yacjume. Everything works as expected. Now you can add a LICENSE and a changelog.md to your preprocessor folder and publish it in GitHub and pypi, so that others could use your wonderful creation too! The repository with full code of Gibberish preprocessor is available here . Summary \u00b6 Now you know the basics of creating preprocessors for Foliant. But there's a lot more to learn! Study the code of different preprocessors created by our team to find out different approaches to solving techwriters' problems. Refer to the Developer\u2019s Reference for all helper functions, classes and their attributes available for building Foliant extensions. When you get comfortable creating simple preprocessors you may find the utils package useful. It contains different tools which perform common tasks in preprocessors like dealing with the chapters section in foliant.yml or efficiently combining options from foliant.yml and XML tags. There's also a powerful BasePreprocessorExt class which encapsulates some boilerplate code for your preprocessors and offers advanced tools for warnings output and more. That's all for now. We wish you luck in extending Foliant! Send us a message if you want your preprocessor included in the official Foliant docs. Previous: Formalizing the Preprocessor","title":"Installing and Testing"},{"location":"tutorials/preprocessor/install/#installing-and-testing","text":"Right now our preprocessor folder looks like this. $ tree . \u2514\u2500\u2500 foliant \u2514\u2500\u2500 preprocessors \u2514\u2500\u2500 gibberish.py 2 directories, 1 file To make it an installable Python package we need to add a setup.py file to the root folder. Here's an article on creating setup files from the official docs. Usually, we just take one of the setup.py s from an existing preprocessor as a template or use this official Foliant snippet . Here's what your setup.py may look like. from setuptools import setup SHORT_DESCRIPTION = 'Gibberish preprocessor for Foliant.' # [*] try : with open ( 'README.md' , encoding = 'utf8' ) as readme : LONG_DESCRIPTION = readme . read () except FileNotFoundError : LONG_DESCRIPTION = SHORT_DESCRIPTION setup ( name = 'foliantcontrib.gibberish' , # [*] description = SHORT_DESCRIPTION , long_description = LONG_DESCRIPTION , long_description_content_type = 'text/markdown' , version = '1.0.0' , author = 'Simon Garfunkel' , # [*] author_email = 'simong@example.com' , # [*] url = 'https://github.com/foliant-docs/foliantcontrib.gibberish' , # [*] packages = [ 'foliant.preprocessors' ], license = 'MIT' , platforms = 'any' , install_requires = [ 'foliant>=1.0.8' , ], classifiers = [ \"Development Status :: 5 - Production/Stable\" , \"Environment :: Console\" , \"Intended Audience :: Developers\" , \"License :: OSI Approved :: MIT License\" , \"Operating System :: OS Independent\" , \"Programming Language :: Python\" , \"Topic :: Documentation\" , \"Topic :: Utilities\" , ] ) Lines marked with asterisks you would probably want to change to suit your preprocessor. Also, note that we referred to the contents of the README.md as the full description of the package. It's a good time to add a readme for your preprocessor. Explain what your preprocessor does and what options it has. You may use one of the official preprocessors for possible readme structure. Now the folder structure should look like this $ tree . \u251c\u2500\u2500 foliant \u2502 \u2514\u2500\u2500 preprocessors \u2502 \u2514\u2500\u2500 gibberish.py \u251c\u2500\u2500 README.md \u2514\u2500\u2500 setup.py 2 directories, 3 files Time to test if the preprocessor actually works. First, install it by running this command inside the preprocessor folder. $ pip3 install . Create an empty Foliant project using the init command: $ foliant init # creating the empty project Enter the project name: Gibberish Test Generating project... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Project \"Gibberish Test\" created in gibberish-test $ cd gibberish-test # entering the created project folder $ tree # inspecting the project file structure . \u251c\u2500\u2500 docker-compose.yml \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 foliant.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 src \u2514\u2500\u2500 index.md 1 directory, 6 files First, let's add our preprocessor to the foliant.yml . title: Gibberish Test + preprocessors: + - gibberish + chapters: - index.md Now let's edit the index.md and use the <gibberish><gibberish> tag a few times. # Welcome to Gibberish Test Here's some gibberish: < gibberish ></ gibberish > Here are just two sentences of gibberish: < gibberish size = \"2\" ></ gibberish > Let's build our project into the pre target. This target doesn't create a PDF or a DOCX, it just returns the preprocessed Markdown text, which perfectly suits our testing needs. $ foliant make pre Parsing config... Done Applying preprocessor gibberish... Done Applying preprocessor _unescape... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Gibberish_Test-2021-08-16.pre Inspect the results $ cat Gibberish_Test-2021-08-16.pre/index.md # Welcome to Gibberish Test Here's some gibberish: Yxz izyuo sjo iir tewo qvqc etosaeeuo iecaizaso aaeoeuo iyey. Apavaiqfu eqaaa eecyo ioiiyuoay ah caou iets. Yooyofa iiynndea yiuqehlq uizu yca. Pi iuld ixuaeqei ousogp yu ushggxyq yiia uiuyjo. Ofoemct ciyfuup uufiy avkfeqa ehtjoj ietwohoo xqgif. Iwohqoeao snf uozlw qeasoqzu gevuywxui ou xypikyyqu on hrx. Ruagoisia ivga ovzho da oziazioic. Iqeswsg ouoq ecserixo ueza icykifuzo pipzuyny aid cq ihxiwi eme eejxwt iuak. Oui goido yduz eeyfahxil dyiya mezifeo iym xuuvyiy. Iii yucnyyyq eono qyqu uu ioo sqwcjuhip. Here are just two sentences of gibberish: Lof peuoy iiouy yyau qggedo evuoucaig. Pziqgsg ekiqepyu laeiridyc. Looks like everything worked fine. Now let's set the default_size parameter to check if preprocessor options work too. Edit the foliant.yml title: Gibberish Test preprocessors: - - gibberish + - gibberish: + default_size: 1 chapters: - index.md And run the build $ foliant make pre Parsing config... Done Applying preprocessor gibberish... Done Applying preprocessor _unescape... Done \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Result: Gibberish_Test-2021-08-16.pre Now the first <gibberish></gibberish> tag should be replaced with just one line of text. Let's check that cat Gibberish_Test-2021-08-16.pre/index.md # Welcome to Gibberish Test Here's some gibberish: Jy si zhwtyu acneec qeugeya ax qqofaiu ydyyyxz. Here are just two sentences of gibberish: Wnuhocx uqny ns. Iu ieuiaea iogyjyfy kl eyyeex agayii aioaac yacjume. Everything works as expected. Now you can add a LICENSE and a changelog.md to your preprocessor folder and publish it in GitHub and pypi, so that others could use your wonderful creation too! The repository with full code of Gibberish preprocessor is available here .","title":"Installing and Testing"},{"location":"tutorials/preprocessor/install/#summary","text":"Now you know the basics of creating preprocessors for Foliant. But there's a lot more to learn! Study the code of different preprocessors created by our team to find out different approaches to solving techwriters' problems. Refer to the Developer\u2019s Reference for all helper functions, classes and their attributes available for building Foliant extensions. When you get comfortable creating simple preprocessors you may find the utils package useful. It contains different tools which perform common tasks in preprocessors like dealing with the chapters section in foliant.yml or efficiently combining options from foliant.yml and XML tags. There's also a powerful BasePreprocessorExt class which encapsulates some boilerplate code for your preprocessors and offers advanced tools for warnings output and more. That's all for now. We wish you luck in extending Foliant! Send us a message if you want your preprocessor included in the official Foliant docs. Previous: Formalizing the Preprocessor","title":"Summary"},{"location":"tutorials/preprocessor/intro/","tags":["tutorial","preprocessor"],"text":"Introduction \u00b6 Creating preprocessors for Foliant is quite straightforward because they are essentially just Python scripts wrapped in a Preprocessor class, which is provided by Foliant core. In this tutorial, we will go through all steps of creating a new preprocessor. The full source code of the preprocessor created in this tutorial can be found here . First of all, we need to decide what our preprocessor will do. Let's say you need a preprocessor that will generate some placeholder gibberish text for your documentation, somewhat like Lorem Ipsum . We need a way to tell Foliant to insert the placeholder into a specific part of our document. The Foliant way of doing that is using an XML-tag like the following. < gibberish ></ gibberish > After the preprocessor is applied, this tag should be transformed into some placeholder text. Hiteap zoiouxwaf jyrcaay yty xuzuapo eyuigouu. Ysseotaeq ytuiio qqyy yehiiy koyiyoky uul. Pan osfu zoiz oy ikcya tcsxecy qxiiyo. Gryxeye ogeelaee atprwm mjioy eigyyoov nx qe tayoiaud jodmaofue yvo ieyuunyrq eaowu. Jyqnr aej elqj wuytjcae oy igy ak. We would also want to specify the size of the generated text, so our tag should accept the size parameter which will define the number of generated sentences: < gibberish size = \"15\" ></ gibberish > The tutorial is split into three stages: Writing the gibberish generator , Wrapping it in a Preprocessor class , Installing and testing the preprocessor . So let's get started! Next: Creating the Gibberish Generator","title":"Introduction"},{"location":"tutorials/preprocessor/intro/#introduction","text":"Creating preprocessors for Foliant is quite straightforward because they are essentially just Python scripts wrapped in a Preprocessor class, which is provided by Foliant core. In this tutorial, we will go through all steps of creating a new preprocessor. The full source code of the preprocessor created in this tutorial can be found here . First of all, we need to decide what our preprocessor will do. Let's say you need a preprocessor that will generate some placeholder gibberish text for your documentation, somewhat like Lorem Ipsum . We need a way to tell Foliant to insert the placeholder into a specific part of our document. The Foliant way of doing that is using an XML-tag like the following. < gibberish ></ gibberish > After the preprocessor is applied, this tag should be transformed into some placeholder text. Hiteap zoiouxwaf jyrcaay yty xuzuapo eyuigouu. Ysseotaeq ytuiio qqyy yehiiy koyiyoky uul. Pan osfu zoiz oy ikcya tcsxecy qxiiyo. Gryxeye ogeelaee atprwm mjioy eigyyoov nx qe tayoiaud jodmaofue yvo ieyuunyrq eaowu. Jyqnr aej elqj wuytjcae oy igy ak. We would also want to specify the size of the generated text, so our tag should accept the size parameter which will define the number of generated sentences: < gibberish size = \"15\" ></ gibberish > The tutorial is split into three stages: Writing the gibberish generator , Wrapping it in a Preprocessor class , Installing and testing the preprocessor . So let's get started! Next: Creating the Gibberish Generator","title":"Introduction"},{"location":"tutorials/preprocessor/preprocessor/","tags":["tutorial","preprocessor"],"text":"Formalizing the Preprocessor \u00b6 A Foliant preprocessor is a Python package of a certain structure. Here's a list of requirements for a package to be considered by Foliant a preprocessor: After installing the preprocessor package should appear inside the Foliant package folder at a path foliant.preprocessors.your_preprocessor . It must be possible to import a class named Preprocessor from your package: from foliant.preprocessor.your_preprocessor import Preprocessor The Preprocessor class should (but is not required to) be a subclass of a foliant.preprocessors.BasePreprocessor class. in any case the Preprocessor class must accept the same __init__ arguments as the BasePreprocessor class. The Preprocessor class must define at least the apply method. Let's take our gibberish module which we've created in the previous chapter and make it work with Foliant. We will be adding the code into the same module. According to the requirements above, we first need to create a proper directory structure. It should look like this: $ tree . \u2514\u2500\u2500 foliant \u2514\u2500\u2500 preprocessors \u2514\u2500\u2500 gibberish.py 2 directories, 1 file This is the first requirement satisfied. Now to the rest of them. We should define a Preprocessor class and ideally subclass it from BasePreprocessor . Usually, we start out a new preprocessor from a template containing the boilerplate code. You can find the full template here . But to understand the boilerplate code you have to write it at least once, so let's start from scratch. We start by defining the Preprocessor class. from foliant.preprocessors.base import BasePreprocessor class Preprocessor ( BasePreprocessor ): The BasePreprocessor parent class offers some useful attributes and methods, go ahead and take a look at its source code . Let's start writing the class by adding the __init__ method and several class attributes. class Preprocessor ( BasePreprocessor ): tags = ( 'gibberish' , ) # [1] defaults = { 'default_size' : 10 } # [2] def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) # [3] self . logger = self . logger . getChild ( 'gibberish' ) # [4] self . logger . debug ( f 'Preprocessor inited: { self . __dict__ } ' ) # [5] First, we define the tags which will be captured in the Markdown source. As we've decided in the beginning, we want to process tags that look like <gibberish></gibberish> , so our tag name is gibberish . We put that into the tags class attribute which must be a sequence. tuple or list are equally good choices. We will allow the user to define the default size of the generated text in the preprocessor options. Here we provide the default value of 10 to this option, in case the user hasn't supplied it. Running the parent's __init__ method first. It will populate our class with useful attributes. Using the logger attribute to set up a logger. This line embeds our preprocessor into the main log file under the name of gibberish . Posting our first log message, which will contain all preprocessor's attributes for inspection. Now let's write the apply method. As mentioned above, this method must be present in all preprocessors. This is the method that Foliant will call to apply the preprocessor. Usually, it subsequently opens each file from the temporary directory and calls the main processing method to transform their content in the desired way. It's a good practice to start and end this method with log messages. def apply ( self ): self . logger . info ( 'Applying preprocessor Gibberish' ) for markdown_file_path in self . working_dir . rglob ( '*.md' ): # [1] with open ( markdown_file_path , encoding = 'utf8' ) as markdown_file : content = markdown_file . read () # [2] processed_content = self . _process_tags ( content ) # [3] if processed_content : # [4] with open ( markdown_file_path , 'w' ) as markdown_file : markdown_file . write ( processed_content ) # [5] self . logger . info ( 'Preprocessor Gibberish applied' ) Scan the temporary directory (the working_dir attribute, which is a pathlib.Path object, created for us by the parent class) and find all Markdown files in it. Get the source content of each Markdown file. Process the content with the _process_tags method which we are about to write next. This step is important. We check if the main processing method actually returned any content. If the string is empty, it usually means that something went wrong. Foliant won't interrupt the build process if one of the preprocessors fails to run. We don't want to write empty or broken content into Markdown files, because other preprocessors still may run after ours even if ours failed. If everything is OK, and our preprocessing function returned some content, we overwrite the original Markdown file with it. The apply method defers the actual preprocessing work to the _process_tags method, so now let's write it. def _process_tags ( self , content ): def sub_tag ( match ): # [2] tag_options = self . get_options ( match . group ( 'options' )) # [3] default_size = self . options [ 'default_size' ] # [4] size = tag_options . get ( 'size' , default_size ) # [5] return gen_text ( size ) # [6] return self . pattern . sub ( sub_tag , content ) # [1] Note the order of the bullet points: we start with the last line of the code above: The pattern is another attribute created by the base class. It is a RegEx pattern object which will capture the XML tags in the Markdown source. Remember the tags class attribute we've defined in the beginning? pattern will use it to capture the appropriate tags for our preprocessor. We use the re.sub method of the pattern which will replace our tag definitions ( <gibberish></gibberish> ) in the content with whatever string returns the sub_tag local function. Next, we define the sub_tag local function. This function accepts one argument: the Match object which was captured by the pattern. We use the handy get_options method of the base class, which takes the options string of the tag found in the source, and turns it into a dictionary of options. For example, if the captured tag was <gibberish size=\"15\"></gibberish> , the options string is size=\"15\" . It will be turned into {'size': 15} by the get_options method. Getting the value of the default_size parameter from the preprocessor options. The options are stored in self.options dictionary by the base class. The dictionary is first prepopulated by values from the defaults attribute that we've defined earlier. According to the defaults , if the user hasn't stated any options, the default_size will have the value of 10 . Getting the size option from the tag options. If options were not stated, we are using the default_size value as a fallback. Finally, we are using the get_text function from our gibberish generator, which we've written in the previous part of the tutorial. We are returning the string returned from the gen_text function as the result of our sub_tag local function. This is the text which will replace the <gibberish></gibberish> tag in the processed Markdown file. And that's it! We have all the code required for the preprocessor to work. All is left to do is to make our package installable and test its work. Complete source of the preprocessor module ''' Gibberish preprocessor for Foliant documenation authoring tool. ''' import re from random import choice from random import randint from random import random from foliant.preprocessors.base import BasePreprocessor def pick_letter () -> str : \"\"\" Pick a random letter. Vowels have a higher chance of picking. Letters q, w, x and z have the lowest chance of picking. \"\"\" rare_letters = 'qwxz' vowels = 'aeiouy' consonants = 'cdfghjklmnpqrstv' pick = random () if pick > 0.9 : return choice ( rare_letters ) elif pick > 0.3 : return choice ( vowels ) else : return choice ( consonants ) def gen_word () -> str : \"\"\"Return a word consisting of 2 to 9 letters.\"\"\" word_len = randint ( 2 , 9 ) return '' . join ( pick_letter () for _ in range ( word_len )) def gen_sentence ( num_words : int = 7 ) -> str : \"\"\"Generate a sentence consisting of `num_words` words.\"\"\" words = ( gen_word () for _ in range ( num_words )) return ' ' . join ( words ) . capitalize () def gen_text ( num_sentences : int = 10 ) -> str : \"\"\" Generate a paragraph of gibberish consisting of `num_sentences` senteces, each consisting of 3 to 12 words. \"\"\" sizes = ( randint ( 3 , 12 ) for _ in range ( num_sentences )) sentences = ( gen_sentence ( size ) for size in sizes ) return '. ' . join ( sentences ) + '.' class Preprocessor ( BasePreprocessor ): defaults = { 'default_size' : 10 } tags = ( 'gibberish' ,) def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . logger = self . logger . getChild ( 'gibberish' ) self . logger . debug ( f 'Preprocessor inited: { self . __dict__ } ' ) def _process_tags ( self , content ): def sub_tag ( match ): tag_options = self . get_options ( match . group ( 'options' )) default_size = self . options [ 'default_size' ] size = tag_options . get ( 'size' , default_size ) return gen_text ( size ) return self . pattern . sub ( sub_tag , content ) def apply ( self ): self . logger . info ( 'Applying preprocessor Gibberish' ) for markdown_file_path in self . working_dir . rglob ( '*.md' ): with open ( markdown_file_path , encoding = 'utf8' ) as markdown_file : content = markdown_file . read () processed_content = self . _process_tags ( content ) if processed_content : with open ( markdown_file_path , 'w' ) as markdown_file : markdown_file . write ( processed_content ) self . logger . info ( 'Preprocessor Gibberish applied' ) Next: Installing and Testing Previous: Creating the Gibberish Generator","title":"Formalizing the Preprocessor"},{"location":"tutorials/preprocessor/preprocessor/#formalizing-the-preprocessor","text":"A Foliant preprocessor is a Python package of a certain structure. Here's a list of requirements for a package to be considered by Foliant a preprocessor: After installing the preprocessor package should appear inside the Foliant package folder at a path foliant.preprocessors.your_preprocessor . It must be possible to import a class named Preprocessor from your package: from foliant.preprocessor.your_preprocessor import Preprocessor The Preprocessor class should (but is not required to) be a subclass of a foliant.preprocessors.BasePreprocessor class. in any case the Preprocessor class must accept the same __init__ arguments as the BasePreprocessor class. The Preprocessor class must define at least the apply method. Let's take our gibberish module which we've created in the previous chapter and make it work with Foliant. We will be adding the code into the same module. According to the requirements above, we first need to create a proper directory structure. It should look like this: $ tree . \u2514\u2500\u2500 foliant \u2514\u2500\u2500 preprocessors \u2514\u2500\u2500 gibberish.py 2 directories, 1 file This is the first requirement satisfied. Now to the rest of them. We should define a Preprocessor class and ideally subclass it from BasePreprocessor . Usually, we start out a new preprocessor from a template containing the boilerplate code. You can find the full template here . But to understand the boilerplate code you have to write it at least once, so let's start from scratch. We start by defining the Preprocessor class. from foliant.preprocessors.base import BasePreprocessor class Preprocessor ( BasePreprocessor ): The BasePreprocessor parent class offers some useful attributes and methods, go ahead and take a look at its source code . Let's start writing the class by adding the __init__ method and several class attributes. class Preprocessor ( BasePreprocessor ): tags = ( 'gibberish' , ) # [1] defaults = { 'default_size' : 10 } # [2] def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) # [3] self . logger = self . logger . getChild ( 'gibberish' ) # [4] self . logger . debug ( f 'Preprocessor inited: { self . __dict__ } ' ) # [5] First, we define the tags which will be captured in the Markdown source. As we've decided in the beginning, we want to process tags that look like <gibberish></gibberish> , so our tag name is gibberish . We put that into the tags class attribute which must be a sequence. tuple or list are equally good choices. We will allow the user to define the default size of the generated text in the preprocessor options. Here we provide the default value of 10 to this option, in case the user hasn't supplied it. Running the parent's __init__ method first. It will populate our class with useful attributes. Using the logger attribute to set up a logger. This line embeds our preprocessor into the main log file under the name of gibberish . Posting our first log message, which will contain all preprocessor's attributes for inspection. Now let's write the apply method. As mentioned above, this method must be present in all preprocessors. This is the method that Foliant will call to apply the preprocessor. Usually, it subsequently opens each file from the temporary directory and calls the main processing method to transform their content in the desired way. It's a good practice to start and end this method with log messages. def apply ( self ): self . logger . info ( 'Applying preprocessor Gibberish' ) for markdown_file_path in self . working_dir . rglob ( '*.md' ): # [1] with open ( markdown_file_path , encoding = 'utf8' ) as markdown_file : content = markdown_file . read () # [2] processed_content = self . _process_tags ( content ) # [3] if processed_content : # [4] with open ( markdown_file_path , 'w' ) as markdown_file : markdown_file . write ( processed_content ) # [5] self . logger . info ( 'Preprocessor Gibberish applied' ) Scan the temporary directory (the working_dir attribute, which is a pathlib.Path object, created for us by the parent class) and find all Markdown files in it. Get the source content of each Markdown file. Process the content with the _process_tags method which we are about to write next. This step is important. We check if the main processing method actually returned any content. If the string is empty, it usually means that something went wrong. Foliant won't interrupt the build process if one of the preprocessors fails to run. We don't want to write empty or broken content into Markdown files, because other preprocessors still may run after ours even if ours failed. If everything is OK, and our preprocessing function returned some content, we overwrite the original Markdown file with it. The apply method defers the actual preprocessing work to the _process_tags method, so now let's write it. def _process_tags ( self , content ): def sub_tag ( match ): # [2] tag_options = self . get_options ( match . group ( 'options' )) # [3] default_size = self . options [ 'default_size' ] # [4] size = tag_options . get ( 'size' , default_size ) # [5] return gen_text ( size ) # [6] return self . pattern . sub ( sub_tag , content ) # [1] Note the order of the bullet points: we start with the last line of the code above: The pattern is another attribute created by the base class. It is a RegEx pattern object which will capture the XML tags in the Markdown source. Remember the tags class attribute we've defined in the beginning? pattern will use it to capture the appropriate tags for our preprocessor. We use the re.sub method of the pattern which will replace our tag definitions ( <gibberish></gibberish> ) in the content with whatever string returns the sub_tag local function. Next, we define the sub_tag local function. This function accepts one argument: the Match object which was captured by the pattern. We use the handy get_options method of the base class, which takes the options string of the tag found in the source, and turns it into a dictionary of options. For example, if the captured tag was <gibberish size=\"15\"></gibberish> , the options string is size=\"15\" . It will be turned into {'size': 15} by the get_options method. Getting the value of the default_size parameter from the preprocessor options. The options are stored in self.options dictionary by the base class. The dictionary is first prepopulated by values from the defaults attribute that we've defined earlier. According to the defaults , if the user hasn't stated any options, the default_size will have the value of 10 . Getting the size option from the tag options. If options were not stated, we are using the default_size value as a fallback. Finally, we are using the get_text function from our gibberish generator, which we've written in the previous part of the tutorial. We are returning the string returned from the gen_text function as the result of our sub_tag local function. This is the text which will replace the <gibberish></gibberish> tag in the processed Markdown file. And that's it! We have all the code required for the preprocessor to work. All is left to do is to make our package installable and test its work. Complete source of the preprocessor module ''' Gibberish preprocessor for Foliant documenation authoring tool. ''' import re from random import choice from random import randint from random import random from foliant.preprocessors.base import BasePreprocessor def pick_letter () -> str : \"\"\" Pick a random letter. Vowels have a higher chance of picking. Letters q, w, x and z have the lowest chance of picking. \"\"\" rare_letters = 'qwxz' vowels = 'aeiouy' consonants = 'cdfghjklmnpqrstv' pick = random () if pick > 0.9 : return choice ( rare_letters ) elif pick > 0.3 : return choice ( vowels ) else : return choice ( consonants ) def gen_word () -> str : \"\"\"Return a word consisting of 2 to 9 letters.\"\"\" word_len = randint ( 2 , 9 ) return '' . join ( pick_letter () for _ in range ( word_len )) def gen_sentence ( num_words : int = 7 ) -> str : \"\"\"Generate a sentence consisting of `num_words` words.\"\"\" words = ( gen_word () for _ in range ( num_words )) return ' ' . join ( words ) . capitalize () def gen_text ( num_sentences : int = 10 ) -> str : \"\"\" Generate a paragraph of gibberish consisting of `num_sentences` senteces, each consisting of 3 to 12 words. \"\"\" sizes = ( randint ( 3 , 12 ) for _ in range ( num_sentences )) sentences = ( gen_sentence ( size ) for size in sizes ) return '. ' . join ( sentences ) + '.' class Preprocessor ( BasePreprocessor ): defaults = { 'default_size' : 10 } tags = ( 'gibberish' ,) def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . logger = self . logger . getChild ( 'gibberish' ) self . logger . debug ( f 'Preprocessor inited: { self . __dict__ } ' ) def _process_tags ( self , content ): def sub_tag ( match ): tag_options = self . get_options ( match . group ( 'options' )) default_size = self . options [ 'default_size' ] size = tag_options . get ( 'size' , default_size ) return gen_text ( size ) return self . pattern . sub ( sub_tag , content ) def apply ( self ): self . logger . info ( 'Applying preprocessor Gibberish' ) for markdown_file_path in self . working_dir . rglob ( '*.md' ): with open ( markdown_file_path , encoding = 'utf8' ) as markdown_file : content = markdown_file . read () processed_content = self . _process_tags ( content ) if processed_content : with open ( markdown_file_path , 'w' ) as markdown_file : markdown_file . write ( processed_content ) self . logger . info ( 'Preprocessor Gibberish applied' ) Next: Installing and Testing Previous: Creating the Gibberish Generator","title":"Formalizing the Preprocessor"},{"location":"tags/","text":"Tags \u00b6 API \u00b6 Aglio Slate APIReferences RAMLDoc SwaggerDoc Documenting API with Foliant SSG \u00b6 Aglio MkDocs Slate architecture \u00b6 Architecture And Basic Design Concepts backend \u00b6 Aglio Confluence MdToPdf MkDocs Pandoc Slate backup \u00b6 Src changelog \u00b6 Welcome to Foliant! History of Releases chapters \u00b6 AltStructure Slugs cli extension \u00b6 Bump Gupload Meta Generate Src Subset Init config \u00b6 Project Configuration Metadata Subset CheckSources General Notes RemoveExcess config extension \u00b6 AltStructure DownloadFile MultiProject Slugs YAMLInclude confluence \u00b6 Confluence Confluence database \u00b6 DBDoc DBMLDoc Pgsqldoc Introduction Documenting DBML schema Documenting Oracle Database Documenting PostgreSQL Database debug \u00b6 Debugging Builds deprecated \u00b6 Pgsqldoc design \u00b6 BindFigma BindSympli ImagineUI developing \u00b6 Developer\u2019s Reference diagram \u00b6 Archeme Argdown Blockdiag BPMN Graphviz Mermaid MetaGraph Plantuml docx \u00b6 Pandoc epub \u00b6 Pandoc git \u00b6 Badges History Includes RepoLink ShowCommits google drive \u00b6 Gupload image \u00b6 BindFigma BindSympli Epsconvert ImageMagick ImagineUI ImgCaptions ImgConvert include \u00b6 YAMLInclude install \u00b6 Installation jinja \u00b6 TemplateParser markdown \u00b6 Admonitions Anchors CustomIDs EscapeCode and UnescapeCode Flags Macros Replace SuperLinks mkdocs \u00b6 MkDocs RepoLink multiproject \u00b6 Src MultiProject odt \u00b6 Pandoc overview \u00b6 Architecture And Basic Design Concepts Project Configuration Debugging Builds Developer\u2019s Reference Metadata pandoc \u00b6 Pandoc Flatten Glossary pdf \u00b6 MdToPdf Pandoc preprocessor \u00b6 Preprocessor Admonitions Anchors APIReferences Archeme Argdown Badges BindFigma BindSympli Blockdiag BPMN CheckSources Confluence CSVTables CustomIDs DBDoc DBMLDoc Elasticsearch Epsconvert EscapeCode and UnescapeCode Flags Flatten General Notes Glossary Graphviz History ImageMagick ImagineUI ImgCaptions ImgConvert Includes Macros Mermaid MetaGraph MultilineTables Pgsqldoc Plantuml RAMLDoc Reindexer RemoveExcess Replace RepoLink RunCommands ShowCommits SuperLinks SwaggerDoc TemplateParser Testrail Creating the Gibberish Generator Installing and Testing Introduction Formalizing the Preprocessor search \u00b6 Elasticsearch Reindexer shell \u00b6 RunCommands site \u00b6 Aglio MkDocs Slate table \u00b6 CSVTables MultilineTables template \u00b6 Init Preprocessor tex \u00b6 Pandoc tutorial \u00b6 Installation Quickstart Documenting API with Foliant Running Foliant in Docker Your First Foliant Project Introduction Documenting DBML schema Documenting Oracle Database Documenting PostgreSQL Database Creating the Gibberish Generator Installing and Testing Introduction Formalizing the Preprocessor version \u00b6 Bump yaml \u00b6 Project Configuration Metadata Meta Generate CheckSources General Notes RemoveExcess","title":"Tags"},{"location":"tags/#tags","text":"","title":"Tags"},{"location":"tags/#api","text":"Aglio Slate APIReferences RAMLDoc SwaggerDoc Documenting API with Foliant","title":"API"},{"location":"tags/#ssg","text":"Aglio MkDocs Slate","title":"SSG"},{"location":"tags/#architecture","text":"Architecture And Basic Design Concepts","title":"architecture"},{"location":"tags/#backend","text":"Aglio Confluence MdToPdf MkDocs Pandoc Slate","title":"backend"},{"location":"tags/#backup","text":"Src","title":"backup"},{"location":"tags/#changelog","text":"Welcome to Foliant! History of Releases","title":"changelog"},{"location":"tags/#chapters","text":"AltStructure Slugs","title":"chapters"},{"location":"tags/#cli-extension","text":"Bump Gupload Meta Generate Src Subset Init","title":"cli extension"},{"location":"tags/#config","text":"Project Configuration Metadata Subset CheckSources General Notes RemoveExcess","title":"config"},{"location":"tags/#config-extension","text":"AltStructure DownloadFile MultiProject Slugs YAMLInclude","title":"config extension"},{"location":"tags/#confluence","text":"Confluence Confluence","title":"confluence"},{"location":"tags/#database","text":"DBDoc DBMLDoc Pgsqldoc Introduction Documenting DBML schema Documenting Oracle Database Documenting PostgreSQL Database","title":"database"},{"location":"tags/#debug","text":"Debugging Builds","title":"debug"},{"location":"tags/#deprecated","text":"Pgsqldoc","title":"deprecated"},{"location":"tags/#design","text":"BindFigma BindSympli ImagineUI","title":"design"},{"location":"tags/#developing","text":"Developer\u2019s Reference","title":"developing"},{"location":"tags/#diagram","text":"Archeme Argdown Blockdiag BPMN Graphviz Mermaid MetaGraph Plantuml","title":"diagram"},{"location":"tags/#docx","text":"Pandoc","title":"docx"},{"location":"tags/#epub","text":"Pandoc","title":"epub"},{"location":"tags/#git","text":"Badges History Includes RepoLink ShowCommits","title":"git"},{"location":"tags/#google-drive","text":"Gupload","title":"google drive"},{"location":"tags/#image","text":"BindFigma BindSympli Epsconvert ImageMagick ImagineUI ImgCaptions ImgConvert","title":"image"},{"location":"tags/#include","text":"YAMLInclude","title":"include"},{"location":"tags/#install","text":"Installation","title":"install"},{"location":"tags/#jinja","text":"TemplateParser","title":"jinja"},{"location":"tags/#markdown","text":"Admonitions Anchors CustomIDs EscapeCode and UnescapeCode Flags Macros Replace SuperLinks","title":"markdown"},{"location":"tags/#mkdocs","text":"MkDocs RepoLink","title":"mkdocs"},{"location":"tags/#multiproject","text":"Src MultiProject","title":"multiproject"},{"location":"tags/#odt","text":"Pandoc","title":"odt"},{"location":"tags/#overview","text":"Architecture And Basic Design Concepts Project Configuration Debugging Builds Developer\u2019s Reference Metadata","title":"overview"},{"location":"tags/#pandoc","text":"Pandoc Flatten Glossary","title":"pandoc"},{"location":"tags/#pdf","text":"MdToPdf Pandoc","title":"pdf"},{"location":"tags/#preprocessor","text":"Preprocessor Admonitions Anchors APIReferences Archeme Argdown Badges BindFigma BindSympli Blockdiag BPMN CheckSources Confluence CSVTables CustomIDs DBDoc DBMLDoc Elasticsearch Epsconvert EscapeCode and UnescapeCode Flags Flatten General Notes Glossary Graphviz History ImageMagick ImagineUI ImgCaptions ImgConvert Includes Macros Mermaid MetaGraph MultilineTables Pgsqldoc Plantuml RAMLDoc Reindexer RemoveExcess Replace RepoLink RunCommands ShowCommits SuperLinks SwaggerDoc TemplateParser Testrail Creating the Gibberish Generator Installing and Testing Introduction Formalizing the Preprocessor","title":"preprocessor"},{"location":"tags/#search","text":"Elasticsearch Reindexer","title":"search"},{"location":"tags/#shell","text":"RunCommands","title":"shell"},{"location":"tags/#site","text":"Aglio MkDocs Slate","title":"site"},{"location":"tags/#table","text":"CSVTables MultilineTables","title":"table"},{"location":"tags/#template","text":"Init Preprocessor","title":"template"},{"location":"tags/#tex","text":"Pandoc","title":"tex"},{"location":"tags/#tutorial","text":"Installation Quickstart Documenting API with Foliant Running Foliant in Docker Your First Foliant Project Introduction Documenting DBML schema Documenting Oracle Database Documenting PostgreSQL Database Creating the Gibberish Generator Installing and Testing Introduction Formalizing the Preprocessor","title":"tutorial"},{"location":"tags/#version","text":"Bump","title":"version"},{"location":"tags/#yaml","text":"Project Configuration Metadata Meta Generate CheckSources General Notes RemoveExcess","title":"yaml"}]}